; TODO: Obj05, Obj35, Obj07, Obj_0x08, Obj_0x04, Obj_0x0F, Obj02, Obj_0x0C
; Obj_0x2F_Still_Sprite

; ---------------------------------------------------------------------------
; Sonic the Hedgehog 3 - November 3, 1993 GitHub disassembly
;
; Based on Esrael L.G. Neto's disassembly
; Current editors: Alex Field
; ROM released by hiddenpalace.org on November 16, 2019, by drx
; ---------------------------------------------------------------------------
; Dados n�o usados (left over ???):
; 0x00F972 - Obj_Classic_Shield
; 0x010C60 - Obj_S1_0x4B_Big_Ring
; 0x010D26 - Obj_S1_0x7C_Big_Ring_Flash
; 0x010FC2 - Obj_S2_0xDC_Slot_Machine_Ring
; 0x024BCC - Obj_S2_0x6F_Special_Stage_Results
; 0x04C3A6 - Itens n�o linkados na lista de objetos do debug da Lava Reef
; 0x080DE0 - Art_Invincibility
; 0x0EF1DD - C�digo n�o linkado
; 0x10687E - Art_Horizontal_Spring
; 0x106CB0 - Art_Head_Up_Display
; 0x109B4A - Art_Result_Font_2P
; 0x10ADA2 - Art_Seal
; 0x10AEBE - Art_Pig
; 0x10DCE6 - Mapeamento n�o referenciado
; 0x10DFC4 - Script din�mico n�o referenciado ( Obj 0x97 - Cluckoid )
; 0x10E18E - Script din�mico n�o referenciado ( Obj 0x96 - Butterdroid )
; 0x10E2C4 - Script din�mico n�o referenciado ( Obj 0x90 - Fireworm )
; 0x10E5B6 - Ponteiro de mapeamento sobrescrito
; 0x132802 - Art_Hz_Enemies
; 0x1885CA - Chunks n�o usados na Launch Base
; 0x1E9814 - Segunda linha da paleta do Sonic n�o � usada
; ---------------------------------------------------------------------------
		CPU 68000
		include "s3.macrosetup.asm"
		include	"s3.constants.asm"
		include	"s3.macros.asm"

FixBugs = 1
; If 1, fixes multiple bugs within the game
; ---------------------------------------------------------------------------
; Include SMPS2ASM, for expressing SMPS bytecode in a portable and human-readable form.
FixMusicAndSFXDataBugs = 0
SonicDriverVer = 3 ; Tell SMPS2ASM that we are targetting Sonic 3's sound driver
		include "Sound/_smps2asm_inc.asm"

Size_of_SndBank = $4000

StartOfRom:
		dc.l	0				; Initial stack pointer value
Prog_Start_Vector:
		dc.l	EntryPoint			; Start of our program in ROM
		dc.l	(2<<$18)|Check_Interrupt	; Bus error
		dc.l	(3<<$18)|Check_Interrupt	; Address error
		dc.l	(4<<$18)|Check_Interrupt	; Illegal instruction
		dc.l	(5<<$18)|Check_Interrupt	; Division by zero
		dc.l	(6<<$18)|Check_Interrupt	; CHK exception
		dc.l	(7<<$18)|Check_Interrupt	; TRAPV exception
		dc.l	(8<<$18)|Check_Interrupt	; Privilege violation
		dc.l	(9<<$18)|Check_Interrupt	; TRACE exception
		dc.l	Line1010Emu			; Line-A emulator
		dc.l	Line1111Emu			; Line-F emulator
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Unused (reserved)
		dc.l	ErrorException			; Spurious exception
		dc.l	ErrorTrap			; IRQ level 1
		dc.l	ErrorTrap			; IRQ level 2
		dc.l	ErrorTrap			; IRQ level 3
		dc.l	HBlank				; IRQ level 4 -> HBlankInterrupt (horizontal retrace interrupt)
		dc.l	ErrorTrap			; IRQ level 5
		dc.l	VBlank				; IRQ level 6 -> VBlankInterrupt (vertical retrace interrupt)
		dc.l	ErrorTrap			; IRQ level 7
		dc.l	($20<<$18)|(Check_Interrupt-4)	; TRAP #$00 exception
		dc.l	ErrorTrap			; TRAP #$01 exception
		dc.l	ErrorTrap			; TRAP #$02 exception
		dc.l	ErrorTrap			; TRAP #$03 exception
		dc.l	ErrorTrap			; TRAP #$04 exception
		dc.l	ErrorTrap			; TRAP #$05 exception
		dc.l	ErrorTrap			; TRAP #$06 exception
		dc.l	ErrorTrap			; TRAP #$07 exception
		dc.l	ErrorTrap			; TRAP #$08 exception
		dc.l	ErrorTrap			; TRAP #$09 exception
		dc.l	ErrorTrap			; TRAP #$0A exception
		dc.l	ErrorTrap			; TRAP #$0B exception
		dc.l	ErrorTrap			; TRAP #$0C exception
		dc.l	ErrorTrap			; TRAP #$0D exception
		dc.l	ErrorTrap			; TRAP #$0E exception
		dc.l	Trap_0x0F			; TRAP #$0F exception
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.l	ErrorTrap     			; Unused (reserved)
		dc.b	"SEGA GENESIS    "
		dc.b	"(C)SEGA 1993.OCT"
Title_Local:	dc.b	"SONIC THE             HEDGEHOG 3                "
Title_Int:	dc.b	"SONIC THE             HEDGEHOG 3                "
ROMSerial:	dc.b	"GM 00001079-00"
Checksum:	dc.w	$1019
IOSupport:	dc.b	"J               "
ROMStartLoc:	dc.l	StartOfRom
ROMEndLoc:	dc.l	EndOfRom-1
RAMStart:	dc.l	RAM_Start&$FFFFFF
RAMEnd:		dc.l	(RAM_End-1)&$FFFFFF
SRAMSupport:	dc.b	"                "
Notes:		dc.b	0, 1, 2, 3, 4, 5, 6, 7
		dc.b	8, 9, $A, $B, $C, $D, $E, $F
		dc.b	"                                "
Region:		dc.b	"JUE             "
EndOfHeader:

; ===========================================================================
; Offset_0x000200:
ROM_Data_Start:
ErrorTrap:
Line1010Emu:
Line1111Emu:
ErrorException:
		nop
		nop
		bra.s	ErrorTrap
; ===========================================================================
; Offset_0x000206: ROM_Prog_Start:
EntryPoint:
		; You may have noticed above that the System Stack is not set in the header, but
		; is rather handled in the boot code. This is actually a REALLY hackish work-
		; -around for a bug where an object with invalid mappings could crash the game,
		; and "fixes" the issue by making the first longword of the ROM $00000000, making
		; it instead just not display anything.
		lea	(System_Stack).w,sp
		tst.l	(IO_Port_0_Control).l
		bne.s	PortA_OK
		tst.w	(IO_Expansion_Control).l
; Offset_0x000218:
PortA_OK:
		bne.s	PortC_OK
		lea	InitValues(pc),a5
		movem.w	(a5)+,d5-d7
		movem.l	(a5)+,a0-a4
		move.b	-$10FF(a1),d0
		andi.b	#$F,d0
		beq.s	SkipSecurity
		move.l	#"SEGA",$2F00(a1)
; Offset_0x000238:
SkipSecurity:
		move.w	(a4),d0
		moveq	#0,d0
		move.l	d0,a6
		move.l	a6,usp
		moveq	#VDPInitValues_End-VDPInitValues-1,d1
; Offset_0x000242:
VDPInitLoop:
		move.b	(a5)+,d5
		move.w	d5,(a4)
		add.w	d7,d5
		dbf	d1,VDPInitLoop
		move.l	(a5)+,(a4)
		move.w	d0,(a3)
		move.w	d7,(a1)
		move.w	d7,(a2)
; Offset_0x000254:
WaitForZ80:
		btst	d0,(a1)
		bne.s	WaitForZ80
		moveq	#Z80StartupCode_End-Z80StartupCode-1,d2
; Offset_0x00025A:
Z80InitLoop:
		move.b	(a5)+,(a0)+
		dbf	d2,Z80InitLoop
		move.w	d0,(a2)
		move.w	d0,(a1)
		move.w	d7,(a2)
; Offset_0x000266:
ClearRAMLoop:
		move.l	d0,-(a6)
		dbf	d6,ClearRAMLoop
		move.l	(a5)+,(a4)
		move.l	(a5)+,(a4)
		moveq	#$1F,d3
; Offset_0x000272:
ClearCRAMLoop:
		move.l	d0,(a3)
		dbf	d3,ClearCRAMLoop
		move.l	(a5)+,(a4)
		moveq	#$13,d4
; Offset_0x00027C:
ClearVSRAMLoop:
		move.l	d0,(a3)
		dbf	d4,ClearVSRAMLoop
		moveq	#PSGInitValues_End-PSGInitValues-1,d5
; Offset_0x000284:
PSGInitLoop:
		move.b	(a5)+,$11(a3)
		dbf	d5,PSGInitLoop
		move.w	d0,(a2)
		movem.l	(a6),d0-d7/a0-a6
		move	#$2700,sr
; Offset_0x000296:
PortC_OK:
		bra.s	GameProgram
; ===========================================================================
; Offset_0x000298:
InitValues:
		dc.w	$8000, bytesToLcnt($10000), $100

		dc.l	Z80_RAM_Start
		dc.l	Z80_Bus_Request
		dc.l	Z80_Reset
		dc.l	VDP_Data_Port, VDP_Control_Port

	; values for VDP registers
VDPInitValues:
		dc.b	$04, $14, $30, $3C, $07, $6C, $00, $00
		dc.b	$00, $00, $FF, $00, $81, $37, $00, $01
		dc.b	$01, $00, $00, $FF, $FF, $00, $00, $80
VDPInitValues_End:

		dc.b	$40, $00, $00, $80

	; Z80 instructions (not the sound driver; that gets loaded later)
Z80StartupCode:
		dc.b	$AF, $01, $D9, $1F
		dc.b	$11, $27, $00, $21, $26, $00, $F9, $77
		dc.b	$ED, $B0, $DD, $E1, $FD, $E1, $ED, $47
		dc.b	$ED, $4F, $D1, $E1, $F1, $08, $D9, $C1
		dc.b	$D1, $E1, $F1, $F9, $F3, $ED, $56, $36
		dc.b	$E9, $E9
Z80StartupCode_End:

		dc.w	$8104			; value for VDP display mode
		dc.w	$8F02			; value for VDP increment
		dc.l	Color_RAM_Address	; value for CRAM write mode
		dc.l	$40000010		; value for VSRAM write mode

	; values for PSG channel volumes
PSGInitValues:
		dc.b	$9F, $BF, $DF, $FF
PSGInitValues_End:

; ===========================================================================
; Offset_0x000304:
GameProgram:
		tst.w	(VDP_Control_Port).l
; Offset_00030A:
WaitForVDP:
		move.w	(VDP_Control_Port).l,d1
		btst	#1,d1
		bne.s	WaitForVDP
		btst	#6,(IO_Expansion_Control+1).l
		beq.s	ChecksumCheck
		cmpi.l	#"init",(Init_Flag).w
		beq.w	AlreadyInit
; Offset_00032C:
ChecksumCheck:
		movea.l	#EndOfHeader,a0
		movea.l	#ROMEndLoc,a1
		move.l	(a1),d0
		moveq	#0,d1
		add.w	(a0)+,d1
		cmp.l	a0,d0
		nop
		nop
		move.l	#Checksum,a1
		cmp.w	(a1),d1
		nop
		nop
		lea	(CrossResetRAM).w,a6
		moveq	#0,d7
		move.w	#bytesToLcnt(CrossResetRAM_End-CrossResetRAM),d6
; Offset_0x00035A:
ClearSomeRAMLoop:
		move.l	d7,(a6)+
		dbf	d6,ClearSomeRAMLoop
		move.b	(IO_Hardware_Version),d0
		andi.b	#$C0,d0
		move.b	d0,(Hardware_Id).w
		move.l	#"init",(Init_Flag).w
; Offset_0x000376:
AlreadyInit:
		bsr.w	CheckVDPFrequency
		lea	(RAM_Start&$FFFFFF).l,a6
		moveq	#0,d7
		move.w	#bytesToLcnt(CrossResetRAM-RAM_Start),d6
; Offset_0x000386:
ClearRemainingRAMLoop:
		move.l	d7,(a6)+
		dbf	d6,ClearRemainingRAMLoop

		bsr.w	VDPRegSetup
		bsr.w	SoundDriverLoad
		bsr.w	JoypadInit
		move.b	#gm_SEGALogo,(Game_Mode).w
; Offset_0x00039E:
MainGameLoop:
		move.b	(Game_Mode).w,d0
		andi.w	#$3C,d0
		jsr	GameModeArray(pc,d0.w)
		bra.s	MainGameLoop
; ===========================================================================
; Offset_0x0003AC:
GameModeArray:
		bra.w	SegaScreen
		bra.w	TitleScreen
		bra.w	Level
		bra.w	Level
		bra.w	S2_Special_Stage
		bra.w	S2_Continue
		bra.w	S2_Two_Player_Results
		bra.w	S2_Versus_Mode_Menu
		bra.w	S2_Ending_Sequence
		bra.w	S2_Options_Menu
		bra.w	S2_Level_Select_Menu
		bra.w	Special_Stage_Test_1
		bra.w	Special_Stage_Test_2
; ===========================================================================
; Offset_0x0003E0:
S2_Special_Stage:
S2_Continue:
S2_Two_Player_Results:
S2_Ending_Sequence:
Run_SEGA_Screen:
		move.b	#gm_SEGALogo,(Game_Mode).w
		rts
; ===========================================================================
; A set of two unused checksum routines; the first one causes the game to
; cycle through the entire Genesis color palette, while the second is the
; classic red screen of death. Both still remain unused in the final,as
; the developers never restored the checksum check.
; Offset_0x0003E8:
ChecksumError:
		move.l	d1,-(sp)
		bsr.w	VDPRegSetup
		move.l	(sp)+,d1
; Offset_0x0003F0: ChecksumError_Inf_Loop:
ChecksumError_Loop:
		move.l	#Color_RAM_Address,(VDP_Control_Port).l
		move.w	d7,(VDP_Data_Port).l
		addq.w	#1,d7				; increment the color data
		bra.s	ChecksumError_Loop
; End of function ChecksumError

; ---------------------------------------------------------------------------
; Offset_0x000404: Show_Red_Screen:
ChecksumError2:
		move.l	#Color_RAM_Address,(VDP_Control_Port).l
		moveq	#bytesToWcnt($80),d7
; Offset_0x000410:
Fill_Red_Loop:
		move.w	#$E,(VDP_Data_Port).l		; turn entire CRAM red
		dbf	d7,Fill_Red_Loop
; Offset_0x00041C: Show_Red_Screen_Inf_Loop
ChecksumError2_Loop:
		bra.s	ChecksumError2_Loop
; End of function ChecksumError2

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to check what frequency the VDP is running at, used to
; detect PAL consoles so as to enable its regional H-int routines
; ---------------------------------------------------------------------------

; Offset_0x00041E: Check_VDP_Frequency:
CheckVDPFrequency:
		lea	(VDP_Control_Port).l,a5
		move.w	#$8174,(a5)			; VDP Command $8174 - display on, V-int on, DMA on, PAL off
		moveq	#0,d0

Offset_0x00042A:
		move.w	(a5),d1
		andi.w	#8,d1
		beq.s	Offset_0x00042A

Offset_0x000432:
		move.w	(a5),d1
		andi.w	#8,d1
		bne.s	Offset_0x000432			; run VBlank once

Offset_0x00043A:
		addq.w	#1,d0
		move.w	(a5),d1
		andi.w	#8,d1
		beq.s	Offset_0x00043A
		move.w	d0,(Vertical_Frequency).w	; count cycles between VBlanks to determine console
		; (3420 cycles on NTSC, 4096 cycles on PAL)
		rts
; End of subroutine CheckVDPFrequency

; ===========================================================================
; ---------------------------------------------------------------------------
; Vertical Interrupt (VBlank) master routine
; ---------------------------------------------------------------------------
; Offset_0x00044A:
VBlank:
		nop
		movem.l	d0-d7/a0-a6,-(sp)
		tst.b	(VBlank_Index).w
		beq.w	VBlank_Lag

Offset_0x000458:
		move.w	(VDP_Control_Port).l,d0
		andi.w	#8,d0
		beq.s	Offset_0x000458
		move.l	#$40000010,(VDP_Control_Port).l
		move.l	(Vertical_Scroll_Value).w,(VDP_Data_Port).l
		btst	#6,(Hardware_Id).w
		beq.s	Offset_0x000486
		move.w	#$700,d0

Offset_0x000482:
		dbf	d0,Offset_0x000482

Offset_0x000486:
		move.b	(VBlank_Index).w,d0
		move.b	#0,(VBlank_Index).w
		move.w	#1,(Horizontal_Interrupt_Flag).w
		andi.w	#$3E,d0
		move.w	VBlank_List(pc,d0.w),d0
		jsr	VBlank_List(pc,d0.w)
; Offset_0x0004A2:
VBlank_Finalize:
		addq.l	#1,(Vint_runcount).w
		movem.l	(sp)+,d0-d7/a0-a6
		rte
; End of function VBlank

; ===========================================================================
; Offset_0x0004AC:
VBlank_List:	dc.w VBlank_00-VBlank_List
		dc.w VBlank_SEGA-VBlank_List
		dc.w VBlank_Title-VBlank_List
		dc.w VBlank_06-VBlank_List
		dc.w VBlank_08-VBlank_List
		dc.w VBlank_0A-VBlank_List
		dc.w VBlank_0C-VBlank_List
		dc.w VBlank_0E-VBlank_List
		dc.w VBlank_10-VBlank_List
		dc.w VBlank_12-VBlank_List
		dc.w VBlank_14-VBlank_List
		dc.w VBlank_16-VBlank_List
		dc.w VBlank_18-VBlank_List
		dc.w VBlank_1A-VBlank_List
; ===========================================================================
; ---------------------------------------------------------------------------
; VBlank Routine 0 - run when a frame ends before it reaches WaitForVBlank
; (in other words, update when lag)
; ---------------------------------------------------------------------------
; Offset_0x0004C8:
VBlank_00:
		addq.w	#4,sp
; Offset_0x0004CA: Default_VBlank:
VBlank_Lag:
		addq.w	#1,(VBlank_0_Run_Count).w
		cmpi.b	#$80|gm_DemoMode,(Game_Mode).w
		beq.s	Offset_0x00050E
		cmpi.b	#$80|gm_PlayMode,(Game_Mode).w
		beq.s	Offset_0x00050E
		cmpi.b	#gm_DemoMode,(Game_Mode).w
		beq.s	Offset_0x00050E
		cmpi.b	#gm_PlayMode,(Game_Mode).w
		beq.s	Offset_0x00050E

		stopZ80
		bsr.w	SoundDriverInput_Null
		startZ80

		bra.s	VBlank_Finalize
; ---------------------------------------------------------------------------

Offset_0x00050E:
		tst.b	(Water_Level_Flag).w		; does this level have water?
		beq.w	VBlank0_SkipWater		; if not, branch
		move.w	(VDP_Control_Port).l,d0
		btst	#6,(Hardware_Id).w
		beq.s	Offset_0x00052C
		move.w	#$700,d0

Offset_0x000528:
		dbf	d0,Offset_0x000528

Offset_0x00052C:
		move.w	#1,(Horizontal_Interrupt_Flag).w
		stopZ80
		tst.b	(Underwater_Flag).w
		bne.s	Offset_0x000570
		lea	(VDP_Control_Port).l,a5
		move.l	#$94009340,(a5)
		move.l	#$96F69580,(a5)
		move.w	#$977F,(a5)
		move.w	#$C000,(a5)
		move.w	#$80,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)
		bra.s	Offset_0x000594
; ---------------------------------------------------------------------------

Offset_0x000570:
		lea	(VDP_Control_Port).l,a5
		move.l	#$94009340,(a5)
		move.l	#$96F89540,(a5)
		move.w	#$977F,(a5)
		move.w	#$C000,(a5)
		move.w	#$80,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)

Offset_0x000594:
		move.w	(Horizontal_Int_Count_Cmd).w,(a5)
		bsr.w	SoundDriverInput_Null
		startZ80
		bra.w	VBlank_Finalize
; ---------------------------------------------------------------------------
; Offset_0x0005A8:
VBlank0_SkipWater:
		move.w	(VDP_Control_Port).l,d0
		btst	#6,(Hardware_Id).w
		beq.s	Offset_0x0005BE
		move.w	#$700,d0

Offset_0x0005BA:
		dbf	d0,Offset_0x0005BA

Offset_0x0005BE:
		move.w	#1,(Horizontal_Interrupt_Flag).w
		move.w	(Horizontal_Int_Count_Cmd).w,(VDP_Control_Port).l
		stopZ80
		; update the sprite table in multiplayer during a lag frame to show
		; the correct sprite on the top part of the screen
		tst.w	(Two_Player_Flag).w
		beq.s	Offset_0x000646

		; update V-scroll
		move.l	#$40000010,(VDP_Control_Port).l
		move.l	(Vertical_Scroll_Value).w,(VDP_Data_Port)

		; Sonic 3 page-flips its sprite tables in competition mode, in order to
		; resolve a bug that caused glitched sprites to appear in lag frames
		tst.w	(Use_Normal_Sprite_Table).w
		beq.s	.useAltSpriteTable
		lea	(VDP_Control_Port).l,a5
		move.l	#$94019340,(a5)
		move.l	#$96FC9500,(a5)
		move.w	#$977F,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)
		bra.s	Offset_0x000646
; Offset_0x000622:
.useAltSpriteTable:
		lea	(VDP_Control_Port).l,a5
		move.l	#$94019340,(a5)
		move.l	#$96BC9540,(a5)
		move.w	#$977F,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)

Offset_0x000646:
		bsr.w	SoundDriverInput_Null
		startZ80
		bra.w	VBlank_Finalize
; ===========================================================================
; This copies the H-scroll table buffer from RAM into VRAM
; Offset_0x000656: VBlank_02:
VBlank_SEGA:
		bsr.w	Offset_0x000B80
		lea	(VDP_Control_Port).l,a5
		move.l	#$940193C0,(a5)
		move.l	#$96F09500,(a5)
		move.w	#$977F,(a5)
		move.w	#$7000,(a5)
		move.w	#$83,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)
		jsr	(VInt_SEGA_Screen).l
		tst.w	(Demo_Timer).w
		beq.w	Offset_0x000690
		subq.w	#1,(Demo_Timer).w

Offset_0x000690:
		rts
; ===========================================================================
; This checks the player's joypad inputs while counting down the timer the
; game freezes execution to play the PCM sample
; Offset_0x000692:
VBlank_14:
		move.b	(Vint_runcount+3).w,d0
		andi.w	#$F,d0
		bne.s	Offset_0x0006BA
		stopZ80
		bsr.w	Control_Ports_Read
		startZ80

Offset_0x0006BA:
		tst.w	(Demo_Timer).w
		beq.w	Offset_0x0006C6
		subq.w	#1,(Demo_Timer).w

Offset_0x0006C6:
		rts
; ===========================================================================
; Sets up the title screen graphics and decrements the timer
; Offset_0x0006C8: VBlank_04:
VBlank_Title:
		bsr.w	VInt_Title_Screen
		bsr.w	Offset_0x000B80
		bsr.w	ProcessDPLC
		tst.w	(Demo_Timer).w
		beq.w	Offset_0x0006E0
		subq.w	#1,(Demo_Timer).w

Offset_0x0006E0:
		rts
;-------------------------------------------------------------------------------
VBlank_06:                                                     ; Offset_0x0006E2
		bsr.w	Offset_0x000B80
		rts
;-------------------------------------------------------------------------------
VBlank_08:                                                     ; Offset_0x0006E8
VBlank_10:
		stopZ80
		bsr.w	Control_Ports_Read                     ; Offset_0x000F16
		tst.b	(S2_Teleport_Timer).w                        ; $FFFFF622
		beq.s	Offset_0x00075A
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		tst.w	(Pause_Status).w                             ; $FFFFF63A
		bne.w	Offset_0x0007AA
		subq.b	#1,(S2_Teleport_Timer).w                  ; $FFFFF622
		bne.s	Offset_0x00071E
		move.b	#0,(S2_Teleport_Flag).w                   ; $FFFFF623
Offset_0x00071E:
		cmpi.b	#$10,(S2_Teleport_Timer).w                  ; $FFFFF622
		bcs.s	Offset_0x00075A
		lea	(VDP_Data_Port).l,a6                          ; $00C00000
		move.l	#$C0000000,(VDP_Control_Port)               ; $00C00004
		move.w	#$EEE,d0
		move.w	#bytesToWcnt($40),d1
Offset_0x00073E:
		move.w	D0,(A6)
		dbf	D1, Offset_0x00073E
		move.l	#$C0420000,(VDP_Control_Port)               ; $00C00004
	if FixBugs
		move.w	#bytesToWcnt($3E),d1
	else
		move.w	#bytesToWcnt($40),d1
	endif
Offset_0x000752:
		move.w	D0,(A6)
		dbf	D1, Offset_0x000752
		bra.s	Offset_0x0007AA
Offset_0x00075A:
		tst.b	(Underwater_Flag).w                          ; $FFFFF64E
		bne.s	Offset_0x000786
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$94009340,(A5)
		move.l	#$96F69580,(A5)
		move.w	#$977F,(A5)
		move.w	#$C000,(A5)
		move.w	#$80,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		bra.s	Offset_0x0007AA
Offset_0x000786:
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$94009340,(A5)
		move.l	#$96F89540,(A5)
		move.w	#$977F,(A5)
		move.w	#$C000,(A5)
		move.w	#$80,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640

Offset_0x0007AA:
		move.w	(Horizontal_Int_Count_Cmd).w,(a5)
		lea	(VDP_Control_Port).l,a5
		move.l	#$940193C0,(a5)
		move.l	#$96F09500,(a5)
		move.w	#$977F,(a5)
		move.w	#$7000,(a5)
		move.w	#$83,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)
		tst.w	(Two_Player_Flag).w
		beq.s	.useNormalSpriteTable
		tst.w	(Normal_Sprite_Table_Flag).w
		beq.s	.enableAltSpriteTable
		clr.w	(Normal_Sprite_Table_Flag).w
		eori.w	#-1,(Use_Normal_Sprite_Table).w
; Offset_0x0007E8:
.enableAltSpriteTable:
		; Sonic 3 page-flips its sprite tables in competition mode, in order to
		; resolve a bug that caused glitched sprites to appear in lag frames
		tst.w	(Use_Normal_Sprite_Table).w
		bne.s	.useNormalSpriteTable
		lea	(VDP_Control_Port).l,a5
		move.l	#$94019340,(a5)
		move.l	#$96BC9540,(a5)
		move.w	#$977F,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)
		bra.s	Offset_0x000838
; Offset_0x000814:
.useNormalSpriteTable:
		lea	(VDP_Control_Port).l,a5
		move.l	#$94019340,(a5)
		move.l	#$96FC9500,(a5)
		move.w	#$977F,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)

Offset_0x000838:
		bsr.w	ProcessDMAQueue
		move.l	(Vertical_Scroll_Value_P2).w,(Vertical_Scroll_Value_P2_2).w
		jsr	(Special_Vint).l
		jsr	(DrawLevel).l
		bsr.w	SoundDriverInput_Null
		startZ80
		move	#$2300,sr
		cmpi.b	#92,(Scanline_Counter).w
		bcc.s	Offset_0x000872
		move.b	#1,(H_Int_Update_Flag).w
		jmp	(Set_Kos_Bookmark).l

Offset_0x000872:
		bsr.s	Do_Updates
		jmp	(Set_Kos_Bookmark).l

; ---------------------------------------------------------------------------
; Subroutine to run a demo and process some data
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00087A:
Do_Updates:
		; Unlike previous games, Sonic 3 does not draw the level routine here,
		; likely as Sega realized it would be unncessary to update it on HBlank
		jsr	(HUD_Update).l
		move.w	#0,(VBlank_0_Run_Count).w
		bsr.w	ProcessDPLC2
		tst.w	(Demo_Timer).w
		beq.w	Offset_0x000896
		subq.w	#1,(Demo_Timer).w

Offset_0x000896:
		rts
; ===========================================================================

VBlank_0A:                                                     ; Offset_0x000898
VBlank_0C:
		stopZ80
		bsr.w	Control_Ports_Read                     ; Offset_0x000F16
		tst.b	(Underwater_Flag).w                          ; $FFFFF64E
		bne.s	Offset_0x0008DA
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$94009340,(A5)
		move.l	#$96F69580,(A5)
		move.w	#$977F,(A5)
		move.w	#$C000,(A5)
		move.w	#$80,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		bra.s	Offset_0x0008FE
Offset_0x0008DA:
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$94009340,(A5)
		move.l	#$96F89540,(A5)
		move.w	#$977F,(A5)
		move.w	#$C000,(A5)
		move.w	#$80,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
Offset_0x0008FE:
		move.w	(Horizontal_Int_Count_Cmd).w,(A5)           ; $FFFFF624
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$940193C0,(A5)
		move.l	#$96F09500,(A5)
		move.w	#$977F,(A5)
		move.w	#$7000,(A5)
		move.w	#$83,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$94019340,(A5)
		move.l	#$96FC9500,(A5)
		move.w	#$977F,(A5)
		move.w	#$7800,(A5)
		move.w	#$83,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		bsr.w	ProcessDMAQueue                            ; Offset_0x00135E
		move.l	(Vertical_Scroll_Value_P2).w,(Vertical_Scroll_Value_P2_2).w ; $FFFFF61E, $FFFFEE3A
		jsr	(SoundDriverInput_Null).l
		startZ80
		bsr.w	ProcessDPLC                  ; Offset_0x0015AE
		jmp	(Set_Kos_Bookmark).l                ; Offset_0x0019C6
;-------------------------------------------------------------------------------
VBlank_0E:                                                     ; Offset_0x00096C
		bsr.w	Offset_0x000B80
		move.b	#$E,(VBlank_Index).w                       ; $FFFFF62A
		rts
;-------------------------------------------------------------------------------
VBlank_12:                                                     ; Offset_0x000978
		bsr.w	Offset_0x000B80
		move.w	(Horizontal_Int_Count_Cmd).w,(A5)           ; $FFFFF624
		bra.w	ProcessDPLC                  ; Offset_0x0015AE
;-------------------------------------------------------------------------------
VBlank_18:                                                     ; Offset_0x000984
		stopZ80
		bsr.w	Control_Ports_Read                     ; Offset_0x000F16
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$94009340,(A5)
		move.l	#$96F69580,(A5)
		move.w	#$977F,(A5)
		move.w	#$C000,(A5)
		move.w	#$80,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$94019340,(A5)
		move.l	#$96FC9500,(A5)
		move.w	#$977F,(A5)
		move.w	#$7800,(A5)
		move.w	#$0083,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.l	#$940193C0,(A5)
		move.l	#$96F09500,(A5)
		move.w	#$977F,(A5)
		move.w	#$7000,(A5)
		move.w	#$83,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		bsr.w	ProcessDMAQueue                            ; Offset_0x00135E
		bsr.w	SoundDriverInput_Null
		startZ80
		rts
;-------------------------------------------------------------------------------
Offset_0x000A18:
		dc.w	Offset_0x000A1C-Offset_0x000A18
		dc.w	Offset_0x000A4C-Offset_0x000A18
Offset_0x000A1C:
		lea	(VDP_Control_Port).l,a5                       ; $00C00004
		move.w	#$8F01,(A5)
		move.l	#$941F93FF,(A5)
		move.w	#$9780,(A5)
		move.l	#$40000083,(A5)
		move.w	#0,(VDP_Data_Port)                      ; $00C00000
Offset_0x000A3E:
		move.w	(A5),d1
		btst	#1,d1
		bne.s	Offset_0x000A3E
		move.w	#$8F02,(A5)
		rts
;-------------------------------------------------------------------------------
Offset_0x000A4C:
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.w	#$8F01,(A5)
		move.l	#$941F93FF,(A5)
		move.w	#$9780,(A5)
		move.l	#$40000081,(A5)
		move.w	#0,(VDP_Data_Port)                      ; $00C00000
Offset_0x000A6E:
		move.w	(A5),d1
		btst	#1,d1
		bne.s	Offset_0x000A6E
		move.w	#$8F02,(A5)
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.w	#$8F01,(A5)
		move.l	#$941F93FF,(A5)
		move.w	#$9780,(A5)
		move.l	#$40000083,(A5)
		move.w	#0,(VDP_Data_Port)                      ; $00C00000
Offset_0x000A9C:
		move.w	(A5),d1
		btst	#1,d1
		bne.s	Offset_0x000A9C
		move.w	#$8F02,(A5)
		lea	(VDP_Control_Port),a6                       ; $00C00004
		move.w	#$8B00,(A6)
		move.w	#$8402,(A6)
		move.w	#$9011,(A6)
		lea	(RAM_Start),a1                         ; $FFFF0000
		move.l	#$50AC0003,d0
		moveq	#23-1,d1
		moveq	#15-1,d2
		jsr	(PlaneMapToVRAM_H40).l                      ; Offset_0x0012BC
		rts
;-------------------------------------------------------------------------------
VBlank_16:                                                     ; Offset_0x000AD2
		stopZ80
		bsr.w	Control_Ports_Read                     ; Offset_0x000F16
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.l	#$94009340,(A5)
		move.l	#$96F69580,(A5)
		move.w	#$977F,(A5)
		move.w	#$C000,(A5)
		move.w	#$0080,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.l	#$94019340,(A5)
		move.l	#$96FC9500,(A5)
		move.w	#$977F,(A5)
		move.w	#$7800,(A5)
		move.w	#$0083,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.l	#$940193C0,(A5)
		move.l	#$96F09500,(A5)
		move.w	#$977F,(A5)
		move.w	#$7000,(A5)
		move.w	#$0083,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		bsr.w	ProcessDMAQueue                            ; Offset_0x00135E
		bsr.w	SoundDriverInput_Null
		startZ80
		bsr.w	ProcessDPLC                  ; Offset_0x0015AE
		tst.w	(Demo_Timer).w                               ; $FFFFF614
		beq.w	Offset_0x000B74
		subq.w	#$01,(Demo_Timer).w                         ; $FFFFF614
Offset_0x000B74:
		rts
;-------------------------------------------------------------------------------
VBlank_1A:                                                     ; Offset_0x000B76
		bsr.w	Offset_0x000B80
		bsr.w	ProcessDPLC                  ; Offset_0x0015AE
		rts
;-------------------------------------------------------------------------------
Offset_0x000B80:
		stopZ80
		bsr.w	Control_Ports_Read                     ; Offset_0x000F16
		tst.b	(Underwater_Flag).w                          ; $FFFFF64E
		bne.s	Offset_0x000BC2
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.l	#$94009340,(A5)
		move.l	#$96F69580,(A5)
		move.w	#$977F,(A5)
		move.w	#$C000,(A5)
		move.w	#$0080,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		bra.s	Offset_0x000BE6
Offset_0x000BC2:
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.l	#$94009340,(A5)
		move.l	#$96F89540,(A5)
		move.w	#$977F,(A5)
		move.w	#$C000,(A5)
		move.w	#$0080,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
Offset_0x000BE6:
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.l	#$94019340,(A5)
		move.l	#$96FC9500,(A5)
		move.w	#$977F,(A5)
		move.w	#$7800,(A5)
		move.w	#$0083,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.l	#$940193C0,(A5)
		move.l	#$96F09500,(A5)
		move.w	#$977F,(A5)
		move.w	#$7000,(A5)
		move.w	#$0083,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		bsr.w	ProcessDMAQueue                            ; Offset_0x00135E
		bsr.w	SoundDriverInput_Null
		startZ80
		rts
;===============================================================================
; Interrup��o Vertical
; <<<-
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; HBlank
; Jumps to the actual HBlank routine using a pointer in RAM rather than ROM
; ---------------------------------------------------------------------------
; Offset_0x000C40:
HBlank:
		jmp	(H_int_jump).w

; ===========================================================================
; ---------------------------------------------------------------------------
; HBlank routine 1
; Used to handle split screen in Competition Mode
; ---------------------------------------------------------------------------
; Offset_0x000C44: HBlank_00:
HBlank_Competition:
		tst.w	(Horizontal_Interrupt_Flag).w
		beq.w	Offset_0x000D0A
		move.w	#0,(Horizontal_Interrupt_Flag).w
		move.l	a5,-(sp)
		move.l	d0,-(sp)

Offset_0x000C56:
		move.w	(VDP_Control_Port),d0
		andi.w	#4,d0
		beq.s	Offset_0x000C56
		move.w	(VDP_Register_1_Command).w,d0
		andi.b	#$BF,d0
		move.w	d0,(VDP_Control_Port).l

		; update V-scroll
		move.l	#$40000010,(VDP_Control_Port).l
		move.l	(Vertical_Scroll_Value_P2_2).w,(VDP_Data_Port).l
		stopZ80

		; Sonic 3 page-flips its sprite tables in competition mode, in order to
		; resolve a bug that caused glitched sprites to appear in lag frames

		; upload the front buffer
		tst.w	(Use_Normal_Sprite_Table).w
		beq.s	Offset_0x000CC0
		lea	(VDP_Control_Port).l,a5
		move.l	#$94019340,(a5)
		move.l	#$96BD9580,(a5)
		move.w	#$977F,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)
		bra.s	Offset_0x000CE4

Offset_0x000CC0:
		lea	(VDP_Control_Port).l,a5
		move.l	#$94019340,(a5)
		move.l	#$96BE95C0,(a5)
		move.w	#$977F,(a5)
		move.w	#$7800,(a5)
		move.w	#$83,(DMA_Trigger).w
		move.w	(DMA_Trigger).w,(a5)

Offset_0x000CE4:
		startZ80

Offset_0x000CEC:
		move.w	(VDP_Control_Port).l,d0
		andi.w	#4,d0
		beq.s	Offset_0x000CEC
		move.w	(VDP_Register_1_Command).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_Control_Port).l
		move.l	(sp)+,d0
		move.l	(sp)+,a5

Offset_0x000D0A:
		rte
; End of function HBlank_Competition


; ===========================================================================
; ---------------------------------------------------------------------------
; HBlank routine 2
; Changes the water palette based on the scanline; unlike previous games,
; this changes only a few colors per scanline in order to sidestep CRAM
; dots,at the cost of making the water surface appear uneven
; ---------------------------------------------------------------------------
; Offset_0x000D0C: HBlank_01:
HBlank_WaterPAL:
		tst.w	(Horizontal_Interrupt_Flag).w
		beq.s	Offset_0x000D8A
		move.w	#0,(Horizontal_Interrupt_Flag).w
		movem.l	d0/d1/a0-a2,-(sp)

		lea	(VDP_Data_Port).l,a1
		move.w	#$8AFF,VDP_Control_Port-VDP_Data_Port(a1)	; reset HBlank timing
		stopZ80
		move.l	(Palette_Underwater_Ptr).w,a2
		moveq	#$C,d0
; Offset_0x000D40:
		dbf	d0,*
		move.w	(a2)+,d1
		move.b	(Scanline_Counter).w,d0
		subi.b	#200,d0			; are we below line 200?
		bcs.s	.transferColours	; if yes, branch
		sub.b	d0,d1
		bcs.s	.skipTransfer
; Offset_0x000D54:
.transferColours:
		move.w	(a2)+,d0
		lea	(Palette_Underwater_Buffer).w,a0
		adda.w	d0,a0
		addi.w	#$C000,d0
		swap	d0
		move.l	d0,VDP_Control_Port-VDP_Data_Port(a1)		; write to CRAM at appropriate address
		move.l	(a0)+,(a1)		; transfer two colors
		move.w	(a0)+,(a1)		; transfer the third color
		nop
		nop
		moveq	#$24,d0
; Offset_0x000D70:
		dbf	d0,*
		dbf	d1,.transferColours	; repeat for number of colors
; Offset_0x000D78:
.skipTransfer:
		startZ80
		movem.l	(sp)+,d0/d1/a0-a2
		tst.b	(H_Int_Update_Flag).w
		bne.s	Offset_0x000D8C

Offset_0x000D8A:
		rte
; ---------------------------------------------------------------------------

Offset_0x000D8C:
		clr.b	(H_Int_Update_Flag).w
		movem.l	d0-d7/a0-a6,-(sp)
		jsr	(Do_Updates).l
		movem.l	(sp)+,d0-d7/a0-a6
		rte
; End of function HBlank_WaterPAL

; ===========================================================================
; ---------------------------------------------------------------------------
; HBlank routine 3
; Same as above, but for NTSC Mega Drive/Genesis systems as the routine
; is very time-specific; in fact, this whole thing apparently just does
; not work with Model 3 systems
; ---------------------------------------------------------------------------
; Offset_0x000DA0: HBlank_02:
HBlank_WaterNTSC:
		tst.w	(Horizontal_Interrupt_Flag).w
		beq.s	Offset_0x000D8A
		move.w	#0,(Horizontal_Interrupt_Flag).w
		movem.l	d0/d1/a0-a2,-(sp)
		lea	(VDP_Data_Port).l,a1
		move.w	#$8AFF,VDP_Control_Port-VDP_Data_Port(a1)	; reset HBlank timing
		stopZ80
		move.l	(Palette_Underwater_Ptr).w,a2
		moveq	#$1B,d0
; Offset_0x000DD4:
		dbf	d0,*
		move.w	(a2)+,d1
		move.b	(Scanline_Counter).w,d0
		subi.b	#200,d0			; are we below line 200?
		bcs.s	.transferColors		; if yes, branch
		sub.b	d0,d1
		bcs.s	.skipTransfer
; Offset_0x000DE8:
.transferColors:
		move.w	(a2)+,d0
		lea	(Palette_Underwater_Buffer).w,a0
		adda.w	d0,a0
		addi.w	#$C000,d0
		swap	d0
		move.l	d0,VDP_Control_Port-VDP_Data_Port(a1)		; write to CRAM at appropriate address
		move.l	(a0)+,(a1)		; transfer two colors
		move.w	(a0)+,(a1)		; transfer third color
		nop
		moveq	#$33,d0
; Offset_0x000E02:
		dbf	d0,*
		dbf	d1,.transferColors	; repeat for number of colors
; Offset_0x000E0A:
.skipTransfer:
		startZ80
		movem.l	(sp)+,d0/d1/a0-a2
		tst.b	(H_Int_Update_Flag).w
		bne.s	Offset_0x000E1E
		rte
; ---------------------------------------------------------------------------

Offset_0x000E1E:
		clr.b	(H_Int_Update_Flag).w
		movem.l	d0-d7/a0-a6,-(sp)
		jsr	(Do_Updates).l
		movem.l	(sp)+,d0-d7/a0-a6
		rte
; End of function HBlank_WaterNTSC

; ===========================================================================
; ---------------------------------------------------------------------------
; HBlank routine 4
; Copies the entire water palette to CRAM at once; this was the method in
; older games and is used by Hydrocity, however it introduces CRAM dots,
; which the game hides with the animated water surface
; ---------------------------------------------------------------------------
; Offset_0x000E32: Pal_To_ColorRAM: HBlank_03:
HBlank_WaterHCZ:
		move	#$2700,sr
		tst.w	(Horizontal_Interrupt_Flag).w
		beq.s	Offset_0x000EA8
		move.w	#0,(Horizontal_Interrupt_Flag).w

		movem.l	a0-a1,-(sp)
		lea	(VDP_Data_Port).l,a1
		move.w	#$8ADF,VDP_Control_Port-VDP_Data_Port(a1)
		lea	(Palette_Underwater_Buffer).w,a0
		move.l	#$C0000000,VDP_Control_Port-VDP_Data_Port(a1)
	rept 32
		move.l	(a0)+,(a1)
	endm
		movem.l (sp)+,a0-a1
		tst.b	(H_Int_Update_Flag).w
		bne.s	Offset_0x000EAA

Offset_0x000EA8:
		rte
; ---------------------------------------------------------------------------

Offset_0x000EAA:
		clr.b	(H_Int_Update_Flag).w
		movem.l	d0-d7/a0-a6,-(sp)
		bsr.w	Do_Updates
		movem.l	(sp)+,d0-d7/a0-a6
		rte
; End of function HBlank_WaterHCZ

; ===========================================================================
; ---------------------------------------------------------------------------
; Offset_0x000EBC: Null_Sub_1:
SoundDriverInput_Null:
		rts
; ---------------------------------------------------------------------------
; This appears to be the remnants of a 'sound input system' that Sonic 2 used,
; which handled its sound queues on the 68000-side; it seems like the devs
; retained this system when switching over to the new driver before a Z80-led
; sound input system could be implemented. Sonic CD uses a similar system.
		move.b	(Sound_Queue.Music0).w,(Z80_RAM_Start+zMusicNumber).l
		move.b	(Sound_Queue.SFX0).w,(Z80_RAM_Start+zSFXNumber0).l
		move.b	(Sound_Queue.SFX1).w,(Z80_RAM_Start+zSFXNumber1).l
		move.b	(Sound_Queue.Music1).w,(Z80_RAM_Start+zPauseFlag).l
		moveq	#0,d0
		move.l	d0,(Sound_Queue).w
		rts
; End of function SoundDriverInput_Null

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to initialize joypads
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x000EE6: Control_Ports_Init:
JoypadInit:
		stopZ80
		moveq	#$40,d0
		move.b	d0,(IO_Port_0_Control+1).l		; init port 1 (joypad 1)
		move.b	d0,(IO_Port_1_Control+1).l		; init port 2 (joypad 2)
		move.b	d0,(IO_Expansion_Control+1).l		; init port 3 (expansion/extra)
		startZ80
		rts
; End of function JoypadInit

;===============================================================================
; Leitura das portas 0, 1 e expans�o
; ->>>
;===============================================================================
Control_Ports_Read:                                            ; Offset_0x000F16
		lea	(Control_Ports_Buffer_Data).w,a0            ; $FFFFF604
		lea	(IO_Joypad_Port_0),a1                       ; $00A10003
		bsr.s	Offset_0x000F24
		addq.w	#2,a1
Offset_0x000F24:
		move.b	#0,(A1)
		nop
		nop
		move.b	(A1),d0
		lsl.b	#2,d0
		andi.b	#$C0,d0
		move.b	#$40,(A1)
		nop
		nop
		move.b	(A1),d1
		andi.b	#$3F,d1
		or.b	D1,d0
		not.b	D0
		move.b	(A0),d1
		eor.b	D0,d1
		move.b	D0,(A0)+
		and.b	D0,d1
		move.b	D1,(A0)+
		rts
;===============================================================================
; Leitura das portas 0, 1 e expans�o
; <<<-
;===============================================================================

;===============================================================================
; VDPRegSetup
; ->>>
;===============================================================================
VDPRegSetup:                                                   ; Offset_0x000F52
		lea	(VDP_Control_Port),A0                       ; $00C00004
		lea	(VDP_Data_Port),A1                          ; $00C00000
		lea	(VDPRegSetup_Array).l,A2                ; Offset_0x000FDC
		moveq	#bytesToWcnt(VDPRegSetup_Array_End-VDPRegSetup_Array),D7
Offset_0x000F66:
		move.w	(A2)+,(A0)
		dbf	D7, Offset_0x000F66
		move.w	(VDPRegSetup_Array+2).l,D0            ; Offset_0x000FDE
		move.w	D0,(VDP_Register_1_Command).w               ; $FFFFF60E
		move.w	#$8ADF,(Horizontal_Int_Count_Cmd).w         ; $FFFFF624
		moveq	#0,D0
		move.l	#$40000010,(VDP_Control_Port)               ; $00C00004
		move.w	D0,(A1)
		move.w	D0,(A1)
		move.l	#$C0000000,(VDP_Control_Port)               ; $00C00004
		move.w	#bytesToWcnt($80),d7
Offset_0x000F9A:
		move.w	d0,(a1)
		dbf	d7,Offset_0x000F9A
		clr.l	(Vertical_Scroll_Value).w                    ; $FFFFF616
		clr.l	(Vertical_Scroll_Value_3).w                  ; $FFFFF61A
		move.l	d1,-(sp)
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.w	#$8F01,(A5)
		move.l	#$94FF93FF,(A5)
		move.w	#$9780,(A5)
		move.l	#$40000080,(A5)
		move.w	#0,(VDP_Data_Port)                      ; $00C00000
Offset_0x000FCC:
		move.w	(A5),d1
		btst	#1,d1
		bne.s	Offset_0x000FCC
		move.w	#$8F02,(A5)
		move.l	(sp)+,d1
		rts
;-------------------------------------------------------------------------------
VDPRegSetup_Array:                                             ; Offset_0x000FDC
		dc.w	$8004  ; H Int
		dc.w	$8134  ; V Int
		dc.w	$8230  ; Scroll A
		dc.w	$8328  ; Window
		dc.w	$8407  ; Scroll B
		dc.w	$857C  ; Sprite Table
		dc.w	$8600
		dc.w	$8700  ; Background colour index
		dc.w	$8800
		dc.w	$8900
		dc.w	$8A00
		dc.w	$8B00  ; Scroll settings
		dc.w	$8C81  ; Display mode
		dc.w	$8D3C  ; Horizontal scroll table
		dc.w	$8E00
		dc.w	$8F02  ; Auto increment
		dc.w	$9001  ; Scroll planes
		dc.w	$9100
		dc.w	$9200  ; Window Mode
VDPRegSetup_Array_End:
;===============================================================================
; VDPRegSetup
; <<<-
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to clear the screen
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001002:
ClearScreen:
		stopZ80
		lea	(VDP_Control_Port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$9400933F,(a5)
		move.w	#$9780,(a5)
		move.l	#$40000080,(a5)
		move.w	#0,(VDP_Data_Port).l
; Offset_0x001036:
ClearScreen_DMAWait:
		move.w	(a5),d1
		btst	#1,d1
		bne.s	ClearScreen_DMAWait
		move.w	#$8F02,(a5)
		tst.w	(Two_Player_Flag).w
		beq.s	Offset_0x001078
		lea	(VDP_Control_Port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$943F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$40000082,(a5)
		move.w	#0,(VDP_Data_Port).l
; Offset_0x00106A:
ClearScreen_DMAWait_2:
		move.w	(a5),d1
		btst	#1,d1
		bne.s	ClearScreen_DMAWait_2
		move.w	#$8F02,(a5)
		bra.s	Offset_0x0010D4

Offset_0x001078:
		lea	(VDP_Control_Port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$940F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(VDP_Data_Port).l
; Offset_0x00109A:
ClearScreen_DMAWait_3:
		move.w	(a5),d1
		btst	#1,d1
		bne.s	ClearScreen_DMAWait_3
		move.w	#$8F02,(a5)
		lea	(VDP_Control_Port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$940F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$60000083,(a5)
		move.w	#0,(VDP_Data_Port).l
; Offset_0x0010C8:
ClearScreen_DMAWait_4:
		move.w	(a5),d1
		btst	#1,d1
		bne.s	ClearScreen_DMAWait_4
		move.w	#$8F02,(a5)

Offset_0x0010D4:
		clr.l	(Vertical_Scroll_Value).w
		clr.l	(Vertical_Scroll_Value_3).w
	if FixBugs
		clearRAM	Sprite_Table_Buffer,Sprite_Table_Buffer_End
		clearRAM	Horizontal_Scroll_Buffer,Horizontal_Scroll_Buffer_End_Padded
	else
		clearRAM	Sprite_Table_Buffer,Sprite_Table_Buffer_End+4
		clearRAM	Horizontal_Scroll_Buffer,Horizontal_Scroll_Buffer_End_Padded+4
	endif
		startZ80
		rts
; End of function ClearScreen

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load the sound driver into Z80 memory
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001106:
SoundDriverLoad:
		nop
		move.w	#$100,(Z80_Bus_Request).l
		move.w	#$100,(Z80_Reset).l		; release Z80 reset
		; load SMPS sound driver
		lea	(Z80_Driver).l,a0
		lea	(Z80_RAM_Start).l,a1
		move.w	#Z80_Driver_End-Z80_Driver-1,d0

Offset_0x001128:
		move.b	(a0)+,(a1)+
		dbf	d0,Offset_0x001128
		; load default variables
		lea	(Z80_DefaultVariables).l,a0
		lea	(Z80_RAM_Start+zDataStart).l,a1
		move.w	#Z80_DefaultVariables_End-Z80_DefaultVariables-1,d0

Offset_0x00113E:
		move.b	(a0)+,(a1)+
		dbf	d0,Offset_0x00113E
	if FixBugs
		; Detect PAL region consoles
		btst	#6,(Hardware_Id).w
		beq.s	.notpal
		move.b	#1,(Z80_RAM_Start+zPalFlag).l

.notpal:
	endif
		move.w	#0,(Z80_Reset).l		; reset Z80
		nop
		nop
		nop
		nop
		move.w	#$100,(Z80_Reset).l		; release reset
		startZ80
		rts
; End of function SoundDriverLoad

; ---------------------------------------------------------------------------
; Default Z80 variables; only the third/fourth value is set to anything
; meaningful (which is more than can be said for the final)
; Offset_0x001166: Sound_Driver_Init_Data:
Z80_DefaultVariables:
		dc.b	0	; unused 1
		dc.b	0	; unused 2
		dc.w	(z80_SoundDriverPointers)>>8	; zPointerTable (byte-swapped from $1200, where z80_SoundDriverPointers is located)
		dc.b	0	; zSongBank
		dc.b	0	; zCurrentTempo
		dc.b	0	; zDACIndex
		dc.b	0	; zPlaySegaPCMFlag
		dc.b	0	; zPalDblUpdCounter
		dc.b	0	; zNextSound
		dc.b	0	; unused 3
		dc.b	0	; unused 4
		dc.b	0	; unused 5
		dc.b	0	; zFadeOutTimeout
		dc.b	0	; zFadeDelay
		dc.b	0	; zFadeDelayTimeout
Z80_DefaultVariables_End:

; ---------------------------------------------------------------------------
; Subroutine to put a sound ID into the sound queue
; Only the first sound queue works at this point, the rest are broken
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001176:
Play_Music:			; LEGACY LABEL! TO REMOVE
PlaySound:
		cmpi.b	#sfx__End,d0
		bcs.s	Offset_0x00118E
		cmpi.b	#cmd_SEGA,d0
		beq.s	Offset_0x00118E
		cmpi.b	#cmd__First,d0
		bcs.s	PlaySound_Exit
		cmpi.b	#cmd__End,d0
		bcc.s	PlaySound_Exit

Offset_0x00118E:
		stopZ80
		tst.b	(Z80_RAM_Start+zMusicNumber).l
		bne.s	PlaySound2
		move.b	d0,(Z80_RAM_Start+zMusicNumber).l
		startZ80
		rts
; ---------------------------------------------------------------------------
; Offset_0x0011B8:
PlaySound2:
		tst.b	(Z80_RAM_Start+zSFXNumber0).l
		bne.s	PlaySound3
		move.b	d0,(Z80_RAM_Start+zSFXNumber0).l
		startZ80
		rts
; ---------------------------------------------------------------------------
; Offset_0x0011D0:
PlaySound3:
		move.b	d0,(Z80_RAM_Start+zSFXNumber1).l
		startZ80
; Offset_0x0011DE: Exit_Play_Music:
PlaySound_Exit:
		rts
; End of function PlaySound

;===============================================================================
; Rotina para tratar o Pause
; ->>>
;===============================================================================
Pause:                                                         ; Offset_0x0011E0
		nop
		tst.b	(Life_count).w                               ; $FFFFFE12
		beq.w	Unpause                                ; Offset_0x00128A
		tst.w	(Pause_Status).w                             ; $FFFFF63A
		bne.s	Pause_AlreadyPaused                    ; Offset_0x001200
		move.b	(Control_Ports_Buffer_Data+1).w,d0      ; $FFFFF605
		or.b	(Control_Ports_Buffer_Data+3).w,d0      ; $FFFFF607
		andi.b	#button_start_mask,d0
		beq.w	Pause_DoNothing                        ; Offset_0x001290
Pause_AlreadyPaused:                                           ; Offset_0x001200
		move.w	#1,(Pause_Status).w                     ; $FFFFF63A
		stopZ80
		move.b	#1,(Z80_RAM_Start+zPauseFlag)
		startZ80
Pause_Loop:                                                    ; Offset_0x001228
		move.b	#$10,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		tst.b	(Slow_Motion_Flag).w                         ; $FFFFFFD1
		beq.s	Pause_CheckStart                       ; Offset_0x00125A
		btst	#button_A,(Control_Ports_Buffer_Data+1).w    ; $FFFFF605
		beq.s	Pause_CheckBC                          ; Offset_0x00124A
		move.b	#gm_TitleScreen,(Game_Mode).w          ; $04, $FFFFF600
		nop
		bra.s	Offset_0x001268
Pause_CheckBC:                                                 ; Offset_0x00124A
		btst	#button_B,(Control_Ports_Buffer_Data).w          ; $FFFFF604
		bne.s	Pause_SlowMotion                       ; Offset_0x001292
		btst	#button_C,(Control_Ports_Buffer_Data+1).w    ; $FFFFF605
		bne.s	Pause_SlowMotion                       ; Offset_0x001292
Pause_CheckStart:                                              ; Offset_0x00125A
		move.b	(Control_Ports_Buffer_Data+1).w,d0      ; $FFFFF605
		or.b	(Control_Ports_Buffer_Data+3).w,d0      ; $FFFFF607
		andi.b	#button_start_mask,d0
		beq.s	Pause_Loop                             ; Offset_0x001228
Offset_0x001268:
		stopZ80
		move.b	#$80,(Z80_RAM_Start+zPauseFlag)
		startZ80
Unpause:                                                       ; Offset_0x00128A
		move.w	#0,(Pause_Status).w                     ; $FFFFF63A
Pause_DoNothing:                                               ; Offset_0x001290
		rts
Pause_SlowMotion:                                              ; Offset_0x001292
		move.w	#1,(Pause_Status).w                     ; $FFFFF63A
		stopZ80
		move.b	#$80,(Z80_RAM_Start+zPauseFlag)
		startZ80
		rts
;===============================================================================
; Rotina para tratar o Pause
; <<<-
;===============================================================================


; ===========================================================================
; Begin graphics-related routines
; ---------------------------------------------------------------------------
; Subroutine to transfer a plane map to VRAM
; ---------------------------------------------------------------------------

; control register:
;    CD1 CD0 A13 A12 A11 A10 A09 A08     (D31-D24)
;    A07 A06 A05 A04 A03 A02 A01 A00     (D23-D16)
;     ?   ?   ?   ?   ?   ?   ?   ?      (D15-D8)
;    CD5 CD4 CD3 CD2  ?   ?  A15 A14     (D7-D0)
;
;	A00-A15 - address
;	CD0-CD3 - code
;	CD4 - 1 if VRAM copy DMA mode. 0 otherwise.
;	CD5 - DMA operation
;
;	Bits CD3-CD0:
;	0000 - VRAM read
;	0001 - VRAM write
;	0011 - CRAM write
;	0100 - VSRAM read
;	0101 - VSRAM write
;	1000 - CRAM read
;
; d0 = control register
; d1 = width
; d2 = heigth
; a1 = source address

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0012BC: ShowVDPGraphics:
PlaneMapToVRAM_H40:
		lea	(VDP_Data_Port).l,a6
		move.l	#$800000,d4
; Offset_0x0012C8: ShowVDPGraphics_LineLoop:
.repeatPerLine:
		move.l	d0,VDP_Control_Port-VDP_Data_Port(a6)
		move.w	d1,d3
; Offset_0x0012CE: ShowVDPGraphics_TileLoop:
.repeatPerTile:
		move.w	(a1)+,(a6)		; from source address to destination in VDP
		dbf	d3,.repeatPerTile	; next tile
		add.l	d4,d0			; increase destination address by $80 (1 line)
		dbf	d2,.repeatPerLine	; next line
		rts
; End of function PlaneMapToVRAM_H40

; ---------------------------------------------------------------------------
; Same as above, but for a plane that is double the size
; (formerly used for Sonic 2 Special Stages)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0012DC: ShowVDPGraphics_SS:
PlaneMapToVRAM_H80:
		lea	(VDP_Data_Port).l,a6
		move.l	#$1000000,d4
; Offset_0x0012E8: ShowVDPGraphicsSS_TileLoop:
.repeatPerLine:
		move.l	d0,VDP_Control_Port-VDP_Data_Port(a6)
		move.w	d1,d3
; Offset_0x0012EE: ShowVDPGraphicsSS_LineLoop:
.repeatPerTile:
		move.w	(a1)+,(a6)		; from source address to destination in VDP
		dbf	d3,.repeatPerTile	; next tile
		add.l	d4,d0			; increase destination address by $100 (1 line)
		dbf	d2,.repeatPerLine	; next line
		rts
; End of function PlaneMapToVRAM_H80_SpecialStage

; ---------------------------------------------------------------------------
; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
; to be issued the next time ProcessDMAQueue is called.
; Can be called a maximum of 18 times before the buffer needs to be cleared
; by issuing the commands (this subroutine DOES check for overflow)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0012FC: DMA_68KtoVRAM: Add_To_DMA_Queue:
QueueDMATransfer:
		move.l	(DMA_Buffer_List_End).w,a1
		cmpa.w	#DMA_Buffer_List_End,a1	; is the queue full?
		beq.s	QueueDMATransfer_Done		; if yes, branch

		; piece together some VDP commands and store them for later...
		move.w	#$9300,d0		; command to specify DMA transfer length & $00FF
		move.b	d3,d0
		move.w	d0,(a1)+		; store command

		move.w	#$9400,d0		; command to specify DMA transfer length &FF00
		lsr.w	#8,d3
		move.b	d3,d0
		move.w	d0,(a1)+		; store command

		move.w	#$9500,d0		; command to specify source address & $0001FE
		lsr.l	#1,d1
		move.b	d1,d0
		move.w	d0,(a1)+		; store command

		move.w	#$9600,d0		; command to specify source address & $01FE00
		lsr.l	#8,d1
		move.b	d1,d0
		move.w	d0,(a1)+		; store command

		move.w	#$9700,d0		; command to specify source address & $FE0000
		lsr.l	#8,d1
		andi.b	#$7F,d1			; this instruction safely allows source to be in RAM; Sonic 2 lacks this
		move.b	d1,d0
		move.w	d0,(a1)+		; store command

		andi.l	#$FFFF,d2		; command to specify destination address and begin DMA
		lsl.l	#2,d2
		lsr.w	#2,d2
		swap	d2
		ori.l	#$40000080,d2		; set bits to specify VRAM transfer
		move.l	d2,(a1)+		; store command

		move.l	a1,(DMA_Buffer_List_End).w	; set the next free slot address
		cmpa.w	#DMA_Buffer_List_End,a1		; has the end of the queue been reached?
		beq.s	QueueDMATransfer_Done		; if yes, branch
		move.w	#0,(a1)				; put a stop token at the end of the used part of the buffer
; Offset_0x00135C:
QueueDMATransfer_Done:
		rts
; End of function QueueDMATransfer

; ---------------------------------------------------------------------------
; Subroutine for issuing all VDP commands that were queued
; (by earlier calls to QueueDMATransfer)
; Resets the queue when it's done
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00135E Process_DMA: Process_DMA_Queue:
ProcessDMAQueue:
		lea	(VDP_Control_Port).l,a5
		lea	(DMA_Buffer_List).w,a1
; Offset_0x001368: Process_DMA_Loop:
ProcessDMAQueue_Loop:
		move.w	(a1)+,d0
		beq.s	ProcessDMAQueue_Done	; branch if we reached a stop token
		; issue a set of VDP commands...
		move.w	d0,(a5)			; transfer length
		move.w	(a1)+,(a5)		; transfer length
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; destination
		move.w	(a1)+,(a5)		; destination
		cmpa.w	#DMA_Buffer_List_End,a1	; has the end of the queue been reached?
		bne.s	ProcessDMAQueue_Loop	; if not, branch
; Offset_0x001380: Process_DMA_End:
ProcessDMAQueue_Done:
		move.w	#0,(DMA_Buffer_List).w
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w
		rts
; End of function ProcessDMAQueue


;===============================================================================
; Rotina de descompress�o no formato Nemesis
; ->>>
;===============================================================================
NemesisDec:                                                    ; Offset_0x001390
		movem.l	D0-D7/A0/A1/A3-A5, -(sp)
		lea	(NemesisDec_Output).l,a3                ; Offset_0x001452
		lea	(VDP_Data_Port),a4                          ; $00C00000
		bra.s	NemesisDec_Main                        ; Offset_0x0013AC
;-------------------------------------------------------------------------------
NemesisDecToRAM:                                               ; Offset_0x0013A2
		movem.l	D0-D7/A0/A1/A3-A5, -(sp)
		lea	(NemesisDec_OutputToRAM).l,a3           ; Offset_0x001468
NemesisDec_Main:                                               ; Offset_0x0013AC
		lea	(NemesisDec_Data_Buffer).w,a1               ; $FFFFAA00
		move.w	(A0)+,d2
		lsl.w	#1,d2
		bcc.s	Offset_0x0013BA
		; Points A3 to NemesisDec_Output_XOR if A3 = NemesisDec_Output or
		; Points A3 to NemesisDec_OutputRAM_XOR if A3 = NemesisDec_OutputRAM
		adda.w	#NemesisDec_Output_XOR-NemesisDec_Output,a3   ; $000A
Offset_0x0013BA:
		lsl.w	#2,d2
		move.w	D2,a5
		moveq	#8,d3
		moveq	#0,d2
		moveq	#0,d4
		bsr.w	NemesisDec_4                           ; Offset_0x00147E
		move.b	(A0)+,d5
		asl.w	#8,d5
		move.b	(A0)+,d5
		move.w	#$10,d6
		bsr.s	NemesisDec_2                           ; Offset_0x0013DA
		movem.l	(sp)+,d0-D7/A0/A1/A3-A5
		rts
;-------------------------------------------------------------------------------
NemesisDec_2:                                                  ; Offset_0x0013DA
		move.w	D6,d7
		subq.w	#8,d7
		move.w	D5,d1
		lsr.w	D7,d1
		cmpi.b	#$FC,d1
		bcc.s	Offset_0x001426
		andi.w	#$FF,d1
		add.w	D1,d1
		move.b	(A1,d1),d0
		ext.w	D0
		sub.w	D0,d6
		cmpi.w	#9,d6
		bcc.s	Offset_0x001402
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(A0)+,d5
Offset_0x001402:
		move.b	1(A1,d1),d1
		move.w	D1,d0
		andi.w	#$F,d1
		andi.w	#$F0,d0
NemesisDec_SubType:                                            ; Offset_0x001410
		lsr.w	#4,d0
NemesisDec_Loop_SubType:                                       ; Offset_0x001412
		lsl.l	#4,d4
		or.b	D1,d4
		subq.w	#1,d3
		bne.s	Offset_0x001420
		; A3 Contains one of the decompression routines in Nemesis format.
		; ( NemesisDec_Output_XOR or NemesisDec_OutputRAM_XOR )
		jmp	(A3)
;-------------------------------------------------------------------------------
NemesisDec_3:                                                  ; Offset_0x00141C
		moveq	#0,d4
		moveq	#8,d3
Offset_0x001420:
		dbf	D0, NemesisDec_Loop_SubType            ; Offset_0x001412
		bra.s	NemesisDec_2
;-------------------------------------------------------------------------------
Offset_0x001426:
		subq.w	#6,d6
		cmpi.w	#9,d6
		bcc.s	Offset_0x001434
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(A0)+,d5
Offset_0x001434:
		subq.w	#7,d6
		move.w	D5,d1
		lsr.w	D6,d1
		move.w	D1,d0
		andi.w	#$F,d1
		andi.w	#$70,d0
		cmpi.w	#9,d6
		bcc.s	NemesisDec_SubType                     ; Offset_0x001410
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(A0)+,d5
		bra.s	NemesisDec_SubType                     ; Offset_0x001410
;-------------------------------------------------------------------------------
NemesisDec_Output:                                             ; Offset_0x001452
		move.l	D4,(A4)
		subq.w	#1,a5
		move.w	A5,d4
		bne.s	NemesisDec_3                           ; Offset_0x00141C
		rts
;-------------------------------------------------------------------------------
NemesisDec_Output_XOR:                                         ; Offset_0x00145C
		eor.l	D4,d2
		move.l	D2,(A4)
		subq.w	#1,a5
		move.w	A5,d4
		bne.s	NemesisDec_3                           ; Offset_0x00141C
		rts
;-------------------------------------------------------------------------------
NemesisDec_OutputToRAM:                                        ; Offset_0x001468
		move.l	D4,(A4)+
		subq.w	#1,a5
		move.w	A5,d4
		bne.s	NemesisDec_3                           ; Offset_0x00141C
		rts
;-------------------------------------------------------------------------------
NemesisDec_Output_XORToRAM:                                    ; Offset_0x001472
		eor.l	D4,d2
		move.l	D2,(A4)+
		subq.w	#1,a5
		move.w	A5,d4
		bne.s	NemesisDec_3                           ; Offset_0x00141C
		rts
;-------------------------------------------------------------------------------
NemesisDec_4:                                                  ; Offset_0x00147E
		move.b	(A0)+,d0
Offset_0x001480:
		cmpi.b	#$FF,d0
		bne.s	Offset_0x001488
		rts
Offset_0x001488:
		move.w	D0,d7
Offset_0x00148A:
		move.b	(A0)+,d0
		cmpi.b	#$80,d0
		bcc.s	Offset_0x001480
		move.b	D0,d1
		andi.w	#$F,d7
		andi.w	#$70,d1
		or.w	D1,d7
		andi.w	#$F,d0
		move.b	D0,d1
		lsl.w	#8,d1
		or.w	D1,d7
		moveq	#8,d1
		sub.w	D0,d1
		bne.s	Offset_0x0014B8
		move.b	(A0)+,d0
		add.w	D0,d0
		move.w	D7,(A1,d0)
		bra.s	Offset_0x00148A
Offset_0x0014B8:
		move.b	(A0)+,d0
		lsl.w	D1,d0
		add.w	D0,d0
		moveq	#1,d5
		lsl.w	D1,d5
		subq.w	#1,d5
Offset_0x0014C4:
		move.w	D7,(A1,d0)
		addq.w	#2,d0
		dbf	D5, Offset_0x0014C4
		bra.s	Offset_0x00148A
;===============================================================================
; Rotina de descompress�o no formato Nemesis
; <<<-
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues in RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0014D0:
LoadPLC:
		movem.l	a1-a2,-(sp)
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		lea	(PLC_Data_Buffer).w,a2
; Offset_0x0014E8:
.findFreeSlot:
		tst.l	(a2)					; is the current slot on the queue free?
		beq.s	.getPieceCount				; if yes, branch
		addq.w	#6,a2					; otherwise skip past and check the next slot
		bra.s	.findFreeSlot
; ---------------------------------------------------------------------------
; Offset_0x0014F0:
.getPieceCount:
		move.w	(a1)+,d0
		bmi.s	.done
; Offset_0x0014F4:
.queuePieces:
		move.l	(a1)+,(a2)+				; store compressed data location
		move.w	(a1)+,(a2)+				; store destination in VRAM
		dbf	d0,.queuePieces
; Offset_0x0014FC:
.done:
		movem.l	(sp)+,a1-a2
		rts
; End of function LoadPLC

; ---------------------------------------------------------------------------
; Subroutine to load a pattern load cue directly, rather than from an index
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001502: LoadPLC_A1:
LoadPLC_Direct:
		lea	(PLC_Data_Buffer).w,a2
; Offset_0x001506:
.findFreeSlot:
		tst.l	(a2)					; is the current slot on the queue free?
		beq.s	.getPieceCount				; if yes, branch
		addq.w	#6,a2					; otherwise skip past and check the next slot
		bra.s	.findFreeSlot
; ---------------------------------------------------------------------------
; Offset_0x00150E:
.getPieceCount:
		move.w	(a1)+,d0
		bmi.s	.done
; Offset_0x001512:
.queuePieces:
		move.l	(a1)+,(a2)+				; store compressed data location
		move.w	(a1)+,(a2)+				; store destination in VRAM
		dbf	d0,.queuePieces
; Offset_0x00151A:
.done:
		rts
; End of function LoadPLC_Direct

; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues after clearing it first
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00151C:
LoadPLC2:
		movem.l	a1-a2,-(sp)
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		bsr.s	ClearPLC
		lea	(PLC_Data_Buffer).w,a2
		move.w	(a1)+,d0
		bmi.s	.done
; Offset_0x00153A:
.queuePieces:
		move.l	(a1)+,(a2)+				; store compressed data location
		move.w	(a1)+,(a2)+				; store destination in VRAM
		dbf	d0,.queuePieces
; Offset_0x001542:
.done:
		movem.l	(sp)+,a1-a2
		rts
; End of function LoadPLC2

; ---------------------------------------------------------------------------
; Subroutine to clear the pattern load cue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001548:
ClearPLC:
		lea	(PLC_Data_Buffer).w,a2
		moveq	#bytesToLcnt(PLC_Data_Buffer_End-PLC_Data_Buffer),d0

Offset_0x00154E:
		clr.l	(a2)+
		dbf	d0,Offset_0x00154E
		rts
; End of function ClearPLC

; ---------------------------------------------------------------------------
; Subroutine to decompress graphics from the pattern load cue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001556: RunPLC:
RunPLC_RAM:
		tst.l	(PLC_Data_Buffer).w
		beq.s	Offset_0x0015AC
		tst.w	(PLC_Data_Count).w
		bne.s	Offset_0x0015AC
		move.l	(PLC_Data_Buffer).w,a0
		lea	(NemesisDec_Output).l,a3
		nop
		lea	(NemesisDec_Data_Buffer).w,a1
		move.w	(a0)+,d2
		bpl.s	Offset_0x00157A
		adda.w	#NemesisDec_Output_XOR-NemesisDec_Output,a3

Offset_0x00157A:
		andi.w	#$7FFF,d2
	if ~~FixBugs
		move.w	d2,(PLC_Data_Count).w
	endif
		bsr.w	NemesisDec_4
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(a0)+,d5
		moveq	#$10,d6
		moveq	#0,d0
		move.l	a0,(PLC_Data_Buffer).w
		move.l	a3,(Nemesis_Decomp_Vars).w
		move.l	d0,(Nemesis_Repeat_Count).w
		move.l	d0,(Nemesis_Palette_Index).w
		move.l	d0,(Nemesis_Previous_Row).w
		move.l	d5,(Nemesis_Data_Word).w
		move.l	d6,(Nemesis_Shift_Value).w
	if FixBugs
		move.w	d2,(PLC_Data_Count).w
	endif

Offset_0x0015AC:
		rts
; End of function RunPLC_RAM

; ---------------------------------------------------------------------------
; Subroutine to use graphics listed in a pattern load cue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0015AE: Process_Nemesis_Queue:
ProcessDPLC:
		tst.w	(PLC_Data_Count).w
		beq.W	Offset_0x001646
		move.w	#6,(Nemesis_Frame_Pattern_Left).w
		moveq	#0,d0
		move.w	(Nemesis_Decomp_Destination).w,d0
		addi.w	#$C0,(Nemesis_Decomp_Destination).w
		bra.s	ProcessDPLC_Main
; ---------------------------------------------------------------------------
; Offset_0x0015CA: Process_Nemesis_Queue_2:
ProcessDPLC2:
		tst.w	(PLC_Data_Count).w
		beq.s	Offset_0x001646
		move.w	#3,(Nemesis_Frame_Pattern_Left).w
		moveq	#0,d0
		move.w	(Nemesis_Decomp_Destination).w,d0
		addi.w	#$60,(Nemesis_Decomp_Destination).w
; Offset_0x0015E2:
ProcessDPLC_Main:
		lea	(VDP_Control_Port).l,a4
		lsl.l	#2,d0		; set up target VRAM address
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,(a4)
		subq.w	#4,a4
		move.l	(PLC_Data_Buffer).w,a0
		move.l	(Nemesis_Decomp_Vars).w,a3
		move.l	(Nemesis_Repeat_Count).w,d0
		move.l	(Nemesis_Palette_Index).w,d1
		move.l	(Nemesis_Previous_Row).w,d2
		move.l	(Nemesis_Data_Word).w,d5
		move.l	(Nemesis_Shift_Value).w,d6
		lea	(NemesisDec_Data_Buffer).w,a1

Offset_0x001616:
		move.w	#8,a5
		bsr.w	NemesisDec_3
		subq.w	#1,(PLC_Data_Count).w
		beq.s	ProcessDPLC_Pop
		subq.w	#1,(Nemesis_Frame_Pattern_Left).w
		bne.s	Offset_0x001616
		move.l	a0,(PLC_Data_Buffer).w
		move.l	a3,(Nemesis_Decomp_Vars).w
		move.l	d0,(Nemesis_Repeat_Count).w
		move.l	d1,(Nemesis_Palette_Index).w
		move.l	d2,(Nemesis_Previous_Row).w
		move.l	d5,(Nemesis_Data_Word).w
		move.l	d6,(Nemesis_Shift_Value).w

Offset_0x001646:
		rts
; ===========================================================================
; Pop one request off the buffer so that the next one can be filled.
;
; Note that this does not pop the 16th PLC entry correctly, meaning that the
; game will be stuck decompressing it forever if it gets used,although this
; might be an intentional optimization by treating it as a dummy slot.
; Offset_0x001648:
ProcessDPLC_Pop:
		lea	(PLC_Data_Buffer).w,a0
		moveq	#bytesToLcnt(PLC_Data_Buffer_Only_End-PLC_Data_Buffer-6),d0

Offset_0x00164E:
		move.l	6(a0),(a0)+		; shift contents of PLC buffer up 6 bytes
		dbf	d0,Offset_0x00164E	; repeat until (almost) everything has been shifted
		rts
; End of function ProcessDPLC

; ---------------------------------------------------------------------------
; Subroutine to execute a pattern load cue directly from the ROM rather than
; loading them into the queue first; unused here and in S3 final, only ever
; used for Blue Spheres in S&K, which also removed some of the code
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001658:
RunPLC_ROM:
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,d1
; Offset_0x00166A:
RunPLC_ROM_Loop:
		move.l	(a1)+,a0
		moveq	#0,d0
		move.w	(a1)+,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,(VDP_Control_Port).l
		bsr.w	NemesisDec
		dbf	d1,RunPLC_ROM_Loop
		rts
; End of function RunPLC_ROM

;===============================================================================
; Rotina de descompress�o no formato Enigma
; ->>>
;===============================================================================
EnigmaDec:                                                     ; Offset_0x00168A
		movem.l	D0-D7/A1-A5, -(sp)
		move.w	D0,a3
		move.b	(A0)+,d0
		ext.w	D0
		move.w	D0,a5
		move.b	(A0)+,d4
		lsl.b	#3,d4
		move.w	(A0)+,a2
		adda.w	A3,a2
		move.w	(A0)+,a4
		adda.w	A3,a4
		move.b	(A0)+,d5
		asl.w	#8,d5
		move.b	(A0)+,d5
		moveq	#$10,d6
EnigmaDec_Loop:                                                ; Offset_0x0016AA
		moveq	#7,d0
		move.w	D6,d7
		sub.w	D0,d7
		move.w	D5,d1
		lsr.w	D7,d1
		andi.w	#$7F,d1
		move.w	D1,d2
		cmpi.w	#$40,d1
		bcc.s	Offset_0x0016C4
		moveq	#6,d0
		lsr.w	#1,d2
Offset_0x0016C4:
		bsr.w	Enigma_Dec_Fetch_Byte                  ; Offset_0x0017F8
		andi.w	#$F,d2
		lsr.w	#4,d1
		add.w	D1,d1
		jmp	Enigma_Dec_Routines(pc,d1.w)            ; Offset_0x001720
;-------------------------------------------------------------------------------
Enigma_Dec_00:                                                 ; Offset_0x0016D4
		move.w	A2,(A1)+
		addq.w	#1,a2
		dbf	D2, Enigma_Dec_00                      ; Offset_0x0016D4
		bra.s	EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_01:                                                 ; Offset_0x0016DE
		move.w	A4,(A1)+
		dbf	D2, Enigma_Dec_01                      ; Offset_0x0016DE
		bra.s	EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_02:                                                 ; Offset_0x0016E6
		bsr.w	Enigma_Dec_Fetch                       ; Offset_0x001748
Offset_0x0016EA:
		move.w	D1,(A1)+
		dbf	D2, Offset_0x0016EA
		bra.s	EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_03:                                                 ; Offset_0x0016F2
		bsr.w	Enigma_Dec_Fetch                       ; Offset_0x001748
Offset_0x0016F6:
		move.w	D1,(A1)+
		addq.w	#1,d1
		dbf	D2, Offset_0x0016F6
		bra.s	EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_04:                                                 ; Offset_0x001700
		bsr.w	Enigma_Dec_Fetch                       ; Offset_0x001748
Offset_0x001704:
		move.w	D1,(A1)+
		subq.w	#1,d1
		dbf	D2, Offset_0x001704
		bra.s	EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_05:                                                 ; Offset_0x00170E
		cmpi.w	#$F,d2
		beq.s	Enigma_Dec_Finalize                    ; Offset_0x001730
Offset_0x001714:
		bsr.w	Enigma_Dec_Fetch                       ; Offset_0x001748
		move.w	D1,(A1)+
		dbf	D2, Offset_0x001714
		bra.s	EnigmaDec_Loop                         ; Offset_0x0016AA
;-------------------------------------------------------------------------------
Enigma_Dec_Routines                                            ; Offset_0x001720
		bra.s	Enigma_Dec_00                          ; Offset_0x0016D4
		bra.s	Enigma_Dec_00                          ; Offset_0x0016D4
		bra.s	Enigma_Dec_01                          ; Offset_0x0016DE
		bra.s	Enigma_Dec_01                          ; Offset_0x0016DE
		bra.s	Enigma_Dec_02                          ; Offset_0x0016E6
		bra.s	Enigma_Dec_03                          ; Offset_0x0016F2
		bra.s	Enigma_Dec_04                          ; Offset_0x001700
		bra.s	Enigma_Dec_05                          ; Offset_0x00170E
;-------------------------------------------------------------------------------
Enigma_Dec_Finalize:                                           ; Offset_0x001730
		subq.w	#1,a0
		cmpi.w	#$10,d6
		bne.s	Offset_0x00173A
		subq.w	#1,a0
Offset_0x00173A:
		move.w	A0,d0
		lsr.w	#1,d0
		bcc.s	Offset_0x001742
		addq.w	#1,a0
Offset_0x001742:
		movem.l	(sp)+,d0-D7/A1-A5
		rts
;-------------------------------------------------------------------------------
Enigma_Dec_Fetch:                                              ; Offset_0x001748
		move.w	A3,d3
		move.b	D4,d1
		add.b	D1,d1
		bcc.s	Offset_0x00175A
		subq.w	#1,d6
		btst	D6,d5
		beq.s	Offset_0x00175A
		ori.w	#$8000,d3
Offset_0x00175A:
		add.b	D1,d1
		bcc.s	Offset_0x001768
		subq.w	#1,d6
		btst	D6,d5
		beq.s	Offset_0x001768
		addi.w	#$4000,d3
Offset_0x001768:
		add.b	D1,d1
		bcc.s	Offset_0x001776
		subq.w	#1,d6
		btst	D6,d5
		beq.s	Offset_0x001776
		addi.w	#$2000,d3
Offset_0x001776:
		add.b	D1,d1
		bcc.s	Offset_0x001784
		subq.w	#1,d6
		btst	D6,d5
		beq.s	Offset_0x001784
		ori.w	#$1000,d3
Offset_0x001784:
		add.b	D1,d1
		bcc.s	Offset_0x001792
		subq.w	#1,d6
		btst	D6,d5
		beq.s	Offset_0x001792
		ori.w	#$800,d3
Offset_0x001792:
		move.w	D5,d1
		move.w	D6,d7
		sub.w	A5,d7
		bcc.s	Offset_0x0017C2
		move.w	D7,d6
		addi.w	#$10,d6
		neg.w   D7
		lsl.w	D7,d1
		move.b	(A0),d5
		rol.b	D7,d5
		add.w	D7,d7
		and.w	Enigma_Dec_Mask-2(pc,d7.w),d5        ; Offset_0x0017D6
		add.w	D5,d1
Offset_0x0017B0:
		move.w	A5,d0
		add.w	D0,d0
		and.w	Enigma_Dec_Mask-2(pc,d0.w),d1        ; Offset_0x0017D6
		add.w	D3,d1
		move.b	(A0)+,d5
		lsl.w	#8,d5
		move.b	(A0)+,d5
		rts
Offset_0x0017C2:
		beq.s	Offset_0x0017D4
		lsr.w	D7,d1
		move.w	A5,d0
		add.w	D0,d0
		and.w	Enigma_Dec_Mask-2(pc,d0.w),d1        ; Offset_0x0017D6
		add.w	D3,d1
		move.w	A5,d0
		bra.s	Enigma_Dec_Fetch_Byte                  ; Offset_0x0017F8
Offset_0x0017D4:
		moveq	#$10,d6
		bra.s	Offset_0x0017B0
;-------------------------------------------------------------------------------
Enigma_Dec_Mask:                                               ; Offset_0x0017D8
		dc.w	$0001, $0003, $0007, $000F, $001F, $003F, $007F, $00FF
		dc.w	$01FF, $03FF, $07FF, $0FFF, $1FFF, $3FFF, $7FFF, $FFFF
;-------------------------------------------------------------------------------
Enigma_Dec_Fetch_Byte:                                         ; Offset_0x0017F8
		sub.w	D0,d6
		cmpi.w	#9,d6
		bcc.s	Offset_0x001806
		addq.w	#8,d6
		asl.w	#8,d5
		move.b	(A0)+,d5
Offset_0x001806:
		rts
;===============================================================================
; Rotina de descompress�o no formato Enigma
; <<<-
;===============================================================================

;===============================================================================
; Rotina de descompress�o no formato Kosinski
; ->>>
;===============================================================================
KosinskiDec:                                                   ; Offset_0x001808
		subq.l	#2,sp
		move.b	(A0)+,1(sp)
		move.b	(A0)+,(sp)
		move.w	(sp),D5
		moveq	#$F,D4
Offset_0x001814:
		lsr.w	#1,D5
		move	SR,D6
		dbf	D4, Offset_0x001826
		move.b	(A0)+,1(sp)
		move.b	(A0)+,(sp)
		move.w	(sp),D5
		moveq	#$F,D4
Offset_0x001826:
		move	D6,CCR
		bcc.s	Offset_0x00182E
		move.b	(A0)+,(A1)+
		bra.s	Offset_0x001814
Offset_0x00182E:
		moveq	#0,D3
		lsr.w	#1,D5
		move	SR,D6
		dbf	D4,Offset_0x001842
		move.b	(A0)+,1(sp)
		move.b	(A0)+,(sp)
		move.w	(sp),D5
		moveq	#$F,D4
Offset_0x001842:
		move	D6,CCR
		bcs.s	Offset_0x001872
		lsr.w	#1,D5
		dbf	D4,Offset_0x001856
		move.b	(A0)+,1(sp)
		move.b	(A0)+,(sp)
		move.w	(sp),D5
		moveq	#$F,D4
Offset_0x001856:
		roxl.w	#1,D3
		lsr.w	#1,D5
		dbf	D4,Offset_0x001868
		move.b	(A0)+,1(sp)
		move.b	(A0)+,(sp)
		move.w	(sp),D5
		moveq	#$F,D4
Offset_0x001868:
		roxl.w	#1,D3
		addq.w	#1,D3
		moveq	#-1,D2
		move.b	(A0)+,D2
		bra.s	Offset_0x001888
Offset_0x001872:
		move.b	(A0)+,D0
		move.b	(A0)+,D1
		moveq	#-1,D2
		move.b	D1,D2
		lsl.w	#5,D2
		move.b	D0,D2
		andi.w	#7,D1
		beq.s	Offset_0x001894
		move.b	D1,D3
		addq.w	#1,D3
Offset_0x001888:
		move.b	(A1,D2),D0
		move.b	D0,(A1)+
		dbf	D3,Offset_0x001888
		bra.s	Offset_0x001814
Offset_0x001894:
		move.b	(A0)+,D1
		beq.s	Offset_0x0018A4
		cmpi.b	#1,D1
		beq.w	Offset_0x001814
		move.b	D1,D3
		bra.s	Offset_0x001888
Offset_0x0018A4:
		addq.l	#2,sp
		rts
;===============================================================================
; Rotina de descompress�o no formato Kosinski
; <<<-
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; Adds a Kosinski Moduled archive to the module queue
; Inputs:
; a1 = address of the archive
; d2 = destination in VRAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0018A8: Kosinski_Moduled_Dec:
Queue_Kos_Module:
		lea	(Kos_module_queue).w,a2
		tst.l	(a2)			; is the first slot free?
		beq.s	Process_Kos_Module_Queue_Init		; if yes, branch
		addq.w	#6,a2			; otherwise, check next slot
; Offset_0x0018B2:
.findFreeSlot:
		tst.l	(a2)
		beq.s	.freeSlotFound
		addq.w	#6,a2
		bra.s	.findFreeSlot
; ---------------------------------------------------------------------------
; Offset_0x0018BA:
.freeSlotFound:
		move.l  a1,(a2)+		; store source address
		move.w  d2,(a2)+		; store destination VRAM address
		rts
; End of function Queue_Kos_Module

; ---------------------------------------------------------------------------
; Initializes processing of the first module on the queue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0018C0:
Process_Kos_Module_Queue_Init:
		move.w	(a1)+,d3		; get uncompressed size
		cmpi.w	#$A000,d3
		bne.s	.gotSize
		move.w	#$8000,d3		; $A000 means $8000 for some reason
; Offset_0x0018CC:
.gotSize:
		lsr.w	#1,d3
		move.w	d3,d0
		rol.w	#5,d0
		andi.w	#$1F,d0			; get number of complete modules
		move.b	d0,(Kos_modules_left).w
		andi.l	#$7FF,d3		; get size of last module in words
		bne.s	.gotLeftover		; branch if it's non-zero
		subq.b	#1,(Kos_modules_left).w	; otherwise decrement the number of modules
		move.l	#$800,d3	; and take the size of the last module to be $800 words
; Offset_0x0018EC:
.gotLeftover:
		move.w	d3,(Kos_last_module_size).w
		move.w	d2,(Kos_module_destination).w
		move.l	a1,(Kos_module_queue).w
		addq.b	#1,(Kos_modules_left).w	; store total number of modules
		rts
; End of function Process_Kos_Module_Queue_Init

; ---------------------------------------------------------------------------
; Processes the first module on the queue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0018FE: Process_Kosinski_Queue:
Process_Kos_Module_Queue:
		tst.b	(Kos_modules_left).w
		bne.s	.modulesLeft
; Offset_0x001904:
.done:
		rts
; ---------------------------------------------------------------------------
; Offset_0x001906:
.modulesLeft:
		bmi.s	.decompressionStarted
		cmpi.w	#(Kos_decomp_queue_End-Kos_decomp_queue)/8,(Kos_decomp_queue_count).w
		bcc.s	.done					; branch if the Kosinski decompression queue is full
		move.l	(Kos_module_queue).w,a1
		lea	(Kosinski_Decomp_Buffer).w,a2
		bsr.w	Queue_Kos				; add current module to decompression queue
		ori.b	#$80,(Kos_modules_left).w		; and set bit to signify decompression in progress
		rts
; ---------------------------------------------------------------------------
; Offset_0x001924:
.decompressionStarted:
		tst.w	(Kos_decomp_queue_count).w
		bne.s	.done					; branch if the decompression isn't complete

		; otherwise, DMA the decompressed data to VRAM
		andi.b	#$7F,(Kos_modules_left).w
		move.l	#$800,d3
		subq.b	#1,(Kos_modules_left).w
		bne.s	.skip					; branch if it isn't the last module
		move.w	(Kos_last_module_size).w,d3
; Offset_0x001940:
.skip:
		move.w	(Kos_module_destination).w,d2
		move.w	d2,d0
		add.w	d3,d0
		add.w	d3,d0
		move.w	d0,(Kos_module_destination).w		; set new destination
		move.l	(Kos_module_queue).w,d0
		move.l	(Kos_decomp_queue).w,d1
		sub.l	d1,d0
		andi.l	#$F,d0
		add.l	d0,d1					; round to the nearest $10 boundary
		move.l	d1,(Kos_module_queue).w		; and set new source
		move.l	#Kosinski_Decomp_Buffer,d1
		andi.l	#$FFFFFF,d1
		jsr	(QueueDMATransfer).l
		tst.b	(Kos_modules_left).w
		bne.s	.exit					; return if this wasn't the last module
		; otherwise, shift all entries up
		lea	(Kos_module_queue).w,a0
		lea	(Kos_module_queue+6).w,a1
	rept (Kos_module_queue_End-(Kos_module_queue+6))/6
		move.l	(a1)+,(a0)+
		move.w	(a1)+,(a0)+
	endm
		move.l	#0,(a0)+				; and mark the last slot as free
		move.w	#0,(a0)+
		move.l	(Kos_module_queue).w,d0
		beq.s	.exit					; return if the queue is now empty
		move.l	d0,a1
		move.w	(Kos_module_destination).w,d2
		jmp	(Process_Kos_Module_Queue_Init).l
; Offset_0x0019AC:
.exit:
		rts
; End of function Process_Kos_Module_Queue

; ---------------------------------------------------------------------------
; Adds Kosinski-compressed data to the decompression queue
; Inputs:
; a1 = compressed data address
; a2 = decompression destination in RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0019AE: Update_Kosinski_Queue_Count:
Queue_Kos:
		move.w	(Kos_decomp_queue_count).w,d0
		lsl.w	#3,d0
		lea	(Kos_decomp_queue).w,a3
		move.l	a1,(a3,d0.w)				; store source
		move.l	a2,4(a3,d0.w)				; store destination
		addq.w	#1,(Kos_decomp_queue_count).w
		rts
; End of function Queue_Kos

; ---------------------------------------------------------------------------
; Checks if V-int occured in the middle of Kosinski queue processing
; and stores the location from which processing is to resume if it did
; ---------------------------------------------------------------------------

; Offset_0x0019C6: Set_Kosinski_Bookmark:
Set_Kos_Bookmark:
		tst.w	(Kos_decomp_queue_count).w
		bpl.s	.return					; branch if decompression wasn't in progress
		move.l	$42(sp),d0				; check address V-int is supposed to return to
		cmpi.l	#Process_Kos_Queue,d0
		bcs.s	.return
		cmpi.l	#Process_Kos_Queue_Done,d0
		bcc.s	.return
		move.l	$42(sp),(Kos_decomp_bookmark).w
		move.l	#Backup_Kos_Registers,$42(sp)	; force V-int to return here instead if needed
; Offset_0x0019EE:
.return:
		rts
; End of function Set_Kos_Bookmark

; ---------------------------------------------------------------------------
; Processes the first entry in the Kosinski decompression queue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0019F0: Process_Kosinski_Queue_Main:
Process_Kos_Queue:
		tst.w	(Kos_decomp_queue_count).w
		beq.w	Process_Kos_Queue_Done
		bmi.w	Restore_Kos_Bookmark			; branch if decompression was interrupted by V-int

		ori.w	#$8000,(Kos_decomp_queue_count).w	; set sign bit to signify decompression in progress
		move.l	(Kos_decomp_queue).w,a0
		move.l	(Kos_decomp_destination).w,a1

		; what follows is identical to the normal Kosinski decompressor except for using Kos_description_field instead of the stack
		lea	(Kos_description_field).w,a2
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4
; Offset_0x001A18:
Process_Kos_Queue_Loop:
		lsr.w	#1,d5
		move	sr,d6
		dbf	d4,Process_Kos_Queue_ChkBit
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4
; Offset_0x001A2A:
Process_Kos_Queue_ChkBit:
		move	d6,ccr
		bcc.s	Process_Kos_Queue_RLE
		move.b	(a0)+,(a1)+
		bra.s	Process_Kos_Queue_Loop
; ---------------------------------------------------------------------------
; Offset_0x001A32:
Process_Kos_Queue_RLE:
		moveq	#0,d3
		lsr.w	#1,d5
		move	sr,d6
		dbf	d4,Process_Kos_Queue_ChkBit2
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4
; Offset_0x001A46:
Process_Kos_Queue_ChkBit2:
		move	d6,ccr
		bcs.s	Process_Kos_Queue_SeparateRLE
		lsr.w	#1,d5
		dbf	d4,Offset_0x001A5A
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4

Offset_0x001A5A:
		roxl.w	#1,d3
		lsr.w	#1,d5
		dbf	d4,Offset_0x001A6C
		move.b	(a0)+,1(a2)
		move.b	(a0)+,(a2)
		move.w	(a2),d5
		moveq	#$F,d4

Offset_0x001A6C:
		roxl.w	#1,d3
		addq.w	#1,d3
		moveq	#-1,d2
		move.b	(a0)+,d2
		bra.s	Process_Kos_Queue_RLELoop
; ---------------------------------------------------------------------------
; Offset_0x001A76:
Process_Kos_Queue_SeparateRLE:
		move.b	(a0)+,d0
		move.b	(a0)+,d1
		moveq	#-1,d2
		move.b	d1,d2
		lsl.w	#5,d2
		move.b	d0,d2
		andi.w	#7,d1
		beq.s	Process_Kos_Queue_SeparateRLE2
		move.b	d1,d3
		addq.w	#1,d3
; Offset_0x001A8C:
Process_Kos_Queue_RLELoop:
		move.b	(a1,d2.w),d0
		move.b	d0,(a1)+
		dbf	d3,Process_Kos_Queue_RLELoop
		bra.s	Process_Kos_Queue_Loop
; ---------------------------------------------------------------------------
; Offset_0x001A98:
Process_Kos_Queue_SeparateRLE2:
		move.b	(a0)+,d1
		beq.s	Process_Kos_Queue_EndReached
		cmpi.b	#1,d1
		beq.w	Process_Kos_Queue_Loop
		move.b	d1,d3
		bra.s	Process_Kos_Queue_RLELoop
; ---------------------------------------------------------------------------
; Offset_0x001AA8:
Process_Kos_Queue_EndReached:
		move.l	a0,(Kos_decomp_queue).w
		move.l	a1,(Kos_decomp_destination).w
		andi.w	#$7FFF,(Kos_decomp_queue_count).w	; clear decompression in progress bit
		subq.w	#1,(Kos_decomp_queue_count).w
		beq.s	Process_Kos_Queue_Done			; branch if there aren't any entries remaining in the queue
		; otherwise, shift all entries up
		lea	(Kos_decomp_queue).w,a0
		lea	(Kos_decomp_queue+8).w,a1
	rept (Kos_decomp_queue_End-(Kos_decomp_queue+8))/4
		move.l	(a1)+,(a0)+
	endm

; Offset_0x001AD0: Exit_Process_Kosinski_Queue_Main:
Process_Kos_Queue_Done:
		rts
; ---------------------------------------------------------------------------
; Offset_0x001AD2:
Restore_Kos_Bookmark:
		movem.l	(Kos_decomp_stored_registers).w,d0-d6/a0-a2
		move.l	(Kos_decomp_bookmark).w,-(sp)
		move.w	(Kos_decomp_stored_SR).w,-(sp)
		rte
;-------------------------------------------------------------------------------
; Offset_0x001AE2: Kosinski_Save_Registers:
Backup_Kos_Registers:
		move    sr,(Kos_decomp_stored_SR).w
		movem.l d0-d6/a0-a2,(Kos_decomp_stored_registers).w
		rts
; End of function Process_Kos_Queue

;===============================================================================
; Aguarda pela conclus�o do procedimento de interrup��o vertical
; ->>>
;===============================================================================
Wait_For_VSync:                                                ; Offset_0x001AEE
		move	#$2300,SR
Wait_For_VSync_Inf_Loop:                                       ; Offset_0x001AF2
		tst.b	(VBlank_Index).w                             ; $FFFFF62A
		bne.s	Wait_For_VSync_Inf_Loop                ; Offset_0x001AF2
		rts
;===============================================================================
; Aguarda pela conclus�o do procedimento de interrup��o vertical
; <<<-
;===============================================================================

;===============================================================================
; Gera��o de n�meros pseudo aleat�rios
; ->>>
;===============================================================================
PseudoRandomNumber:                                            ; Offset_0x001AFA
		move.l	(Random_Seed).w,d1                          ; $FFFFF636
		bne.s	Offset_0x001B06
		move.l	#$2A6D365A,d1
Offset_0x001B06:
		move.l	D1,d0
		asl.l	#2,d1
		add.l	D0,d1
		asl.l	#3,d1
		add.l	D0,d1
		move.w	D1,d0
		swap	D1
		add.w	D1,d0
		move.w	D0,d1
		swap	D1
		move.l	D1,(Random_Seed).w                          ; $FFFFF636
		rts
;===============================================================================
; Gera��o de n�meros pseudo aleat�rios
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular o Seno usando tabela pr�-calculada
; ->>>
;===============================================================================
CalcSine:                                                      ; Offset_0x001B20
		andi.w	#$FF,d0
		add.w	D0,d0
		addi.w	#$80,d0
		move.w	Sine_Table(pc,d0.w),d1                 ; Offset_0x001B38
		subi.w	#$80,d0
		move.w	Sine_Table(pc,d0.w),d0                 ; Offset_0x001B38
		rts
;-------------------------------------------------------------------------------
Sine_Table:                                                    ; Offset_0x001B38
		dc.w	$0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
		dc.w	$0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
		dc.w	$0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
		dc.w	$008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
		dc.w	$00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
		dc.w	$00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
		dc.w	$00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
		dc.w	$00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
		dc.w	$0100, $00FF, $00FF, $00FF, $00FE, $00FE, $00FD, $00FC
		dc.w	$00FB, $00F9, $00F8, $00F6, $00F4, $00F3, $00F1, $00EE
		dc.w	$00EC, $00EA, $00E7, $00E4, $00E1, $00DE, $00DB, $00D8
		dc.w	$00D4, $00D1, $00CD, $00C9, $00C5, $00C1, $00BD, $00B9
		dc.w	$00B5, $00B0, $00AB, $00A7, $00A2, $009D, $0098, $0093
		dc.w	$008E, $0088, $0083, $007E, $0078, $0073, $006D, $0067
		dc.w	$0061, $005C, $0056, $0050, $004A, $0044, $003E, $0038
		dc.w	$0031, $002B, $0025, $001F, $0019, $0012, $000C, $0006
		dc.w	$0000, $FFFA, $FFF4, $FFEE, $FFE7, $FFE1, $FFDB, $FFD5
		dc.w	$FFCF, $FFC8, $FFC2, $FFBC, $FFB6, $FFB0, $FFAA, $FFA4
		dc.w	$FF9F, $FF99, $FF93, $FF8B, $FF88, $FF82, $FF7D, $FF78
		dc.w	$FF72, $FF6D, $FF68, $FF63, $FF5E, $FF59, $FF55, $FF50
		dc.w	$FF4B, $FF47, $FF43, $FF3F, $FF3B, $FF37, $FF33, $FF2F
		dc.w	$FF2C, $FF28, $FF25, $FF22, $FF1F, $FF1C, $FF19, $FF16
		dc.w	$FF14, $FF12, $FF0F, $FF0D, $FF0C, $FF0A, $FF08, $FF07
		dc.w	$FF05, $FF04, $FF03, $FF02, $FF02, $FF01, $FF01, $FF01
		dc.w	$FF00, $FF01, $FF01, $FF01, $FF02, $FF02, $FF03, $FF04
		dc.w	$FF05, $FF07, $FF08, $FF0A, $FF0C, $FF0D, $FF0F, $FF12
		dc.w	$FF14, $FF16, $FF19, $FF1C, $FF1F, $FF22, $FF25, $FF28
		dc.w	$FF2C, $FF2F, $FF33, $FF37, $FF3B, $FF3F, $FF43, $FF47
		dc.w	$FF4B, $FF50, $FF55, $FF59, $FF5E, $FF63, $FF68, $FF6D
		dc.w	$FF72, $FF78, $FF7D, $FF82, $FF88, $FF8B, $FF93, $FF99
		dc.w	$FF9F, $FFA4, $FFAA, $FFB0, $FFB6, $FFBC, $FFC2, $FFC8
		dc.w	$FFCF, $FFD5, $FFDB, $FFE1, $FFE7, $FFEE, $FFF4, $FFFA
		dc.w	$0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
		dc.w	$0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
		dc.w	$0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
		dc.w	$008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
		dc.w	$00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
		dc.w	$00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
		dc.w	$00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
		dc.w	$00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
;===============================================================================
; Rotina para calcular o Seno usando tabela pr�-calculada
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular o �ngulo usando tabela pr�-calculada
; ->>>
;===============================================================================
CalcAngle:                                                     ; Offset_0x001DB8
		movem.l	D3-D4, -(sp)
		moveq	#0,d3
		moveq	#0,d4
		move.w	D1,d3
		move.w	D2,d4
		or.w	D3,d4
		beq.s	Offset_0x001E0A
		move.w	D2,d4
		tst.w	D3
		bpl.s	Offset_0x001DD0
		neg.w	D3
Offset_0x001DD0:
		tst.w	D4
		bpl.s	Offset_0x001DD6
		neg.w	D4
Offset_0x001DD6:
		cmp.w	D3,d4
		bcc.s	Offset_0x001DE6
		lsl.l	#8,d4
		divu.w	D3,d4
		moveq	#0,d0
		move.b	Angle_Table(pc,d4.w),d0                ; Offset_0x001E14
		bra.s	Offset_0x001DF0
Offset_0x001DE6:
		lsl.l	#8,d3
		divu.w	D4,d3
		moveq	#$40,d0
		sub.b	Angle_Table(pc,d3.w),d0                ; Offset_0x001E14
Offset_0x001DF0:
		tst.w	D1
		bpl.s	Offset_0x001DFA
		neg.w	D0
		addi.w	#$80,d0
Offset_0x001DFA:
		tst.w	D2
		bpl.s	Offset_0x001E04
		neg.w	D0
		addi.w	#$100,d0
Offset_0x001E04:
		movem.l	(sp)+,d3-D4
		rts
Offset_0x001E0A:
		move.w	#$40,d0
		movem.l	(sp)+,d3-D4
		rts
;-------------------------------------------------------------------------------
Angle_Table:                                                   ; Offset_0x001E14
		dc.b	$00, $00, $00, $00, $01, $01, $01, $01
		dc.b	$01, $01, $02, $02, $02, $02, $02, $02
		dc.b	$03, $03, $03, $03, $03, $03, $03, $04
		dc.b	$04, $04, $04, $04, $04, $05, $05, $05
		dc.b	$05, $05, $05, $06, $06, $06, $06, $06
		dc.b	$06, $06, $07, $07, $07, $07, $07, $07
		dc.b	$08, $08, $08, $08, $08, $08, $08, $09
		dc.b	$09, $09, $09, $09, $09, $0A, $0A, $0A
		dc.b	$0A, $0A, $0A, $0A, $0B, $0B, $0B, $0B
		dc.b	$0B, $0B, $0B, $0C, $0C, $0C, $0C, $0C
		dc.b	$0C, $0C, $0D, $0D, $0D, $0D, $0D, $0D
		dc.b	$0D, $0E, $0E, $0E, $0E, $0E, $0E, $0E
		dc.b	$0F, $0F, $0F, $0F, $0F, $0F, $0F, $10
		dc.b	$10, $10, $10, $10, $10, $10, $11, $11
		dc.b	$11, $11, $11, $11, $11, $11, $12, $12
		dc.b	$12, $12, $12, $12, $12, $13, $13, $13
		dc.b	$13, $13, $13, $13, $13, $14, $14, $14
		dc.b	$14, $14, $14, $14, $14, $15, $15, $15
		dc.b	$15, $15, $15, $15, $15, $15, $16, $16
		dc.b	$16, $16, $16, $16, $16, $16, $17, $17
		dc.b	$17, $17, $17, $17, $17, $17, $17, $18
		dc.b	$18, $18, $18, $18, $18, $18, $18, $18
		dc.b	$19, $19, $19, $19, $19, $19, $19, $19
		dc.b	$19, $19, $1A, $1A, $1A, $1A, $1A, $1A
		dc.b	$1A, $1A, $1A, $1B, $1B, $1B, $1B, $1B
		dc.b	$1B, $1B, $1B, $1B, $1B, $1C, $1C, $1C
		dc.b	$1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C
		dc.b	$1D, $1D, $1D, $1D, $1D, $1D, $1D, $1D
		dc.b	$1D, $1D, $1D, $1E, $1E, $1E, $1E, $1E
		dc.b	$1E, $1E, $1E, $1E, $1E, $1E, $1F, $1F
		dc.b	$1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F
		dc.b	$1F, $1F, $20, $20, $20, $20, $20, $20
		dc.b	$20, $00
;===============================================================================
; Rotina para calcular o �ngulo usando tabela pr�-calculada
; <<<-
;===============================================================================

; ---------------------------------------------------------------------------
; Subroutine to load palette cycles
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x001F16:
PalCycle_Load:
		bsr.w	PalCycle_SuperSonic
		moveq	#0,d2
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		move.w	PalCycle_Index(pc,d0.w),d0
		jmp	PalCycle_Index(pc,d0.w)
		rts
; ===========================================================================
; Offset_0x001F30: PalCycle_Load_List:
PalCycle_Index:
		dc.w	PalCycle_AIZ1-PalCycle_Index
		dc.w	PalCycle_AIz_2-PalCycle_Index
		dc.w	PalCycle_Hz_1-PalCycle_Index
		dc.w	PalCycle_Hz_2-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_CNz_1-PalCycle_Index
		dc.w	PalCycle_CNz_2-PalCycle_Index
		dc.w	PalCycle_FBz_1-PalCycle_Index
		dc.w	PalCycle_FBz_2-PalCycle_Index
		dc.w	PalCycle_Iz_1-PalCycle_Index
		dc.w	PalCycle_Iz_2-PalCycle_Index
		dc.w	PalCycle_LBz_1-PalCycle_Index
		dc.w	PalCycle_LBz_2-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_LRz_1-PalCycle_Index
		dc.w	PalCycle_LRz_2-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_BPz_1-PalCycle_Index
		dc.w	PalCycle_BPz_2-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_CGz_1-PalCycle_Index
		dc.w	PalCycle_CGz_2-PalCycle_Index
		dc.w	PalCycle_EMz_1-PalCycle_Index
		dc.w	PalCycle_EMz_2-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
		dc.w	PalCycle_Null-PalCycle_Index
; ===========================================================================
; Offset_0x001F90:
PalCycle_Null:
		rts
; ---------------------------------------------------------------------------
; Offset_0x001F92: PalCycle_AIz_1:
PalCycle_AIZ1:
		move.b	(Palette_Cycle_Flag).w,d0
		beq.s	Offset_0x001FEC
		; waterfall cycle
		subq.w	#1,(Palette_Cycle_Count_1).w
		bpl.s	Offset_0x001FEA
		move.w	#7,(Palette_Cycle_Count_1).w
		move.w	(Palette_Cycle_Count_0).w,d0
		addq.w	#8,(Palette_Cycle_Count_0).w
		andi.w	#$18,d0
		lea	(Pal_AIz1_Cyc1).l,a0
		move.l	(A0,d0.w),(Palette_Row_2_Offset+$16).w
		move.l	4(A0,d0.w),(Palette_Row_2_Offset+$1A).w
		; ocean cycle
		move.w	(Palette_Cycle_Counters+2).w,d0
		addq.w	#6,(Palette_Cycle_Counters+2).w
		cmpi.w	#$30,(Palette_Cycle_Counters+2).w
		bcs.s	Offset_0x001FD8
		move.w	#0,(Palette_Cycle_Counters+2).w

Offset_0x001FD8:
		lea	(Pal_AIz1_Cyc4).l,a0
		move.l	(a0,d0.w),(Palette_Row_3_Offset+$18).w
		move.w	4(a0,d0.w),(Palette_Row_3_Offset+$1C).w

Offset_0x001FEA:
		rts
; ---------------------------------------------------------------------------

Offset_0x001FEC:
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x002048
		move.w	#$A-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#8,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$50,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x00200E
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x00200E:
		lea	(Pal_AIz1_Cyc2).l,a0                    ; Offset_0x002450
		move.l	(A0,d0),(Palette_Row_3_Offset+4).w    ; $FFFFED64
		move.l	4(A0,d0),(Palette_Row_3_Offset+8).w    ; $FFFFED68
		move.w	(Palette_Cycle_Counters+2).w,d0           ; $FFFFF652
		addq.w	#6,(Palette_Cycle_Counters+2).w         ; $FFFFF652
		cmpi.w	#$3C,(Palette_Cycle_Counters+2).w       ; $FFFFF652
		bcs.s	Offset_0x002036
		move.w	#0,(Palette_Cycle_Counters+2).w       ; $FFFFF652
Offset_0x002036:
		lea	(Pal_AIz1_Cyc3).l,a0                    ; Offset_0x0024D0
		move.l	(A0,d0),(Palette_Row_3_Offset+$1A).w    ; $FFFFED7A
		move.w	4(A0,d0),(Palette_Row_3_Offset+$1E).w    ; $FFFFED7E
Offset_0x002048:
		rts
;-------------------------------------------------------------------------------
PalCycle_AIz_2:                                                ; Offset_0x00204A
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x0020C4
		move.w	#6-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#8,(Palette_Cycle_Count_0).w              ; $FFFFF632
		andi.w	#$18,d0
		lea	(Pal_AIz2_Cyc1).l,a0                    ; Offset_0x002560
		move.l	(A0,d0),(Palette_Row_3_Offset+$18).w    ; $FFFFED78
		move.l	4(A0,d0),(Palette_Row_3_Offset+$1C).w    ; $FFFFED7C
		move.w	(Palette_Cycle_Counters+2).w,d0           ; $FFFFF652
		addq.w	#6,(Palette_Cycle_Counters+2).w         ; $FFFFF652
		cmpi.w	#$30,(Palette_Cycle_Counters+2).w       ; $FFFFF652
		bcs.s	Offset_0x00208A
		move.w	#0,(Palette_Cycle_Counters+2).w       ; $FFFFF652
Offset_0x00208A:
		lea	(Pal_AIz2_Cyc2).l,a0                    ; Offset_0x002580
		cmpi.w	#$3800,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x00209E
		lea	(Pal_AIz2_Cyc3).l,a0                    ; Offset_0x0025B0
Offset_0x00209E:
		move.w	(A0,d0),(Palette_Row_2_Offset+8).w    ; $FFFFED48
		move.w	2(A0,d0),(Palette_Row_2_Offset+$10).w    ; $FFFFED50
		move.w	4(A0,d0),(Palette_Row_3_Offset+$16).w    ; $FFFFED76
		move.w	#$A0E,(Palette_Row_2_Offset+$1C).w         ; $FFFFED5C
		cmpi.w	#$1C0,(Camera_X).w                         ; $FFFFEE78
		bcc.s	Offset_0x0020C4
		move.w	4(A0,d0),(Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
Offset_0x0020C4:
		subq.w	#1,(Palette_Cycle_Counters+8).w         ; $FFFFF658
		bpl.s	Offset_0x002100
		move.w	#2-1,(Palette_Cycle_Counters+8).w       ; $FFFFF658
		move.w	(Palette_Cycle_Counters+4).w,d0           ; $FFFFF654
		addq.w	#2,(Palette_Cycle_Counters+4).w         ; $FFFFF654
		cmpi.w	#$34,(Palette_Cycle_Counters+4).w       ; $FFFFF654
		bcs.s	Offset_0x0020E6
		move.w	#0,(Palette_Cycle_Counters+4).w       ; $FFFFF654
Offset_0x0020E6:
		lea	(Pal_AIz2_Cyc4).l,a0                    ; Offset_0x0025E0
		cmpi.w	#$3800,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0020FA
		lea	(Pal_AIz2_Cyc5).l,a0                    ; Offset_0x002614
Offset_0x0020FA:
		move.w	(A0,d0),(Palette_Row_3_Offset+2).w    ; $FFFFED62
Offset_0x002100:
		rts
;-------------------------------------------------------------------------------
PalCycle_Hz_1:                                                 ; Offset_0x002102
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x00214E
		move.w	#8-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		tst.b	(Palette_Cycle_Counters).w                   ; $FFFFF650
		beq.s	Offset_0x00211A
		move.w	#0,(Palette_Cycle_Count_1).w            ; $FFFFF634
Offset_0x00211A:
		lea	(Pal_Hz1_Cyc).l,a0                      ; Offset_0x002648
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#8,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$20,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x002136
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x002136:
		move.l	(A0,d0),(Palette_Row_2_Offset+6).w    ; $FFFFED46
		move.l	4(A0,d0),(Palette_Row_2_Offset+$A).w    ; $FFFFED4A
		move.l	(A0,d0),(Palette_UW_Row_2_Offset+6).w ; $FFFFF0C6
		move.l	4(A0,d0),(Palette_UW_Row_2_Offset+$A).w ; $FFFFF0CA
Offset_0x00214E:
		rts
;-------------------------------------------------------------------------------
PalCycle_Hz_2:                                                 ; Offset_0x002150
		rts
;-------------------------------------------------------------------------------
PalCycle_CNz_1:                                                ; Offset_0x002152
PalCycle_CNz_2:
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x002186
		move.w	#4-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		lea	(Pal_CNz_Cyc1).l,a0                     ; Offset_0x002668
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#6,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$60,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x00217A
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x00217A:
		move.l	(A0,d0),(Palette_Row_3_Offset+$12).w    ; $FFFFED72
		move.w	4(A0,d0),(Palette_Row_3_Offset+$16).w    ; $FFFFED76
Offset_0x002186:
		lea	(Pal_CNz_Cyc2).l,a0                     ; Offset_0x0026C8
		move.w	(Palette_Cycle_Counters+2).w,d0           ; $FFFFF652
		addq.w	#6,(Palette_Cycle_Counters+2).w         ; $FFFFF652
		cmpi.w	#$B4,(Palette_Cycle_Counters+2).w       ; $FFFFF652
		bcs.s	Offset_0x0021A2
		move.w	#0,(Palette_Cycle_Counters+2).w       ; $FFFFF652
Offset_0x0021A2:
		move.l	(A0,d0),(Palette_Row_2_Offset+$12).w    ; $FFFFED52
		move.w	4(A0,d0),(Palette_Row_2_Offset+$16).w    ; $FFFFED56
		subq.w	#1,(Palette_Cycle_Counters+8).w         ; $FFFFF658
		bpl.s	Offset_0x0021DC
		move.w	#3-1,(Palette_Cycle_Counters+8).w       ; $FFFFF658
		lea	(Pal_CNz_Cyc3).l,a0                     ; Offset_0x00277C
		move.w	(Palette_Cycle_Counters+4).w,d0           ; $FFFFF654
		addq.w	#4,(Palette_Cycle_Counters+4).w         ; $FFFFF654
		cmpi.w	#$40,(Palette_Cycle_Counters+4).w       ; $FFFFF654
		bcs.s	Offset_0x0021D6
		move.w	#0,(Palette_Cycle_Counters+4).w       ; $FFFFF654
Offset_0x0021D6:
		move.l	(A0,d0),(Palette_Row_2_Offset+$E).w    ; $FFFFED4E
Offset_0x0021DC:
		rts
;-------------------------------------------------------------------------------
PalCycle_FBz_1:                                                ; Offset_0x0021DE
PalCycle_FBz_2:
		rts
;-------------------------------------------------------------------------------
PalCycle_Iz_1:                                                 ; Offset_0x0021E0
PalCycle_Iz_2:
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x00220E
		move.w	#6-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		lea	(Pal_Iz_Cyc1).l,a0                      ; Offset_0x0027BC
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#4,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$40,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x002208
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x002208:
		move.l	(A0,d0),(Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
Offset_0x00220E:
		subq.w	#1,(Palette_Cycle_Counters+8).w         ; $FFFFF658
		bpl.s	Offset_0x002242
		move.w	#$A-1,(Palette_Cycle_Counters+8).w       ; $FFFFF658
		lea	(Pal_Iz_Cyc2).l,a0                      ; Offset_0x0027FC
		move.w	(Palette_Cycle_Counters+2).w,d0           ; $FFFFF652
		addq.w	#4,(Palette_Cycle_Counters+2).w         ; $FFFFF652
		cmpi.w	#$48,(Palette_Cycle_Counters+2).w       ; $FFFFF652
		bcs.s	Offset_0x002236
		move.w	#0,(Palette_Cycle_Counters+2).w       ; $FFFFF652
Offset_0x002236:
		tst.w	(Background_Events+$16).w                    ; $FFFFEEE8
		beq.s	Offset_0x002242
		move.l	(A0,d0),(Palette_Row_3_Offset+$1C).w    ; $FFFFED7C
Offset_0x002242:
		subq.w	#1,(Palette_Cycle_Counters+$A).w         ; $FFFFF65A
		bpl.s	Offset_0x002298
		move.w	#8-1,(Palette_Cycle_Counters+$A).w       ; $FFFFF65A
		lea	(Pal_Iz_Cyc3).l,a0                      ; Offset_0x002844
		move.w	(Palette_Cycle_Counters+4).w,d0           ; $FFFFF654
		addq.w	#4,(Palette_Cycle_Counters+4).w         ; $FFFFF654
		cmpi.w	#$18,(Palette_Cycle_Counters+4).w       ; $FFFFF654
		bcs.s	Offset_0x00226A
		move.w	#0,(Palette_Cycle_Counters+4).w       ; $FFFFF654
Offset_0x00226A:
		tst.w	(Background_Events+$16).w                    ; $FFFFEEE8
		beq.s	Offset_0x002276
		move.l	(A0,d0),(Palette_Row_3_Offset+$18).w    ; $FFFFED78
Offset_0x002276:
		lea	(Pal_Iz_Cyc4).l,a0                      ; Offset_0x00285C
		move.w	(Palette_Cycle_Counters+6).w,d0           ; $FFFFF656
		addq.w	#4,(Palette_Cycle_Counters+6).w         ; $FFFFF656
		cmpi.w	#$40,(Palette_Cycle_Counters+6).w       ; $FFFFF656
		bcs.s	Offset_0x002292
		move.w	#0,(Palette_Cycle_Counters+6).w       ; $FFFFF656
Offset_0x002292:
		move.l	(A0,d0),(Palette_Row_2_Offset+$18).w    ; $FFFFED58
Offset_0x002298:
		rts
;-------------------------------------------------------------------------------
PalCycle_LBz_1:                                                ; Offset_0x00229A
		lea	(Pal_LBz1_Cyc).l,a0                     ; Offset_0x00289C
		bra.s	PalCycle_LBz_Main                      ; Offset_0x0022A8
;-------------------------------------------------------------------------------
PalCycle_LBz_2:                                                ; Offset_0x0022A2
		lea	(Pal_LBz2_Cyc).l,a0                     ; Offset_0x0028AE
PalCycle_LBz_Main:
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x0022D6
		move.w	#4-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#6,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$12,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x0022CA
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x0022CA:
		move.l	(A0,d0),(Palette_Row_2_Offset+$10).w    ; $FFFFED50
		move.w	4(A0,d0),(Palette_Row_2_Offset+$14).w    ; $FFFFED54
Offset_0x0022D6:
		rts
;-------------------------------------------------------------------------------
PalCycle_LRz_1:                                                ; Offset_0x0022D8
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x00232E
		move.w	#$10-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#8,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$80,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x0022FA
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x0022FA:
		lea	(Pal_LRz1_Cyc1).l,a0                    ; Offset_0x0028C0
		move.l	(A0,d0),(Palette_Row_2_Offset+2).w    ; $FFFFED42
		move.l	4(A0,d0),(Palette_Row_2_Offset+6).w    ; $FFFFED46
		move.w	(Palette_Cycle_Counters+2).w,d0           ; $FFFFF652
		addq.w	#4,(Palette_Cycle_Counters+2).w         ; $FFFFF652
		cmpi.w	#$1C,(Palette_Cycle_Counters+2).w       ; $FFFFF652
		bcs.s	Offset_0x002322
		move.w	#0,(Palette_Cycle_Counters+2).w       ; $FFFFF652
Offset_0x002322:
		lea	(Pal_LRz1_Cyc2).l,a0                    ; Offset_0x002940
		move.l	(A0,d0),(Palette_Row_3_Offset+2).w    ; $FFFFED62
Offset_0x00232E:
		rts
;-------------------------------------------------------------------------------
PalCycle_LRz_2:                                                ; Offset_0x002330
		rts
;-------------------------------------------------------------------------------
PalCycle_BPz_1:                                                ; Offset_0x002332
PalCycle_BPz_2:
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x002366
		move.w	#8-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		lea	(Pal_BPz_Cyc1).l,a0                     ; Offset_0x002964
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#6,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$12,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x00235A
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x00235A:
		move.l	(A0,d0),(Palette_Row_2_Offset+$1A).w    ; $FFFFED5A
		move.w	4(A0,d0),(Palette_Row_2_Offset+$1E).w    ; $FFFFED5E
Offset_0x002366:
		subq.w	#1,(Palette_Cycle_Counters+8).w         ; $FFFFF658
		bpl.s	Offset_0x00239A
		move.w	#$12-1,(Palette_Cycle_Counters+8).w       ; $FFFFF658
		lea	(Pal_BPz_Cyc2).l,a0                     ; Offset_0x002976
		move.w	(Palette_Cycle_Counters+2).w,d0           ; $FFFFF652
		addq.w	#6,(Palette_Cycle_Counters+2).w         ; $FFFFF652
		cmpi.w	#$7E,(Palette_Cycle_Counters+2).w       ; $FFFFF652
		bcs.s	Offset_0x00238E
		move.w	#0,(Palette_Cycle_Counters+2).w       ; $FFFFF652
Offset_0x00238E:
		move.l	(A0,d0),(Palette_Row_3_Offset+4).w    ; $FFFFED64
		move.w	4(A0,d0),(Palette_Row_3_Offset+8).w    ; $FFFFED68
Offset_0x00239A:
		rts
;-------------------------------------------------------------------------------
PalCycle_CGz_1:                                                ; Offset_0x00239C
PalCycle_CGz_2:
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x0023D0
		move.w	#$A-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		lea	(Pal_CGz_Cyc).l,a0                      ; Offset_0x0029F4
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#8,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$50,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x0023C4
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x0023C4:
		move.l	(A0,d0),(Palette_Row_2_Offset+4).w    ; $FFFFED44
		move.l	4(A0,d0),(Palette_Row_2_Offset+8).w    ; $FFFFED48
Offset_0x0023D0:
		rts
;-------------------------------------------------------------------------------
PalCycle_EMz_1:                                                ; Offset_0x0023D2
PalCycle_EMz_2:
		subq.w	#1,(Palette_Cycle_Count_1).w              ; $FFFFF634
		bpl.s	Offset_0x002400
		move.w	#8-1,(Palette_Cycle_Count_1).w            ; $FFFFF634
		lea	(Pal_EMz_Cyc1).l,a0                     ; Offset_0x002A44
		move.w	(Palette_Cycle_Count_0).w,d0                ; $FFFFF632
		addq.w	#2,(Palette_Cycle_Count_0).w              ; $FFFFF632
		cmpi.w	#$3C,(Palette_Cycle_Count_0).w            ; $FFFFF632
		bcs.s	Offset_0x0023FA
		move.w	#0,(Palette_Cycle_Count_0).w            ; $FFFFF632
Offset_0x0023FA:
		move.w	4(A0,d0),(Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
Offset_0x002400:
		subq.w	#1,(Palette_Cycle_Counters+8).w         ; $FFFFF658
		bpl.s	Offset_0x00242E
		move.w	#$20-1,(Palette_Cycle_Counters+8).w       ; $FFFFF658
		lea	(Pal_EMz_Cyc2).l,a0                     ; Offset_0x002A80
		move.w	(Palette_Cycle_Counters+2).w,d0           ; $FFFFF652
		addq.w	#4,(Palette_Cycle_Counters+2).w         ; $FFFFF652
		cmpi.w	#$34,(Palette_Cycle_Counters+2).w       ; $FFFFF652
		bcs.s	Offset_0x002428
		move.w	#0,(Palette_Cycle_Counters+2).w       ; $FFFFF652
Offset_0x002428:
		move.l	(A0,d0),(Palette_Row_3_Offset+$12).w    ; $FFFFED72
Offset_0x00242E:
		rts
;-------------------------------------------------------------------------------
Pal_AIz1_Cyc1:                                                 ; Offset_0x002430
		dc.w	$0EE8, $0EE2, $0EA4, $0E64, $0EE2, $0EA4, $0E64, $0EE8
		dc.w	$0EA4, $0E64, $0EE8, $0EE2, $0E64, $0EE8, $0EE2, $0EA4
;-------------------------------------------------------------------------------
Pal_AIz1_Cyc2:                                                 ; Offset_0x002450
		dc.w	$0EEC, $0EEE, $0EE8, $0E40, $0EEC, $0EE8, $0EE8, $0EEE
		dc.w	$0EEA, $0E86, $0EE8, $0EE8, $0EE8, $0E40, $0EE8, $0E86
		dc.w	$0EE6, $0EEE, $0EE8, $0E40, $0EEA, $0EE8, $0EE8, $0EEE
		dc.w	$0EE8, $0E86, $0EE8, $0EE8, $0EE8, $0E40, $0EE8, $0E86
		dc.w	$0EE6, $0EEE, $0EE8, $0E40, $0EE8, $0EE8, $0EE8, $0EEE
		dc.w	$0EEA, $0E86, $0EE8, $0EE8, $0EEC, $0E40, $0EE8, $0E86
		dc.w	$0EEC, $0EEE, $0EE8, $0E40, $0EEC, $0EE8, $0EE8, $0EEE
		dc.w	$0EEC, $0E86, $0EE8, $0EE8, $0EEC, $0E40, $0EE8, $0E86
;-------------------------------------------------------------------------------
Pal_AIz1_Cyc3:                                                 ; Offset_0x0024D0
		dc.w	$0CEC, $0CEE, $0EEE, $0CEE, $0EEE, $0EEE, $0EEE, $0EEE
		dc.w	$0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE
		dc.w	$0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EE8, $0EEE, $0EEE
		dc.w	$0EE8, $0EE8, $0EEE, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8
		dc.w	$0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8
		dc.w	$0EE8, $0AEC, $0EE8, $0AEC, $0CEC, $0AEC, $0CEC, $0CEC
;-------------------------------------------------------------------------------
Pal_AIz1_Cyc4:                                                 ; Offset_0x002530
		dc.w	$0EA4, $0E60, $0EE2, $0EA4, $0EE8, $0EA4, $0E60, $0EE8
		dc.w	$0EEE, $0E60, $0EE2, $0EE2, $0EE8, $0EA4, $0EA4, $0EE2
		dc.w	$0E60, $0E60, $0EE2, $0E60, $0EEE, $0EE2, $0E60, $0EE8
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc1:                                                 ; Offset_0x002560
		dc.w	$0EE8, $0EE2, $0EC4, $0EA4, $0EE2, $0EC4, $0EA4, $0EE8
		dc.w	$0EC4, $0EA4, $0EE8, $0EE2, $0EA4, $0EE8, $0EE2, $0EC4
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc2:                                                 ; Offset_0x002580
		dc.w	$0024, $0044, $008E, $0026, $0046, $00AE, $0024, $0048
		dc.w	$008E, $0026, $004A, $00AE, $0024, $004C, $008E, $0026
		dc.w	$004A, $00AE, $0024, $0048, $008E, $0024, $0046, $008E
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc3:                                                 ; Offset_0x0025B0
		dc.w	$0024, $0044, $000C, $0026, $0046, $000E, $0024, $0048
		dc.w	$000C, $0026, $004A, $000E, $0024, $004C, $000C, $0026
		dc.w	$004A, $000E, $0024, $0048, $000C, $0024, $0046, $000C
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc4:                                                 ; Offset_0x0025E0
		dc.w	$006E, $006E, $006E, $006E, $028E, $04AE, $06AE, $08CE
		dc.w	$08EE, $0AEE, $0AEE, $0AEE, $0AEE, $0AEE, $08EE, $08EE
		dc.w	$08EE, $08EE, $08CE, $08CE, $08CE, $06AE, $06AE, $04AE
		dc.w	$04AE, $028E
;-------------------------------------------------------------------------------
Pal_AIz2_Cyc5:                                                 ; Offset_0x002614
		dc.w	$000C, $000C, $000C, $000C, $002C, $000E, $002E, $004E
		dc.w	$006E, $008E, $008E, $008E, $008E, $008E, $006E, $004E
		dc.w	$004E, $004E, $002E, $002E, $002E, $000E, $000E, $002C
		dc.w	$002C, $002C
;-------------------------------------------------------------------------------
Pal_Hz1_Cyc:                                                   ; Offset_0x002648
		dc.w	$0EC8, $0EC0, $0EA0, $0E80, $0EC0, $0EA0, $0E80, $0EC8
		dc.w	$0EA0, $0E80, $0EC8, $0EC0, $0E80, $0EC8, $0EC0, $0EA0
;-------------------------------------------------------------------------------
Pal_CNz_Cyc1:                                                  ; Offset_0x002668
		dc.w	$0000, $0066, $00EE, $0022, $0044, $00CC, $0044, $0022
		dc.w	$00AA, $0066, $0000, $0088, $0088, $0000, $0066, $00AA
		dc.w	$0022, $0044, $00CC, $0044, $0022, $00EE, $0066, $0000
		dc.w	$00EE, $0088, $0000, $00CC, $00AA, $0022, $00AA, $00CC
		dc.w	$0044, $0088, $00EE, $0066, $0066, $00EE, $0088, $0044
		dc.w	$00CC, $00AA, $0022, $00AA, $00CC, $0000, $0088, $00EE
;-------------------------------------------------------------------------------
Pal_CNz_Cyc2:                                                  ; Offset_0x0026C8
		dc.w	$0E20, $008A, $0C0E, $0C42, $006C, $0E0E, $0A64, $004C
		dc.w	$0E0C, $0884, $002E, $0E0A, $06A6, $000E, $0E08, $04C6
		dc.w	$020E, $0E06, $02E8, $040E, $0E04, $00E8, $060E, $0E02
		dc.w	$00C8, $080E, $0E00, $00AA, $0A0E, $0E00, $008A, $0C0E
		dc.w	$0E20, $006C, $0E0E, $0C42, $004C, $0E0C, $0A64, $002E
		dc.w	$0E0A, $0884, $000E, $0E08, $06A6, $020E, $0E06, $04C6
		dc.w	$040E, $0E04, $02E8, $060E, $0E02, $00E8, $080E, $0E00
		dc.w	$00C8, $0A0E, $0E00, $00AA, $0C0E, $0E20, $008A, $0E0E
		dc.w	$0C42, $006C, $0E0C, $0A64, $004C, $0E0A, $0884, $002E
		dc.w	$0E08, $06A6, $000E, $0E06, $04C6, $020E, $0E04, $02E8
		dc.w	$040E, $0E02, $00E8, $060E, $0E00, $00C8, $080E, $0E00
		dc.w	$00AA, $0A0E
;-------------------------------------------------------------------------------
Pal_CNz_Cyc3:                                                  ; Offset_0x00277C
		dc.w	$02E0, $0ECE, $04E2, $0EAC, $06E4, $0E8A, $08E6, $0E68
		dc.w	$0AE8, $0E46, $0CEA, $0E24, $0EEC, $0E02, $0EEE, $0E00
		dc.w	$0EEC, $0E02, $0CEA, $0E24, $0AE8, $0E46, $08E6, $0E68
		dc.w	$06E4, $0E8A, $04E2, $0EAC, $02E0, $0ECE, $00E0, $0EEE
;-------------------------------------------------------------------------------
Pal_Iz_Cyc1:                                                   ; Offset_0x0027BC
		dc.w	$0E62, $0E20, $0E44, $0E20, $0E44, $0E00, $0E42, $0E00
		dc.w	$0E62, $0C00, $0E82, $0A00, $0EA2, $0C00, $0EC0, $0E00
		dc.w	$0EE0, $0E20, $0EE4, $0E00, $0EE4, $0C00, $0EE4, $0A00
		dc.w	$0EE0, $0800, $0EC2, $0A00, $0EA2, $0C00, $0E82, $0E20
;-------------------------------------------------------------------------------
Pal_Iz_Cyc2:                                                   ; Offset_0x0027FC
		dc.w	$0E06, $0E08, $0E04, $0E06, $0C04, $0E04, $0C02, $0C04
		dc.w	$0A02, $0C02, $0A00, $0A02, $0800, $0A00, $0600, $0800
		dc.w	$0600, $0800, $0600, $0800, $0600, $0800, $0800, $0A00
		dc.w	$0A00, $0A02, $0A02, $0C02, $0C02, $0C04, $0C04, $0E04
		dc.w	$0E04, $0E06, $0E06, $0E08
;-------------------------------------------------------------------------------
Pal_Iz_Cyc3:                                                   ; Offset_0x002844
		dc.w	$0840, $0EEA, $0860, $0EE0, $0A80, $0EC0, $0EC0, $0A80
		dc.w	$0A80, $0EC0, $0860, $0EE0
;-------------------------------------------------------------------------------
Pal_Iz_Cyc4:                                                   ; Offset_0x00285C
		dc.w	$00E8, $0CEC, $00C8, $0AEA, $00C8, $0AEA, $00A6, $06E8
		dc.w	$00A6, $06E8, $0084, $00E8, $0084, $00E8, $0082, $00C8
		dc.w	$0064, $00A6, $0064, $00A6, $0082, $00C8, $0084, $00E8
		dc.w	$00A6, $06E8, $00C8, $0AEA, $00E8, $0CEC, $00E8, $0CEC
;-------------------------------------------------------------------------------
Pal_LBz1_Cyc:                                                  ; Offset_0x00289C
		dc.w	$08E0, $00C0, $0080, $00C0, $0080, $08E0, $0080, $08E0
		dc.w	$00C0
;-------------------------------------------------------------------------------
Pal_LBz2_Cyc:                                                  ; Offset_0x0028AE
		dc.w	$0EEA, $0EA4, $0C62, $0EA4, $0C62, $0EEA, $0C62, $0EEA
		dc.w	$0EA4
;-------------------------------------------------------------------------------
Pal_LRz1_Cyc1:                                                 ; Offset_0x0028C0
		dc.w	$00EE, $00AE, $006E, $000E, $00AE, $006E, $000E, $00EE
		dc.w	$006E, $000E, $00EE, $02CE, $002E, $08EE, $04EE, $006E
		dc.w	$0AEE, $06EE, $008E, $004E, $04EE, $006E, $002E, $08EE
		dc.w	$006E, $000E, $00EE, $02CE, $000E, $00EE, $02CE, $006E
		dc.w	$00EE, $00AE, $006E, $000E, $008E, $004E, $000C, $00CE
		dc.w	$002E, $000A, $00AC, $006E, $0008, $008E, $004C, $000C
		dc.w	$00AC, $006E, $002E, $000A, $008E, $004E, $000C, $00CE
		dc.w	$006E, $000E, $00EE, $00AE, $000E, $00EE, $00AE, $006E
;-------------------------------------------------------------------------------
Pal_LRz1_Cyc2:                                                 ; Offset_0x002940
		dc.w	$0224, $0224, $0224, $0424, $0224, $0426, $0426, $0224
		dc.w	$0424, $0224, $0224, $0224, $0224, $0224, $0224, $0422
		dc.w	$0422, $0422
;-------------------------------------------------------------------------------
Pal_BPz_Cyc1:                                                  ; Offset_0x002964
		dc.w	$00EE, $00AE, $006C, $00AE, $006E, $00EE, $006E, $00EE
		dc.w	$00AE
;-------------------------------------------------------------------------------
Pal_BPz_Cyc2:                                                  ; Offset_0x002976
		dc.w	$0EE0, $0E0E, $00EE, $0EA0, $0A0E, $00EA, $0E60, $060E
		dc.w	$00E6, $0E20, $020E, $00E2, $0E02, $002E, $02E0, $0E06
		dc.w	$006E, $06E0, $0E0A, $00AE, $0AE0, $0E0E, $00EE, $0EE0
		dc.w	$0A0E, $00EA, $0EA0, $060E, $00E6, $0E60, $020E, $00E2
		dc.w	$0E20, $002E, $02E0, $0E02, $006E, $06E0, $0E06, $00AE
		dc.w	$0AE0, $0E0A, $00EE, $0EE0, $0E0E, $00EA, $0EA0, $0A0E
		dc.w	$00E6, $0E60, $060E, $00E2, $0E20, $020E, $02E0, $0E02
		dc.w	$002E, $06E0, $0E06, $006E, $0AE0, $0E0A, $00AE
;-------------------------------------------------------------------------------
Pal_CGz_Cyc:                                                   ; Offset_0x0029F4
		dc.w	$000E, $0008, $0004, $0EEE, $000C, $0006, $0002, $0CCE
		dc.w	$000A, $0004, $0000, $0AAE, $0008, $0002, $0000, $088E
		dc.w	$0006, $0000, $0000, $066E, $0004, $0000, $0000, $044E
		dc.w	$0006, $0000, $0000, $066E, $0008, $0002, $0000, $088E
		dc.w	$000A, $0004, $0002, $0AAE, $000C, $0006, $0004, $0CCE
;-------------------------------------------------------------------------------
Pal_EMz_Cyc1:                                                  ; Offset_0x002A44
		dc.w	$0006, $0008, $000A, $000C, $000E, $000E, $000E, $000E
		dc.w	$000C, $000A, $0008, $0006, $0006, $0006, $0006, $0008
		dc.w	$000A, $000C, $000E, $000E, $000E, $000C, $000A, $0008
		dc.w	$0006, $0008, $000A, $000A, $000A, $0008
;-------------------------------------------------------------------------------
Pal_EMz_Cyc2:                                                  ; Offset_0x002A80
		dc.w	$0000, $000E, $0002, $000C, $0004, $000A, $0006, $0008
		dc.w	$0008, $0006, $000A, $0004, $000C, $0002, $000E, $0000
		dc.w	$000C, $0002, $000A, $0004, $0008, $0006, $0006, $0008
		dc.w	$0004, $000A, $0002, $000C

; ===========================================================================
; Offset_0x002AB8:
PalCycle_SuperSonic:
		move.b	(Super_Sonic_Palette_Status).w,d0
		beq.s	Offset_0x002B00
		bmi.w	Offset_0x002B50
		subq.b	#1,d0
		bne.s	PalCycle_SuperSonic_Revert
; PalCycle_SuperSonic_Normal:
		subq.b	#1,(Super_Sonic_Palette_Timer).w
		bpl.s	Offset_0x002B00
		move.b	#4-1,(Super_Sonic_Palette_Timer).w
		lea	(Pal_SuperSonic_Cyc).l,a0
		move.w	(Super_Sonic_Palette_Frame).w,d0
		addq.w	#8,(Super_Sonic_Palette_Frame).w
		cmpi.w	#$30,(Super_Sonic_Palette_Frame).w
		bcs.s	Offset_0x002AF4
		move.b	#-1,(Super_Sonic_Palette_Status).w
		move.b	#0,(Obj_Player_One+Obj_Timer).w

Offset_0x002AF4:
		lea	(Palette_Row_0_Offset+4).w,a1
		move.l	(a0,d0.w),(a1)+
		move.w	4(a0,d0.w),(a1)

Offset_0x002B00:
		rts
; ---------------------------------------------------------------------------
; Offset_0x002B02:
PalCycle_SuperSonic_Revert:
		subq.b	#1,(Super_Sonic_Palette_Timer).w
		bpl.s	Offset_0x002B00
		move.b	#4-1,(Super_Sonic_Palette_Timer).w
		lea	(Pal_SuperSonic_Cyc).l,a0
		move.w	(Super_Sonic_Palette_Frame).w,d0
		subq.w	#8,(Super_Sonic_Palette_Frame).w
		bcc.s	Offset_0x002B2A
	if FixBugs
		move.w	#0,(Super_Sonic_Palette_Frame).w
	else
		move.b	#0,(Super_Sonic_Palette_Frame).w
	endif
		move.b	#0,(Super_Sonic_Palette_Status).w

Offset_0x002B2A:
		lea	(Palette_Row_0_Offset+4).w,a1
		move.l	(a0,d0.w),(a1)+
		move.w	4(a0,d0.w),(a1)
		lea	(Pal_SuperSonic_Underwater_Cyc).l,a0
		tst.b	(Water_Level_Flag).w
		beq.s	Offset_0x002B00
		lea	(Palette_UW_Row_0_Offset+4).w,a1
		move.l	(a0,d0.w),(a1)+
		move.w	4(a0,d0.w),(a1)
		rts

Offset_0x002B50:
		subq.b	#1,(Super_Sonic_Palette_Timer).w          ; $FFFFF65E
		bpl.s	Offset_0x002B00
		move.b	#8-1,(Super_Sonic_Palette_Timer).w          ; $FFFFF65E
		lea	(Pal_SuperSonic_Cyc).l,a0               ; Offset_0x002BA0
		move.w	(Super_Sonic_Palette_Frame).w,d0            ; $FFFFF65C
		addq.w	#8,(Super_Sonic_Palette_Frame).w          ; $FFFFF65C
		cmpi.w	#$78,(Super_Sonic_Palette_Frame).w        ; $FFFFF65C
	if FixBugs
		bls.s	Offset_0x002B78
	else
		bcs.s	Offset_0x002B78
	endif
		move.w	#$30,(Super_Sonic_Palette_Frame).w        ; $FFFFF65C
Offset_0x002B78:
		lea	(Palette_Row_0_Offset+4).w,a1             ; $FFFFED04
		move.l	(A0,d0),(A1)+
		move.w	4(A0,d0),(A1)
		lea	(Pal_SuperSonic_Underwater_Cyc).l,a0    ; Offset_0x002C20
		tst.b	(Water_Level_Flag).w                         ; $FFFFF730
		beq.w	Offset_0x002B00
		lea	(Palette_UW_Row_0_Offset+4).w,a1          ; $FFFFF084
		move.l	(A0,d0),(A1)+
		move.w	4(A0,d0),(A1)
		rts
;-------------------------------------------------------------------------------
Pal_SuperSonic_Cyc:                                            ; Offset_0x002BA0
		dc.w	$0A22, $0C42, $0E44, $0E66, $0844, $0A64, $0E66, $0E88
		dc.w	$0666, $0A86, $0E88, $0EAA, $0488, $0AA8, $0EAA, $0ECC
		dc.w	$04AA, $0ACA, $0ECC, $0EEE, $04CC, $0AEC, $0EEE, $0EEE
		dc.w	$04EE, $0AEE, $0EEE, $0EEE, $06EE, $0EEE, $0EEE, $0EEE
		dc.w	$08EE, $0EEE, $0EEE, $0EEE, $06EE, $0CEE, $0EEE, $0EEE
		dc.w	$04EE, $0AEE, $0EEE, $0EEE, $02EE, $08EE, $0CEE, $0EEE
		dc.w	$00EE, $06EE, $0AEE, $0EEE, $00EE, $04EE, $08EE, $0CEE
		dc.w	$00EE, $06EE, $0AEE, $0EEE, $00EE, $08EE, $0CEE, $0EEE
;-------------------------------------------------------------------------------
Pal_SuperSonic_Underwater_Cyc:                                 ; Offset_0x002C20
		dc.w	$0E08, $0E28, $0E2A, $0E4C, $0C2A, $0E4A, $0E4C, $0E6E
		dc.w	$0A4C, $0E6C, $0E6E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
		dc.w	$0A6E, $0E8E, $0E8E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
		dc.w	$0A6E, $0E8E, $0E8E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
		dc.w	$0C8E, $0EAE, $0EAE, $0EAE, $0C8E, $0EAE, $0EAE, $0EAE
		dc.w	$0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
		dc.w	$0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
		dc.w	$0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
		dc.w	$0A24, $0C44, $0E46, $0E68, $0C46, $0E66, $0E68, $0E8A
		dc.w	$0E68, $0E88, $0E8A, $0EAC, $0E68, $0E88, $0E8A, $0EAC
		dc.w	$0E88, $0EAA, $0EAC, $0ECC, $0E88, $0EAA, $0EAC, $0ECC
		dc.w	$0EA8, $0ECC, $0ECC, $0ECC, $0EA8, $0ECC, $0ECC, $0ECC
		dc.w	$0EA8, $0ECC, $0ECC, $0ECC, $0ECA, $0ECC, $0ECC, $0ECC
		dc.w	$0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC
		dc.w	$0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC
		dc.w	$0ECA, $0ECC, $0ECC, $0ECC, $0EA8, $0ECC, $0ECC, $0ECC

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to fade in from black
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x002D20: Pal_FadeTo:
Pal_FadeFromBlack:
		move.w	#$3F,(Palette_Fade_Info).w
		jsr	Pal_Clear(pc)
		move.w	#$15,d4
; Offset_0x002D2E: Pal_FadeTo_Loop:
.loop:
		move.b	#$12,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		bsr.s	Pal_FadeIn
		bsr.w	RunPLC_RAM
		dbf	d4,.loop
		rts

; ---------------------------------------------------------------------------
; Subroutine to update all colours once
; ---------------------------------------------------------------------------
; Offset_0x002D44:
Pal_FadeIn:
		moveq	#0,d0
		lea	(Palette_Buffer).w,a0
		lea	(Palette_Data_Target).w,a1
		move.b	(Palette_Fade_Info).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_Fade_Count).w,d0
; Offset_0x002D5A:
.nextColor:
		bsr.s	Pal_AddColor
		dbf	d0,.nextColor
		tst.b	(Water_Level_Flag).w
		beq.s	Offset_0x002D82
		moveq	#0,d0
		lea	(Palette_Underwater_Buffer).w,a0
		lea	(Palette_Underwater_Target).w,a1
		move.b	(Palette_Fade_Info).w,d0
		adda.w	d0,a0
		adda.w	d0,a1
		move.b	(Palette_Fade_Count).w,d0
; Offset_0x002D7C:
.loop:
		bsr.s	Pal_AddColor
		dbf	d0,.loop

Offset_0x002D82:
		rts

; ---------------------------------------------------------------------------
; Subroutine to update a single colour once
; ---------------------------------------------------------------------------
; Offset_0x002D84:
Pal_AddColor:
		move.w	(a1)+,d2
		move.w	(a0),d3
		cmp.w	d2,d3
		beq.s	Pal_NoAdd
		move.w	d3,d1
; Pal_AddBlue:
		addi.w	#$200,d1
		cmp.w	d2,d1
		bhi.s	Pal_AddGreen
		move.w	d1,(a0)+
		rts
; ---------------------------------------------------------------------------
; Offset_0x002D9A:
Pal_AddGreen:
		move.w	d3,d1
		addi.w	#$20,d1
		cmp.w	d2,d1
		bhi.s	Pal_AddRed
		move.w	d1,(a0)+
		rts
; ---------------------------------------------------------------------------
; Offset_0x002DA8:
Pal_AddRed:
		addq.w	#2,(a0)+
		rts
; ---------------------------------------------------------------------------
; Offset_0x002DAC:
Pal_NoAdd:
		addq.w	#2,a0
		rts
; End of function Pal_FadeFromBlack


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to clear the color RAM (make the entire screen black)
; ---------------------------------------------------------------------------
; Offset_0x002DB0:
Pal_Clear:
		moveq	#0,d0
		lea	(Palette_Buffer).w,a0
		move.b	(Palette_Fade_Info).w,d0
		adda.w	d0,a0
		moveq	#0,d1
		move.b	(Palette_Fade_Count).w,d0
; Offset_0x002DC2:
.loop:
		move.w	d1,(a0)+
		tst.b	(Water_Level_Flag).w
		beq.s	.noWater
		move.w	d1,(Palette_Underwater_Buffer-Palette_Buffer)-2(a0)
; Offset_0x002DCE:
.noWater:
		dbf	d0,.loop
		rts
; End of function Pal_Clear


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to run the palette timer
; ---------------------------------------------------------------------------

; Offset_0x002DD4:
AnimatePalette:
		tst.w	(Palette_Fade_Timer).w
		beq.s	Run_PaletteCycle
		subq.w	#1,(Palette_Fade_Timer).w
		bra.w	Pal_FadeIn
; ---------------------------------------------------------------------------
; Offset_0x002DE2:
Run_PaletteCycle:
		jmp	(PalCycle_Load).l
; End of function AnimatePalette


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to fade out to black
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x002DE8: Pal_FadeFrom:
Pal_FadeToBlack:
		move.w	#$3F,(Palette_Fade_Info).w
		move.w	#$15,d4
; Offset_0x002DF2: Pal_FadeFrom_Loop:
.loop:
		move.b	#$12,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		bsr.s	Pal_FadeOut
		bsr.w	RunPLC_RAM
		dbf	d4,.loop
		rts

;-------------------------------------------------------------------------------
Pal_FadeOut:                                                   ; Offset_0x002E08
		moveq	#0,d0
		lea	(Palette_Buffer).w,a0                       ; $FFFFED00
		move.b	(Palette_Fade_Info).w,d0                    ; $FFFFF626
		adda.w	D0,a0
		move.b	(Palette_Fade_Count).w,d0                   ; $FFFFF627
Offset_0x002E18:
		bsr.s	Pal_DecColor                           ; Offset_0x002E36
		dbf	D0, Offset_0x002E18
		moveq	#0,d0
		lea	(Palette_Underwater_Buffer).w,a0            ; $FFFFF080
		move.b	(Palette_Fade_Info).w,d0                    ; $FFFFF626
		adda.w	D0,a0
		move.b	(Palette_Fade_Count).w,d0                   ; $FFFFF627
Offset_0x002E2E:
		bsr.s	Pal_DecColor                           ; Offset_0x002E36
		dbf	D0, Offset_0x002E2E
		rts
Pal_DecColor:                                                  ; Offset_0x002E36
		move.w	(A0),d2
		beq.s	Pal_NoDec                              ; Offset_0x002E62
Pal_DecRed:
		move.w	D2,d1
		andi.w	#$E,d1
		beq.s	Pal_DecGreen                           ; Offset_0x002E46
		subq.w	#2,(A0)+
		rts
Pal_DecGreen:                                                  ; Offset_0x002E46
		move.w	D2,d1
		andi.w	#$E0,d1
		beq.s	Pal_DecBlue                            ; Offset_0x002E54
		subi.w	#$20,(A0)+
		rts
Pal_DecBlue:                                                   ; Offset_0x002E54
		move.w	D2,d1
		andi.w	#$E00,d1
		beq.s	Pal_NoDec                              ; Offset_0x002E62
		subi.w	#$200,(A0)+
		rts
Pal_NoDec:                                                     ; Offset_0x002E62
		addq.w	#2,a0
		rts
;-------------------------------------------------------------------------------
Pal_MakeWhite: ; Usado pelo Special Stage                      ; Offset_0x002E66
		move.w	#$3F,(Palette_Fade_Info).w                ; $FFFFF626
		moveq	#0,d0
		lea	(Palette_Buffer).w,a0                       ; $FFFFED00
		move.b	(Palette_Fade_Info).w,d0                    ; $FFFFF626
		adda.w	D0,a0
		move.w	#$EEE,d1
		move.b	(Palette_Fade_Count).w,d0                   ; $FFFFF627
Offset_0x002E80:
		move.w	D1,(A0)+
		dbf	D0, Offset_0x002E80
		move.w	#$15,d4
Offset_0x002E8A:
		move.b	#$12,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		bsr.s	Pal_WhiteToBlack                       ; Offset_0x002EA0
		bsr.w	RunPLC_RAM                                 ; Offset_0x001556
		dbf	D4, Offset_0x002E8A
		rts
;-------------------------------------------------------------------------------
Pal_WhiteToBlack:                                              ; Offset_0x002EA0
		moveq	#0,d0
		lea	(Palette_Buffer).w,a0                       ; $FFFFED00
		lea	(Palette_Data_Target).w,a1                  ; $FFFFED80
		move.b	(Palette_Fade_Info).w,d0                    ; $FFFFF626
		adda.w	D0,a0
		adda.w	D0,a1
		move.b	(Palette_Fade_Count).w,d0                   ; $FFFFF627
Offset_0x002EB6:
		bsr.s	Pal_DecColor_2                         ; Offset_0x002EE0
		dbf	D0, Offset_0x002EB6
		tst.b	(Water_Level_Flag).w                         ; $FFFFF730
		beq.s	Offset_0x002EDE
		moveq	#0,d0
		lea	(Palette_Underwater_Buffer).w,a0            ; $FFFFF080
		lea	(Palette_Underwater_Target).w,a1            ; $FFFFF000
		move.b	(Palette_Fade_Info).w,d0                    ; $FFFFF626
		adda.w	D0,a0
		adda.w	D0,a1
		move.b	(Palette_Fade_Count).w,d0                   ; $FFFFF627
Offset_0x002ED8:
		bsr.s	Pal_DecColor_2                         ; Offset_0x002EE0
		dbf	D0, Offset_0x002ED8
Offset_0x002EDE:
		rts
;-------------------------------------------------------------------------------
Pal_DecColor_2:                                                ; Offset_0x002EE0
		move.w	(A1)+,d2
		move.w	(A0),d3
		cmp.w	D2,d3
		beq.s	Pal_NoDec_2                            ; Offset_0x002F0C
Pal_DecBlue_2:
		move.w	D3,d1
		subi.w	#$200,d1
		bcs.s	Pal_DecGreen_2                         ; Offset_0x002EF8
		cmp.w	D2,d1
		bcs.s	Pal_DecGreen_2                         ; Offset_0x002EF8
		move.w	D1,(A0)+
		rts
Pal_DecGreen_2:                                                ; Offset_0x002EF8
		move.w	D3,d1
		subi.w	#$20,d1
		bcs.s	Pal_DecRed_2                           ; Offset_0x002F08
		cmp.w	D2,d1
		bcs.s	Pal_DecRed_2                           ; Offset_0x002F08
		move.w	D1,(A0)+
		rts
Pal_DecRed_2:                                                  ; Offset_0x002F08
		subq.w	#2,(A0)+
		rts
Pal_NoDec_2:                                                   ; Offset_0x002F0C
		addq.w	#2,a0
		rts
;-------------------------------------------------------------------------------
Pal_MakeFlash:  ; Usado pelo Special Stage                     ; Offset_0x002F10
		move.w	#$3F,(Palette_Fade_Info).w                ; $FFFFF626
		move.w	#$15,d4
Offset_0x002F1A:
		move.b	#$12,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		bsr.s	Pal_ToWhite                            ; Offset_0x002F30
		bsr.w	RunPLC_RAM                                 ; Offset_0x001556
		dbf	D4, Offset_0x002F1A
		rts
Pal_ToWhite:                                                   ; Offset_0x002F30
		moveq	#0,d0
		lea	(Palette_Buffer).w,a0                       ; $FFFFED00
		move.b	(Palette_Fade_Info).w,d0                    ; $FFFFF626
		adda.w	D0,a0
		move.b	(Palette_Fade_Count).w,d0                   ; $FFFFF627
Offset_0x002F40:
		bsr.s	Pal_AddColor_2                         ; Offset_0x002F5E
		dbf	D0, Offset_0x002F40
		moveq	#0,d0
		lea	(Palette_Underwater_Buffer).w,a0            ; $FFFFF080
		move.b	(Palette_Fade_Info).w,d0                    ; $FFFFF626
		adda.w	D0,a0
		move.b	(Palette_Fade_Count).w,d0                   ; $FFFFF627
Offset_0x002F56:
		bsr.s	Pal_AddColor_2                         ; Offset_0x002F5E
		dbf	D0, Offset_0x002F56
		rts
Pal_AddColor_2:                                                ; Offset_0x002F5E
		move.w	(A0),d2
		cmpi.w	#$EEE,d2
		beq.s	Pal_NoAdd_2                            ; Offset_0x002F9A
Pal_AddRed_2:
		move.w	D2,d1
		andi.w	#$E,d1
		cmpi.w	#$E,d1
		beq.s	Pal_AddGreen_2                         ; Offset_0x002F76
		addq.w	#2,(A0)+
		rts
Pal_AddGreen_2:                                                ; Offset_0x002F76
		move.w	D2,d1
		andi.w	#$E0,d1
		cmpi.w	#$E0,d1
		beq.s	Pal_AddBlue_2                          ; Offset_0x002F88
		addi.w	#$20,(A0)+
		rts
Pal_AddBlue_2:                                                 ; Offset_0x002F88
		move.w	D2,d1
		andi.w	#$E00,d1
		cmpi.w	#$E00,d1
		beq.s	Pal_NoAdd_2                            ; Offset_0x002F9A
		addi.w	#$200,(A0)+
		rts
Pal_NoAdd_2:                                                   ; Offset_0x002F9A
		addq.w	#2,a0
		rts
;===============================================================================
; Rotinas para escurecer / clarear a tela progressivamente
; <<<-
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutines to load the palette for various circumstances
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x002F9E: PalLoad1:
PalLoad_ForFade:
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		move.l	(a1)+,a2
		move.w	(a1)+,a3
		adda.w	#$80,a3
		move.w	(a1)+,d7
; Offset_0x002FB2: PalLoad1_Loop:
.loop:
		move.l	(a2)+,(a3)+
		dbf	d7,.loop
		rts
; End of function PalLoad_ForFade

; ---------------------------------------------------------------------------
; Offset_0x002FBA: PalLoad2:
PalLoad_Now:
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		move.l	(a1)+,a2
		move.w	(a1)+,a3
		move.w	(a1)+,d7
; Offset_0x002FCA: PalLoad2_Loop:
.loop:
		move.l	(a2)+,(a3)+
		dbf	d7,.loop
		rts
; End of function PalLoad_Now

; ---------------------------------------------------------------------------
; Offset_0x002FD2: PalLoad3_Water:
PalLoad_Water_Now:
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		move.l	(a1)+,a2
		move.w	(a1)+,a3
		adda.w	#$380,a3
		move.w	(a1)+,d7
; Offset_0x02FE6:
PalLoad3_Loop:
		move.l	(a2)+,(a3)+
		dbf	d7,PalLoad3_Loop
		rts
; End of function PalLoad_Water_Now

; ---------------------------------------------------------------------------
; Offset_0x002FEE: PalLoad4_Water:
PalLoad_Water_ForFade:
		lea	(PalPointers).l,a1
		lsl.w	#3,d0
		adda.w	d0,a1
		move.l	(a1)+,a2
		move.w	(a1)+,a3
		adda.w	#$300,a3
		move.w	(a1)+,d7
; Offset_0x003002:
PalLoad4_Loop:
		move.l	(a2)+,(a3)+
		dbf	d7,PalLoad4_Loop
		rts
; End of function PalLoad_Water_ForFade

; ===========================================================================
; ---------------------------------------------------------------------------
; GAME MODE - Sega Screen
; Almost identical to the Sonic 2 screen, but with programming changes
; made to work with Sonic 3's workings,although it is in a rough state
; ---------------------------------------------------------------------------
; Offset_0x00300A:
SegaScreen:
		moveq	#signextendB(cmd_Stop),d0
		bsr.w	PlaySound
		bsr.w	ClearPLC
		bsr.w	Pal_FadeToBlack

		clearRAM	Misc_Variables,Misc_Variables_End
		clearRAM	Obj_Memory_Address,Obj_Memory_Address_End

		lea	(VDP_Control_Port).l,a6
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8405,(a6)
		move.w	#$8700,(a6)
		move.w	#$8B03,(a6)
		move.w	#$8C81,(a6)
		move.w	#$9003,(a6)
		clr.b	(Underwater_Flag).w
		clr.w	(Two_Player_Flag).w
		move	#$2700,sr
		move.w	(VDP_Register_1_Command).w,d0
		andi.b	#$BF,d0
		move.w	d0,(VDP_Control_Port).l
		bsr.w	ClearScreen

		lea	(VDP_Control_Port),a5
		move.w	#$8F01,(a5)
		move.l	#$941F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(VDP_Data_Port).l

Offset_0x00309A:
		move.w	(a5),d1
		btst	#1,d1
		bne.s	Offset_0x00309A
		move.w	#$8F02,(a5)

		move.l	#$40200000,(VDP_Control_Port).l
		lea	(Art_SEGA).l,a0
		bsr.w	NemesisDec

		move.l	#$50000000,(VDP_Control_Port).l
		lea	(Art_SEGA_Some_Blocks).l,a0
		bsr.w	NemesisDec

		lea	(RAM_Start).l,a1
		lea	(SEGA_Mappings).l,a0
		move.w	#0,d0
		bsr.w	EnigmaDec

		lea	(RAM_Start).l,a1
		move.l	#$60000002,d0
		moveq	#40-1,d1
		moveq	#28-1,d2
		bsr.w	Offset_0x0031B4

		tst.b	(Hardware_Id).w		; is this a Japanese Mega Drive?
		bmi.s	Offset_0x00310C		; if yes, branch
		lea	(Obj_02_Mem_Address).w,a1
		move.l	#Obj_SegaTM,(a1)
		move.b	#$4E,Obj_Subtype(a1)

Offset_0x00310C:
		moveq	#0,d0
		bsr.w	PalLoad_Now                               ; Offset_0x002FBA
		move.w	#-$A,(Palette_Cycle_Count_0).w            ; $FFFFF632
		move.w	#0,(Palette_Cycle_Count_1).w            ; $FFFFF634
		move.w	#0,(VBlank_Subroutine).w                ; $FFFFF662
		move.w	#0,(PalCycle_Done_Flag).w               ; $FFFFF660
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		move.l	#Obj_SegaSonic,(A1)     ; Offset_0x034488
		move.b	#$4C,Obj_Subtype(A1)                            ; $002C
		move.w	#240,(Demo_Timer).w                       ; $FFFFF614
		jsr	(Init_Sprite_Table).l                    ; Offset_0x011042
		move.w	(VDP_Register_1_Command).w,d0               ; $FFFFF60E
		ori.b	#$40,d0
		move.w	D0,(VDP_Control_Port)                       ; $00C00004
Offset_0x003154:
		move.b	#2,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		jsr	(RunObjects).l                         ; Offset_0x0110AE
		jsr	(Build_Sprites).l                        ; Offset_0x011296
		tst.b	(PalCycle_Done_Flag).w                       ; $FFFFF660
		beq.s	Offset_0x003154
		moveq	#signextendB(cmd_SEGA),d0
		bsr.w	PlaySound                             ; Offset_0x001176
		move.b	#2,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		move.w	#180,(Demo_Timer).w                       ; $FFFFF614
Offset_0x003186:
		move.b	#$14,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		tst.w	(Demo_Timer).w                               ; $FFFFF614
		beq.s	Offset_0x0031A4
		move.b	(Control_Ports_Buffer_Data+1).w,d0      ; $FFFFF605
		or.b	(Control_Ports_Buffer_Data+3).w,d0      ; $FFFFF607
		andi.b	#button_start_mask,d0
		beq.s	Offset_0x003186
Offset_0x0031A4:
		clr.w	(PalCycle_Done_Flag).w                       ; $FFFFF660
		clr.w	(VBlank_Subroutine).w                        ; $FFFFF662
		move.b	#gm_TitleScreen,(Game_Mode).w          ; $04, $FFFFF600
		rts
Offset_0x0031B4:
		lea	(VDP_Data_Port),a6                          ; $00C00000
		move.l	#$1000000,d4
Offset_0x0031C0:
		move.l	d0,4(a6)
		move.w	d1,d3
Offset_0x0031C6:
		move.w	(a1)+,(a6)
		dbf	d3,Offset_0x0031C6
		add.l	d4,d0
		dbf	d2,Offset_0x0031C0
		rts
;===============================================================================
; Logo da SEGA
; <<<-
;===============================================================================

; ===========================================================================
; ---------------------------------------------------------------------------
; GAME MODE - Title Screen
; ---------------------------------------------------------------------------
; Offset_0x0031D4:
TitleScreen:
		moveq	#signextendB(cmd_FadeOut),d0
		bsr.w	PlaySound
		bsr.w	ClearPLC
		bsr.w	Pal_FadeToBlack
		move	#$2700,sr
		lea	(VDP_Control_Port).l,a6
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$9011,(a6)
		move.w	#$9200,(a6)
		move.w	#$8B03,(a6)
		move.w	#$8720,(a6)
		clr.b	(Underwater_Flag).w
		move.w	#$8C81,(a6)
		bsr.w	ClearScreen
		clearRAM	Sprite_Table_Input,Sprite_Table_Input_End
		clearRAM	Obj_Memory_Address,Obj_Memory_Address_End
		clearRAM	Misc_Variables,Misc_Variables_End
		clearRAM	Camera_RAM,Camera_RAM+$100
		jsr	(Init_Sprite_Table).l
		clearRAM	Palette_Buffer,Palette_Buffer+$100

		move.b	#0,(Saved_Level_Flag).w
		move.b	#0,(Saved_Level_Flag_P2).w
		move.w	#0,(Debug_placement_mode).w
		move.w	#0,(Auto_Control_Player_Flag).w
		move.w	#0,(Palette_Cycle_Count_1).w
		move.w	#0,(Two_Player_Flag).w
		move.b	#0,(Title_Card_Flag).w
		move.b	#0,(Debug_Mode_Active).w
		move.w	#0,(Two_Player_Flag).w
		move.w	#(60*6)-1,(Demo_Timer).w
		clr.w	(DMA_Buffer_List).w
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w

		lea	(TitleBanner_Frames).l,a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,a0
		lea	(RAM_Start).l,a1
		bsr.w	KosinskiDec
		move.w	a1,d3
		lsr.w	#1,d3
		move.l	#RAM_Start,d1
		move.w	#$8000,d2
		andi.l	#$FFFFFF,d1
		jsr	(QueueDMATransfer).l
		move.l	(a2)+,a0
		lea	(Palette_Row_3_Offset).w,a1
		moveq	#bytesToLcnt($20),d0

Offset_0x0032EE:
		move.l	(a0)+,(a1)+
		dbf	D0, Offset_0x0032EE
		lea	(RAM_Start+$4000).l,a1
		moveq	#0,d0
		move.w	#bytesToLcnt($1400),d1

Offset_0x003300:
		move.l	d0,(a1)+
		dbf	d1,Offset_0x003300
		lea	(RAM_Start+$4000).l,a1
		move.l	(a2)+,a0
		move.w	#$6400,d0
		bsr.w	EnigmaDec
		lea	(RAM_Start+$4000).l,a1
		move.l	#$40000003,d0
		moveq	#40-1,d1
		moveq	#64-1,d2
		jsr	(PlaneMapToVRAM_H40).l

		move.b	#2,(Title_Screen_Animate_Delay).w
		move.w	#-$60,(Vertical_Scroll_Value).w
		move.w	#$400,(Vertical_Scrolling).w
		move.l	#$FFA00000,(Camera_Y).w
		move.b	#4,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		move.b	#-1,(Title_Screen_Animate_Buffer).w
		move.b	#1,(Title_Screen_Animate_Delay).w
		move.w	#1,(Title_Screen_Animate_Frame).w
		moveq	#0,d0
		bsr.w	TitleSonic_LoadFrame
		move.b	#4,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		moveq	#id_PLC_Main1,d0
		bsr.w	LoadPLC2

		move.w	#0,(Secret_Code_Input_Entries).w
		move.w	#0,(Secret_Code_Input_Entries_2).w
		move.w	#$101,(Level_Select_Flag).w		; enable level select without cheats
	if 0
		move.w	#$101,(Debug_Mode_Flag).w
	else
		; presumably,a previous build also enabled Debug Mode here
		nop
		nop
		nop
	endif

		moveq	#signextendB(mus_TitleScreen),d0
		bsr.w	PlaySound
		move.w	(VDP_Register_1_Command).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_Control_Port).l
; Offset_0x0033A4:
TitleScreen_Loop:
		move.b	#4,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		bsr.w	Iterate_TitleSonicFrame
		jsr	(RunObjects).l
		jsr	(Build_Sprites).l

		bsr.w	RunPLC_RAM
		bsr.w	LevelSelectCheat

		tst.w	(Demo_Timer).w
		beq.w	TitleScreen_Demo
		move.b	(Control_Ports_Buffer_Data+1).w,d0
		or.b	(Control_Ports_Buffer_Data+3).w,d0
		andi.b	#button_start_mask,d0
		beq.w	TitleScreen_Loop
		move.b	#gm_PlayMode,(Game_Mode).w
		move.b	#3,(Life_count).w
		move.b	#3,(Life_Count_P2).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score_Count_Address).w
		move.w	d0,(Ring_Count_Address_P2).w
		move.l	d0,(Time_Count_Address_P2).w
		move.l	d0,(Score_Count_Address_P2).w
		move.b	d0,(Continue_count).w
		move.l	#5000,(Next_Extra_Life_Score).w
		move.l	#5000,(Next_Extra_Life_Score_P2).w
		moveq	#signextendB(cmd_FadeOut),d0
		bsr.w	PlaySound
		; leftover from Sonic 2's title menu
		moveq	#0,d0
		move.b	(Title_Screen_Menu_Cursor).w,d0
		bne.s	TitleScreen_Check2P
		moveq	#0,d0
		move.w	d0,(Two_Player_Flag_2).w
		move.w	d0,(Two_Player_Flag).w
		move.w	d0,(Current_ZoneAndAct).w
		move.w	d0,(Apparent_ZoneAndAct).w
		move.w	#AIz_Act_1,(Current_ZoneAndAct).w
		move.w	#AIz_Act_1,(Apparent_ZoneAndAct).w
		tst.b	(Level_Select_Flag).w
		beq.s	TitleScreen_ClrSpecStg
		move.b	#gm_Level_Select_Menu,(Game_Mode).w
; TitleScreen_SonicAndTails:
		btst	#button_A,(Control_Ports_Buffer_Data).w
		beq.s	TitleScreen_SonicAlone
		move.w	#Sonic_And_Miles,(Player_Select_Flag).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x003466:
TitleScreen_SonicAlone:
		btst	#button_B,(Control_Ports_Buffer_Data).w
		beq.s	TitleScreen_TailsAlone
		move.w	#Sonic_Alone,(Player_Select_Flag).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x003476:
TitleScreen_TailsAlone:
		btst	#button_C,(Control_Ports_Buffer_Data).w
		beq.s	Offset_0x003486
		move.w	#Miles_Alone,(Player_Select_Flag).w
		rts

Offset_0x003486:
		rts
; ---------------------------------------------------------------------------
; Offset_0x003488:
TitleScreen_ClrSpecStg:
		move.w	d0,(Current_SpecialStage).w
		move.w	d0,(SS_Completed_Flag).w
		move.l	d0,(Emerald_Collected_Flag_List).w
		move.l	d0,(Emerald_Collected_Flag_List+4).w
		rts
; ===========================================================================
; Leftovers from Sonic 2
; Offset_0x00349A: Title_Screen_Check_2_Player_Vs:
TitleScreen_Check2P:
		subq.b	#1,d0
		bne.s	TitleScreen_LoadOptions
		moveq	#1,d1
		move.w	d1,(Two_Player_Flag_2).w
		move.w	d1,(Two_Player_Flag).w
		moveq	#0,d0
		move.w	d0,(SS_Completed_Flag).w
		move.l	d0,(Emerald_Collected_Flag_List).w
		move.l	d0,(Emerald_Collected_Flag_List+4).w
		move.b	#gm_S2_Versus_Mode_Menu,(Game_Mode).w
		move.b	#0,(Level_Id_2P).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x0034C4: Title_Screen_Load_Options_Menu:
TitleScreen_LoadOptions:
		move.b	#gm_S2_Options_Menu,(Game_Mode).w
		move.b	#0,(Options_Menu_Cursor).w
		rts
; ===========================================================================
; Offset_0x0034D2:
TitleScreen_Demo:
		moveq	#signextendB(cmd_FadeOut),d0
		bsr.w	PlaySound

		move.w	(Demo_Sequence_Idx).w,d0
		andi.w	#7,d0
		add.w	d0,d0
		move.w	Demo_Mode_Level_Array(pc,d0.w),d0
		move.w	d0,(Current_ZoneAndAct).w
		move.w	d0,(Apparent_ZoneAndAct).w

		addq.w	#1,(Demo_Sequence_Idx).w
		cmpi.w	#4,(Demo_Sequence_Idx).w		; have we reached the end of the demo index?
		bcs.s	.notIndexEnd				; if not, branch
		move.w	#0,(Demo_Sequence_Idx).w
; Offset_0x003500:
.notIndexEnd:
		move.w  #1,(Auto_Control_Player_Flag).w
		move.b  #gm_DemoMode,(Game_Mode).w
		move.b  #3,(Life_count).w
		move.b  #3,(Life_Count_P2).w
		moveq   #0,d0
		move.w  d0,(Ring_count).w
		move.l  d0,(Timer).w
		move.l  d0,(Score_Count_Address).w
		move.w  d0,(Ring_Count_Address_P2).w
		move.l  d0,(Time_Count_Address_P2).w
		move.l  d0,(Score_Count_Address_P2).w
		move.l  #5000,(Next_Extra_Life_Score).w
		move.l  #5000,(Next_Extra_Life_Score_P2).w
		rts
;-------------------------------------------------------------------------------
Demo_Mode_Level_Array:                                         ; Offset_0x003544
		dc.w	AIz_Act_1                                        ; $0000
		dc.w	AIz_Act_1                                        ; $0000
		dc.w	AIz_Act_1                                        ; $0000
		dc.w	AIz_Act_1                                        ; $0000
;-------------------------------------------------------------------------------
S2_Demo_Mode_Level_Array:                                      ; Offset_0x00354C
		dc.w	S2_EHz_Act_1  ; Emerald Hill S2 Left over        ; $0000
		dc.w	S2_CPz_Act_1  ; Chemical Plant S2 Left over      ; $0D00
		dc.w	S2_ARz_Act_1  ; Aquatic Ruin Left over           ; $0F00
		dc.w	S2_CNz_Act_1  ; Casino Night S2 Left over        ; $0C00

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to check if the player has entered the level select cheat
; (completely recycled from the region switch cheat from Sonic 2)
; ---------------------------------------------------------------------------
; Offset_0x003554: Secret_Codes_Test:
LevelSelectCheat:
		lea	(LevelSelect_Inputs).l,a0
		move.w	(Secret_Code_Input_Entries).w,d0
		adda.w	d0,a0
		move.b	(Control_Ports_Buffer_Data+1).w,d0
		andi.b	#button_up_mask+button_down_mask+button_left_mask+button_right_mask,d0
		beq.s	Offset_0x003590
		cmp.b	(a0),d0
		bne.s	Code_NoMatch
		addq.w	#1,(Secret_Code_Input_Entries).w
		tst.b	1(a0)
		bne.s	Offset_0x003590
		move.w	#$101,(Level_Select_Flag).w
		move.w	#$101,(Debug_Mode_Flag).w
		moveq	#signextendB(sfx_RingRight),d0
		bsr.w	PlaySound
; Offset_0x00358A:
Code_NoMatch:
		move.w	#0,(Secret_Code_Input_Entries).w

Offset_0x003590:
		rts
; End of function LevelSelectCheat

; ===========================================================================
; Offset_0x003592: Secret_Code_Sequence:
LevelSelect_Inputs:
		dc.b	button_up_mask
		dc.b	button_up_mask
		dc.b	button_down_mask
		dc.b	button_down_mask
		dc.b	button_up_mask
		dc.b	button_up_mask
		dc.b	0
		even
; ===========================================================================

VInt_Title_Screen:                                             ; Offset_0x00359A
		tst.b	(Title_Screen_Animate_Delay).w               ; $FFFFFFBD
		bne.s	Offset_0x0035E4
		move.b	#2,(Title_Screen_Animate_Delay).w         ; $FFFFFFBD
		cmpi.w	#$10,(Title_Screen_Animate_Frame).w       ; $FFFFFFBE
		bcs.s	Offset_0x0035B4
		move.b	#2,(Title_Screen_Animate_Delay).w         ; $FFFFFFBD
Offset_0x0035B4:
		lea	(Palette_Row_2_Data_Target).w,a0              ; $FFFFEDC0
		lea	(Palette_Row_2_Offset).w,a1                 ; $FFFFED40
		moveq	#bytesToLcnt($20),d0
Offset_0x0035BE:
		move.l	(A0)+,(A1)+
		dbf	D0, Offset_0x0035BE
		eori.b	#-1,(Title_Screen_Animate_Buffer).w        ; $FFFFFFBC
		tst.b	(Title_Screen_Animate_Buffer).w              ; $FFFFFFBC
		beq.s	Offset_0x0035DA
		move.w	#$8407,(VDP_Control_Port)                   ; $00C00004
		rts
Offset_0x0035DA:
		move.w	#$8405,(VDP_Control_Port)                   ; $00C00004
		rts
Offset_0x0035E4:
		subq.b	#1,(Title_Screen_Animate_Delay).w         ; $FFFFFFBD
		rts
; ==============================================================================
; Offset_0x0035EA:
Iterate_TitleSonicFrame:
		cmpi.b	#1,(Title_Screen_Animate_Delay).w
		bne.s	Offset_0x003606
		move.w	(Title_Screen_Animate_Frame).w,d0
		move.b	SonicFrameIndex(pc,d0.w),d0
		ext.w	d0
		bmi.s	Offset_0x003608
		bsr.w	TitleSonic_LoadFrame
		addq.w	#1,(Title_Screen_Animate_Frame).w

Offset_0x003606:
		rts
;-------------------------------------------------------------------------------

Offset_0x003608:
		move.b	#2,(Title_Screen_Animate_Delay).w
		bra.w	TitleBanner_Raise
; ==============================================================================
; Offset_0x003612:
SonicFrameIndex:
		dc.b	$2A, $FF, $00, $01, $02, $03, $00, $01
		dc.b	$02, $03, $04, $05, $06, $07, $08, $09
		dc.b	$0A, $0B, $0C, $0D, $0E, $0F, $10, $11
		dc.b	$12, $13, $14, $15, $16, $17, $18, $19
		dc.b	$1A, $1B, $1C, $1D, $1E, $1F, $20, $21
		dc.b	$22, $23, $24, $25, $26, $27, $28, $29
		dc.b	$2A, $FF
		even
; ===========================================================================
; Lift the banner up; this is still in the final, unused at $3AB4
; Offset_0x003644:
TitleBanner_Raise:
		move.b	(Title_Screen_Animate_Buffer).w,d2
		cmpi.b	#1,d2
		beq.s	Offset_0x00369C
		move.w	(Vertical_Scrolling).w,d0
		ext.l	d0
		lsl.l	#8,d0
		add.l	d0,(Camera_Y).w
		move.w	(Camera_Y).w,d0
		move.w	d0,(Vertical_Scroll_Value).w
		move.b	#0,(Title_Screen_Animate_Buffer).w
		move.w	#$40,d1
		cmpi.w	#0,d0
		blt.s	Offset_0x00368E
		bne.s	Offset_0x003684
		cmpi.w	#-$5B,(Vertical_Scrolling).w
		bne.s	Offset_0x003684
		move.b	#1,(Title_Screen_Animate_Buffer).w
		bra.s	Offset_0x00369C
; ---------------------------------------------------------------------------

Offset_0x003684:
		move.b	#-1,(Title_Screen_Animate_Buffer).w
		move.w	#-$40,d1

Offset_0x00368E:
		add.w	d1,(Vertical_Scrolling).w
		cmp.b	(Title_Screen_Animate_Buffer).w,d2
		beq.s	Offset_0x00369C
		asr.w	(Vertical_Scrolling).w

Offset_0x00369C:
		rts
; End of function Iterate_TitleSonicFrame

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to animate Sonic on the title screen
; Effectively useless at this point since there's only one frame
; ---------------------------------------------------------------------------

; Offset_0x00369E:
TitleSonic_LoadFrame:
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(TitleSonic_Frames).l,a2
		lea	(a2,d0.w),a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,a0
		lea	(RAM_Start).l,a1
		bsr.w	KosinskiDec
		move.w	a1,d3
		lsr.w	#1,d3
		move.l	#RAM_Start,d1
		move.w	#0,d2
		tst.b	(Title_Screen_Animate_Buffer).w
		beq.s	Offset_0x0036DE
		move.w	#$4000,d2

Offset_0x0036DE:
		andi.l	#$FFFFFF,d1
		jsr	(QueueDMATransfer).l
		move.l	(a2)+,a0
		lea	(Palette_Row_2_Data_Target).w,a1
		moveq	#bytesToLcnt($20),d0

Offset_0x0036F2:
		move.l	(a0)+,(a1)+
		dbf	d0,Offset_0x0036F2
		tst.b	(Title_Screen_Animate_Buffer).w
		bne.s	Offset_0x00372E
		lea	(RAM_Start+$4000).l,a1
		move.l	(a2)+,a0
		move.w	#$4000,d0
		bsr.w	EnigmaDec
		move	#$2700,sr
		lea	(RAM_Start+$4000).l,a1
		move.l	#$60000003,d0
		moveq	#40-1,d1
		moveq	#28-1,d2
		jsr	(PlaneMapToVRAM_H40).l
		move	#$2300,sr
		rts
; ---------------------------------------------------------------------------

Offset_0x00372E:
		lea	(RAM_Start+$4000).l,a1
		move.l	(a2)+,a0
		move.w	#$4200,d0
		bsr.w	EnigmaDec
		move	#$2700,sr
		lea	(RAM_Start+$4000).l,a1
		move.l	#$60000002,d0
		moveq	#40-1,d1
		moveq	#28-1,d2
		jsr	(PlaneMapToVRAM_H40).l
		move	#$2300,sr
		rts
; End of function TitleSonic_LoadFrame

; ===========================================================================
; Offset_0x00375E: Title_Screen_Sonic_3_Data:
TitleBanner_Frames:
		dc.l	Art_Title_Screen_Sonic_3
		dc.l	Pal_Title_Screen_Sonic_3
		dc.l	Map_Title_Screen_Sonic_3
; ===========================================================================
; Offset_0x00376A: Title_Screen_Sonic_Data:
TitleSonic_Frames:
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic
		dc.l	Art_Title_Screen_Sonic
		dc.l	Pal_Title_Screen_Sonic
		dc.l	Map_Title_Screen_Sonic

;===============================================================================
; Modo de jogo ou demonstra��o das fases
; ->>>
;===============================================================================
PlayList:                                                      ; Offset_0x00396E
		dc.b	mus_AIZ1                                 ; $01
		dc.b	mus_AIZ2                                 ; $02
		dc.b	mus_HCZ1                                    ; $03
		dc.b	mus_HCZ2                                    ; $04
		dc.b	mus_MGZ1                                ; $05
		dc.b	mus_MGZ2                                ; $06
		dc.b	mus_CNZ1                               ; $07
		dc.b	mus_CNZ2                               ; $08
		dc.b	mus_FBZ1                               ; $09
		dc.b	mus_FBZ2                               ; $0A
		dc.b	mus_ICZ1                                       ; $0B
		dc.b	mus_ICZ2                                       ; $0C
		dc.b	mus_LBZ1                                  ; $0D
		dc.b	mus_LBZ2                                  ; $0E
		dc.b	mus_MVZ1                              ; $0F
		dc.b	mus_MVZ2                              ; $10
		dc.b	mus_SOZ1                                   ; $11
		dc.b	mus_SOZ2                                   ; $12
		dc.b	mus_LRZ1                                    ; $13
		dc.b	mus_LRZ2                                    ; $14
		dc.b	mus_SSZ                                  ; $15
		dc.b	mus_DEZ1                                    ; $16
		dc.b	mus_DEZ2                                    ; $17
		dc.b	mus_DEZ2                                    ; $17
		dc.b	mus_DDZ                                   ; $1A
		dc.b	mus_DDZ                                   ; $1A
		dc.b	mus_SpecialStage                                  ; $1C
		dc.b	mus_SpecialStage                                  ; $1C
		dc.b	mus_ALZ                                     ; $20
		dc.b	mus_ALZ                                     ; $20
		dc.b	mus_BPZ                                   ; $21
		dc.b	mus_BPZ                                   ; $21
		dc.b	mus_DPZ                                  ; $22
		dc.b	mus_DPZ                                  ; $22
		dc.b	mus_CGZ                                  ; $23
		dc.b	mus_CGZ                                  ; $23
		dc.b	mus_EMZ                                   ; $24
		dc.b	mus_EMZ                                   ; $24
		dc.b	mus_SpecialStage                                  ; $1C
		dc.b	mus_SpecialStage                                  ; $1C
		dc.b	mus_Slots                                ; $1D
		dc.b	mus_Slots                                ; $1D
		dc.b	mus_Gumball                             ; $1E
		dc.b	mus_Gumball                             ; $1E
		dc.b	mus_SpecialStage                                  ; $1C
		dc.b	mus_SpecialStage                                  ; $1C
		dc.b	mus_SpecialStage                                  ; $1C
		dc.b	mus_SpecialStage                                  ; $1C
; ===========================================================================
; Offset_0x00399E:
Level:
		bset	#7,(Game_Mode).w
		tst.w	(Auto_Control_Player_Flag).w
		bmi.s	Offset_0x0039B2
		move.b	#cmd_Stop,d0
		bsr.w	PlaySound

Offset_0x0039B2:
		clr.w	(Kos_decomp_queue_count).w
		clearRAM	Kos_decomp_stored_registers,Kos_module_queue_End
		bsr.w	ClearPLC
		bsr.w	Pal_FadeToBlack
		tst.w	(Auto_Control_Player_Flag).w
		bmi.s	Level_ClrRam
		move	#$2700,sr
		bsr.w	ClearScreen
		move	#$2300,sr
		moveq	#0,d0
		move.w	d0,(Level_frame_counter).w
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		andi.w	#$1F8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d0,d1
		lea	(TilesMainTable).l,a2
		moveq	#0,d0
		move.b	(a2,d1.w),d0
		beq.s	Offset_0x003A0A
		bsr.w	LoadPLC

Offset_0x003A0A:
		bsr.w	Level_SetPlayerMode
		moveq	#6,d0
		tst.w	(Two_Player_Flag).w
		bne.s	.loadPLC
		moveq	#id_PLC_Main2,d0
		bsr.w	LoadPLC

		cmpi.w	#2,(Player_Selected_Flag).w		; are we playing as Tails?
		bne.s	Level_ClrRam				; if not, branch
		addq.w	#id_PLC_Main3-id_PLC_Main2,d0		; load TAILS life icon
		; for some reason, Sonic 3 final is missing this and the Miles
		; graphic, meaning it displays Tails even on a Japanese console
		tst.b	(Hardware_Id).w				; is this a Japanese Mega Drive?
		bpl.s	.loadPLC				; if not, branch
		addq.w	#2,d0					; load MILES life icon
; Offset_0x003A2E:
.loadPLC:
		bsr.w	LoadPLC
; Offset_0x003A32:
Level_ClrRam:
		clearRAM	Sprite_Table_Input,Sprite_Table_Input_End
		clearRAM	Obj_Memory_Address,Obj_Memory_Address_End
		clearRAM	MiscLevelVariables,MiscLevelVariables_End
		clearRAM	Misc_Variables,Misc_Variables_End
		clearRAM	Oscillating_variables,Oscillating_variables_End
		clearRAM	Boss_Data_Buffer,Object_Respawn_Table

		jsr	(Init_Sprite_Table).l
		lea	(VDP_Control_Port).l,a6
		move.w	#$8B03,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$857C,(a6)
		move.w	#$9001,(a6)
		move.w	#$8004,(a6)
		move.w	#$8720,(a6)
		move.w	#$8C81,(a6)
		tst.b	(Debug_Mode_Flag).w
		beq.s	Level_ChkMode
; Level_ChkNight:
		btst	#5,(Control_Ports_Buffer_Data).w
		beq.s	Level_ChkDebug
		move.w  #$8C89,(a6)
; Offset_0x003AD0:
Level_ChkDebug:
		btst	#6,(Control_Ports_Buffer_Data).w
		beq.s	Level_ChkMode
		move.b	#1,(Debug_Mode_Active).w
; Offset_0x003ADE:
Level_ChkMode:
		move.w	#$8AFF,(Horizontal_Int_Count_Cmd).w
		tst.w	(Two_Player_Flag).w
		beq.s	Level_LoadPal
		move.w	#$4EF9,(H_int_jump).w
		move.l	#HBlank_Competition,(H_int_addr).w
		move.w	#$8014,(a6)
		move.w	#$8220,(a6)
		move.w	#$8405,(a6)
		move.w	#$8A6B,(Horizontal_Int_Count_Cmd).w
		move.w	#$9003,(a6)
		cmpi.b	#BPz_Id,(Current_Zone).w
		bne.s	Level_LoadPal
		move.w	#$9011,(a6)
; Offset_0x003B1A:
Level_LoadPal:
		move.w	(Horizontal_Int_Count_Cmd).w,(a6)
		clr.w	(DMA_Buffer_List).w
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w
		moveq	#3,d0
		bsr.w	PalLoad_Now
		bsr.w	Level_InitWaterLevels
		tst.b	(Water_Level_Flag).w
		beq.s	Level_GetBgm
		move.w	#$8014,(a6)
; Offset_0x003B3E:
Level_GetBgm:
		tst.w	(Auto_Control_Player_Flag).w
		bmi.s	Offset_0x003BAE
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#7,d0
		lea	(PlayList).l,a1
		move.b	(a1,d0.w),d0
		move.w	d0,(Level_Music_Buffer).w
		bsr.w	PlaySound
		move.b	#0,(Title_Card_Flag).w
		cmpi.b	#DDz_Id,(Current_Zone).w	; is this Doomsday Zone?
		bhi.s	Level_CreateHUD			; if not (but is Zone 0D or above), branch
		move.l	#Obj_TitleCard,(Obj_08_Mem_Address).w
; Offset_0x003B76:
Level_TtlCard:
		move.b	#$C,(VBlank_Index).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_For_VSync
		jsr	(RunObjects).l
		jsr	(Build_Sprites).l
		bsr.w	RunPLC_RAM
		jsr	(Process_Kos_Module_Queue).l
		tst.w	(Obj_08_Mem_Address+Obj_Respaw_Ref).w
		beq.s	Level_TtlCard
		tst.l	(PLC_Data_Buffer).w
		bne.s	Level_TtlCard
; Offset_0x003BA8:
Level_CreateHUD:
		jsr	(Head_Up_Display_Base).l

Offset_0x003BAE:
 		moveq	#3,d0
		bsr.w	PalLoad_ForFade
		jsr	(LevelSizeLoad).l
		jsr	(DeformBgLayer).l
		bsr.w	LoadZoneTiles
		jsr	(LoadZoneBlockMaps).l
		jsr	(Animate_Counters_Init).l
		move	#$2700,sr
		jsr	(JmpTo_Setup_TileDrawing).l
		move	#$2300,sr
		jsr	(S2_FloorLog_Unk).l
		bsr.w	LoadCollisionIndex
		bsr.w	WaterEffects
		bsr.w	InitPlayers
		move.w	(Control_Ports_Buffer_Data+2).w,(Tmp_FF7C).w
		move.w	#0,(Control_Ports_Logical_Data).w
		move.w	#0,(Control_Ports_Logical_Data_2).w
		move.w	#0,(Control_Ports_Buffer_Data).w
		move.w	#0,(Control_Ports_Buffer_Data+2).w
		move.b	#1,(Control_Locked_Flag_P1).w
		move.b	#1,(Control_Locked_Flag_P2).w
		move.b	#0,(Title_Card_Flag).w
; Level_ChkWater:
		tst.b	(Water_Level_Flag).w
		beq.s	Level_ClrHUD
		cmpi.b	#Hz_Id,(Current_Zone).w
		beq.s	Offset_0x003C36
		cmpi.b	#Hz_Id,(Current_Zone).w
		bne.s	Level_ClrHUD

Offset_0x003C36:
		move.l	#Obj_Wave_Splash,(Obj_04_Mem_Address).w
		move.l	#Obj_0x6D_Hz_Water_Splash,(Obj_05_Mem_Address).w
		move.b	#1,(Obj_05_Mem_Address+Obj_Subtype).w
; Offset_0x003C4C:
Level_ClrHUD:
		moveq	#0,d0
		tst.b	(Saved_Level_Flag).w
		bne.s	Level_FromCheckpoint
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.b	d0,(Extra_life_flags).w
		move.w	d0,(Ring_Count_Address_P2).w
		move.l	d0,(Time_Count_Address_P2).w
		move.b	d0,(Ring_Status_Flag_P2).w
; Offset_0x003C6C:
Level_FromCheckpoint:
		move.b	d0,(Time_Over_flag).w
		move.b	d0,(Time_Over_Flag_P2).w
		move.w	d0,(Debug_placement_mode).w
		move.w	d0,(Level_inactive_flag).w
		move.b	d0,(S2_Teleport_Timer).w
		move.b	d0,(S2_Teleport_Flag).w
		move.w	d0,(Total_Ring_Count_Address).w
		move.w	d0,(Total_Ring_Count_Address_P2).w
		move.w	d0,(Monitors_Broken).w
		move.w	d0,(Monitors_Broken_P2).w
		move.w	d0,(Loser_Timer_Left).w
		move.b	d0,(LRz_Rocks_Routine).w
		bsr.w	Oscillate_Num_Init
		move.b	#1,(Update_HUD_score).w
		move.b	#1,(Update_HUD_rings).w
		move.b	#1,(Update_HUD_timer).w
		move.b	#1,(HUD_Timer_Refresh_Flag_P2).w
		tst.w	(Auto_Control_Player_Flag).w
		beq.s	Offset_0x003CCC
		tst.w	(Current_ZoneAndAct).w
		bne.s	Offset_0x003CCC
		move.l	#Obj_AIz_Intro_Surfboard,(Obj_05_Mem_Address).w

Offset_0x003CCC:
		jsr	(ObjectsManager).l
		jsr	(Load_Ring_Pos).l
		jsr	(S2_Load_Triangle_Pos).l
		jsr	(LRz_Load_Rock_Pos).l
		jsr	(RunObjects).l
		jsr	(Build_Sprites).l
		jsr	(AnimateStageTiles).l
		bsr.w	Clear_End_Level_Art_Load_Flag
		move.w	#0,(Demo_Button_Index).w
		move.w	#0,(Demo_Button_Index_2P).w
		lea	(Demo_Index).l,a1
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),a1
		tst.w	(Auto_Control_Player_Flag).w
		bpl.s	Offset_0x003D30
		lea	(Demo_End_Index).l,a1
		move.w	(End_Demo_Sequence_Idx).w,d0
		subq.w	#1,d0
		lsl.w	#2,d0
		move.l	(a1,d0.w),a1

Offset_0x003D30:
		move.b	1(a1),(Demo_Button_Press_Counter).w
		tst.b	(Current_Zone).w
		bne.s	Offset_0x003D48
		lea	(Demo_Angel_Island).l,a1
		move.b	1(a1),(Demo_Button_Press_Counter_2P).w

Offset_0x003D48:
		move.w	#$1194,(Demo_Timer).w
		tst.w	(Auto_Control_Player_Flag).w
		bpl.s	Offset_0x003D68
		move.w	#$21C,(Demo_Timer).w
		cmpi.w	#4,(End_Demo_Sequence_Idx).w
		bne.s	Offset_0x003D68
		move.w	#$1FE,(Demo_Timer).w

Offset_0x003D68:
		bsr.w	LevelInit_UndewaterPalette
		move.b	#0,(Control_Locked_Flag_P1).w
		move.b	#0,(Control_Locked_Flag_P2).w
		move.b	#1,(Title_Card_Flag).w
		tst.w	(Two_Player_Flag).w
		bne.w	Offset_0x003EE2
		cmpi.b	#ALz_Id,(Current_Zone).w
		bcc.s	Level_StartGame
		moveq	#id_PLC_Main3,d0
		bsr.w	LoadPLC
; Offset_0x003D94:
Level_StartGame:
		move.w	#$202F,(Palette_Fade_Info).w
		jsr	(Pal_Clear).l
		move.w	#$16,(Palette_Fade_Timer).w
		move.w	#$16,(Obj_08_Mem_Address+Obj_Timer).w
		bclr	#7,(Game_Mode).w

; ---------------------------------------------------------------------------
; Main level loop (when all title card and loading sequences are finished)
; ---------------------------------------------------------------------------
; Offset_0x003DB2:
Level_MainLoop:
		bsr.w	Pause
		move.b	#8,(VBlank_Index).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_For_VSync
		addq.w	#1,(Level_frame_counter).w
		bsr.w	Init_Demo_Control
		jsr	(AnimatePalette).l
		jsr	(Repeat_TileDrawing).l
		jsr	(RunObjects).l
		tst.w	(Level_inactive_flag).w
		bne.w	Level
		jsr	(DeformBgLayer).l
		jsr	(Run_TileDrawing).l
		bsr.w	WaterEffects
		bsr.w	UpdateWaterSurface
		jsr	(Load_Ring_Pos).l
		cmpi.b	#S2_CNz_Id,(Current_Zone).w
		bne.s	Offset_0x003E10
		jsr	(S2_Load_Triangle_Pos).l

Offset_0x003E10:
		cmpi.b	#LRz_Id,(Current_Zone).w
		bne.s	Offset_0x003E1E
		jsr	(LRz_Load_Rock_Pos).l

Offset_0x003E1E:
		jsr	(AnimateStageTiles).l
		bsr.w	RunPLC_RAM
		jsr	(Process_Kos_Module_Queue).l
		bsr.w	Oscillate_Num_Do
		bsr.w	ChangeRingFrame
		bsr.w	CheckLoadSignpostArt
		jsr	(Build_Sprites).l
		jsr	(ObjectsManager).l
		cmpi.b	#gm_DemoMode,(Game_Mode).w
		beq.s	Offset_0x003E5A
		cmpi.b	#gm_PlayMode,(Game_Mode).w
		beq.w	Level_MainLoop
		rts
; ---------------------------------------------------------------------------

Offset_0x003E5A:
		tst.w	(Level_inactive_flag).w
		bne.s	Offset_0x003E78
		tst.w	(Demo_Timer).w
		beq.s	Offset_0x003E78
		cmpi.b	#gm_DemoMode,(Game_Mode).w
		beq.w	Level_MainLoop
		move.b	#gm_SEGALogo,(Game_Mode).w
		rts
; ---------------------------------------------------------------------------

Offset_0x003E78:
		cmpi.b	#gm_DemoMode,(Game_Mode).w             ; $08, $FFFFF600
		bne.s	Offset_0x003E88
		move.b	#gm_SEGALogo,(Game_Mode).w             ; $00, $FFFFF600
		rts
Offset_0x003E88:
		move.w	#60,(Demo_Timer).w                       ; $FFFFF614
		move.w	#$3F,(Palette_Fade_Info).w                ; $FFFFF626
		clr.w	(Demo_Pal_FadeOut_Counter).w                 ; $FFFFF794
Offset_0x003E98:
		move.b	#8,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		bsr.w	Init_Demo_Control                      ; Offset_0x0047F6
		jsr	(RunObjects).l                         ; Offset_0x0110AE
		jsr	(DeformBgLayer).l              ; Offset_0x0120D4
		jsr	(Run_TileDrawing).l              ; Offset_0x02F2EA
		jsr	(Build_Sprites).l                        ; Offset_0x011296
		jsr	(ObjectsManager).l                      ; Offset_0x011BF8
		jsr	(Process_Kos_Module_Queue).l               ; Offset_0x0018FE
		subq.w	#1,(Demo_Pal_FadeOut_Counter).w           ; $FFFFF794
		bpl.s	Offset_0x003EDA
		move.w	#2,(Demo_Pal_FadeOut_Counter).w         ; $FFFFF794
		bsr.w	Pal_FadeOut                            ; Offset_0x002E08
Offset_0x003EDA:
		tst.w	(Demo_Timer).w                               ; $FFFFF614
		bne.s	Offset_0x003E98
		rts
Offset_0x003EE2:
		move.w	#0,(Tmp_FF7E).w                         ; $FFFFFF7E
		move.b	(Tmp_FF7C).w,d0                             ; $FFFFFF7C
		cmpi.b	#$A0,d0
		bne.s	Offset_0x003EFC
		move.w	(Sound_Test_Sound).w,d0                     ; $FFFFFF84
		lsl.w	#8,d0
		move.w	D0,(Tmp_FF7E).w                             ; $FFFFFF7E
Offset_0x003EFC:
		move.w	#$3F,(Palette_Fade_Info).w                ; $FFFFF626
		jsr	(Pal_Clear).l                            ; Offset_0x002DB0
		move.w	#$16,(Palette_Fade_Timer).w               ; $FFFFEE56
		move.w	#0,(Tmp_FF7C).w                         ; $FFFFFF7C
		bclr	#7,(Game_Mode).w                          ; $FFFFF600
Level_Main_Loop:                                               ; Offset_0x003F1A
		bsr.w	Pause                                  ; Offset_0x0011E0
		move.b	#8,(VBlank_Index).w                       ; $FFFFF62A
		jsr	(Process_Kos_Queue).l          ; Offset_0x0019F0
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		addq.w	#1,(Level_frame_counter).w                  ; $FFFFFE04
		move.w	#4,-(sp)
		bra.s	Offset_0x003F7C
;-------------------------------------------------------------------------------
Offset_0x003F38:
		move.w	(Tmp_FF7E).w,d0                             ; $FFFFFF7E
		add.w	D0,(Tmp_FF7C).w                             ; $FFFFFF7C
		bcc.s	Offset_0x003F8C
		bsr.w	Pause                                  ; Offset_0x0011E0
		move.w	#$100,(Z80_Bus_Request)                    ; $00A11100
		bsr.w	Control_Ports_Read                     ; Offset_0x000F16
		startZ80
		move.w	#0,(DMA_Buffer_List).w                  ; $FFFFE700
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w ; $FFFFE700, $FFFFE8F8
		lea	(Sprite_Table_Input).w,a5                   ; $FFFFAC00
Offset_0x003F6C:
		move.w	#0,(A5)
		lea	$80(A5),a5
		cmpa.l	#Obj_Player_One,a5                          ; $FFFFB000
		bcs.s	Offset_0x003F6C
Offset_0x003F7C:
		bsr.w	Init_Demo_Control                      ; Offset_0x0047F6
		jsr	(RunObjects).l                         ; Offset_0x0110AE
		jsr	(DeformBgLayer).l              ; Offset_0x0120D4
Offset_0x003F8C:
		subq.w	#1,(sp)
		bne.s	Offset_0x003F38
		addq.w	#2,sp
		tst.w	(Level_inactive_flag).w                       ; $FFFFFE02
		bne.w	Level                                  ; Offset_0x00399E
		jsr	(Run_TileDrawing).l              ; Offset_0x02F2EA
		jsr	(AnimateStageTiles).l                     ; Offset_0x01E85A
		jsr	(Build_Sprites).l                        ; Offset_0x011296
		jsr	(AnimatePalette).l                      ; Offset_0x002DD4
		bsr.w	RunPLC_RAM                                 ; Offset_0x001556
		jsr	(Process_Kos_Module_Queue).l               ; Offset_0x0018FE
		cmpi.b	#gm_DemoMode,(Game_Mode).w             ; $08, $FFFFF600
		beq.s	Offset_0x003FD0
		cmpi.b	#gm_PlayMode,(Game_Mode).w             ; $0C, $FFFFF600
		beq.w	Level_Main_Loop                        ; Offset_0x003F1A
		rts
Offset_0x003FD0:
		tst.w	(Level_inactive_flag).w                       ; $FFFFFE02
		bne.s	Offset_0x003FEE
		tst.w	(Demo_Timer).w                               ; $FFFFF614
		beq.s	Offset_0x003FEE
		cmpi.b	#gm_DemoMode,(Game_Mode).w             ; $08, $FFFFF600
		beq.w	Level_Main_Loop                        ; Offset_0x003F1A
		move.b	#gm_SEGALogo,(Game_Mode).w             ; $00, $FFFFF600
		rts
Offset_0x003FEE:
		cmpi.b	#gm_DemoMode,(Game_Mode).w             ; $08, $FFFFF600
		bne.s	Offset_0x003FFE
		move.b	#gm_SEGALogo,(Game_Mode).w             ; $00, $FFFFF600
		rts
Offset_0x003FFE:
		move.w	#60,(Demo_Timer).w                       ; $FFFFF614
		move.w	#$3F,(Palette_Fade_Info).w                ; $FFFFF626
		clr.w	(Demo_Pal_FadeOut_Counter).w                 ; $FFFFF794
Offset_0x00400E:
		move.b	#8,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		bsr.w	Init_Demo_Control                      ; Offset_0x0047F6
		jsr	(RunObjects).l                         ; Offset_0x0110AE
		jsr	(DeformBgLayer).l              ; Offset_0x0120D4
		jsr	(Run_TileDrawing).l              ; Offset_0x02F2EA
		jsr	(Build_Sprites).l                        ; Offset_0x011296
		jsr	(ObjectsManager).l                      ; Offset_0x011BF8
		jsr	(Process_Kos_Module_Queue).l               ; Offset_0x0018FE
		subq.w	#1,(Demo_Pal_FadeOut_Counter).w           ; $FFFFF794
		bpl.s	Offset_0x004050
		move.w	#2,(Demo_Pal_FadeOut_Counter).w         ; $FFFFF794
		bsr.w	Pal_FadeOut                            ; Offset_0x002E08
Offset_0x004050:
		tst.w	(Demo_Timer).w                               ; $FFFFF614
		bne.s	Offset_0x00400E
		rts

; ---------------------------------------------------------------------------
; Subroutine to set the player mode, which is forced to Sonic and Tails in
; the demo mode and in 2P mode
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004058: Init_Player_Selected:
Level_SetPlayerMode:
		cmpi.b	#$80+gm_DemoMode,(Game_Mode).w
		beq.s	Offset_0x00406E
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x00406E
		move.w	(Player_Select_Flag).w,(Player_Selected_Flag).w
		rts

Offset_0x00406E:
		move.w	#0,(Player_Selected_Flag).w
		rts
; End of function Level_SetPlayerMode

; ---------------------------------------------------------------------------
; Subroutine to load the player selected in single player
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004076: Load_Player_Selected:
InitPlayers:
		move.l	#Obj_Clear_Collision_Response_List,(Obj_02_Mem_Address).w
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x0040F2
		move.w	(Player_Selected_Flag).w,d0
		bne.s	InitPlayers_Alone
		move.l	#Obj_Sonic,(Obj_Player_One).w
		move.l	#Obj_Dust_Water_Splash,(Obj_P1_Dust_Water_Splash).w
		move.l	#Obj_Miles,(Obj_Player_Two).w
		move.w	(Obj_Player_One+Obj_X).w,(Obj_Player_Two+Obj_X).w
		move.w	(Obj_Player_One+Obj_Y).w,(Obj_Player_Two+Obj_Y).w
		subi.w	#$20,(Obj_Player_Two+Obj_X).w
		addi.w	#4,(Obj_Player_Two+Obj_Y).w
		move.l	#Obj_Dust_Water_Splash,(Obj_P2_Dust_Water_Splash).w
		rts
; ===========================================================================
; Offset_0x0040C4:
InitPlayers_Alone:
		subq.w	#1,d0
		bne.s	InitPlayers_TailsAlone
		move.l	#Obj_Sonic,(Obj_Player_One).w
		move.l	#Obj_Dust_Water_Splash,(Obj_P1_Dust_Water_Splash).w
		rts
; ===========================================================================
; Offset_0x0040DA:
InitPlayers_TailsAlone:
		move.l	#Obj_Miles,(Obj_Player_One).w
		move.l	#Obj_Dust_Water_Splash,(Obj_P2_Dust_Water_Splash).w
		addi.w	#4,(Obj_Player_One+Obj_Y).w
		rts
; End of function InitPlayers

; ---------------------------------------------------------------------------
; Subroutine to load the players selected in competition mode
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


Offset_0x0040F2:
		move.b	(Menu_Player_One_Cursor).w,d0               ; $FFFFFFDA
		bsr.s	Offset_0x004130
		move.l	D1,(Obj_Player_One).w                       ; $FFFFB000
		move.b	(Menu_Player_Two_Cursor).w,d0               ; $FFFFFFDB
		bsr.s	Offset_0x004130
		move.l	D1,(Obj_Player_Two).w                       ; $FFFFB04A
		move.b	(Menu_Player_One_Cursor).w,(Obj_Player_One+Obj_Player_Selected).w ; $FFFFFFDA, $FFFFB038
		move.b	(Menu_Player_Two_Cursor).w,(Obj_Player_Two+Obj_Player_Selected).w ; $FFFFFFDB, $FFFFB082
		move.w	(Obj_Player_One+Obj_X).w,(Obj_Player_Two+Obj_X).w ; $FFFFB010, $FFFFB05A
		move.w	(Obj_Player_One+Obj_Y).w,(Obj_Player_Two+Obj_Y).w ; $FFFFB014, $FFFFB05E
		move.l	#Obj_Dust_Water_Splash_2P,(Obj_P1_Dust_Water_Splash).w ; Offset_0x0100DA, $FFFFCC54
		move.l	#Obj_Dust_Water_Splash_2P,(Obj_P2_Dust_Water_Splash).w ; Offset_0x0100DA, $FFFFCC9E
		bra.s	Offset_0x00414E
Offset_0x004130:
		tst.b	D0
		bne.s	Offset_0x00413A
		move.l	#Obj_Sonic_Knuckles_2P,d1             ; Offset_0x00A552
Offset_0x00413A:
		subq.b	#$01,d0
		bne.s	Offset_0x004146
		move.l	#Obj_Miles_2P,d1                      ; Offset_0x00CC0A
		rts
Offset_0x004146:
		move.l	#Obj_Sonic_Knuckles_2P,d1             ; Offset_0x00A552
		rts
Offset_0x00414E:
		lea	(Palette_Row_1_Data_Target).w,a2            ; $FFFFEDA0
		lea	(Pal_Level_2P).l,a1                     ; Offset_0x004164
		move.w	#bytesToWcnt($20),d0
Offset_0x00415C:
		move.w	(A1)+,(A2)+
		dbf	D0, Offset_0x00415C
		rts
;-------------------------------------------------------------------------------
Pal_Level_2P:                                                  ; Offset_0x004164
		dc.w	$0A86, $0EEE, $084E, $040C, $0206, $0080, $000E, $0008
		dc.w	$00AE, $008E, $08AE, $046A, $0ECC, $0CAA, $0866, $0222
;-------------------------------------------------------------------------------
; Rotina para carregar o jogador selecionado no modo 1 PLAYER
; <<<- Sonic And Miles / Sonic Alone / Miles Alone
;-------------------------------------------------------------------------------

Obj_Clear_Collision_Response_List:                             ; Offset_0x004184
		move.w	#0,(Collision_Response_List).w          ; $FFFFE380
		rts

; ---------------------------------------------------------------------------
; Subroutine to move the water or oil surface sprites to where the screen is at
; Leftover from Sonic 2,and useless since the objects themselves handle this now
; ---------------------------------------------------------------------------

; Offset_0x00418A: S2_Change_Water_Surface_Pos:
UpdateWaterSurface:
		rts
; ---------------------------------------------------------------------------
		tst.b	(Water_Level_Flag).w
		beq.s	Offset_0x0041AE
		move.w	(Camera_X).w,d1
		btst	#0,(Level_frame_counter+1).w
		beq.s	Offset_0x0041A4
		addi.w	#$20,d1

Offset_0x0041A4:
		move.w	d1,d0
		addi.w	#$60,d0
		addi.w	#$120,d1

Offset_0x0041AE:
		rts
; End of function UpdateWaterSurface

; ---------------------------------------------------------------------------
; Subroutine to do special water effects
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0041B0:
WaterEffects:
		tst.b	(Water_Level_Flag).w
		beq.w	Offset_0x004236
		tst.b	(Rasters_Flag).w
		bne.s	MoveWater
		cmpi.b	#6,(Obj_Player_One+Obj_Routine).w	; is the player dead?
		bcc.s	MoveWater				; if yes, branch
		bsr.w	Hz_Wind_Tunnels
		bsr.w	Dynamic_Water_Height
; Offset_0x0041CE:
MoveWater:
		clr.b	(Underwater_Flag).w
		moveq	#0,d0
		cmpi.b	#Aiz_Id,(Current_Zone).w
		beq.s	Offset_0x0041F2
		cmpi.b	#Hz_Id,(Current_Zone).w
		beq.s	Offset_0x0041F2
		cmpi.b	#LBz_Id,(Current_Zone).w
		beq.s	Offset_0x0041F2
		move.b	(Oscillate_Data_Buffer+2).w,d0
		lsr.w	#1,d0

Offset_0x0041F2:
		add.w	(Current_Water_Level).w,d0
		move.w	d0,(Water_Level_Move).w
		cmpi.w	#Hz_Act_1,(Current_ZoneAndAct).w
		bne.s	Offset_0x00420A
		cmpi.w	#$900,(Camera_X).w
		bcs.s	Offset_0x004220

Offset_0x00420A:
		; calculate distance between water surface and top of screen
		move.w	(Water_Level_Move).w,d0
		sub.w	(Camera_Y).w,d0
		beq.s	Offset_0x00421A
		bcc.s	Offset_0x004228
		tst.w	d0
		bpl.s	Offset_0x004228

Offset_0x00421A:
		move.b	#1,(Underwater_Flag).w

Offset_0x004220:
		move.b	#-1,(Scanline_Counter).w		; H-INT every 224th scanline
		rts
; ---------------------------------------------------------------------------

Offset_0x004228:
		cmpi.w	#224-1,d0
		bcs.s	Offset_0x004232
		move.w	#256-1,d0

Offset_0x004232:
		move.b	d0,(Scanline_Counter).w

Offset_0x004236:
		bsr.w	Level_Slides
		rts
; End of function WaterEffects

;-------------------------------------------------------------------------------
; Rotina para mudar a altura da �gua dinamicamente
; ->>>
;-------------------------------------------------------------------------------
Water_Height_Array:                                            ; Offset_0x00423C
		dc.w	$504, $528 ; AIz
		dc.w	$500, $700 ; Hz
		dc.w	$600, $600 ; MGz
		dc.w	$600, $A90 ; CNz
		dc.w	$600, $600 ; FBz
		dc.w	$600, $600 ; Iz
		dc.w	$A80, $65E ; LBz
		dc.w	$600, $600 ; MVz
		dc.w	$600, $600 ; Sz
		dc.w	$600, $600 ; LRz
		dc.w	$600, $600 ; SSz
		dc.w	$600, $600 ; DEz
		dc.w	$600, $600 ; TDz
		dc.w	$600, $710 ; Ending
		dc.w	$600, $600 ; ALz
		dc.w	$410, $510 ; BPz
;-------------------------------------------------------------------------------
Dynamic_Water_Height:                                          ; Offset_0x00427C
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0                             ; $FFFFFE10
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0
		move.w	Dynamic_Water_Index(pc,d0.w),d0        ; Offset_0x0042AC
		jsr	Dynamic_Water_Index(pc,d0.w)            ; Offset_0x0042AC
		moveq	#0,d1
		move.b	(Water_Level_Change_Speed).w,d1             ; $FFFFF64C
		move.w	(Target_Water_Level).w,d0                   ; $FFFFF64A
		sub.w	(Current_Water_Level).w,d0                  ; $FFFFF648
		beq.s	Offset_0x0042AA
		bcc.s	Offset_0x0042A6
		neg.w   D1
Offset_0x0042A6:
		add.w	D1,(Current_Water_Level).w                  ; $FFFFF648
Offset_0x0042AA:
		rts
;-------------------------------------------------------------------------------
Dynamic_Water_Index:                                           ; Offset_0x0042AC
		dc.w	Dynamic_AIz1_Water-Dynamic_Water_Index ; Offset_0x0042EC
		dc.w	Dynamic_AIz2_Water-Dynamic_Water_Index ; Offset_0x0042EE
		dc.w	Dynamic_Hz1_Water-Dynamic_Water_Index  ; Offset_0x00434A
		dc.w	Dynamic_Hz2_Water-Dynamic_Water_Index  ; Offset_0x004362
		dc.w	Dynamic_MGz1_Water-Dynamic_Water_Index ; Offset_0x004372
		dc.w	Dynamic_MGz2_Water-Dynamic_Water_Index ; Offset_0x004372
		dc.w	Dynamic_CNz1_Water-Dynamic_Water_Index ; Offset_0x004372
		dc.w	Dynamic_CNz2_Water-Dynamic_Water_Index ; Offset_0x004372
		dc.w	Dynamic_FBz1_Water-Dynamic_Water_Index ; Offset_0x004372
		dc.w	Dynamic_FBz2_Water-Dynamic_Water_Index ; Offset_0x004372
		dc.w	Dynamic_Iz1_Water-Dynamic_Water_Index  ; Offset_0x004372
		dc.w	Dynamic_Iz2_Water-Dynamic_Water_Index  ; Offset_0x004372
		dc.w	Dynamic_LBz1_Water-Dynamic_Water_Index ; Offset_0x004374
		dc.w	Dynamic_LBz2_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_MHz1_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_MHz2_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_Sz1_Water-Dynamic_Water_Index  ; Offset_0x004390
		dc.w	Dynamic_Sz2_Water-Dynamic_Water_Index  ; Offset_0x004390
		dc.w	Dynamic_LRz1_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_LRz2_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_SSz1_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_SSz2_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_DEz1_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_DEz2_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_TDz1_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_TDz2_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_ES1_Water-Dynamic_Water_Index  ; Offset_0x004390
		dc.w	Dynamic_ES2_Water-Dynamic_Water_Index  ; Offset_0x004392
		dc.w	Dynamic_ALz1_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_ALz2_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_BPz1_Water-Dynamic_Water_Index ; Offset_0x004390
		dc.w	Dynamic_BPz2_Water-Dynamic_Water_Index ; Offset_0x004390
;-------------------------------------------------------------------------------
Dynamic_AIz1_Water:                                            ; Offset_0x0042EC
		rts
;-------------------------------------------------------------------------------
Dynamic_AIz2_Water:                                            ; Offset_0x0042EE
		cmpi.w	#$2440,(Camera_X).w                         ; $FFFFEE78
		bcc.s	Offset_0x00430C
		cmpi.w	#$618,(Target_Water_Level).w               ; $FFFFF64A
		bne.s	Offset_0x004348
		move.w	#$528,(Target_Water_Level).w               ; $FFFFF64A
		move.b	#2,(Water_Level_Change_Speed).w           ; $FFFFF64C
		rts
Offset_0x00430C:
		tst.b	(Level_Trigger_Array).w                      ; $FFFFF7E0
		bne.s	Offset_0x004320
		cmpi.w	#$2850,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x004348
		move.b	#1,(Level_Trigger_Array).w                ; $FFFFF7E0
Offset_0x004320:
		cmpi.w	#$618,(Target_Water_Level).w               ; $FFFFF64A
		beq.s	Offset_0x004348
		lea	(Level_Layout_Buffer+$1C).w,a3              ; $FFFF801C
		moveq	#6-1,d1
Offset_0x00432E:
		move.w	(A3),a1
		move.b	#0,$4D(A1)
		move.b	#0,$4E(A1)
		addq.w	#4,a3
		dbf	D1, Offset_0x00432E
		move.w	#$618,(Target_Water_Level).w               ; $FFFFF64A
Offset_0x004348:
		rts
;-------------------------------------------------------------------------------
Dynamic_Hz1_Water:                                             ; Offset_0x00434A
		lea	(Offset_0x004352).l,a1
		bra.s	Offset_0x0043A2
;-------------------------------------------------------------------------------
Offset_0x004352:
		dc.w	$8500, $900, $8680, $2A00
		dc.w	$8600, $3500, $86A0, $FFFF
;-------------------------------------------------------------------------------
Dynamic_Hz2_Water:                                             ; Offset_0x004362
		lea	(Offset_0x00436A).l,a1
		bra.s	Offset_0x0043A2
;-------------------------------------------------------------------------------
Offset_0x00436A:
		dc.w	$700, $3E00, $7E0, $FFFF
;-------------------------------------------------------------------------------
Dynamic_MGz1_Water:                                            ; Offset_0x004372
Dynamic_MGz2_Water:
Dynamic_CNz1_Water:
Dynamic_CNz2_Water:
Dynamic_FBz1_Water:
Dynamic_FBz2_Water:
Dynamic_Iz1_Water:
Dynamic_Iz2_Water:
		rts
;-------------------------------------------------------------------------------
Dynamic_LBz1_Water:                                            ; Offset_0x004374
		lea	(Offset_0x00437C).l,a1
		bra.s	Offset_0x0043A2
;-------------------------------------------------------------------------------
Offset_0x00437C:
		dc.w	$8B00, $E00, $8A00, $1980
		dc.w	$8A00, $2340, $8AC8, $2C00
		dc.w	$8FF0, $FFFF
;-------------------------------------------------------------------------------
Dynamic_LBz2_Water:                                            ; Offset_0x004390
Dynamic_MHz1_Water:
Dynamic_MHz2_Water:
Dynamic_Sz1_Water:
Dynamic_Sz2_Water:
Dynamic_LRz1_Water:
Dynamic_LRz2_Water:
Dynamic_SSz1_Water:
Dynamic_SSz2_Water:
Dynamic_DEz1_Water:
Dynamic_DEz2_Water:
Dynamic_TDz1_Water:
Dynamic_TDz2_Water:
Dynamic_ES1_Water:
Dynamic_ALz1_Water:
Dynamic_ALz2_Water:
Dynamic_BPz1_Water:
Dynamic_BPz2_Water:
Dynamic_Null_Water:
		rts
;-------------------------------------------------------------------------------
Dynamic_ES2_Water:                                             ; Offset_0x004392
		cmpi.w	#$1DE0,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0043A0
		move.w	#$510,(Target_Water_Level).w               ; $FFFFF64A
Offset_0x0043A0:
		rts
Offset_0x0043A2:
		move.w	(Camera_X).w,d0                             ; $FFFFEE78
Offset_0x0043A6:
		move.l	(A1)+,d1
		cmp.w	D1,d0
		bhi.s	Offset_0x0043A6
		swap	D1
		tst.w	D1
		bpl.s	Offset_0x0043BA
		andi.w	#$7FFF,d1
		move.w	D1,(Current_Water_Level).w                  ; $FFFFF648
Offset_0x0043BA:
		move.w	D1,(Target_Water_Level).w                   ; $FFFFF64A
		rts
;-------------------------------------------------------------------------------
Hz_Wind_Tunnels:                                               ; Offset_0x0043C0
		tst.w	(Debug_placement_mode).w                    ; $FFFFFE08
		bne.w	Offset_0x0044A6
		cmpi.w	#Hz_Act_1,(Current_ZoneAndAct).w               ; $0100, $FFFFFE10
		bne.w	Offset_0x0044A6
		lea	(Sonic_Wind_Flag).w,a3                      ; $FFFFF7C8
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		move.b	(Control_Ports_Logical_Data).w,d6           ; $FFFFF602
		moveq	#0,d5
		bsr.s	Offset_0x0043EE
		addq.w	#1,a3
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		move.b	(Control_Ports_Logical_Data_2).w,d6         ; $FFFFF66A
		moveq	#1,d5
Offset_0x0043EE:
		lea	(Hz_Wind_Tunnels_Data).l,a2             ; Offset_0x0044A8
		move.w	(A2)+,d2
Offset_0x0043F6:
		move.w	Obj_X(A1),d0                                    ; $0010
		cmp.w	(A2),d0
		bcs.w	Offset_0x004492
		cmp.w	Obj_Flags(A2),d0                                ; $0004
		bcc.w	Offset_0x004492
		move.w	Obj_Y(A1),d1                                    ; $0014
		cmp.w	2(A2),d1
		bcs.w	Offset_0x004492
		cmp.w	Obj_Height(A2),d1                               ; $0006
		bcc.s	Offset_0x004492
		cmpi.b	#4,Obj_Routine(A1)                            ; $0005
		bcc.w	Offset_0x0044A4
		btst	D5,(Wind_Tunnels_Flag).w                    ; $FFFFF7C7
		bne.s	Offset_0x00447A
		tst.b	Obj_Player_Control(A1)                           ; $002E
		bne.s	Offset_0x0044A4
		move.b	#1,(A3)
		move.w	Obj_Priority(A2),d0                             ; $0008
		move.w	D0, Obj_Speed_X(A1)                              ; $0018
		ext.l	D0
		lsl.l	#8,d0
		add.l	D0,Obj_X(A1)                                    ; $0010
		move.w	Obj_Art_VRAM(A2),d1                             ; $000A
		move.w	D1, Obj_Speed_Y(A1)                              ; $001A
		ext.l	D1
		lsl.l	#8,d1
		add.l	D1,Obj_Y(A1)                                    ; $0014
		move.b	#$F,Obj_Ani_Number(A1)                         ; $0020
		bset	#1,Obj_Status(A1)                             ; $002A
		tst.b	Obj_Map(A2)                                      ; $000C
		bne.s	Offset_0x00447C
		btst	#0,d6
		beq.s	Offset_0x004470
		subq.w	#1,Obj_Y(A1)                                  ; $0014
Offset_0x004470:
		btst	#1,d6
		beq.s	Offset_0x00447A
		addq.w	#1,Obj_Y(A1)                                  ; $0014
Offset_0x00447A:
		rts
Offset_0x00447C:
		btst	#2,d6
		beq.s	Offset_0x004486
		subq.w	#1,Obj_X(A1)                                  ; $0010
Offset_0x004486:
		btst	#3,d6
		beq.s	Offset_0x004490
		addq.w	#1,Obj_X(A1)                                  ; $0010
Offset_0x004490:
		rts
Offset_0x004492:
		adda.w	#$E,a2
		dbf	D2, Offset_0x0043F6
		tst.b	(A3)
		beq.s	Offset_0x0044A6
		move.b	#$1A,Obj_Ani_Number(A1)                         ; $0020
Offset_0x0044A4:
		clr.b	(A3)
Offset_0x0044A6:
		rts
;-------------------------------------------------------------------------------
Hz_Wind_Tunnels_Data:                                          ; Offset_0x0044A8
		dc.w	15-1
		dc.w	$380, $580, $5A0, $5C0, $3F0, $FFE0, 0
		dc.w	$5A0, $560, $A80, $5C0, $3F0, $FFF0, 0
		dc.w	$1400, $A80, $15A0, $AC0, $400, 0, 0
		dc.w	$15A0, $A40, $1960, $AC0, $400, $FFC0, 0
		dc.w	$1960, $A10, $19D0, $A80, $300, $FD80, $100
		dc.w	$1990, $978, $19F0, $A10, $80, $FC00, $100
		dc.w	$1990, $8F8, $19F0, $978, $FEC0, $FC00, $100
		dc.w	$1990, $878, $19F0, $8F8, $140, $FC00, $100
		dc.w	$1990, $7F0, $19F0, $878, $FEC0, $FC00, $100
		dc.w	$1990, $780, $19E0, $7F0, 0, $FC00, $100
		dc.w	$2B00, $800, $2C20, $840, $400, 0, 0
		dc.w	$2C20, $7C0, $2EE0, $840, $400, $FFC0, 0
		dc.w	$2EE0, $790, $2F50, $800, $300, $FD00, $100
		dc.w	$2F00, $700, $2F70, $790, $100, $FC00, $100
		dc.w	$2F30, $680, $2F70, $700, 0, $FC00, $100
;-------------------------------------------------------------------------------
Level_Slides:                                                  ; Offset_0x00457C
		cmpi.w	#Hz_Act_2,(Current_ZoneAndAct).w               ; $0101, $FFFFFE10
		beq.s	Hz2_Water_Slides                       ; Offset_0x00458E
		cmpi.w	#Iz_Act_1,(Current_ZoneAndAct).w               ; $0500, $FFFFFE10
		beq.s	Iz1_Slides                             ; Offset_0x0045F6
		rts
;-------------------------------------------------------------------------------
Hz2_Water_Slides:                                              ; Offset_0x00458E
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		move.b	(Control_Ports_Logical_Data).w,d2           ; $FFFFF602
		bsr.s	Offset_0x0045A0
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		move.b	(Control_Ports_Logical_Data_2).w,d2         ; $FFFFF66A
Offset_0x0045A0:
		btst	#1,Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x0045DC
		cmpi.b	#$C,Obj_Player_Top_Solid(A1)                   ; $0046
		beq.s	Offset_0x0045DC
		lea	(Fg_Mem_Start_Address).w,a2                 ; $FFFF8000
		move.w	Obj_Y(A1),d0                                    ; $0014
		lsr.w	#5,d0
		and.w	(Level_Layout_Wrap_Row).w,d0                ; $FFFFEEAE
		move.w	8(A2,d0),d0
		move.w	Obj_X(A1),d1                                    ; $0010
		lsr.w	#7,d1
		add.w	D1,d0
		move.w	D0,a2
		move.b	(A2),d0
		lea	Hz2_Slide_Action_Data+$A(PC),a2    ; Offset_0x004724
		moveq	#9,d1
Offset_0x0045D4:
		cmp.b	-(A2),d0
		dbeq	D1,Offset_0x0045D4
		beq.s	Offset_0x0045F0
Offset_0x0045DC:
		tst.b	Obj_Player_Status(A1)                            ; $002F
		bpl.s	Offset_0x0045EE
		move.w	#5,Obj_P_Horiz_Ctrl_Lock(A1)                ; $0032
		andi.b	#$7F,Obj_Player_Status(A1)                      ; $002F
Offset_0x0045EE:
		rts
Offset_0x0045F0:
		moveq	#-8,d0
		bra.w	Offset_0x004662
;-------------------------------------------------------------------------------
Iz1_Slides:                                                    ; Offset_0x0045F6
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		move.b	(Control_Ports_Logical_Data).w,d2           ; $FFFFF602
		bsr.s	Offset_0x004608
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		move.b	(Control_Ports_Logical_Data_2).w,d2         ; $FFFFF66A
Offset_0x004608:
		btst	#1,Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x004644
		btst	#3,Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x004644
		lea	(Fg_Mem_Start_Address).w,a2                 ; $FFFF8000
		move.w	Obj_Y(A1),d0                                    ; $0014
		lsr.w	#5,d0
		and.w	(Level_Layout_Wrap_Row).w,d0                ; $FFFFEEAE
		move.w	8(A2,d0),d0
		move.w	Obj_X(A1),d1                                    ; $0010
		lsr.w	#7,d1
		add.w	D1,d0
		move.w	D0,a2
		move.b	(A2),d0
		lea	Iz_Slide_Tile_Data+$A(PC),a2       ; Offset_0x00472E
		moveq	#9,d1
Offset_0x00463C:
		cmp.b	-(A2),d0
		dbeq	D1,Offset_0x00463C
		beq.s	Offset_0x004658
Offset_0x004644:
		tst.b	Obj_Player_Status(A1)                            ; $002F
		bpl.s	Offset_0x004656
		move.w	#5,Obj_P_Horiz_Ctrl_Lock(A1)                ; $0032
		andi.b	#$7F,Obj_Player_Status(A1)                      ; $002F
Offset_0x004656:
		rts
Offset_0x004658:
		lea	(Iz_Slide_Action_Data).l,a2             ; Offset_0x004710
		move.b	(A2,d1),d0
Offset_0x004662:
		beq.s	Offset_0x0046A0
		move.b	Obj_Inertia(A1),d1                              ; $001C
		tst.b	D0
		bpl.s	Offset_0x004678
		cmp.b	D0,d1
		ble.s	Offset_0x004682
		subi.w	#$40,Obj_Inertia(A1)                          ; $001C
		bra.s	Offset_0x004682
Offset_0x004678:
		cmp.b	D0,d1
		bge.s	Offset_0x004682
		addi.w	#$40,Obj_Inertia(A1)                          ; $001C
Offset_0x004682:
		bclr	#0,Obj_Status(A1)                             ; $002A
		tst.b	D1
		bpl.s	Offset_0x004692
		bset	#0,Obj_Status(A1)                             ; $002A
Offset_0x004692:
		move.b	#$1B,Obj_Ani_Number(A1)                         ; $0020
		ori.b	#$80,Obj_Player_Status(A1)                      ; $002F
		rts
Offset_0x0046A0:
		move.w	#4,d1
		move.w	Obj_Inertia(A1),d0                              ; $001C
		btst	#2,d2
		beq.s	Offset_0x0046C2
		move.b	#0,Obj_Ani_Number(A1)                         ; $0020
		bset	#0,Obj_Status(A1)                             ; $002A
		sub.w	D1,d0
		tst.w	D0
		bpl.s	Offset_0x0046C2
		sub.w	D1,d0
Offset_0x0046C2:
		btst	#3,d2
		beq.s	Offset_0x0046DC
		move.b	#0,Obj_Ani_Number(A1)                         ; $0020
		bclr	#0,Obj_Status(A1)                             ; $002A
		add.w	D1,d0
		tst.w	D0
		bmi.s	Offset_0x0046DC
		add.w	D1,d0
Offset_0x0046DC:
		move.w	#4,d1
		tst.w	D0
		beq.s	Offset_0x004704
		bmi.s	Offset_0x0046F6
		sub.w	D1,d0
		bhi.s	Offset_0x0046F4
		move.w	#0,d0
		move.b	#5,Obj_Ani_Number(A1)                         ; $0020
Offset_0x0046F4:
		bra.s	Offset_0x004704
Offset_0x0046F6:
		add.w	D1,d0
		bhi.s	Offset_0x004704
		move.w	#0,d0
		move.b	#5,Obj_Ani_Number(A1)                         ; $0020
Offset_0x004704:
		move.w	D0,Obj_Inertia(A1)                              ; $001C
		ori.b	#$80,Obj_Player_Status(A1)                      ; $002F
		rts
;-------------------------------------------------------------------------------
Iz_Slide_Action_Data:                                          ; Offset_0x004710
		dc.b	$F8, $F8, $08, $08, $F4, $F4, $F4, $0C
		dc.b	$0C, $0C
Hz2_Slide_Action_Data:                                         ; Offset_0x00471A
		dc.b	$1B, $71, $80, $81, $88, $8E, $9B, $9C
		dc.b	$A1, $A2
Iz_Slide_Tile_Data:                                            ; Offset_0x004724
		dc.b	$30, $C0, $35, $BF, $27, $2D, $46, $22
		dc.b	$2A, $2E
;===============================================================================
; Modo de jogo ou demonstra��o das fases
; <<<-
;===============================================================================
AIz_1_Water_Transistion:                                       ; Offset_0x00472E
		dc.w	bytesToWcnt(AIz_1_Water_Transistion_End-AIz_1_Water_Transistion_Start)

AIz_1_Water_Transistion_Start:
		dc.w	$0002, $0068, $0062, $0042, $0048, $004E, $0054, $0008
		dc.w	$000E, $0014, $001A, $0034, $0022, $003A, $002E, $0028
AIz_1_Water_Transistion_End

AIz_2_Water_Transistion:                                       ; Offset_0x004750
		dc.w	bytesToWcnt(AIz_2_Water_Transistion_End-AIz_2_Water_Transistion_Start)

AIz_2_Water_Transistion_Start:
		dc.w	$006E, $0068, $0002, $0048, $0042, $004E, $005A, $0054
		dc.w	$0062, $0074, $0008, $000E, $0014, $001A, $0034, $0022
		dc.w	$003A, $002E, $0028
AIz_2_Water_Transistion_End

Hz_Water_Transistion:                                          ; Offset_0x004778
		dc.w	bytesToWcnt(Hz_Water_Transistion_End-Hz_Water_Transistion_Start)

Hz_Water_Transistion_Start:
		dc.w	$0002, $0074, $0062, $0068, $006E, $0042, $0048, $007A
		dc.w	$005A, $0054, $0008, $000E, $0014, $001A, $002E, $0034
		dc.w	$0028, $003A, $0022, $004E
Hz_Water_Transistion_End

LBz_2_Water_Transistion:                                       ; Offset_0x0047A2
		dc.w	bytesToWcnt(LBz_2_Water_Transistion_End-LBz_2_Water_Transistion_Start)

LBz_2_Water_Transistion_Start:
		dc.w	$0002, $006E, $0068, $007A, $0062, $0074, $0042, $0048
		dc.w	$005A, $0054, $0008, $000E, $0014, $001A, $002E, $0034
		dc.w	$0028, $003A, $0022, $004E
LBz_2_Water_Transistion_End

; Offset_0x0047CC:
		dc.w	bytesToWcnt(Unused_Water_Transistion_End-Unused_Water_Transistion_Start)

Unused_Water_Transistion_Start:
		dc.w	$0002, $0008, $000E, $0014, $001A, $0042, $0048, $004E
		dc.w	$0054, $005A, $0062, $0068, $006E, $0074, $007A, $0022
		dc.w	$0028, $002E, $0034, $003A
Unused_Water_Transistion_End
;===============================================================================
; Rotina de controle autom�tico do jogador usado no modo de demonstra��o
; ->>>
;===============================================================================
Init_Demo_Control:                                             ; Offset_0x0047F6
		tst.w	(Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bne.w	Run_Demo_Mode                          ; Offset_0x004884
		rts
;-------------------------------------------------------------------------------
; Offset_0x004800: ; Sonic 2 Left over
		lea	(Demo_Index).l,a1                       ; Offset_0x00491E
		moveq	#0,d0
		move.b	(Current_Zone).w,d0                             ; $FFFFFE10
		lsl.w	#2,d0
		move.l	(A1,d0),a1
		move.w	(Demo_Button_Index).w,d0                    ; $FFFFF790
		adda.w	D0,a1
		move.b	(Control_Ports_Buffer_Data).w,d0            ; $FFFFF604
		cmp.b	(A1),d0
		bne.s	Offset_0x00482E
		addq.b	#1,1(A1)
		cmpi.b	#$FF,1(A1)
		beq.s	Offset_0x00482E
		bra.s	Offset_0x004842
Offset_0x00482E:
		move.b	d0,2(A1)
		move.b	#0,3(A1)
		addq.w	#2,(Demo_Button_Index).w                  ; $FFFFF790
		andi.w	#$3FF,(Demo_Button_Index).w                ; $FFFFF790
Offset_0x004842:
		rts
;-------------------------------------------------------------------------------
; Offset_0x004844: ; Sonic 2 Left over
		cmpi.b	#S2_EHz_Id,(Current_Zone).w                ; $00, $FFFFFE10
		bne.s	Offset_0x004882
		lea	((Dev_RAM_Start+$C000)&$FFFFFF),a1           ; $00FEC000
		move.w	(Demo_Button_Index_2P).w,d0                 ; $FFFFF732
		adda.w	D0,a1
		move.b	(Control_Ports_Buffer_Data+2).w,d0        ; $FFFFF606
		cmp.b	(A1),d0
		bne.s	Offset_0x00486E
		addq.b	#1,1(A1)
		cmpi.b	#$FF,1(A1)
		beq.s	Offset_0x00486E
		bra.s	Offset_0x004882
Offset_0x00486E:
		move.b	d0,2(A1)
		move.b	#0,3(A1)
		addq.w	#2,(Demo_Button_Index_2P).w               ; $FFFFF732
		andi.w	#$3FF,(Demo_Button_Index_2P).w             ; $FFFFF732
Offset_0x004882:
		rts
;-------------------------------------------------------------------------------
Run_Demo_Mode:                                                 ; Offset_0x004884
		move.b	(Control_Ports_Buffer_Data+1).w,d0        ; $FFFFF605
		or.b	(Control_Ports_Buffer_Data+3).w,d0        ; $FFFFF607
		andi.b	#button_start_mask,d0
		beq.s	Offset_0x00489E
		tst.w	(Auto_Control_Player_Flag).w                 ; $FFFFFFF0
		bmi.s	Offset_0x00489E
		move.b	#gm_TitleScreen,(Game_Mode).w          ; $04, $FFFFF600
Offset_0x00489E:
		lea	(Demo_Index).l,a1                       ; Offset_0x00491E
		moveq	#0,d0
		move.b	(Current_Zone).w,d0                             ; $FFFFFE10
		lsl.w	#2,d0
		move.l	(A1,d0),a1
		move.w	(Demo_Button_Index).w,d0                    ; $FFFFF790
		adda.w	D0,a1
		move.b	(A1),d0
		andi.b	#$7F,d0
		lea	(Control_Ports_Buffer_Data).w,a0            ; $FFFFF604
		move.b	D0,d1
		moveq	#0,d2
		eor.b	D2,d0
		move.b	D1,(A0)+
		and.b	D1,d0
		move.b	D0,(A0)+
		subq.b	#1,(Demo_Button_Press_Counter).w          ; $FFFFF792
		bcc.s	Offset_0x0048DC
		move.b	3(A1),(Demo_Button_Press_Counter).w     ; $FFFFF792
		addq.w	#2,(Demo_Button_Index).w                  ; $FFFFF790
Offset_0x0048DC:
		rts
;-------------------------------------------------------------------------------
; Offset_0x0048DE: ; Sonic 2 Left Over
		cmpi.b	#S2_EHz_Id,(Current_Zone).w                ; $00, $FFFFFE10
		bne.s	Offset_0x004916
		lea	(Demo_Angel_Island).l,a1                ; Offset_0x004BEA
		move.w	(Demo_Button_Index_2P).w,d0                 ; $FFFFF732
		adda.w	D0,a1
		move.b	(A1),d0
		lea	(Control_Ports_Buffer_Data+2).w,a0        ; $FFFFF606
		move.b	D0,d1
		moveq	#0,d2
		eor.b	D2,d0
		move.b	D1,(A0)+
		and.b	D1,d0
		move.b	D0,(A0)+
		subq.b	#1,(Demo_Button_Press_Counter_2P).w       ; $FFFFF734
		bcc.s	Offset_0x004914
		move.b	3(A1),(Demo_Button_Press_Counter_2P).w  ; $FFFFF734
		addq.w	#2,(Demo_Button_Index_2P).w               ; $FFFFF732
Offset_0x004914:
		rts
Offset_0x004916:
		move.w	#0,(Control_Ports_Buffer_Data+2).w    ; $FFFFF606
		rts
;===============================================================================
; Rotina de controle autom�tico do jogador usado no modo de demonstra��o
; <<<-
;===============================================================================

Demo_Index:                                                    ; Offset_0x00491E
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
		dc.l	Demo_Angel_Island                      ; Offset_0x004BEA
;-------------------------------------------------------------------------------
Demo_End_Index: ; Left over do Sonic 1                         ; Offset_0x004982
		dc.w	$008B, $0837, $0042, $085C, $006A, $085F, $002F, $082C
		dc.w	$0021, $0803, $2830, $0808, $002E, $0815, $000F, $0846
		dc.w	$001A, $08FF, $08CA, $0000, $0000, $0000, $0000, $0000

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load collision for 16x16 level blocks
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0049B2:
LoadCollisionIndex:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(Collision_Index).l,a1
		adda.l	d0,a1
		move.l	(a1),d0
		move.l	d0,(Primary_Collision_Ptr).w		; load first collision set
		addi.l	#$600,d0
		move.l	d0,(Secondary_Collision_Ptr).w		; load second collision set ($600 bytes from start of data)
		move.l	#Primary_Collision_Ptr,(Current_Collision_Ptr).w
		rts
; End of subroutine LoadCollisionIndex

;===============================================================================
; Rotina Oscillate_Num_Init
; ->>>
;===============================================================================
Oscillate_Num_Init:                                            ; Offset_0x0049DE
		lea	(Oscillate_Data_Buffer).w,a1                ; $FFFFFE5E
		lea	(Oscillate_Data).l,a2                   ; Offset_0x0049F2
		moveq	#bytesToWcnt(Oscillate_Data_End-Oscillate_Data),d1
Offset_0x0049EA:
		move.w	(A2)+,(A1)+
		dbf	D1, Offset_0x0049EA
		rts
;-------------------------------------------------------------------------------
Oscillate_Data:                                                ; Offset_0x0049F2
		dc.w	$007D, $0080, $0000, $0080, $0000, $0080, $0000, $0080
		dc.w	$0000, $0080, $0000, $0080, $0000, $0080, $0000, $0080
		dc.w	$0000, $0080, $0000, $3848, $00EE, $2080, $00B4, $3080
		dc.w	$010E, $5080, $01C2, $7080, $0276, $0080, $0000, $4000
		dc.w	$00FE
Oscillate_Data_End:
;===============================================================================
; Rotina Oscillate_Num_Init
; <<<-
;===============================================================================

;===============================================================================
; Rotina Oscillate_Num_Do
; ->>>
;===============================================================================
Oscillate_Num_Do:                                             ;  Offset_0x004A34
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s	Offset_0x004A42
		cmpi.b	#6,(Obj_Player_One+Obj_Routine).w         ; $FFFFB005
		bcc.s	Offset_0x004A88
Offset_0x004A42:
		lea	(Oscillate_Data_Buffer).w,a1                ; $FFFFFE5E
		lea	(Oscillate_Data2).l,a2                  ; Offset_0x004A8A
		move.w	(A1)+,d3
		moveq	#bytesToLcnt(Oscillate_Data2_End-Oscillate_Data2),d1
Offset_0x004A50:
		move.w	(A2)+,d2
		move.w	(A2)+,d4
		btst	D1,d3
		bne.s	Offset_0x004A6C
		move.w	2(A1),d0
		add.w	D2,d0
		move.w	D0,2(A1)
		add.w	D0,(A1)
		cmp.b	(A1),d4
		bhi.s	Offset_0x004A7E
		bset	D1,d3
		bra.s	Offset_0x004A7E
Offset_0x004A6C:
		move.w	2(A1),d0
		sub.w	D2,d0
		move.w	D0,2(A1)
		add.w	D0,(A1)
		cmp.b	(A1),d4
		bls.s	Offset_0x004A7E
		bclr	D1,d3
Offset_0x004A7E:
		addq.w	#4,a1
		dbf	D1, Offset_0x004A50
		move.w	D3,(Oscillate_Data_Buffer).w                ; $FFFFFE5E
Offset_0x004A88:
		rts
;-------------------------------------------------------------------------------
Oscillate_Data2:                                               ; Offset_0x004A8A
		dc.w	$0002, $0010, $0002, $0018, $0002, $0020, $0002, $0030
		dc.w	$0004, $0020, $0008, $0008, $0008, $0040, $0004, $0040
		dc.w	$0002, $0038, $0002, $0038, $0002, $0020, $0003, $0030
		dc.w	$0005, $0050, $0007, $0070, $0002, $0040, $0002, $0040
Oscillate_Data2_End:
;===============================================================================
; Rotina Oscillate_Num_Do
; <<<-
;===============================================================================

; ---------------------------------------------------------------------------
; Subroutine to change global object animation variables (rings)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004ACA: Change_Object_Frame:
ChangeRingFrame:
		subq.b	#1,(Object_Frame_Timer).w
		bpl.s	Offset_0x004AE0
		move.b	#7,(Object_Frame_Timer).w
		addq.b	#1,(Object_Frame_Buffer).w
		andi.b	#3,(Object_Frame_Buffer).w

Offset_0x004AE0:
		tst.b	(Object_Frame_Anim_Counter).w
		beq.s	Offset_0x004B02
		moveq	#0,d0
		move.b	(Object_Frame_Anim_Counter).w,d0
		add.w	(Object_Frame_Anim_Accum).w,d0
		move.w	d0,(Object_Frame_Anim_Accum).w
		rol.w	#7,d0
		andi.w	#3,d0
		move.b	d0,(Object_Frame_Anim_Frame).w
		subq.b	#1,(Object_Frame_Anim_Counter).w

Offset_0x004B02:
		addi.w	#$180,(Object_Frame_Angle).w
		rts
; End of function ChangeRingFrame

;===============================================================================
; Rotina para fazer os an�is e outros objetos girarem em torno de si
; <<<-
;===============================================================================

Clear_End_Level_Art_Load_Flag:                                 ; Offset_0x004B0A
		move.w	#0,(End_Level_Art_Load_Flag).w          ; $FFFFFFC8
		rts
;===============================================================================
; Rotina para testar e setar o flag de carga da arte de fim de fase
; ->>>
;===============================================================================
S2_Test_End_Level_Art_Load:                                    ; Offset_0x004B12
		move.w	#0,(End_Level_Art_Load_Flag).w          ; $FFFFFFC8
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s	Set_End_Level_Flag                     ; Offset_0x004B80
		cmpi.w	#S2_EHz_Act_2,(Current_ZoneAndAct).w           ; $0001, $FFFFFE10
		beq.w	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_Mz_Act_3,(Current_ZoneAndAct).w            ; $0500, $FFFFFE10
		beq.w	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_WFz,(Current_ZoneAndAct).w                 ; $0600, $FFFFFE10
		beq.w	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_HTz_Act_2,(Current_ZoneAndAct).w           ; $0701, $FFFFFE10
		beq.w	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_OOz_Act_2,(Current_ZoneAndAct).w           ; $0A01, $FFFFFE10
		beq.w	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_MCz_Act_2,(Current_ZoneAndAct).w           ; $0B01, $FFFFFE10
		beq.s	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_CNz_Act_2,(Current_ZoneAndAct).w           ; $0C01, $FFFFFE10
		beq.s	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_CPz_Act_2,(Current_ZoneAndAct).w           ; $0D01, $FFFFFE10
		beq.s	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_DEz,(Current_ZoneAndAct).w                 ; $0E00, $FFFFFE10
		beq.s	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_ARz_Act_2,(Current_ZoneAndAct).w           ; $0F01, $FFFFFE10
		beq.s	Dont_Set_End_Level_Flag                ; Offset_0x004B86
		cmpi.w	#S2_SCz,(Current_ZoneAndAct).w                 ; $1000, $FFFFFE10
		beq.s	Dont_Set_End_Level_Flag                ; Offset_0x004B86
Set_End_Level_Flag:                                            ; Offset_0x004B80
		move.w	#1,(End_Level_Art_Load_Flag).w          ; $FFFFFFC8
Dont_Set_End_Level_Flag:                                       ; Offset_0x004B86
		rts
;===============================================================================
; Rotina para testar e setar o flag de carga da arte de fim de fase
; ->>>
;===============================================================================

; ---------------------------------------------------------------------------
; Subroutine to load signpost art when a flag is set (leftover from Sonic 2)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004B88: Check_End_Level_Art_Load:
CheckLoadSignpostArt:
		tst.w	(End_Level_Art_Load_Flag).w
		beq.s	SignpostUpdateEnd
		tst.w	(Debug_placement_mode).w
		bne.s	SignpostUpdateEnd
		move.w	(Camera_X).w,d0
		move.w	(Sonic_Level_Limits_Max_X).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	SignpostUpdateTailsBounds
		tst.b	(Update_HUD_timer).w
		beq.s	SignpostUpdateTailsBounds
		cmp.w	(Sonic_Level_Limits_Min_X).w,d1
		beq.s	SignpostUpdateTailsBounds
		move.w	d1,(Sonic_Level_Limits_Min_X).w
		tst.w	(Two_Player_Flag).w
		bne.s	SignpostUpdateEnd
		rts
; ---------------------------------------------------------------------------
		moveq	#$27,d0
		bra.w	LoadPLC2
; ---------------------------------------------------------------------------
; Offset_0x004BC2: S2_Set_End_Level_Miles_Boundaries:
SignpostUpdateTailsBounds:
		tst.w	(Two_Player_Flag).w
		beq.s	SignpostUpdateEnd
		move.w	(Camera_X_P2).w,d0
		move.w	(Miles_Level_Limits_Max_X).w,d1
		subi.w	#$100,d1
		cmp.w	d1,d0
		blt.s	SignpostUpdateEnd
		tst.b	(HUD_Timer_Refresh_Flag_P2).w
		beq.s	SignpostUpdateEnd
		cmp.w	(Miles_Level_Limits_Min_X).w,d1
		beq.s	SignpostUpdateEnd
		move.w	d1,(Miles_Level_Limits_Min_X).w
; Offset_0x004BE8 Exit_S2_Check_End_Level_Art_Load:
SignpostUpdateEnd:
		rts
; End of function CheckLoadSignpostArt

;===============================================================================
; Rotina para carregar a arte de fim de fase
; <<<-
;===============================================================================

Demo_Angel_Island:                                             ; Offset_0x004BEA
		binclude	"data\aiz\demo.dat"
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load stage tiles into VRAM from KosM format
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x004FEA: Main_Level_Load_8x8_Tiles:
LoadZoneTiles:
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		andi.w	#$1F8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(TilesMainTable).l,a4
		lea	(a4,d0.w),a4
		move.l	(a4)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,d7
		move.l	d0,a1
		move.w	(a1),d4
		move.w	#0,d2
		jsr	(Queue_Kos_Module).l
		move.l	(a4)+,d0
		andi.l	#$FFFFFF,d0
		cmp.l	d0,d7
		beq.s	Offset_0x005034
		move.l	d0,a1
		move.w	d4,d2
		jsr	(Queue_Kos_Module).l

Offset_0x005034:
		move.b	#$C,(VBlank_Index).w
		jsr	(Process_Kos_Queue).l
		bsr.w	Wait_For_VSync
		bsr.w	RunPLC_RAM
		jsr	(Process_Kos_Module_Queue).l
		tst.b	(Kos_modules_left).w
		bne.s	Offset_0x005034
		rts
; End of function LoadZoneTiles

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load water in set levels
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x005056: Init_Water_Levels:
Level_InitWaterLevels:
		cmpi.b	#Aiz_Id,(Current_Zone).w
		beq.s	Offset_0x005076
		cmpi.b	#Hz_Id,(Current_Zone).w
		beq.s	Offset_0x005076
		cmpi.w	#CNz_Act_2,(Current_ZoneAndAct).w
		beq.s	Offset_0x005076
		cmpi.w	#LBz_Act_2,(Current_ZoneAndAct).w
		bne.s	Offset_0x005082

Offset_0x005076:
		move.b	#1,(Water_Level_Flag).w
		move.w	#0,(Two_Player_Flag).w

Offset_0x005082:
		tst.b	(Water_Level_Flag).w
		beq.s	LevelInit_UndewaterPalette
		move.w	#$4EF9,(H_int_jump).w
		move.l	#HBlank_WaterHCZ,(H_int_addr).w
		cmpi.b	#Hz_Id,(Current_Zone).w
		beq.s	Offset_0x0050B6
		move.l	#HBlank_WaterPAL,(H_int_addr).w
		cmpi.w	#$1000,(Vertical_Frequency).w
		bcs.s	Offset_0x0050B6
		move.l	#HBlank_WaterNTSC,(H_int_addr).w

Offset_0x0050B6:
		move.l	#AIz_1_Water_Transistion,(Palette_Underwater_Ptr).w
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0
		lea	(Water_Height_Array).l,a1
		move.w	(a1,d0.w),d0
		move.w	d0,(Water_Level_Move).w
		move.w	d0,(Current_Water_Level).w
		move.w	d0,(Target_Water_Level).w
		clr.b	(Water_Entered_Counter).w
		clr.b	(Underwater_Flag).w
		move.b	#1,(Water_Level_Change_Speed).w
; Offset_0x0050F0:
LevelInit_UndewaterPalette:
		tst.b	(Water_Level_Flag).w
		beq.s	Offset_0x005174
		moveq	#$2B,d0
		cmpi.w	#AIz_Act_1,(Current_ZoneAndAct).w	; are we in AIZ1?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$2C,d0
		move.l	#AIz_2_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#AIz_Act_2,(Current_ZoneAndAct).w	; are we in AIZ2?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$31,d0
		move.l	#Hz_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#Hz_Act_1,(Current_ZoneAndAct).w	; are we in HCZ1?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$32,d0
		move.l	#Hz_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#Hz_Act_2,(Current_ZoneAndAct).w	; are we in HCZ2?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$2D,d0
		move.l	#Hz_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#LBz_Act_1,(Current_ZoneAndAct).w	; are we in LBZ1?
		beq.s	Offset_0x00515C				; if yes, branch
		moveq	#$2E,d0
		move.l	#LBz_2_Water_Transistion,(Palette_Underwater_Ptr).w
		cmpi.w	#LBz_Act_2,(Current_ZoneAndAct).w	; are we in LBZ2?
		beq.s	Offset_0x00515C				; if yes, branch
		nop

Offset_0x00515C:
		move.w	d0,d1
		bsr.w	PalLoad_Water_Now
		move.w	d1,d0
		bsr.w	PalLoad_Water_ForFade
		tst.b	(Saved_Level_Flag).w
		beq.s	Offset_0x005174
		move.b	(Saved_Underwater_Flag).w,(Underwater_Flag).w

Offset_0x005174:
		rts
; End of subroutine Level_InitWaterLevels

;===============================================================================
; Rotina para inicializar as fases com �gua
; <<<-
;===============================================================================

; Offset_0x005176:
		subq.w	#1,Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x0051EE
		move.w	#7,Obj_Ani_Time(A0)                         ; $0024
		moveq	#0,d0
		move.b	Obj_Timer(A0),d0                                ; $002E
		addq.b	#1,Obj_Timer(A0)                              ; $002E
		move.b	Offset_0x0051FA(pc,d0.w),d0
		bne.s	Offset_0x00519C
		move.b	#1,Obj_Timer(A0)                              ; $002E
		move.b	Offset_0x0051FA(PC),d0
Offset_0x00519C:
		lsl.w	#7,d0
		lea	(RAM_Start),a1                         ; $FFFF0000
		lea	(A1,d0),a1
		lea	(RAM_Start+$200),a2                   ; $FFFF0200
		move.w	#bytesToWcnt($100),d0
Offset_0x0051B2:
		move.w	(A1)+,(A2)+
		dbf	D0, Offset_0x0051B2
		moveq	#0,d0
		move.b	$2F(A0),d0
		addq.b	#1,$2F(A0)
		move.b	Offset_0x005214(pc,d0.w),d0
		bne.s	Offset_0x0051D2
		move.b	#1,$2F(A0)
		move.b	Offset_0x005214(PC),d0
Offset_0x0051D2:
		lsl.w	#7,d0
		lea	(RAM_Start),a1                         ; $FFFF0000
		lea	(A1,d0),a1
		lea	(RAM_Start+$F00),a2                   ; $FFFF0F00
		move.w	#bytesToWcnt($80),d0
Offset_0x0051E8:
		move.w	(A1)+,(A2)+
		dbf	D0, Offset_0x0051E8
Offset_0x0051EE:
		cmpi.w	#6,Obj_Ani_Time(A0)                         ; $0024
		beq.w	Offset_0x005296
		rts
;-------------------------------------------------------------------------------
Offset_0x0051FA:
		dc.b	$02, $12, $06, $14, $08, $16, $0A, $18
		dc.b	$0C, $18, $0A, $16, $08, $14, $06, $12
		dc.b	$03, $1A, $0E, $1C, $10, $1C, $0E, $1A
		dc.b	$00, $00
;-------------------------------------------------------------------------------
Offset_0x005214:
		dc.b	$02, $1F, $20, $21, $22, $23, $24, $25
		dc.b	$26, $27, $28, $29, $2A, $2B, $2C, $2D
		dc.b	$2E, $2F, $30, $31, $32, $33, $34, $35
		dc.b	$36, $37, $38, $39, $3A, $3B, $3C, $3D
		dc.b	$3E, $3F, $40, $41, $42, $43, $44, $45
		dc.b	$46, $47, $48, $49, $4A, $4B, $4C, $4D
		dc.b	$4E, $4D, $4C, $4B, $4A, $49, $48, $47
		dc.b	$46, $45, $44, $43, $42, $41, $40, $3F
		dc.b	$3E, $3D, $3C, $3B, $3A, $39, $38, $37
		dc.b	$36, $35, $34, $33, $32, $31, $30, $2F
		dc.b	$2E, $2D, $2C, $2B, $2A, $29, $28, $27
		dc.b	$26, $25, $24, $23, $22, $21, $20, $1F
		dc.b	$02, $4F, $50, $51, $52, $53, $54, $55
		dc.b	$56, $57, $58, $59, $5A, $5B, $5C, $5D
		dc.b	$5E, $5D, $5C, $5B, $5A, $59, $58, $57
		dc.b	$56, $55, $54, $53, $52, $51, $50, $4F
		dc.b	$00, $00
;-------------------------------------------------------------------------------
Offset_0x005296:
		move	#$2700,SR
		movem.l	D0-D7/A0-A6,-(sp)
		lea	(Plane_Buffer).w,a0                         ; $FFFFF100
		lea	(Blocks_Mem_Address).w,a2                   ; $FFFF9000
		lea	(Fg_Mem_Index_Address).w,a3                 ; $FFFF8008
		move.w	#$C000,d7
		move.w	(Camera_X).w,d0                             ; $FFFFEE78
		move.w	D0,d1
		move.w	(Camera_Y).w,d0                             ; $FFFFEE7C
		andi.w	#$FF0,d0
		jsr	(Refresh_Plane_Full).l                   ; Offset_0x02FA7C
		movem.l	(sp)+,d0-D7/A0-A6
		move	#$2300,SR
		rts
;===============================================================================
; Menu de op��es, menu de sele��o de fases no modo 1 e 2 jogadores
; ->>>
;===============================================================================
S2_Versus_Mode_Menu:
S2_Options_Menu:
S2_Level_Select_Menu:
S2_Menus:                                                      ; Offset_0x0052CC
		bsr.w	Pal_FadeToBlack                           ; Offset_0x002DE8
		move	#$2700,SR
		move.w	(VDP_Register_1_Command).w,d0               ; $FFFFF60E
		andi.b	#$BF,d0
		move.w	D0,(VDP_Control_Port)                       ; $00C00004
		bsr.w	ClearScreen                            ; Offset_0x001002
		lea	(VDP_Control_Port),a6                       ; $00C00004
		move.w	#$8004,(A6)
		move.w	#$8230,(A6)
		move.w	#$8407,(A6)
		move.w	#$8230,(A6)
		move.w	#$8700,(A6)
		move.w	#$8C81,(A6)
		move.w	#$9001,(A6)
		clearRAM Sprite_Table_Input,Sprite_Table_Input_End
		clearRAM Obj_Memory_Address,Obj_Memory_Address_End
		clr.w	(DMA_Buffer_List).w                          ; $FFFFE700
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w  ; $FFFFE700, $FFFFE8F8
		move.l	#$42000000,(VDP_Control_Port)               ; $00C00004
		lea	(Art_Menu_Font).l,a0                    ; Offset_0x1095D6
		bsr.w	NemesisDec                             ; Offset_0x001390
		move.l	#$4E000000,(VDP_Control_Port)               ; $00C00004
		lea	(Art_Menu_Frame).l,a0                   ; Offset_0x109EC8
		bsr.w	NemesisDec                             ; Offset_0x001390
		move.l	#$52000000,(VDP_Control_Port)               ; $00C00004
		lea	(Art_Level_Icons).l,a0                  ; Offset_0x109F48
		bsr.w	NemesisDec                             ; Offset_0x001390
		lea	(RAM_Start).l,a1                         ; $FFFF0000
		lea	(Versus_Menu_Bg_Mappings).l,a0          ; Offset_0x109D1C
		move.w	#$6000,d0
		bsr.w	EnigmaDec                              ; Offset_0x00168A
		lea	(RAM_Start).l,a1                         ; $FFFF0000
		move.l	#$60000003,d0
		moveq	#40-1,d1
		moveq	#28-1,d2
		jsr	(PlaneMapToVRAM_H40).l                      ; Offset_0x0012BC
		cmpi.b	#gm_S2_Options_Menu,(Game_Mode).w      ; $24, $FFFFF600
		beq.w	OptionsMenu                           ; Offset_0x0056CA
		cmpi.b	#gm_Level_Select_Menu,(Game_Mode).w    ; $28, $FFFFF600
		beq.w	LevelSelect_Menu                      ; Offset_0x0059F0
;-------------------------------------------------------------------------------
; Level_Select_Menu_2P:
		lea	(RAM_Start).l,a1                         ; $FFFF0000
		lea	(Vs_Level_Select_Frame_Mappings).l,a0   ; Offset_0x006410
		move.w	#$70,d0
		bsr.w	EnigmaDec                              ; Offset_0x00168A
		lea	(RAM_Start+$198).l,a1                   ; $FFFF0198
		lea	(Vs_Level_Select_Frame_Mappings).l,a0   ; Offset_0x006410
		move.w	#$2070,d0
		bsr.w	EnigmaDec                              ; Offset_0x00168A
		lea	(RAM_Start+$330).l,a1                   ; $FFFF0330
		lea	(Menu_Icons_Mappings).l,a0              ; Offset_0x0065E2
		move.w	#$90,d0
		bsr.w	EnigmaDec                              ; Offset_0x00168A
		lea	(RAM_Start+$498).l,a2                   ; $FFFF0498
		moveq	#bytesToWcnt($20),d1
Offset_0x0053F2:
		move.w	#$207B,(A2)+
		dbf	D1, Offset_0x0053F2
		bsr.w	Offset_0x005580
		addq.b	#1,(Level_Id_2P).w                        ; $FFFFFF88
		andi.b	#3,(Level_Id_2P).w                        ; $FFFFFF88
		bsr.w	Offset_0x00561A
		addq.b	#1,(Level_Id_2P).w                        ; $FFFFFF88
		andi.b	#3,(Level_Id_2P).w                        ; $FFFFFF88
		bsr.w	Offset_0x00561A
		addq.b	#1,(Level_Id_2P).w                        ; $FFFFFF88
		andi.b	#3,(Level_Id_2P).w                        ; $FFFFFF88
		bsr.w	Offset_0x00561A
		addq.b	#1,(Level_Id_2P).w                        ; $FFFFFF88
		andi.b	#3,(Level_Id_2P).w                        ; $FFFFFF88
		clr.w	(Player_Selected_Flag).w                     ; $FFFFFF08
		clr.b	(Act_Id_2P).w                                ; $FFFFFF89
		clr.w	(Results_Screen_2P).w                        ; $FFFFFF02
		clr.b	(Title_Card_Flag).w                          ; $FFFFF711
		clr.w	(Animate_Counters).w                         ; $FFFFF7F0
		clr.w	(Game_Over_2P_Flag).w                        ; $FFFFFF98
		lea	(Anim_SonicMilesBG).l,a2                     ; Offset_0x006614
		jsr	(Dynamic_Normal).l                       ; Offset_0x01F2DE
		moveq	#4,d0
		bsr.w	PalLoad_ForFade                               ; Offset_0x002F9E
		lea	(Palette_Row_2_Offset).w,a1                 ; $FFFFED40
		lea	(Palette_Row_2_Data_Target).w,a2              ; $FFFFEDC0
		moveq	#bytesToLcnt($20),d1
Offset_0x005466:
		move.l	(A1),(A2)+
		clr.l	(A1)+
		dbf	D1, Offset_0x005466
		move.w	#(30*60)-1,(Demo_Timer).w                       ; $FFFFF614
		clr.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		clr.l	(Camera_X).w                                 ; $FFFFEE78
		clr.l	(Camera_Y).w                                 ; $FFFFEE7C
		move.b	#$16,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		move.w	(VDP_Register_1_Command).w,d0               ; $FFFFF60E
		ori.b	#$40,d0
		move.w	D0,(VDP_Control_Port)                       ; $00C00004
		bsr.w	Pal_FadeFromBlack                             ; Offset_0x002D20
Offset_0x00549C:
		move.b	#$16,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		move	#$2700,SR
		bsr.w	Offset_0x00561A
		bsr.w	Offset_0x00555C
		bsr.w	Offset_0x005580
		move	#$2300,SR
		lea	(Anim_SonicMilesBG).l,a2                     ; Offset_0x006614
		jsr	(Dynamic_Normal).l                       ; Offset_0x01F2DE
		move.b	(Control_Ports_Buffer_Data+1).w,d0      ; $FFFFF605
		or.b	(Control_Ports_Buffer_Data+3).w,d0      ; $FFFFF607
		andi.b	#button_start_mask,d0
		bne.s	Offset_0x0054D8
		bra.w	Offset_0x00549C
Offset_0x0054D8:
		bsr.w	Offset_0x005600
		bmi.s	Offset_0x0054EA
		move.w	#sfx_S2Error,d0
		bsr.w	PlaySound                             ; Offset_0x001176
		bra.w	Offset_0x00549C
Offset_0x0054EA:
		move.b	#gm_SEGALogo,(Game_Mode).w             ; $00, $FFFFF600
		rts
;-------------------------------------------------------------------------------
Load_Selected_Level_2P:                                        ; Offset_0x0054F2
		moveq	#0,d0
		move.b	(Level_Id_2P).w,d0                          ; $FFFFFF88
		add.w	D0,d0
		move.w	Menu_Level_Select_Array_2P(pc,d0.w),d0 ; Offset_0x005554
		bmi.s	Menu_Load_Special_Stage_2P             ; Offset_0x00553C
		move.w	D0,(Current_ZoneAndAct).w                             ; $FFFFFE10
		move.w	D0,(Apparent_ZoneAndAct).w                           ; $FFFFEE54
		move.w	#1,(Two_Player_Flag).w                  ; $FFFFFFD8
		move.b	#gm_PlayMode,(Game_Mode).w             ; $0C, $FFFFF600
		move.b	#0,(Saved_Level_Flag).w                   ; $FFFFFE30
		move.b	#0,(Saved_Level_Flag_P2).w                ; $FFFFFEE0
		moveq	#0,d0
		move.l	D0,(Score_Count_Address).w                  ; $FFFFFE26
		move.l	D0,(Score_Count_Address_P2).w               ; $FFFFFED6
		move.l	#5000,(Next_Extra_Life_Score).w        ; $FFFFFFC0
		move.l	#5000,(Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
		rts
Menu_Load_Special_Stage_2P:                                    ; Offset_0x00553C
		move.b	#4,(Current_SpecialStage).w                   ; $FFFFFE16
		move.b	#gm_S2_SpecialStage,(Game_Mode).w      ; $10, $FFFFF600
		moveq	#1,d0
		move.w	D0,(Two_Player_Flag).w                      ; $FFFFFFD8
		move.w	D0,(Two_Player_Flag_2).w                    ; $FFFFFF8A
		rts
Menu_Level_Select_Array_2P:                                    ; Offset_0x005554
		dc.w	S2_EHz_Id<<8, S2_MCz_Id<<8, S2_CNz_Id<<8, $FFFF
;-------------------------------------------------------------------------------
Offset_0x00555C:
		move.b	(Control_Ports_Buffer_Data+1).w,d0      ; $FFFFF605
		or.b	(Control_Ports_Buffer_Data+3).w,d0      ; $FFFFF607
		move.b	D0,d1
		andi.b	#3,d0
		beq.s	Offset_0x005572
		bchg	#1,(Level_Id_2P).w                         ; $FFFFFF88
Offset_0x005572:
		andi.b	#$C,d1
		beq.s	Offset_0x00557E
		bchg	#0,(Level_Id_2P).w                         ; $FFFFFF88
Offset_0x00557E:
		rts
;-------------------------------------------------------------------------------
Offset_0x005580:
		moveq	#0,d0
		move.b	(Level_Id_2P).w,d0                          ; $FFFFFF88
		lsl.w	#4,d0
		lea	(Level_Select_Text_2P).l,a3             ; Offset_0x00567C
		lea	(A3,d0),a3
		move.w	#$6000,d0
		lea	(RAM_Start+$48).l,a2                   ; $FFFF0048
		move.l	(A3)+,a1
		bsr.w	MenuScreenTextToRAM
		lea	(RAM_Start+$94).l,a2                   ; $FFFF0094
		move.l	(A3)+,a1
		bsr.w	MenuScreenTextToRAM
		lea	(RAM_Start+$D8).l,a2                   ; $FFFF00D8
		move.l	4(A3),a1
		bsr.w	Offset_0x005600
		bmi.s	Offset_0x0055C4
		lea	(RAM_Start+$468).l,a1                   ; $FFFF0468
Offset_0x0055C4:
		moveq	#2,d1
Offset_0x0055C6:
		move.l	(A1)+,(A2)+
		move.l	(A1)+,(A2)+
		lea	$1A(A2),a2
		dbf	D1, Offset_0x0055C6
		lea	(RAM_Start).l,a1                         ; $FFFF0000
		move.l	(A3)+,d0
		moveq	#17-1,d1
		moveq	#12-1,d2
		bsr.w	PlaneMapToVRAM_H40                        ; Offset_0x0012BC
		lea	(Palette_S2LevelIcons).l,a1                 ; Offset_0x006230
		moveq	#0,d0
		move.b	(A3),d0
		lsl.w	#5,d0
		lea	(A1,d0),a1
		lea	(Palette_Row_2_Offset).w,a2                 ; $FFFFED40
		moveq	#bytesToLcnt($20),d1
Offset_0x0055F8:
		move.l	(A1)+,(A2)+
		dbf	D1, Offset_0x0055F8
		rts
Offset_0x005600:
		moveq	#0,d0
		move.b	(Level_Id_2P).w,d0                          ; $FFFFFF88
		move.w	D0,d1
		add.w	D0,d0
		add.w	D1,d0
		add.w	D0,d0
		lea	(A5,d0),a5
		move.w	(A5),d0
		add.w	2(A5),d0
		rts
;-------------------------------------------------------------------------------
Offset_0x00561A:
		moveq	#0,d0
		move.b	(Level_Id_2P).w,d0                          ; $FFFFFF88
		lsl.w	#4,d0
		lea	(Level_Select_Text_2P).l,a3             ; Offset_0x00567C
		lea	(A3,d0),a3
		moveq	#0,d0
		lea	(RAM_Start+$1E0).l,a2                   ; $FFFF01E0
		move.l	(A3)+,a1
		bsr.w	MenuScreenTextToRAM
		lea	(RAM_Start+$22C).l,a2                   ; $FFFF022C
		move.l	(A3)+,a1
		bsr.w	MenuScreenTextToRAM
		lea	(RAM_Start+$270).l,a2                   ; $FFFF0270
		lea	(RAM_Start+$498).l,a1                   ; $FFFF0498
		bsr.w	Offset_0x005600
		bmi.s	Offset_0x00565E
		lea	(RAM_Start+$468).l,a1                   ; $FFFF0468
Offset_0x00565E:
		moveq	#2,d1
Offset_0x005660:
		move.l	(A1)+,(A2)+
		move.l	(A1)+,(A2)+
		lea	$1A(A2),a2
		dbf	D1, Offset_0x005660
		lea	(RAM_Start+$198).l,a1                   ; $FFFF0198
		move.l	(A3)+,d0
		moveq	#17-1,d1
		moveq	#12-1,d2
		bra.w	PlaneMapToVRAM_H40                        ; Offset_0x0012BC
;-------------------------------------------------------------------------------
Level_Select_Text_2P:                                          ; Offset_0x00567C
		dc.l	Text2P_EmeraldHill                       ; Offset_0x00610E
		dc.l	Text2P_Zone                               ; Offset_0x006150
		dc.w	$4104, $0003, $00FF, $0330
		dc.l	Text2P_MysticCave                        ; Offset_0x00611B
		dc.l	Text2P_Zone                               ; Offset_0x006150
		dc.w	$412C, $0003, $05FF, $03A8
		dc.l	Text2P_CasinoNight                       ; Offset_0x006128
		dc.l	Text2P_Zone                               ; Offset_0x006150
		dc.w	$4784, $0003, $06FF, $03C0
		dc.l	Text2P_Special                            ; Offset_0x006143
		dc.l	Text2P_Stage                              ; Offset_0x006156
		dc.w	$47AC, $0003, $0CFF, $0450

; ---------------------------------------------------------------------------
; Common menu screen subroutine for transferring text to RAM

; ARGUMENTS:
; d0 = starting art tile
; a1 = data source
; a2 = destination
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0056BC:
MenuScreenTextToRAM:
		moveq	#0,d1
		move.b	(a1)+,d1

Offset_0x0056C0:
		move.b	(a1)+,d0
		move.w	d0,(a2)+
		dbf	d1,Offset_0x0056C0
		rts
; End of function MenuScreenTextToRAM

; ===========================================================================
; ---------------------------------------------------------------------------
; (SUB) GAME MODE - Options Menu (from Sonic 2)
; Was apparently accessable at some point due to minor programming changes
; ---------------------------------------------------------------------------
; Offset_0x0056CA:
OptionsMenu:
		lea	(RAM_Start).l,a1
		lea	(Options_Frame_Mappings).l,a0
		move.w	#$70,d0
		bsr.w	EnigmaDec
		lea	(RAM_Start+$160).l,a1
		lea	(Options_Frame_Mappings).l,a0
		move.w	#$2070,d0
		bsr.w	EnigmaDec

		clr.b	(Options_Menu_Cursor).w
		bsr.w	OptionsMenu_DrawSelected
		addq.b	#1,(Options_Menu_Cursor).w
		bsr.w	OptionsMenu_DrawUnselected
		addq.b	#1,(Options_Menu_Cursor).w
		bsr.w	OptionsMenu_DrawUnselected

		clr.b	(Options_Menu_Cursor).w
		clr.b	(Title_Card_Flag).w
		clr.w	(Animate_Counters).w
		lea	(Anim_SonicMilesBG).l,a2
		jsr	(Dynamic_Normal).l

		moveq	#4,d0
		bsr.w	PalLoad_ForFade
		; missing queue to play the menu music

		clr.w	(Two_Player_Flag).w
		clr.l	(Camera_X).w
		clr.l	(Camera_Y).w
		clr.w	(Secret_Code_Input_Entries).w
		clr.w	(Secret_Code_Input_Entries_2).w
		move.b	#$16,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		move.w	(VDP_Register_1_Command).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_Control_Port).l
		bsr.w	Pal_FadeFromBlack
; Offset_0x005758:
OptionsMenu_Main:
		move.b	#$16,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		move	#$2700,sr
		bsr.w	OptionsMenu_DrawUnselected
		bsr.w	OptionsMenu_Controls
		bsr.w	OptionsMenu_DrawSelected
		move	#$2300,sr
		lea	(Anim_SonicMilesBG).l,a2
		jsr	(Dynamic_Normal).l
		move.b	(Control_Ports_Buffer_Data+1).w,d0
		or.b	(Control_Ports_Buffer_Data+3).w,d0
		andi.b	#button_start_mask,d0
		bne.s	OptionsMenu_Select
		bra.w	OptionsMenu_Main
; ===========================================================================
; Offset_0x005794:
OptionsMenu_Select:
		move.b	(Options_Menu_Cursor).w,d0
		bne.s	OptionsMenu_2PGame
		moveq	#0,d0
		move.w	d0,(Two_Player_Flag).w
		move.w	d0,(Two_Player_Flag_2).w
		move.w	d0,(Current_ZoneAndAct).w
		move.w	d0,(Apparent_ZoneAndAct).w	; also clears the apparent stage
		move.b	#gm_PlayMode,(Game_Mode).w
		rts
; ===========================================================================
; Offset_0x0057B4:
OptionsMenu_2PGame:
		subq.b	#1,d0
		bne.s	OptionsMenu_Exit
		moveq	#1,d0
		move.w	d0,(Two_Player_Flag).w
		move.w	d0,(Two_Player_Flag_2).w
		move.b	#gm_S2_Versus_Mode_Menu,(Game_Mode).w
		move.b	#0,(Level_Id_2P).w
		move.w	#0,(Player_Selected_Flag).w
		rts
; ===========================================================================
; Offset_0x0057D6:
OptionsMenu_Exit:
		move.b	#gm_SEGALogo,(Game_Mode).w
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to move around the options menu
; ---------------------------------------------------------------------------
; Offset_0x0057DE:
OptionsMenu_Controls:
		moveq	#0,d2
		move.b	(Options_Menu_Cursor).w,d2
		move.b	(Control_Ports_Buffer_Data+1).w,d0
		or.b	(Control_Ports_Buffer_Data+3).w,d0
		btst	#button_up,d0
		beq.s	Offset_0x0057FA
		subq.b	#1,d2
		bcc.s	Offset_0x0057FA
		move.b	#2,d2

Offset_0x0057FA:
		btst	#button_down,d0
		beq.s	Offset_0x00580A
		addq.b	#1,d2
		cmpi.b	#3,d2
		bcs.s	Offset_0x00580A
		moveq	#0,d2

Offset_0x00580A:
		move.b	d2,(Options_Menu_Cursor).w
		lsl.w	#2,d2
		move.b	OptionsMenu_Choices(pc,d2.w),d3
		move.l	OptionsMenu_Choices(pc,d2.w),a1
		move.w	(a1),d2
		btst	#button_left,d0
		beq.s	Offset_0x005826
		subq.b	#1,d2
		bcc.s	Offset_0x005826
		move.b	d3,d2

Offset_0x005826:
		btst	#button_right,d0
		beq.s	Offset_0x005834
		addq.b	#1,d2
		cmp.b	d3,d2
		bls.s	Offset_0x005834
		moveq	#0,d2

Offset_0x005834:
		btst	#button_A,d0
		beq.s	OptionsMenu_PlaySound
		addi.b	#$10,d2
		cmp.b	d3,d2
		bls.s	OptionsMenu_PlaySound
		moveq	#0,d2
; Offset_0x005844:
OptionsMenu_PlaySound:
		move.w	d2,(a1)
		cmpi.b	#2,(Options_Menu_Cursor).w
		bne.s	Offset_0x005872
		andi.w	#$30,d0
		beq.s	Offset_0x005872
		move.w	(Sound_Test_Sound).w,d0
		; no longer add $80 to the sound test ID
		bsr.w	PlaySound
		lea	(S2LevelSelect_Cheat).l,a0
		lea	(S214Continues_Cheat).l,a2
		lea	(Level_Select_Flag).w,a1
		moveq	#0,d2
		bsr.w	Menus_CheckCheats

Offset_0x005872:
		rts
; ===========================================================================
; Offset_0x005874: Menu_Options_Boundaries:
OptionsMenu_Choices:
		dc.l	(3-1)<<24|(Player_Select_Flag&$FFFFFF)		; PLAYER SELECT
		dc.l	(2-1)<<24|(Two_Player_Items_Mode&$FFFFFF)	; TWO-PLAYER ITEMS
		dc.l	($CA-1)<<24|(Sound_Test_Sound&$FFFFFF)		; SOUND TEST
		; extended sound test range
; End of function OptionsMenu_Controls

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to highlight the current selection on the options menu
; ---------------------------------------------------------------------------
; Offset_0x005880:
OptionsMenu_DrawSelected:
		bsr.w	OptionsMenu_SelectTextPtr
		moveq	#0,d1
		move.b	(Options_Menu_Cursor).w,d1
		lsl.w	#3,d1
		lea	(OptionsMenu_Boxes).l,a3
		lea	(a3,d1.w),a3
		move.w	#$6000,d0
		lea	(RAM_Start+$30).l,a2
		move.l	(a3)+,a1
		bsr.w	MenuScreenTextToRAM
		lea	(RAM_Start+$B6).l,a2
		moveq	#0,d1
		cmpi.b	#2,(Options_Menu_Cursor).w
		beq.s	Offset_0x0058C8
		move.b	(Options_Menu_Cursor).w,d1
		lsl.w	#2,d1
		lea	OptionsMenu_Choices(pc),a1
		move.l	(a1,d1.w),a1
		move.w	(a1),d1
		lsl.w	#2,d1

Offset_0x0058C8:
		move.l	(a4,d1.w),a1
		bsr.w	MenuScreenTextToRAM
		cmpi.b	#2,(Options_Menu_Cursor).w
		bne.s	Offset_0x0058E2
		lea	(RAM_Start+$C2).l,a2
		bsr.w	OptionsMenu_DrawSoundNumber

Offset_0x0058E2:
		lea	(RAM_Start).l,a1
		move.l	(a3)+,d0
		moveq	#22-1,d1
		moveq	#8-1,d2
		bra.w	PlaneMapToVRAM_H40
; ===========================================================================
; Offset_0x0058F2:
OptionsMenu_DrawUnselected:
		bsr.w	OptionsMenu_SelectTextPtr
		moveq	#0,d1
		move.b	(Options_Menu_Cursor).w,d1
		lsl.w	#3,d1
		lea	(OptionsMenu_Boxes).l,a3
		lea	(a3,d1.w),a3
		moveq	#0,d0
		lea	(RAM_Start+$190).l,a2
		move.l	(a3)+,a1
		bsr.w	MenuScreenTextToRAM
		lea	(RAM_Start+$216).l,a2
		moveq	#0,d1
		cmpi.b	#2,(Options_Menu_Cursor).w
		beq.s	Offset_0x005938
		move.b	(Options_Menu_Cursor).w,d1
		lsl.w	#2,d1
		lea	OptionsMenu_Choices(pc),a1
		move.l	(a1,d1.w),a1
		move.w	(a1),d1
		lsl.w	#2,d1

Offset_0x005938:
		move.l	(a4,d1.w),a1
		bsr.w	MenuScreenTextToRAM
		cmpi.b	#2,(Options_Menu_Cursor).w
		bne.s	Offset_0x005952
		lea	(RAM_Start+$222).l,a2
		bsr.w	OptionsMenu_DrawSoundNumber

Offset_0x005952:
		lea	(RAM_Start+$160).l,a1
		move.l	(a3)+,d0
		moveq	#22-1,d1
		moveq	#8-1,d2
		bra.w	PlaneMapToVRAM_H40
; ===========================================================================
; Offset_0x005962:
OptionsMenu_SelectTextPtr:
		lea	(OptionsText_PlayerSelect).l,a4
		tst.b	(Hardware_Id).w
		bpl.s	Offset_0x005974
		lea	(OptionsText_PlayerSelect2).l,a4

Offset_0x005974:
		tst.b	(Options_Menu_Cursor).w
		beq.s	Offset_0x005980
		lea	(OptionsText_TwoPlayerItems).l,a4

Offset_0x005980:
		cmpi.b	#2,(Options_Menu_Cursor).w
		bne.s	Offset_0x00598E
		lea	(OptionsText_SoundTest).l,a4

Offset_0x00598E:
		rts
; ===========================================================================
; Offset_0x005990:
OptionsMenu_DrawSoundNumber:
		move.w	(Sound_Test_Sound).w,d1
		move.b	d1,d2
		lsr.b	#4,d1
		bsr.s	Offset_0x00599C
		move.b	d2,d1

Offset_0x00599C:
		andi.w	#$F,d1
		cmpi.b	#$A,d1
		bcs.s	Offset_0x0059AA
		addi.b	#4,d1

Offset_0x0059AA:
		addi.b	#$10,d1
		move.b	d1,d0
		move.w	d0,(a2)+
		rts
; End of function OptionsMenu_DrawSelected

; ===========================================================================
; Offset_0x0059B4: Menu_Options_Idx:
OptionsMenu_Boxes:
		dc.l	TextOptScr_PlayerSelect
		dc.w	$4192, 3
		dc.l	TextOptScr_VsModeItems
		dc.w	$4592, 3
		dc.l	TextOptScr_SoundTest
		dc.w	$4992, 3
; Offset_0x0059CC: Map_Player_Select_Jap_Idx:
OptionsText_PlayerSelect:
		dc.l	TextOptScr_SonicAndMiles
		dc.l	TextOptScr_SonicAlone
		dc.l	TextOptScr_MilesAlone
; Offset_0x0059D8: Map_Player_Select_Idx:
OptionsText_PlayerSelect2:
		dc.l	TextOptScr_SonicAndTails
		dc.l	TextOptScr_SonicAlone
		dc.l	TextOptScr_TailsAlone
; Offset_0x0059E4: Map_Vs_Mode_Items_Idx:
OptionsText_TwoPlayerItems:
		dc.l	TextOptScr_AllKindsItems
		dc.l	TextOptScr_TeleportOnly
; Offset_0x0059EC: Map_Sound_Test_Idx:
OptionsText_SoundTest:
		dc.l	TextOptScr_0

; ===========================================================================
; ---------------------------------------------------------------------------
; (SUB) GAME MODE - Level Select
; ---------------------------------------------------------------------------
; Offset_0x0059F0: Level_Select_Menu:
LevelSelect_Menu:
		; load the Sonic 2 level select text (for the level icons)
		lea	(RAM_Start).l,a1
		lea	(S2_Menu_Level_Select_Text).l,a0
		move.w	#0,d0
		bsr.w	EnigmaDec
		; then clear most of it, except the bottom (again, for the icons)
		lea	(RAM_Start).l,a3
		move.w	#bytesToWcnt($640),d1

Offset_0x005A0E:
		move.w	#0,(a3)+
		dbf	d1,Offset_0x005A0E
		; and clear a bit more (Oil Ocean's name)
		lea	(RAM_Start+$696).l,a3
		move.w	#bytesToWcnt($20),d1

Offset_0x005A20:
		move.w	#0,(a3)+
		dbf	d1,Offset_0x005A20

		; begin adding the *actual* level select text; Sonic 3 opts to create
		; it on the spot using character data, rather than just storing the
		; whole plane map in its ROM
		lea	(RAM_Start).l,a3
		lea	(LevelSelect_Names).l,a1
		lea	(LevelSelect_TextPositions).l,a5
		moveq	#0,d0
		move.w	#15-1,d1

Offset_0x005A40:
		move.w	(a5)+,d3		; get relative address in plane map to write to
		lea	(a3,d3.w),a2		; get absolute address
		moveq	#0,d2
		move.b	(a1)+,d2		; get length of the string
		move.w	d2,d3
; Offset_0x005A4C:
.drawZoneName:
		move.b	(a1)+,d0		; get character from string
		move.w	d0,(a2)+		; send the character to the plane map
		dbf	d2,.drawZoneName	; repeat until the string is completed

		move.w	#$D,d2			; maximum length of the string
		sub.w	d3,d2			; get remaining space
		bcs.s	.drawActNumber		; if none is present, branch
; Offset_0x005A5C:
.fillWithBlank:
		move.w	#0,(a2)+		; fill the remaining space with blank characters
		dbf	d2,.fillWithBlank
; Offset_0x005A64:
.drawActNumber:
		move.w	#$11,(a2)		; write 1 next to the zone name
		lea	$50(a2),a2
		move.w	#$12,(a2)		; write 2 one line below that
		dbf	d1,Offset_0x005A40

		; this assumes that the last line is the sound test
		move.w	#0,(a2)			; get rid of 2
		lea	-$50(a2),a2
		move.w	#$1A,(a2)		; replace 1 with *

		; and finally send it to VRAM
		lea	(RAM_Start).l,a1
		move.l	#$40000003,d0
		moveq	#40-1,d1
		moveq	#28-1,d2
		jsr	(PlaneMapToVRAM_H40).l

		moveq	#0,d3
		bsr.w	LevelSelect_DrawSoundNumber

		lea	(RAM_Start+$8C0).l,a1
		lea	(Menu_Icons_Mappings).l,a0
		move.w	#$90,d0
		bsr.w	EnigmaDec
		bsr.w	LevelSelect_DrawIcon

		clr.w	(Player_Selected_Flag).w
		clr.w	(Results_Screen_2P).w
		clr.b	(Title_Card_Flag).w
		clr.w	(Animate_Counters).w
		lea	(Anim_SonicMilesBG).l,a2
		jsr	(Dynamic_Normal).l
		moveq	#4,d0
		bsr.w	PalLoad_ForFade
		lea	(Palette_Row_2_Offset).w,a1
		lea	(Palette_Data_Target+$40).w,a2
		moveq	#bytesToLcnt($20),d1

Offset_0x005AE0:
		move.l	(a1),(a2)+
		clr.l	(a1)+
		dbf	d1,Offset_0x005AE0

		move.w	#(30*60)-1,(Demo_Timer).w
		clr.w	(Two_Player_Flag).w
		clr.l	(Camera_X).w
		clr.l	(Camera_Y).w
		; unlike the final, this wasn't removed, in fact the debug flag was added
		; here meaning the player didn't need to input 01 03 05 07 to enable it
		move.w	#$101,(Level_Select_Flag).w
		nop
		nop
		nop
		clr.w	(Secret_Code_Input_Entries).w
		clr.w	(Secret_Code_Input_Entries_2).w
		move.b	#$16,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		move.w	(VDP_Register_1_Command).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_Control_Port).l
		bsr.w	Pal_FadeFromBlack
; Offset_0x005B2A:
LevelSelect_Main:
		move.b	#$16,(VBlank_Index).w
		bsr.w	Wait_For_VSync
		move	#$2700,sr
		moveq	#0,d3
		bsr.w	LevelSelect_MarkFields
		bsr.w	LevelSelect_Controls
		move.w	#$6000,d3
		bsr.w	LevelSelect_MarkFields
		bsr.w	LevelSelect_DrawIcon
		move	#$2300,sr
		lea	(Anim_SonicMilesBG).l,a2
		jsr	(Dynamic_Normal).l
		move.b	(Control_Ports_Buffer_Data+1).w,d0
		or.b	(Control_Ports_Buffer_Data+3).w,d0
		andi.b	#button_start_mask,d0
		bne.s	LevelSelect_PressStart
		bra.w	LevelSelect_Main
; ===========================================================================
; Offset_0x005B70:
LevelSelect_PressStart:
		move.w	(Level_Select_Menu_Cursor).w,d0
		add.w	d0,d0
		move.w	LevelSelect_Levels(pc,d0.w),d0
		bmi.w	LevelSelect_ResetGame		; if it is -1, branch
		cmpi.w	#$5555,d0			; is the level disabled?
		beq.w	LevelSelect_Main		; if yes, branch
		cmpi.w	#$4001,d0			; is this the second Special Stage?
		beq.w	LevelSelect_SpecialStage2	; if yes, branch
		cmpi.w	#$4000,d0			; is this the first Special Stage?
		bne.w	LevelSelect_LoadLevel		; if not, branch
; LevelSelect_SpecialStage1:
		move.b	#gm_S3_Special_Stage,(Game_Mode).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x005B9E: Menu_Run_SK_Special_Stage:
LevelSelect_SpecialStage2:
		move.b	#gm_SK_Special_Stage,(Game_Mode).w
		rts
; Offset_0x005BA6: Menu_Run_S2_Special_Stage:
		move.b	#gm_S2_SpecialStage,(Game_Mode).w
		clr.w	(Current_ZoneAndAct).w
		clr.w	(Apparent_ZoneAndAct).w
		move.b	#3,(Life_count).w
		move.b	#3,(Life_Count_P2).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score_Count_Address).w
		move.w	d0,(Ring_Count_Address_P2).w
		move.l	d0,(Time_Count_Address_P2).w
		move.l	d0,(Score_Count_Address_P2).w
		move.l	#5000,(Next_Extra_Life_Score).w
		move.l	#5000,(Next_Extra_Life_Score_P2).w
		move.w	(Player_Select_Flag).w,(Player_Selected_Flag).w
		rts
; ===========================================================================
; Offset_0x005BF2: Menu_Level_Select_Array:
LevelSelect_Levels:
		dc.w	AIz_Act_1,	AIz_Act_2	; ANGEL ISLAND
		dc.w	Hz_Act_1,	Hz_Act_2	; HYDROCITY
		dc.w	MGz_Act_1,	MGz_Act_2	; MARBLE GARDEN
		dc.w	CNz_Act_1,	CNz_Act_2	; CARNIVAL NIGHT
		dc.w	FBz_Act_1,	FBz_Act_2	; FLYING BATTERY
		dc.w	Iz_Act_1,	Iz_Act_2	; ICECAP
		dc.w	LBz_Act_1,	LBz_Act_2	; LAUNCH BASE
		dc.w	$5555,		$5555		; MUSHROOM VALLEY
		dc.w	$5555,		$5555		; SANDOPOLIS
		dc.w	Alz_Act_1,	BPz_Act_1	; 2P VS
		dc.w	DPz_Act_1,	CGz_Act_1	; 2P VS
		dc.w	EMz_Act_1,	GM_BS_Act_1	; 2P VS
		dc.w	GS_BS_Act_1,	SM_BS_Act_1	; BONUS
		dc.w	$4000,		$4001		; SPECIAL STAGE
		dc.w	-1				; SOUND TEST
; ===========================================================================
; Offset_0x005C2C: Menu_Game_Reset:
LevelSelect_ResetGame:
		move.b	#gm_SEGALogo,(Game_Mode).w
		rts
; ===========================================================================
; Offset_0x005C34: Menu_Load_Level:
LevelSelect_LoadLevel:
		andi.w	#$3FFF,d0
		move.w	d0,(Current_ZoneAndAct).w
		move.w	d0,(Apparent_ZoneAndAct).w
		cmpi.w	#AIz_Act_2,d0		; is this Angel Island 2?
		beq.s	.loadAct1		; if yes, branch
		cmpi.w	#Iz_Act_2,d0		; is this IceCap 2?
		bne.s	.setDefaults		; if not, branch
; Offset_0x005C4C:
.loadAct1:
		clr.b	(Apparent_Act).w	; tell the game we're actually in Act 1
; Offset_0x005C50:
.setDefaults:
		move.b	#gm_PlayMode,(Game_Mode).w
		move.b	#3,(Life_count).w
		move.b	#3,(Life_Count_P2).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score_Count_Address).w
		move.w	d0,(Ring_Count_Address_P2).w
		move.l	d0,(Time_Count_Address_P2).w
		move.l	d0,(Score_Count_Address_P2).w
		move.b	d0,(Continue_count).w
		move.l	#5000,(Next_Extra_Life_Score).w
		move.l	#5000,(Next_Extra_Life_Score_P2).w
		move.b	#cmd_FadeOutUnk,d0
		jsr	(PlaySound).l
		moveq	#0,d0
		move.w	d0,(Two_Player_Flag_2).w
		move.w	d0,(Two_Player_Flag).w
		cmpi.b	#ALz_Id,(Current_Zone).w	; is this Azure Lake or above?
		bcs.s	.noTwoPlayer			; if not, branch
		cmpi.b	#GM_BS_Id,(Current_Zone).w	; is this the Gumball Machine or above?
		bcc.s	.noTwoPlayer			; if yes, branch
		move.w	#1,(Two_Player_Flag).w
; Offset_0x005CBA:
.noTwoPlayer:
		rts
; End of function LevelSelect_PressStart

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to move around the level select screen
; ---------------------------------------------------------------------------
; Offset_0x005CBC: Level_Select_Controls:
LevelSelect_Controls:
		move.b	(Control_Ports_Buffer_Data+1).w,d1
		andi.b	#3,d1
		bne.s	Offset_0x005CCC
		subq.w	#1,(Level_Select_Hold_Timer).w
		bpl.s	LevelSelect_CheckLR

Offset_0x005CCC:
		move.w	#$B,(Level_Select_Hold_Timer).w
		move.b	(Control_Ports_Buffer_Data).w,d1
		andi.b	#3,d1
		beq.s	LevelSelect_CheckLR
		move.w	(Level_Select_Menu_Cursor).w,d0
		btst	#button_up,d1
		beq.s	Offset_0x005CEC
		subq.w	#1,d0
		bcc.s	Offset_0x005CEC
		moveq	#$1C,d0

Offset_0x005CEC:
		btst	#button_down,d1
		beq.s	Offset_0x005CFC
		addq.w	#1,d0
		cmpi.w	#$1D,d0
		bcs.s	Offset_0x005CFC
		moveq	#0,d0

Offset_0x005CFC:
		move.w	d0,(Level_Select_Menu_Cursor).w
		rts
; ===========================================================================
; Offset_0x005D02:
LevelSelect_CheckLR:
		cmpi.w	#$1C,(Level_Select_Menu_Cursor).w
		bne.s	LevelSelect_SwitchSide
; LevelSelect_SoundTest:
		move.w	(Sound_Test_Sound).w,d0
		move.b	(Control_Ports_Buffer_Data+1).w,d1
		btst	#button_left,d1
		beq.s	Offset_0x005D1E
		subq.b	#1,d0
		bcc.s	Offset_0x005D1E
		moveq	#0,d0

Offset_0x005D1E:
		btst	#button_right,d1
		beq.s	Offset_0x005D2E
		addq.b	#1,d0
		cmpi.w	#$100,d0
		bcs.s	Offset_0x005D2E
		moveq	#0,d0

Offset_0x005D2E:
		btst	#button_A,d1
		beq.s	LevelSelect_PlaySound
		addi.b	#$10,d0
		andi.b	#$FF,d0
; Offset_0x005D3C:
LevelSelect_PlaySound:
		move.w	d0,(Sound_Test_Sound).w
		btst	#button_C,d1
		beq.s	LevelSelect_MutePSG
		move.w	(Sound_Test_Sound).w,d0
		jsr	(PlaySound).l
		lea	(DebugMode_Cheat).l,a0
		lea	(AllEmeralds_Cheat).l,a2
		lea	(Debug_Mode_Flag).w,a1
		moveq	#1,d2
		bra.w	Menus_CheckCheats
; ---------------------------------------------------------------------------
; Offset_0x005D66:
LevelSelect_MutePSG:
		btst	#button_B,d1
		beq.s	Offset_0x005D76
		move.w	#sfx_Error,d0		; incorrect sound ID... though not sure why we'd
		jsr	(PlaySound).l		; need a sound command to mute PSG anyways

Offset_0x005D76:
		rts
; ===========================================================================
; Offset_0x005D78:
LevelSelect_SwitchSide:
		move.b	(Control_Ports_Buffer_Data+1).w,d1
		andi.b	#$C,d1
		beq.s	Offset_0x005D8E
		move.w	(Level_Select_Menu_Cursor).w,d0
		move.b	LevelSelect_SwitchTable(pc,d0.w),d0
		move.w	d0,(Level_Select_Menu_Cursor).w

Offset_0x005D8E:
		bra.s	LevelSelect_ChangeCharacter
		rts
; ===========================================================================
; Offset_0x005D92: Menu_Left_Right_Select:
LevelSelect_SwitchTable:
		; LEFT SIDE
		dc.b	$12, $13, $14, $15, $16, $17, $18, $19
		dc.b	$1A, $1B, $1C, $1C, $1C, $1C, $1C, $1C
		dc.b	$1C, $1C
		; RIGHT SIDE
		dc.b	0, 1, 2, 3, 4, 5, 6, 7
		dc.b	8, 9, $A, $B
; ===========================================================================
; Offset_0x005DB0:
LevelSelect_ChangeCharacter:
		btst	#button_C,(Control_Ports_Buffer_Data+1).w
		beq.s	Offset_0x005DCA
		addq.b	#1,(Menu_Player_One_Cursor).w
		cmpi.b	#3,(Menu_Player_One_Cursor).w
		bcs.s	Offset_0x005DCA
		move.b	#0,(Menu_Player_One_Cursor).w

Offset_0x005DCA:
		btst	#button_C,(Control_Ports_Buffer_Data+3).w
		beq.s	Offset_0x005DE4
		addq.b	#1,(Menu_Player_Two_Cursor).w
		cmpi.b	#3,(Menu_Player_Two_Cursor).w
		bcs.s	Offset_0x005DE4
		move.b	#0,(Menu_Player_Two_Cursor).w

Offset_0x005DE4:
		rts
; End of function LevelSelect_Controls

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to highlight the current selection on the level select
; ---------------------------------------------------------------------------
; Offset_0x005DE6:
LevelSelect_MarkFields:
		lea	(RAM_Start).l,a4
		lea	(LevelSelect_MarkTable).l,a5
		lea	(VDP_Data_Port).l,a6
		moveq	#0,d0
		move.w	(Level_Select_Menu_Cursor).w,d0
		lsl.w	#2,d0
		lea	(a5,d0.w),a3
		moveq	#0,d0
		move.b	(a3),d0
		mulu.w	#$50,d0
		moveq	#0,d1
		move.b	1(a3),d1
		add.w	d1,d0
		lea	(a4,d0.w),a1
		moveq	#0,d1
		move.b	(a3),d1
		lsl.w	#7,d1
		add.b	1(a3),d1
		addi.w	#$C000,d1
		lsl.l	#2,d1
		lsr.w	#2,d1
		ori.w	#$4000,d1
		swap	d1
		move.l	d1,4(a6)
		moveq	#$E,d2

Offset_0x005E36:
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a6)
		dbf	d2,Offset_0x005E36
		addq.w	#2,a3
		moveq	#0,d0
		move.b	(a3),d0
		beq.s	Offset_0x005E7A
		mulu.w	#$50,d0
		moveq	#0,d1
		move.b	1(a3),d1
		add.w	d1,d0
		lea	(a4,d0.w),a1
		moveq	#0,d1
		move.b	(a3),d1
		lsl.w	#7,d1
		add.b	1(a3),d1
		addi.w	#$C000,d1
		lsl.l	#2,d1
		lsr.w	#2,d1
		ori.w	#$4000,d1
		swap	d1
		move.l	d1,4(a6)
		move.w	(a1)+,d0
		add.w	d3,d0
		move.w	d0,(a6)

Offset_0x005E7A:
		cmpi.w	#$1C,(Level_Select_Menu_Cursor).w
		bne.s	LevelSelect_DrawCharacterNumber
		bra.w	LevelSelect_DrawSoundNumber
; ===========================================================================
; Offset_0x005E86:
LevelSelect_DrawCharacterNumber:
		move.l	#$41B80003,(VDP_Control_Port).l
		move.b	(Menu_Player_One_Cursor).w,d0
		bsr.s	LevelSelect_DrawDigit
		move.l	#$41C00003,(VDP_Control_Port).l
		move.b	(Menu_Player_Two_Cursor).w,d0
		bra.s	LevelSelect_DrawDigit
; ===========================================================================
; Offset_0x005EA6:
LevelSelect_DrawSoundNumber:
		move.l	#$48460003,(VDP_Control_Port).l
		move.w	(Sound_Test_Sound).w,d0
; Offset_0x005EB4:
LevelSelect_DrawDigit:
		move.b	d0,d2
		lsr.b	#4,d0
		bsr.s	Offset_0x005EBC
		move.b	d2,d0

Offset_0x005EBC:
		andi.w	#$F,d0
		cmpi.b	#$A,d0
		bcs.s	Offset_0x005ECA
		addi.b	#4,d0
Offset_0x005ECA:
		addi.b	#$10,d0
		add.w	d3,d0
		move.w	d0,(a6)
		rts
; ===========================================================================
; Offset_0x005ED4:
LevelSelect_DrawIcon:
		move.w	(Level_Select_Menu_Cursor).w,d0
		lea	(LevelSelect_IconTable).l,a3
		lea	(a3,d0.w),a3
		lea	(RAM_Start+$8C0).l,a1
		moveq	#0,d0
		move.b	(a3),d0
		lsl.w	#3,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(a1,d0.w),a1
		move.l	#$4B360003,d0
		moveq	#4-1,d1
		moveq	#3-1,d2
		jsr	(PlaneMapToVRAM_H40).l
		lea	(Palette_S2LevelIcons).l,a1
		moveq	#0,d0
		move.b	(a3),d0
		lsl.w	#5,d0
		lea	(a1,d0.w),a1
		lea	(Palette_Row_2_Offset).w,a2
		moveq	#bytesToLcnt($20),d1

Offset_0x005F1E:
		move.l	(a1)+,(a2)+
		dbf	d1,Offset_0x005F1E
		rts
; End of function LevelSelect_MarkFields

; ===========================================================================
; Offset_0x005F26: Menu_Icon_List:
LevelSelect_IconTable:
		dc.b	$00, $00, $07, $07, $08, $08, $06, $06
		dc.b	$02, $02, $05, $05, $04, $04, $01, $01
		dc.b	$09, $09, $0A, $0A, $03, $03, $0B, $0B
		dc.b	$0B, $0B, $0C, $0C, $0E
		even
; Offset_0x005F44: Menu_Text_Highlight:
LevelSelect_MarkTable:
		dc.w	$0106, $0124, $0106, $0224, $0406, $0424, $0406, $0524
		dc.w	$0706, $0724, $0706, $0824, $0A06, $0A24, $0A06, $0B24
		dc.w	$0D06, $0D24, $0D06, $0E24, $1006, $1024, $1006, $1124
		dc.w	$1306, $1324, $1306, $1424, $1606, $1624, $1606, $1724
		dc.w	$1906, $1924, $1906, $1A24, $012C, $014A, $012C, $024A
		dc.w	$042C, $044A, $042C, $054A, $072C, $074A, $072C, $084A
		dc.w	$0A2C, $0A4A, $0A2C, $0B4A, $0D2C, $0D4A, $0D2C, $0E4A
		dc.w	$102C, $104A
; Offset_0x005FB8: Menu_Text_Positions:
LevelSelect_TextPositions:
		dc.w	$0056, $0146, $0236, $0326, $0416, $0506, $05F6, $06E6
		dc.w	$07D6, $007C, $016C, $025C, $034C, $043C, $052C, $061C
; ===========================================================================
; Offset_0x005FD8: Menu_Check_Secret_Codes:
Menus_CheckCheats:
		move.w	(Secret_Code_Input_Entries).w,d0
		adda.w	d0,a0
		move.w	(Sound_Test_Sound).w,d0
		cmp.b	(a0),d0
		bne.s	Offset_0x005FFC
		addq.w	#1,(Secret_Code_Input_Entries).w
		tst.b	1(a0)
		bne.s	Offset_0x006002
		move.w	#$101,(a1)
		moveq	#sfx_RingRight,d0
		jsr	(PlaySound).l

Offset_0x005FFC:
		move.w	#0,(Secret_Code_Input_Entries).w

Offset_0x006002:
		move.w	(Secret_Code_Input_Entries_2).w,d0
		adda.w	d0,a2
		move.w	(Sound_Test_Sound).w,d0
		cmp.b	(a2),d0
		bne.s	Offset_0x00603C
		addq.w	#1,(Secret_Code_Input_Entries_2).w
		tst.b	1(a2)
		bne.s	Offset_0x006042
		tst.w	d2
		bne.s	Offset_0x00602E
		move.b	#$F,(Continue_count).w
		; Yes, they actually fixed the broken 14 continues bug; also ended up being
		; fixed in (technically) Knuckles in Sonic 2, Sonic Mega Collection,and the
		; Wii Virtual Console release, the latter two being based on REV01 while KiS2
		; was based on REV02,as was Sonic 3
		moveq	#mus_Continue,d0
		jsr	(PlaySound).l
		bra.s	Offset_0x00603C
; ---------------------------------------------------------------------------

Offset_0x00602E:
		move.w	#7,(SS_Completed_Flag).w	; misnomer
		moveq	#mus_Emerald,d0
		jsr	(PlaySound).l

Offset_0x00603C:
		move.w	#0,(Secret_Code_Input_Entries_2).w

Offset_0x006042:
		rts
; End of function Menus_CheckCheats

; ===========================================================================
; Offset_0x006044: S2_Code_Level_Select:
S2LevelSelect_Cheat:	dc.b	$19,$65,9,$17,0
; Offset_0x006049: S2_Code_14_Continues:
S214Continues_Cheat:	dc.b	1,1,2,4,0
; Offset_0x00604E: Code_Debug_Mode:
DebugMode_Cheat:	dc.b	1,3,5,7,0
; Offset_0x006053: Code_All_Emeralds:
AllEmeralds_Cheat:	dc.b	2,4,5,6,0

	; set the character set for menu text
	charset '@',"\27\30\31\32\33\34\35\36\37\38\39\40\41\42\43\44\45\46\47\48\49\50\51\52\53\54\55"
	charset '0',"\16\17\18\19\20\21\22\23\24\25"
	charset '*',$1A
	charset ':',$1C
	charset '.',$1D
	charset ' ',0

	; options screen menu text
TextOptScr_PlayerSelect:	menutxt	"* PLAYER SELECT *"
TextOptScr_SonicAndMiles:	menutxt	"SONIC AND MILES"
TextOptScr_SonicAndTails:	menutxt	"SONIC AND TAILS"
TextOptScr_SonicAlone:		menutxt	"SONIC ALONE    "
TextOptScr_MilesAlone:		menutxt	"MILES ALONE    "
TextOptScr_TailsAlone:		menutxt	"TAILS ALONE    "
TextOptScr_VsModeItems:		menutxt	"* VS MODE ITEMS *"
TextOptScr_AllKindsItems:	menutxt	"ALL KINDS ITEMS"
TextOptScr_TeleportOnly:	menutxt	"TELEPORT ONLY  "
TextOptScr_SoundTest:		menutxt	"*  SOUND TEST   *"
TextOptScr_0:			menutxt	"      00       "

	; Menu text
Text2P_EmeraldHill:	menutxt	"EMERALD HILL"
Text2P_MysticCave:	menutxt	" MYSTIC CAVE"
Text2P_CasinoNight:	menutxt	"CASINO NIGHT"
Text2P_SpecialStage:	menutxt	"SPECIAL STAGE"
Text2P_Special:		menutxt	"   SPECIAL  "
Text2P_Zone:		menutxt	"ZONE "
Text2P_Stage:		menutxt	"STAGE"
Text2P_GameOver:	menutxt	"GAME OVER"
Text2P_TimeOver:	menutxt	"TIME OVER"
Text2P_NoGame:		menutxt	"NO GAME"
Text2P_Tied:		menutxt	"TIED"
Text2P_1P:		menutxt	" 1P"
Text2P_2P:		menutxt	" 2P"
Text2P_Blank:		menutxt	"    "

; Offset_0x00618A: Menu_Level_Select_Text:
LevelSelect_Names:
		menutxt "ANGEL ISLAND"
		menutxt "HYDROCITY"
		menutxt "MARBLE GARDEN"
		menutxt "CARNIVAL NIGHT"
		menutxt "FLYING BATTERY"
		menutxt "ICECAP"
		menutxt "LAUNCH BASE"
		menutxt "MUSHROOM VALLEY"

		menutxt "SANDOPOLIS"
		menutxt "2P VS"
		menutxt "2P VS"
		menutxt "2P VS"
		menutxt "BONUS"
		menutxt "SPECIAL STAGE"
		menutxt "SOUND TEST  *"
		even

	charset ; reset character set
; ---------------------------------------------------------------------------
; Offset_0x006230: Pal_Levels_Icons:
Palette_S2LevelIcons:		binclude	"data/menus/lvsicons.pal"
; Offset_0x006410:
Vs_Level_Select_Frame_Mappings:	binclude	"data/menus/vsslctmn.eni"
; Offset_0x006462:
Options_Frame_Mappings:		binclude	"data/menus/optframe.eni"
; Offset_0x00648E:
S2_Menu_Level_Select_Text:	binclude	"data/menus/menutext.eni"
; Offset_0x0065E2:
Menu_Icons_Mappings:		binclude	"data/menus/iconsmap.eni"

; with the two player results removed, the animation script has been moved here
; Offset_0x006614: Menu_Animate:
Anim_SonicMilesBG:
		dc.w	0
		dc.l	($FF<<$18)|Art_Menu_Sonic_Miles	; duration (in frames) and art
		dc.w	$20				; VRAM location
		dc.b	6, $A				; amount of entries and tiles
		dc.b	0,$C7
		dc.b	$A, 5
		dc.b	$14, 5
		dc.b	$1E,$C7
		dc.b	$14, 5
		dc.b	$A, 5
		even

;===============================================================================
; Modo de teste para o Special Stage
; ->>>
;===============================================================================
Special_Stage_Test_1:                                          ; Offset_0x00662A
		moveq	#signextendB(cmd_Stop),d0                                   ; -$1F
		bsr.w	PlaySound                             ; Offset_0x001176
		bsr.w	ClearPLC                               ; Offset_0x001548
		bsr.w	Pal_FadeToBlack                           ; Offset_0x002DE8
		move	#$2700, SR
		lea	(VDP_Control_Port),a6                       ; $00C00004
		move.w	#$8004,(A6)
		move.w	#$8230,(A6)
		move.w	#$8407,(A6)
		move.w	#$9011,(A6)
		move.w	#$9200,(A6)
		move.w	#$8B03,(A6)
		move.w	#$8720,(A6)
		clr.b	(Underwater_Flag).w                          ; $FFFFF64E
		move.w	#$8C81,(A6)
		bsr.w	ClearScreen                            ; Offset_0x001002
		lea	(Sprite_Table_Input).w,a1                   ; $FFFFAC00
		moveq	#0,d0
		move.w	#$FF,d1
Offset_0x006674:
		move.l	D0,(A1)+
		dbf	D1, Offset_0x006674
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#0,d0
		move.w	#$7FF,d1
Offset_0x006684:
		move.l	D0,(A1)+
		dbf	D1, Offset_0x006684
		jsr	(Init_Sprite_Table)                    ; Offset_0x011042
		lea	(Palette_Buffer).w,a1                       ; $FFFFED00
		moveq	#0,d0
		move.w	#$3F,d1
Offset_0x00669A:
		move.l	D0,(A1)+
		dbf	D1, Offset_0x00669A
		clr.w	(DMA_Buffer_List).w                          ; $FFFFE700
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w ; $FFFFE700, $FFFFE8F8
		lea	(Pal_Special_Stage_1_Test).l,a1         ; Offset_0x006750
		lea	(Palette_Data_Target).w,a2                  ; $FFFFED80
		move.w	#bytesToWcnt($80),d0
Offset_0x0066BA:
		move.w	(A1)+,(A2)+
		dbf	D0, Offset_0x0066BA
		move.l	#$40000000,(VDP_Control_Port)               ; $00C00004
		lea	(Art_Special_Stage_Globe).l,a0          ; Offset_0x10C8AE
		bsr.w	NemesisDec                             ; Offset_0x001390
		move.l	#$40000002,(VDP_Control_Port)               ; $00C00004
		lea	(Art_Scaled_Spheres).l,a0               ; Offset_0x10B68E
		bsr.w	NemesisDec                             ; Offset_0x001390
		lea	(Special_Stage_Globe_Mappings).l,a1     ; Offset_0x10BFEE
		move.l	#$40000003,d0
		moveq	#40-1,d1
		moveq	#28-1,d2
		jsr	(PlaneMapToVRAM_H40).l                      ; Offset_0x0012BC
		move.l	#Obj_Spheres,(Obj_Player_One).w ; Offset_0x006874, $FFFFB000
		move.w	#$A0,(Obj_Player_One+Obj_X).w             ; $FFFFB010
		move.w	#$70,(Obj_Player_One+Obj_Y).w             ; $FFFFB014
		move.b	#mus_SpecialStage,d0                             ; $1C
		bsr.w	PlaySound                             ; Offset_0x001176
		move.w	(VDP_Register_1_Command).w,d0               ; $FFFFF60E
		ori.b	#$40,d0
		move.w	D0,(VDP_Control_Port)                       ; $00C00004
		bsr.w	Pal_FadeFromBlack                             ; Offset_0x002D20
Offset_0x00672C:
		move.b	#$1A,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		jsr	(RunObjects).l                         ; Offset_0x0110AE
		jsr	(Build_Sprites).l                        ; Offset_0x011296
		bsr.w	RunPLC_RAM                                 ; Offset_0x001556
		cmpi.b	#gm_S3_Special_Stage,(Game_Mode).w     ; $2C, $FFFFF600
		beq.s	Offset_0x00672C
		rts
;-------------------------------------------------------------------------------
Pal_Special_Stage_1_Test:                                      ; Offset_0x006750
		binclude	"data\ss_test\ss_test.pal"
;-------------------------------------------------------------------------------
; Offset_0x0067D0: SS_SingleObjectLoad:
SS_AllocateObject:
		move.l	A0,a1
		move.w	#Obj_Fixed_RAM_End,d0                           ; $CF82
		sub.w	A0,d0
		lsr.w	#6,d0
		move.b	SS_Sprite_Table(pc,d0.w),d0            ; Offset_0x0067EC
		bmi.s	Offset_0x0067EA
Offset_0x0067E0:
		lea	Obj_Size(A1),a1                                 ; $004A
		tst.l	(A1)
		dbeq	D0, Offset_0x0067E0
Offset_0x0067EA:
		rts
;-------------------------------------------------------------------------------
SS_Sprite_Table:                                               ; Offset_0x0067EC
		dc.b	$FF, $00, $01, $02, $03, $04, $05, $06
		dc.b	$06, $07, $08, $09, $0A, $0B, $0C, $0D
		dc.b	$0E, $0E, $0F, $10, $11, $12, $13, $14
		dc.b	$15, $16, $16, $17, $18, $19, $1A, $1B
		dc.b	$1C, $1D, $1E, $1E, $1F, $20, $21, $22
		dc.b	$23, $24, $25, $26, $26, $27, $28, $29
		dc.b	$2A, $2B, $2C, $2D, $2E, $2E, $2F, $30
		dc.b	$31, $32, $33, $34, $35, $36, $36, $37
		dc.b	$38, $39, $3A, $3B, $3C, $3D, $3E, $3E
		dc.b	$3F, $40, $41, $42, $43, $44, $45, $46
		dc.b	$46, $47, $48, $49, $4A, $4B, $4C, $4D
		dc.b	$4E, $4E, $4F, $50, $51, $52, $53, $54
		dc.b	$55, $56, $56, $57, $58, $59, $5A, $5B
		dc.b	$5C, $5D, $5E, $5E, $5F, $60, $61, $62
		dc.b	$63, $64, $65, $66, $66, $67, $68, $69
		dc.b	$6A, $6B, $6C, $6D, $6E, $6E, $6F, $70
		dc.b	$71, $72, $73, $74, $75, $76, $76, $00
;-------------------------------------------------------------------------------
Obj_Spheres:                                                   ; Offset_0x006874
		include "data\objects\spheres.asm"
;-------------------------------------------------------------------------------
Special_Stage_Test_2:                                          ; Offset_0x0070DC
		moveq	#signextendB(cmd_Stop),d0                                   ; -$1F
		bsr.w	PlaySound                             ; Offset_0x001176
		bsr.w	ClearPLC                               ; Offset_0x001548
		bsr.w	Pal_FadeToBlack                           ; Offset_0x002DE8
		move	#$2700, SR
		lea	(VDP_Control_Port),a6                       ; $00C00004
		move.w	#$8004,(A6)
		move.w	#$8230,(A6)
		move.w	#$8407,(A6)
		move.w	#$9011,(A6)
		move.w	#$9200,(A6)
		move.w	#$8B03,(A6)
		move.w	#$8720,(A6)
		clr.b	(Underwater_Flag).w                          ; $FFFFF64E
		move.w	#$8C81,(A6)
		bsr.w	ClearScreen                            ; Offset_0x001002
		lea	(Sprite_Table_Input).w,a1                   ; $FFFFAC00
		moveq	#0,d0
		move.w	#$FF,d1
Offset_0x007126:
		move.l	D0,(A1)+
		dbf	D1, Offset_0x007126
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#0,d0
		move.w	#$7FF,d1
Offset_0x007136:
		move.l	D0,(A1)+
		dbf	D1, Offset_0x007136
		jsr	(Init_Sprite_Table)                    ; Offset_0x011042
		lea	(Palette_Buffer).w,a1                       ; $FFFFED00
		moveq	#0,d0
		move.w	#$3F,d1
Offset_0x00714C:
		move.l	D0,(A1)+
		dbf	D1, Offset_0x00714C
		clr.w	(DMA_Buffer_List).w                          ; $FFFFE700
		move.l	#DMA_Buffer_List,(DMA_Buffer_List_End).w ; $FFFFE700, $FFFFE8F8
		lea	(Pal_Special_Stage_2_Test).l,a1         ; Offset_0x0071D6
		lea	(Palette_Data_Target).w,a2                  ; $FFFFED80
		move.w	#bytesToWcnt($80),d0
Offset_0x00716C:
		move.w	(A1)+,(A2)+
		dbf	D0, Offset_0x00716C
		move.l	#$40000002,(VDP_Control_Port)               ; $00C00004
		lea	(Art_Scaled_Spheres).l,a0               ; Offset_0x10B68E
		bsr.w	NemesisDec                             ; Offset_0x001390
		move.l	#Obj_Spheres_2,(Obj_Player_One).w  ; Offset_0x007256, $FFFFB000
		move.w	#$A0,(Obj_Player_One+Obj_X).w             ; $FFFFB010
		move.w	#$70,(Obj_Player_One+Obj_Y).w             ; $FFFFB014
		moveq	#mus_SpecialStage,d0                             ; $1C
		bsr.w	PlaySound                             ; Offset_0x001176
		move.w	(VDP_Register_1_Command).w,d0               ; $FFFFF60E
		ori.b	#$40,d0
		move.w	D0,(VDP_Control_Port)                       ; $00C00004
		bsr.w	Pal_FadeFromBlack                             ; Offset_0x002D20
Offset_0x0071B2:
		move.b	#$1A,(VBlank_Index).w                       ; $FFFFF62A
		bsr.w	Wait_For_VSync                         ; Offset_0x001AEE
		jsr	(RunObjects).l                         ; Offset_0x0110AE
		jsr	(Build_Sprites).l                        ; Offset_0x011296
		bsr.w	RunPLC_RAM                                 ; Offset_0x001556
		cmpi.b	#gm_SK_Special_Stage,(Game_Mode).w     ; $30, $FFFFF600
		beq.s	Offset_0x0071B2
		rts
;-------------------------------------------------------------------------------
Pal_Special_Stage_2_Test:                                      ; Offset_0x0071D6
		binclude	"data\ss_test\ss_test.pal"
;-------------------------------------------------------------------------------
Obj_Spheres_2:                                                 ; Offset_0x007256
		include "data\objects\spheres2.asm"
;===============================================================================
; Modo de teste para o Special Stage
; <<<-
;===============================================================================

;===============================================================================
;  Rotina Build_HUD - Rotina para mostrar o HUD na tela
; ->>>
;===============================================================================
Build_HUD_2P:                                                  ; Offset_0x00798C
		tst.w	(Debug_Mode_Active).w                        ; $FFFFFFFA
		bne.s	Build_HUD                              ; Offset_0x007994
		rts
Build_HUD:                                                     ; Offset_0x007994
		moveq	#0,d4
		btst	#3,(Level_frame_counter+1).w              ; $FFFFFE05
		bne.s	Offset_0x0079B0
		tst.w	(Ring_count).w                       ; $FFFFFE20
		bne.s	Offset_0x0079A6
		addq.w	#2,d4
Offset_0x0079A6:
		cmpi.b	#9,(Timer_minute).w         ; $FFFFFE23
		bne.s	Offset_0x0079B0
		addq.w	#4,d4
Offset_0x0079B0:
		move.w	#$90,d0
		move.w	#$108,d1
		move.w	#$86CA,d5
		lea	HUD_Mappings(PC),a1                   ; Offset_0x0079D4
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x0079D0
		jmp	(Offset_0x0114D6)
Offset_0x0079D0:
		rts
Build_HUD_P2:                                                  ; Offset_0x0079D2
		rts
;-------------------------------------------------------------------------------
HUD_Mappings:                                                  ; Offset_0x0079D4
		dc.w	HUD_Map_Normal-HUD_Mappings            ; Offset_0x0079DC
		dc.w	HUD_Map_RING_Warning-HUD_Mappings      ; Offset_0x007A1A
		dc.w	HUD_Map_TIME_Warning-HUD_Mappings      ; Offset_0x007A4C
		dc.w	HUD_Map_RING_TIME_Warning-HUD_Mappings ; Offset_0x007A84
HUD_Map_Normal:                                                ; Offset_0x0079DC
		dc.w	$000A
		dc.w	$800D, $2000, $0000
		dc.w	$800D, $2018, $0020
		dc.w	$800D, $2020, $0040
		dc.w	$900D, $2010, $0000
		dc.w	$900D, $2028, $0028
		dc.w	$A00D, $2008, $0000
		dc.w	$A001, $2000, $0020
		dc.w	$A009, $2030, $0030
		dc.w	$4005, $010A, $0000
		dc.w	$400D, $210E, $0010
HUD_Map_RING_Warning:                                          ; Offset_0x007A1A
		dc.w	$0008
		dc.w	$800D, $2000, $0000
		dc.w	$800D, $2018, $0020
		dc.w	$800D, $2020, $0040
		dc.w	$900D, $2010, $0000
		dc.w	$900D, $2028, $0028
		dc.w	$A009, $2030, $0030
		dc.w	$4005, $010A, $0000
		dc.w	$400D, $210E, $0010
HUD_Map_TIME_Warning:                                          ; Offset_0x007A4C
		dc.w	$0009
		dc.w	$800D, $2000, $0000
		dc.w	$800D, $2018, $0020
		dc.w	$800D, $2020, $0040
		dc.w	$900D, $2028, $0028
		dc.w	$A00D, $2008, $0000
		dc.w	$A001, $2000, $0020
		dc.w	$A009, $2030, $0030
		dc.w	$4005, $010A, $0000
		dc.w	$400D, $210E, $0010
HUD_Map_RING_TIME_Warning:                                     ; Offset_0x007A84
		dc.w	$0007
		dc.w	$800D, $2000, $0000
		dc.w	$800D, $2018, $0020
		dc.w	$800D, $2020, $0040
		dc.w	$900D, $2028, $0028
		dc.w	$A009, $2030, $0030
		dc.w	$4005, $010A, $0000
		dc.w	$400D, $210E, $0010
;===============================================================================
;  Rotina Build_HUD - Rotina para mostrar o HUD na tela
; <<<-
;===============================================================================

;===============================================================================
; Rotina para adicionar pontos ao HUD do primeiro jogador
; ->>>
;===============================================================================
Add_Points_P1:                                                 ; Offset_0x007AB0
		move.b	#1,(Update_HUD_score).w             ; $FFFFFE1F
		lea	(Score_Count_Address).w,a3                  ; $FFFFFE26
		add.l	D0,(A3)
		move.l	#999999,d1
		cmp.l	(A3),d1
		bhi.s	Add_Points_Max_Score_P1                ; Offset_0x007AC8
		move.l	D1,(A3)
Add_Points_Max_Score_P1:                                       ; Offset_0x007AC8
		move.l	(A3),d0
		cmp.l	(Next_Extra_Life_Score).w,d0                ; $FFFFFFC0
		bcs.s	Offset_0x007AEA
		addi.l	#5000,(Next_Extra_Life_Score).w        ; $FFFFFFC0
		addq.b	#1,(Life_count).w                         ; $FFFFFE12
		addq.b	#1,(Update_HUD_lives).w              ; $FFFFFE1C
		move.w	#mus_S2ExtraLife,d0                           ; $0098
		jmp	(PlaySound).l                           ; Offset_0x001176
Offset_0x007AEA:
		rts
;-------------------------------------------------------------------------------
Add_Points:                                                    ; Offset_0x007AEC
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s	Add_Points_P1                          ; Offset_0x007AB0
		cmpa.w	#Obj_Player_One,a3                              ; $B000
		beq.s	Add_Points_P1                          ; Offset_0x007AB0
		move.b	#1,(HUD_Score_Refresh_Flag_P2).w          ; $FFFFFECB
		lea	(Score_Count_Address_P2).w,a3               ; $FFFFFED6
		add.l	D0,(A3)
		move.l	#999999,d1
		cmp.l	(A3),d1
		bhi.s	Add_Points_Max_Score_P2                ; Offset_0x007B10
		move.l	D1,(A3)
Add_Points_Max_Score_P2:                                       ; Offset_0x007B10
		move.l	(A3),d0
		cmp.l	(Next_Extra_Life_Score_P2).w,d0             ; $FFFFFFC4
		bcs.s	Offset_0x007B32
		addi.l	#5000,(Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
		addq.b	#1,(Life_Count_P2).w                      ; $FFFFFEC6
		addq.b	#1,(HUD_Life_Refresh_Flag_P2).w           ; $FFFFFEC8
		move.w	#mus_S2ExtraLife,d0                           ; $0098
		jmp	(PlaySound).l                           ; Offset_0x001176
Offset_0x007B32:
		rts
;===============================================================================
; Rotina para adicionar pontos ao HUD do primeiro jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotina para atualizar os contadores na tela (Pontos, Tempo, Vidas...).
; ->>>
;===============================================================================
HUD_Update:                                                    ; Offset_0x007B34
		nop
		lea	(VDP_Data_Port),a6                          ; $00C00000
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		bne.w	Offset_0x007C9C
		tst.w	(Debug_Mode_Active).w                        ; $FFFFFFFA
		bne.w	Offset_0x007C12
		tst.b	(Update_HUD_score).w                   ; $FFFFFE1F
		beq.s	Offset_0x007B64
		clr.b	(Update_HUD_score).w                   ; $FFFFFE1F
		move.l	#$5C800003,d0
		move.l	(Score_Count_Address).w,d1                  ; $FFFFFE26
		bsr.w	HUD_Draw_Six_Digit_Number              ; Offset_0x007EAC
Offset_0x007B64:
		tst.b	(Update_HUD_rings).w                   ; $FFFFFE1D
		beq.s	Offset_0x007B84
		bpl.s	Offset_0x007B70
		bsr.w	Offset_0x007DC0
Offset_0x007B70:
		clr.b	(Update_HUD_rings).w                   ; $FFFFFE1D
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	(Ring_count).w,d1                   ; $FFFFFE20
		bsr.w	HUD_Draw_Three_Digit_Number            ; Offset_0x007EA2
Offset_0x007B84:
		tst.b	(Update_HUD_timer).w                   ; $FFFFFE1E
		bpl.s	Offset_0x007B92
		move.b	#1,(Update_HUD_timer).w             ; $FFFFFE1E
		bra.s	Offset_0x007BCC
Offset_0x007B92:
		beq.s	Offset_0x007BEC
		tst.w	(Pause_Status).w                             ; $FFFFF63A
		bne.s	Offset_0x007BEC
		lea	(Timer).w,a1                   ; $FFFFFE22
		cmpi.l	#$93B3B,(A1)+
		beq.w	Timer_Over                             ; Offset_0x007BFC
		addq.b	#1,-(A1)
		cmpi.b	#60,(A1)
		bcs.s	Offset_0x007BEC
		move.b	#0,(A1)
		addq.b	#1,-(A1)
		cmpi.b	#60,(A1)
		bcs.s	Offset_0x007BCC
		move.b	#0,(A1)
		addq.b	#1,-(A1)
		cmpi.b	#9,(A1)
		bcs.s	Offset_0x007BCC
		move.b	#9,(A1)
Offset_0x007BCC:
		move.l	#$5E400003,d0
		moveq	#0,d1
		move.b	(Timer_minute).w,d1           ; $FFFFFE23
		bsr.w	HUD_Draw_Single_Digit_Number           ; Offset_0x007F7A
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	(Timer_second).w,d1           ; $FFFFFE24
		bsr.w	HUD_Draw_Two_Digit_Number              ; Offset_0x007F84
Offset_0x007BEC:
		tst.b	(Update_HUD_lives).w                    ; $FFFFFE1C
		beq.s	Offset_0x007BFA
		clr.b	(Update_HUD_lives).w                    ; $FFFFFE1C
		bsr.w	HUD_Lives                              ; Offset_0x00804E
Offset_0x007BFA:
		rts
;-------------------------------------------------------------------------------
Timer_Over:                                                    ; Offset_0x007BFC
		clr.b	(Update_HUD_timer).w                   ; $FFFFFE1E
		lea	(Obj_Player_One).w,a0                       ; $FFFFB000
		move.l	A0,a2
		bsr.w	Kill_Player                            ; Offset_0x00A4A4
		move.b	#1,(Time_Over_flag).w                     ; $FFFFFE1A
		rts
;-------------------------------------------------------------------------------
Offset_0x007C12:
		bsr.w	HUD_Debug                              ; Offset_0x007E4A
		tst.b	(Update_HUD_rings).w                   ; $FFFFFE1D
		beq.s	Offset_0x007C36
		bpl.s	Offset_0x007C22
		bsr.w	Offset_0x007DC0
Offset_0x007C22:
		clr.b	(Update_HUD_rings).w                   ; $FFFFFE1D
		move.l	#$5F400003,d0
		moveq	#0,d1
		move.w	(Ring_count).w,d1                   ; $FFFFFE20
		bsr.w	HUD_Draw_Three_Digit_Number            ; Offset_0x007EA2
Offset_0x007C36:
		move.l	#$5E400003,d0
		moveq	#0,d1
		move.w	(VBlank_0_Run_Count).w,d1                   ; $FFFFF628
		bsr.w	HUD_Draw_Single_Digit_Number           ; Offset_0x007F7A
		move.l	#$5EC00003,d0
		moveq	#0,d1
		move.b	(Sprites_Drawn).w,d1                        ; $FFFFF62C
		bsr.w	HUD_Draw_Two_Digit_Number              ; Offset_0x007F84
		tst.b	(Update_HUD_lives).w                    ; $FFFFFE1C
		beq.s	Offset_0x007C64
		clr.b	(Update_HUD_lives).w                    ; $FFFFFE1C
		bsr.w	HUD_Lives                              ; Offset_0x00804E
Offset_0x007C64:
		tst.w	(Pause_Status).w                             ; $FFFFF63A
		bne.s	Offset_0x007C9A
		lea	(Timer).w,a1                   ; $FFFFFE22
		cmpi.l	#$93B3B,(A1)+
		nop
		addq.b	#1,-(A1)
		cmpi.b	#60,(A1)
		bcs.s	Offset_0x007C9A
		move.b	#0,(A1)
		addq.b	#1,-(A1)
		cmpi.b	#60,(A1)
		bcs.s	Offset_0x007C9A
		move.b	#0,(A1)
		addq.b	#1,-(A1)
		cmpi.b	#9,(A1)
		bcs.s	Offset_0x007C9A
		move.b	#9,(A1)
Offset_0x007C9A:
		rts
Offset_0x007C9C:
		tst.w	(Debug_Mode_Active).w                        ; $FFFFFFFA
		bne.w	HUD_Debug                              ; Offset_0x007E4A
		rts
;-------------------------------------------------------------------------------
S2_HUD_Update_2P:                                              ; Offset_0x007CA6
		tst.w	(Pause_Status).w                             ; $FFFFF63A
		bne.w	Offset_0x007D70
		tst.b	(Update_HUD_timer).w                   ; $FFFFFE1E
		beq.s	Offset_0x007CE6
		lea	(Timer).w,a1                   ; $FFFFFE22
		cmpi.l	#$93B3B,(A1)+
		beq.w	Timer_Over_2P_Sonic                    ; Offset_0x007D90
		addq.b	#1,-(A1)
		cmpi.b	#60,(A1)
		bcs.s	Offset_0x007CE6
		move.b	#0,(A1)
		addq.b	#1,-(A1)
		cmpi.b	#60,(A1)
		bcs.s	Offset_0x007CE6
		move.b	#0,(A1)
		addq.b	#1,-(A1)
		cmpi.b	#9,(A1)
		bcs.s	Offset_0x007CE6
		move.b	#9,(A1)
Offset_0x007CE6:
		tst.b	(HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
		beq.s	Offset_0x007D1E
		lea	(Time_Count_Address_P2).w,a1                ; $FFFFFED2
		cmpi.l	#$93B3B,(A1)+
		beq.w	Timer_Over_2P_Miles                    ; Offset_0x007DAA
		addq.b	#1,-(A1)
		cmpi.b	#60,(A1)
		bcs.s	Offset_0x007D1E
		move.b	#0,(A1)
		addq.b	#1,-(A1)
		cmpi.b	#60,(A1)
		bcs.s	Offset_0x007D1E
		move.b	#0,(A1)
		addq.b	#1,-(A1)
		cmpi.b	#9,(A1)
		bcs.s	Offset_0x007D1E
		move.b	#9,(A1)
Offset_0x007D1E:
		tst.b	(Update_HUD_lives).w                    ; $FFFFFE1C
		beq.s	Offset_0x007D2C
		clr.b	(Update_HUD_lives).w                    ; $FFFFFE1C
		bsr.w	HUD_Lives                              ; Offset_0x00804E
Offset_0x007D2C:
		tst.b	(HUD_Life_Refresh_Flag_P2).w                 ; $FFFFFEC8
		beq.s	Offset_0x007D3A
		clr.b	(HUD_Life_Refresh_Flag_P2).w                 ; $FFFFFEC8
		bsr.w	HUD_Lives_P2                           ; Offset_0x008040
Offset_0x007D3A:
		move.b	(Update_HUD_timer).w,d0               ; $FFFFFE1E
		or.b	(HUD_Timer_Refresh_Flag_P2).w,d0            ; $FFFFFECA
		beq.s	Offset_0x007D70
		lea	(Loser_Timer_Left).w,a1                     ; $FFFFFEF8
		tst.w	(A1)+
		beq.s	Offset_0x007D70
		subq.b	#1,-(A1)
		bhi.s	Offset_0x007D70
		move.b	#60,(A1)
		cmpi.b	#$C,-1(A1)
		bne.s	Offset_0x007D66
		move.w	#mus_S2Drowning,d0                                ; $009F
		jsr	(PlaySound).l                           ; Offset_0x001176
Offset_0x007D66:
		subq.b	#1,-(A1)
		bcc.s	Offset_0x007D70
		move.w	#0,(A1)
		bsr.s	Offset_0x007D82
Offset_0x007D70:
		move.l	#$5E400003,d0
		moveq	#0,d1
		move.w	(VBlank_0_Run_Count).w,d1                   ; $FFFFF628
		bsr.w	HUD_Draw_Single_Digit_Number           ; Offset_0x007F7A
		rts
Offset_0x007D82:
		tst.b	(Update_HUD_timer).w                   ; $FFFFFE1E
		bne.s	Timer_Over_2P_Sonic                    ; Offset_0x007D90
		tst.b	(HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
		bne.s	Timer_Over_2P_Miles                    ; Offset_0x007DAA
		rts
;-------------------------------------------------------------------------------
Timer_Over_2P_Sonic:                                           ; Offset_0x007D90
		clr.b	(Update_HUD_timer).w                   ; $FFFFFE1E
		lea	(Obj_Player_One).w,a0                       ; $FFFFB000
		move.l	A0,a2
		bsr.w	Kill_Player                            ; Offset_0x00A4A4
		move.b	#1,(Time_Over_flag).w                     ; $FFFFFE1A
		tst.b	(HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
		beq.s	Offset_0x007DBE
;-------------------------------------------------------------------------------
Timer_Over_2P_Miles:                                           ; Offset_0x007DAA
		clr.b	(HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
		lea	(Obj_Player_Two).w,a0                       ; $FFFFB04A
		move.l	A0,a2
		bsr.w	Kill_Player                            ; Offset_0x00A4A4
		move.b	#1,(Time_Over_Flag_P2).w                  ; $FFFFFECC
Offset_0x007DBE:
		rts
;-------------------------------------------------------------------------------
Offset_0x007DC0:
		move.l	#$5F400003,(VDP_Control_Port)               ; $00C00004
		lea	HUD_Rings_Mask(PC),a2                 ; Offset_0x007E46
		move.w	#2,d2
		bra.s	Offset_0x007DF6
;-------------------------------------------------------------------------------
Head_Up_Display_Base:                                          ; Offset_0x007DD4
		lea	(VDP_Data_Port),a6                          ; $00C00000
		bsr.w	HUD_Lives                              ; Offset_0x00804E
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s	Offset_0x007E22
		move.l	#$5C400003,(VDP_Control_Port)               ; $00C00004
		lea	HUD_ScoreTime_Mask(PC),a2             ; Offset_0x007E3A
		move.w	#$E,d2
Offset_0x007DF6:
		lea	HUD_Art_Numbers(PC),a1                ; Offset_0x0080BA
Offset_0x007DFA:
		move.w	#$F,d1
		move.b	(A2)+,d0
		bmi.s	Offset_0x007E16
		ext.w	D0
		lsl.w	#5,d0
		lea	(A1,d0),a3
Offset_0x007E0A:
		move.l	(A3)+,(A6)
		dbf	D1, Offset_0x007E0A
Offset_0x007E10:
		dbf	D2, Offset_0x007DFA
		rts
Offset_0x007E16:
		move.l	#0,(A6)
		dbf	D1, Offset_0x007E16
		bra.s	Offset_0x007E10
Offset_0x007E22:
		bsr.w	HUD_Lives_P2                           ; Offset_0x008040
		move.l	#HUD_Art_Numbers,d1                   ; Offset_0x0080BA
		move.w	#$DC40,d2
		move.w	#$160,d3
		jmp	(QueueDMATransfer).l                        ; Offset_0x0012FC
;-------------------------------------------------------------------------------
HUD_ScoreTime_Mask:                                            ; Offset_0x007E3A
		dc.l	$16FFFFFF, $FFFFFF00, $00140000
HUD_Rings_Mask:                                                ; Offset_0x007E46
		dc.l	$FFFF0000
;-------------------------------------------------------------------------------
HUD_Debug:                                                     ; Offset_0x007E4A
		move.l	#$5C400003,(VDP_Control_Port)               ; $00C00004
		move.w	(Camera_X).w,d1                             ; $FFFFEE78
		swap	D1
		move.w	(Obj_Player_One+Obj_X).w,d1                 ; $FFFFB010
		bsr.s	Offset_0x007E6A
		move.w	(Camera_Y).w,d1                             ; $FFFFEE7C
		swap	D1
		move.w	(Obj_Player_One+Obj_Y).w,d1                 ; $FFFFB014
Offset_0x007E6A:
		moveq	#7,d6
		lea	(HUD_Art_Debug_Numbers).l,a1            ; Offset_0x0084FA
Offset_0x007E72:
		rol.w	#4,d1
		move.w	D1,d2
		andi.w	#$F,d2
		cmpi.w	#$A,d2
		bcs.s	Offset_0x007E84
		addi.w	#7,d2
Offset_0x007E84:
		lsl.w	#5,d2
		lea	(A1,d2),a3
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		swap	D1
		dbf	D6, Offset_0x007E72
		rts
;-------------------------------------------------------------------------------
HUD_Draw_Three_Digit_Number:                                   ; Offset_0x007EA2
		lea	(HUD_Val_000100).l,a2                   ; Offset_0x007F6E
		moveq	#2,d6
		bra.s	Offset_0x007EB4
;-------------------------------------------------------------------------------
HUD_Draw_Six_Digit_Number:                                     ; Offset_0x007EAC
		lea	(HUD_Val_100000).l,a2                   ; Offset_0x007F62
		moveq	#5,d6
Offset_0x007EB4:
		moveq	#0,d4
		lea	HUD_Art_Numbers(PC),a1                ; Offset_0x0080BA
Offset_0x007EBA:
		moveq	#0,d2
		move.l	(A2)+,d3
Offset_0x007EBE:
		sub.l	D3,d1
		bcs.s	Offset_0x007EC6
		addq.w	#1,d2
		bra.s	Offset_0x007EBE
Offset_0x007EC6:
		add.l	D3,d1
		tst.w	D2
		beq.s	Offset_0x007ED0
		move.w	#1,d4
Offset_0x007ED0:
		tst.w	D4
		beq.s	Offset_0x007EFE
		lsl.w	#6,d2
		move.l	D0,4(A6)
		lea	(A1,d2),a3
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
Offset_0x007EFE:
		addi.l	#$400000,d0
		dbf	D6, Offset_0x007EBA
		rts
;-------------------------------------------------------------------------------
Timer_Count_Down:                                              ; Offset_0x007F0A
		move.l	#$5F800003,(VDP_Control_Port)               ; $00C00004
		lea	(VDP_Data_Port),a6                          ; $00C00000
		lea	(HUD_Val_000010).l,a2                   ; Offset_0x007F72
		moveq	#1,d6
		moveq	#0,d4
		lea	HUD_Art_Numbers(PC),a1                ; Offset_0x0080BA
Offset_0x007F28:
		moveq	#0,d2
		move.l	(A2)+,d3
Offset_0x007F2C:
		sub.l	D3,d1
		bcs.s	Offset_0x007F34
		addq.w	#1,d2
		bra.s	Offset_0x007F2C
Offset_0x007F34:
		add.l	D3,d1
		lsl.w	#6,d2
		lea	(A1,d2),a3
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		dbf	D6, Offset_0x007F28
		rts
;-------------------------------------------------------------------------------
HUD_Val_100000:                                                ; Offset_0x007F62
		dc.l	100000
HUD_Val_010000:
		dc.l	10000
HUD_Val_001000:                                                ; Offset_0x007F6A
		dc.l	1000
HUD_Val_000100:                                                ; Offset_0x007F6E
		dc.l	100
HUD_Val_000010:                                                ; Offset_0x007F72
		dc.l	10
HUD_Val_000001:                                                ; Offset_0x007F76
		dc.l	1
;-------------------------------------------------------------------------------
HUD_Draw_Single_Digit_Number:                                  ; Offset_0x007F7A
		lea	(HUD_Val_000001).l,a2                   ; Offset_0x007F76
		moveq	#0,d6
		bra.s	Offset_0x007F8C
;-------------------------------------------------------------------------------
HUD_Draw_Two_Digit_Number:                                     ; Offset_0x007F84
		lea	(HUD_Val_000010).l,a2                   ; Offset_0x007F72
		moveq	#1,d6
Offset_0x007F8C:
		moveq	#0,d4
		lea	HUD_Art_Numbers(PC),a1                ; Offset_0x0080BA
Offset_0x007F92:
		moveq	#0,d2
		move.l	(A2)+,d3
Offset_0x007F96:
		sub.l	D3,d1
		bcs.s	Offset_0x007F9E
		addq.w	#1,d2
		bra.s	Offset_0x007F96
Offset_0x007F9E:
		add.l	D3,d1
		tst.w	D2
		beq.s	Offset_0x007FA8
		move.w	#1,d4
Offset_0x007FA8:
		lsl.w	#6,d2
		move.l	D0,4(A6)
		lea	(A1,d2),a3
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		addi.l	#$400000,d0
		dbf	D6, Offset_0x007F92
		rts
;-------------------------------------------------------------------------------
S2_HUD_Level_Results:
; HUD_Draw_Four_Digit_Number:                                  ; Offset_0x007FDE
		lea	(HUD_Val_001000).l,a2                   ; Offset_0x007F6A
		moveq	#3,d6
		moveq	#0,d4
		lea	HUD_Art_Numbers(PC),a1                ; Offset_0x0080BA
Offset_0x007FEC:
		moveq	#0,d2
		move.l	(A2)+,d3
Offset_0x007FF0:
		sub.l	D3,d1
		bcs.s	Offset_0x007FF8
		addq.w	#1,d2
		bra.s	Offset_0x007FF0
Offset_0x007FF8:
		add.l	D3,d1
		tst.w	D2
		beq.s	Offset_0x008002
		move.w	#1,d4
Offset_0x008002:
		tst.w	D4
		beq.s	Offset_0x008032
		lsl.w	#6,d2
		lea	(A1,d2),a3
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
Offset_0x00802C:
		dbf	D6, Offset_0x007FEC
		rts
Offset_0x008032:
		moveq	#$F,d5
Offset_0x008034:
		move.l	#0,(A6)
		dbf	D5, Offset_0x008034
		bra.s	Offset_0x00802C
;-------------------------------------------------------------------------------
HUD_Lives_P2:                                                  ; Offset_0x008040
		move.l	#$5FA00003,d0
		moveq	#0,d1
		move.b	(Life_Count_P2).w,d1                        ; $FFFFFEC6
		bra.s	Offset_0x00805A
;-------------------------------------------------------------------------------
HUD_Lives:                                                     ; Offset_0x00804E
		move.l	#$7BA00003,d0
		moveq	#0,d1
		move.b	(Life_count).w,d1                           ; $FFFFFE12
Offset_0x00805A:
		lea	(HUD_Val_000010).l,a2                   ; Offset_0x007F72
		moveq	#1,d6
		moveq	#0,d4
		lea	HUD_Art_Life_Numbers(PC),a1           ; Offset_0x0083BA
Offset_0x008068:
		move.l	D0,4(A6)
		moveq	#0,d2
		move.l	(A2)+,d3
Offset_0x008070:
		sub.l	D3,d1
		bcs.s	Offset_0x008078
		addq.w	#1,d2
		bra.s	Offset_0x008070
Offset_0x008078:
		add.l	D3,d1
		tst.w	D2
		beq.s	Offset_0x008082
		move.w	#1,d4
Offset_0x008082:
		tst.w	D4
		beq.s	Offset_0x0080A8
Offset_0x008086:
		lsl.w	#5,d2
		lea	(A1,d2),a3
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
		move.l	(A3)+,(A6)
Offset_0x00809C:
		addi.l	#$400000,d0
		dbf	D6, Offset_0x008068
		rts
Offset_0x0080A8:
		tst.w	D6
		beq.s	Offset_0x008086
		moveq	#7,d5
Offset_0x0080AE:
		move.l	#0,(A6)
		dbf	D5, Offset_0x0080AE
		bra.s	Offset_0x00809C
;-------------------------------------------------------------------------------
HUD_Art_Numbers:                                               ; Offset_0x0080BA
		binclude	"data\art\hud_numb.dat"
HUD_Art_Life_Numbers:                                          ; Offset_0x0083BA
		binclude	"data\art\hud_num2.dat"
HUD_Art_Debug_Numbers:                                         ; Offset_0x0084FA
		binclude	"data\art\hud_debg.dat"
;===============================================================================
; Rotina para atualizar os contadores na tela (Pontos, Tempo, Vidas...).
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar o pocicionamento dos an�is nas fases
; ->>>
;===============================================================================
Load_Ring_Pos:                                                 ; Offset_0x0087DA
		moveq	#0,d0
		move.b	(Ring_Pos_Routine).w,d0                     ; $FFFFF710
		move.w	Offset_0x0087E8(pc,d0.w),d0
		jmp	Offset_0x0087E8(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x0087E8:
		dc.w	Offset_0x0087EC-Offset_0x0087E8
		dc.w	Offset_0x00882A-Offset_0x0087E8
;-------------------------------------------------------------------------------
Offset_0x0087EC:
		addq.b	#2,(Ring_Pos_Routine).w                   ; $FFFFF710
		bsr.w	Load_Rings_Layout                      ; Offset_0x008966
		move.l	(Ring_Start_Offset_Ptr).w,a1                ; $FFFFEE44
		lea	(Ring_Status_Table).w,a2                    ; $FFFFE900
		move.w	(Camera_X).w,d4                             ; $FFFFEE78
		subq.w	#8,d4
		bhi.s	Offset_0x00880C
		moveq	#1,d4
		bra.s	Offset_0x00880C
Offset_0x008808:
		addq.w	#4,a1
		addq.w	#2,a2
Offset_0x00880C:
		cmp.w	(A1),d4
		bhi.s	Offset_0x008808
		move.l	A1,(Ring_Start_Offset_Ptr).w                ; $FFFFEE44
		move.w	A2,(Ring_Offset_Ptr).w                      ; $FFFFEE4C
		addi.w	#$150,d4
		bra.s	Offset_0x008820
Offset_0x00881E:
		addq.w	#4,a1
Offset_0x008820:
		cmp.w	(A1),d4
		bhi.s	Offset_0x00881E
		move.l	A1,(Ring_End_Offset_Ptr).w                  ; $FFFFEE48
		rts
;-------------------------------------------------------------------------------
Offset_0x00882A:
		lea	(Ring_Consumption_Table).w,a2               ; $FFFFEF80
		move.w	(A2)+,d1
		subq.w	#1,d1
		bcs.s	Offset_0x00885E
Offset_0x008834:
		move.w	(A2)+,d0
		beq.s	Offset_0x008834
		move.w	D0,a1
		subq.b	#1,(A1)
		bne.s	Offset_0x00885A
		move.b	#6,(A1)
		addq.b	#1,1(A1)
		cmpi.b	#8,1(A1)
		bne.s	Offset_0x00885A
		move.w	#-1,(A1)
		clr.w	-2(A2)
		subq.w	#1,(Ring_Consumption_Table).w             ; $FFFFEF80
Offset_0x00885A:
		dbf	D1, Offset_0x008834
Offset_0x00885E:
		move.l	(Ring_Start_Offset_Ptr).w,a1                ; $FFFFEE44
		move.w	(Ring_Offset_Ptr).w,a2                      ; $FFFFEE4C
		move.w	(Camera_X).w,d4                             ; $FFFFEE78
		subq.w	#8,d4
		bhi.s	Offset_0x008876
		moveq	#1,d4
		bra.s	Offset_0x008876
Offset_0x008872:
		addq.w	#4,a1
		addq.w	#2,a2
Offset_0x008876:
		cmp.w	(A1),d4
		bhi.s	Offset_0x008872
		bra.s	Offset_0x008880
Offset_0x00887C:
		subq.w	#4,a1
		subq.w	#2,a2
Offset_0x008880:
		cmp.w	-4(A1),d4
		bls.s	Offset_0x00887C
		move.l	A1,(Ring_Start_Offset_Ptr).w                ; $FFFFEE44
		move.w	A2,(Ring_Offset_Ptr).w                      ; $FFFFEE4C
		move.l	(Ring_End_Offset_Ptr).w,a2                  ; $FFFFEE48
		addi.w	#$150,d4
		bra.s	Offset_0x00889A
Offset_0x008898:
		addq.w	#4,a2
Offset_0x00889A:
		cmp.w	(A2),d4
		bhi.s	Offset_0x008898
		bra.s	Offset_0x0088A2
Offset_0x0088A0:
		subq.w	#4,a2
Offset_0x0088A2:
		cmp.w	-4(A2),d4
		bls.s	Offset_0x0088A0
		move.l	A2,(Ring_End_Offset_Ptr).w                  ; $FFFFEE48
		rts
;===============================================================================
; Rotina para carregar o pocicionamento dos an�is nas fases
; <<<-
;===============================================================================

;===============================================================================
; Rotinas para responder ao toque dos an�is pelo jogador
; ->>>
;===============================================================================
TouchRings:                                                    ; Offset_0x0088AE
		cmpi.b	#$5A, Obj_P_Invunerblt_Time(A0)                  ; $0034
		bcc.w	Offset_0x00894E
		move.l	(Ring_Start_Offset_Ptr).w,a1                ; $FFFFEE44
		move.l	(Ring_End_Offset_Ptr).w,a2                  ; $FFFFEE48
		cmpa.l	A1,a2
		beq.w	Offset_0x00894E
		move.w	(Ring_Offset_Ptr).w,a4                      ; $FFFFEE4C
		move.w	Obj_X(A0),d2                                    ; $0010
		move.w	Obj_Y(A0),d3                                    ; $0014
		subi.w	#8,d2
		moveq	#0,d5
		move.b	Obj_Height_2(A0),d5                             ; $001E
		subq.b	#3,d5
		sub.w	D5,d3
		cmpi.b	#$4D,Obj_Map_Id(A0)                             ; $0022
		bne.s	Offset_0x0088EE
		addi.w	#$C,d3
		moveq	#$A,d5
Offset_0x0088EE:
		move.w	#6,d1
		move.w	#$C,d6
		move.w	#$10,d4
		add.w	D5,d5
Offset_0x0088FC:
		tst.w	(A4)
		bne.w	Offset_0x008944
		move.w	(A1),d0
		sub.w	D1,d0
		sub.w	D2,d0
		bcc.s	Offset_0x008912
		add.w	D6,d0
		bcs.s	Offset_0x008918
		bra.w	Offset_0x008944
Offset_0x008912:
		cmp.w	D4,d0
		bhi.w	Offset_0x008944
Offset_0x008918:
		move.w	2(A1),d0
		sub.w	D1,d0
		sub.w	D3,d0
		bcc.s	Offset_0x00892A
		add.w	D6,d0
		bcs.s	Offset_0x008930
		bra.w	Offset_0x008944
Offset_0x00892A:
		cmp.w	D5,d0
		bhi.w	Offset_0x008944
Offset_0x008930:
		move.w	#$604,(A4)
		bsr.s	Offset_0x008950
		lea	(Ring_Consumption_Table+2).w,a3           ; $FFFFEF82
Offset_0x00893A:
		tst.w	(A3)+
		bne.s	Offset_0x00893A
		move.w	A4,-(A3)
		addq.w	#1,(Ring_Consumption_Table).w             ; $FFFFEF80
Offset_0x008944:
		addq.w	#4,a1
		addq.w	#2,a4
		cmpa.l	A1,a2
		bne.w	Offset_0x0088FC
Offset_0x00894E:
		rts
Offset_0x008950:
		subq.w	#1,(Remainning_Rings_Count).w             ; $FFFFFF04
		cmpa.w	#Obj_Player_One,a0                              ; $B000
		beq.s	Offset_0x008960
		jmp	(CollectRing_Tails)                 ; Offset_0x010A7C
Offset_0x008960:
		jmp	(CollectRing_Sonic)                            ; Offset_0x010A26
;===============================================================================
; Rotinas para responder ao toque dos an�is pelo jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar os an�is das fases
; ->>>
;===============================================================================
Load_Rings_Layout:                                             ; Offset_0x008966
		clearRAM	Ring_Status_Table,Ring_Status_Table_End
		lea	(Ring_Consumption_Table).w,a1               ; $FFFFEF80
		moveq	#bytesToLcnt(Ring_Consumption_Table_End-Ring_Consumption_Table),d1
Offset_0x00897C:
		move.l	D0,(A1)+
		dbf	D1, Offset_0x00897C
		move.w	(Current_ZoneAndAct).w,d0                             ; $FFFFFE10
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(Rings_Layout),a1                     ; Offset_0x1F7198
		move.l	(A1,d0),a1
		move.l	A1,(Ring_Start_Offset_Ptr).w                ; $FFFFEE44
		addq.w	#4,a1
		moveq	#0,d5
		move.w	#511-1,d0
Offset_0x0089A0:
		tst.l	(A1)+
		bmi.s	Offset_0x0089AA
		addq.w	#1,d5
		dbf	D0, Offset_0x0089A0
Offset_0x0089AA:
		move.w	D5,(Remainning_Rings_Count).w               ; $FFFFFF04
		move.w	#0,(Perfect_Bonus_Rings_Flag).w         ; $FFFFFF06
		rts
;===============================================================================
; Rotina para carregar os an�is das fases
; <<<-
;===============================================================================

; ---------------------------------------------------------------------------
; Subroutine to draw on-screen rings
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0089B6: Build_Rings:
BuildRings:
		move.l	(Ring_Start_Offset_Ptr).w,a0
		move.l	(Ring_End_Offset_Ptr).w,d2
		sub.l	a0,d2				; are there any rings on screen?
		beq.s	Offset_0x008A1C			; if not, branch
		move.w	(Ring_Offset_Ptr).w,a4
		lea	Level_Rings_Mappings(pc),a1
		move.w	4(a3),d4
		move.w	#$F0,d5
		move.w	(Screen_Wrap_Y).w,d3

Offset_0x0089D6:
		tst.w	(a4)+				; has this ring been consumed?
		bmi.s	Offset_0x008A16			; if it has, branch
		move.w	2(a0),d1			; get ring X pos
		sub.w	d4,d1
		addq.w	#8,d1
		and.w	d3,d1
		cmp.w	d5,d1
		bcc.s	Offset_0x008A16
		addi.w	#$78,d1
		move.w	(a0),d0
		sub.w	(a3),d0
		addi.w	#$80,d0
		move.b	-1(a4),d6
		bne.s	Offset_0x0089FE
		move.b	(Object_Frame_Buffer).w,d6

Offset_0x0089FE:
		lsl.w	#3,d6
		lea	(a1,d6.w),a2			; get frame data address
		add.w	(a2)+,d1
		move.w	d1,(a6)+
		move.w	(a2)+,d6
		move.b	d6,(a6)
		addq.w	#2,a6
		move.w	(a2)+,(a6)+
		add.w	(a2)+,d0
		move.w	d0,(a6)+
		subq.w	#1,d7

Offset_0x008A16:
		addq.w	#4,a0
		subq.w	#4,d2
		bne.s	Offset_0x0089D6

Offset_0x008A1C:
		rts
; End of function BuildRings

; ---------------------------------------------------------------------------
; Non-standard sprite mappings format, hardcoding the size of each mapping
; and sign-extending the Y-pos and sprite size.
; Offset-0x008A1E:
Level_Rings_Mappings:
		dc.w	-8, 5, $A6BC, -8
		dc.w	-8, 5, $A6C0, -8
		dc.w	-8, 1, $A6C4, -4
		dc.w	-8, 5, $AEC0, -8
		dc.w	-8, 5, $A6C6, -8
		dc.w	-8, 5, $BEC6, -8
		dc.w	-8, 5, $AEC6, -8
		dc.w	-8, 5, $B6C6, -8

;===============================================================================
; Rotina para carregar o posiconamento dos tri�ngulos na Casino Night
; ->>>   Sonic 2 left over
;===============================================================================
S2_Load_Triangle_Pos:                                          ; Offset_0x008A5E
		moveq	#0,d0
		move.b	(CNz_Triangle_Pos_Routine).w,d0             ; $FFFFF71A
		move.w	Offset_0x008A6C(pc,d0.w),d0
		jmp	Offset_0x008A6C(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x008A6C:
		dc.w	Offset_0x008A70-Offset_0x008A6C
		dc.w	Offset_0x008AC4-Offset_0x008A6C
;-------------------------------------------------------------------------------
Offset_0x008A70:
		addq.b	#2,(CNz_Triangle_Pos_Routine).w           ; $FFFFF71A
		lea	(CNz_Triangles_Act_1).l,a1              ; Offset_0x008EBC
		tst.b	(Current_Act).w                                   ; $FFFFFE11
		beq.s	Offset_0x008A86
		lea	(CNz_Triangles_Act_2).l,a1              ; Offset_0x009000
Offset_0x008A86:
		move.w	(Camera_X).w,d4                             ; $FFFFEE78
		subq.w	#8,d4
		bhi.s	Offset_0x008A96
		moveq	#1,d4
		bra.s	Offset_0x008A96
Offset_0x008A92:
		lea	6(A1),a1
Offset_0x008A96:
		cmp.w	2(A1),d4
		bhi.s	Offset_0x008A92
		move.l	A1,(CNz_Triangle_Pos_Start).w               ; $FFFFF71C
		move.l	A1,(CNz_Triangle_Pos_Start_2P).w            ; $FFFFF724
		addi.w	#$150,d4
		bra.s	Offset_0x008AAE
Offset_0x008AAA:
		lea	6(A1),a1
Offset_0x008AAE:
		cmp.w	2(A1),d4
		bhi.s	Offset_0x008AAA
		move.l	A1,(CNz_Triangle_Pos_End).w                 ; $FFFFF720
		move.l	A1,(CNz_Triangle_Pos_End_2P).w              ; $FFFFF728
		move.b	#1,(CNz_Triangle_Pos_Flag).w              ; $FFFFF71B
		rts
;-------------------------------------------------------------------------------
Offset_0x008AC4:
		move.l	(CNz_Triangle_Pos_Start).w,a1               ; $FFFFF71C
		move.w	(Camera_X).w,d4                             ; $FFFFEE78
		subq.w	#8,d4
		bhi.s	Offset_0x008AD8
		moveq	#1,d4
		bra.s	Offset_0x008AD8
Offset_0x008AD4:
		lea	6(A1),a1
Offset_0x008AD8:
		cmp.w	2(A1),d4
		bhi.s	Offset_0x008AD4
		bra.s	Offset_0x008AE2
Offset_0x008AE0:
		subq.w	#6,a1
Offset_0x008AE2:
		cmp.w	-4(A1),d4
		bls.s	Offset_0x008AE0
		move.l	A1,(CNz_Triangle_Pos_Start).w               ; $FFFFF71C
		move.l	(CNz_Triangle_Pos_End).w,a2                 ; $FFFFF720
		addi.w	#$150,d4
		bra.s	Offset_0x008AFA
Offset_0x008AF6:
		lea	6(A2),a2
Offset_0x008AFA:
		cmp.w	2(A2),d4
		bhi.s	Offset_0x008AF6
		bra.s	Offset_0x008B04
Offset_0x008B02:
		subq.w	#6,a2
Offset_0x008B04:
		cmp.w	-4(A2),d4
		bls.s	Offset_0x008B02
		move.l	A2,(CNz_Triangle_Pos_End).w                 ; $FFFFF720
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s	Offset_0x008B1E
		move.l	A1,(CNz_Triangle_Pos_Start_2P).w            ; $FFFFF724
		move.l	A2,(CNz_Triangle_Pos_End_2P).w              ; $FFFFF728
		rts
Offset_0x008B1E:
		move.l	(CNz_Triangle_Pos_Start_2P).w,a1            ; $FFFFF724
		move.w	(Camera_X_P2).w,d4                          ; $FFFFEE60
		subq.w	#8,d4
		bhi.s	Offset_0x008B32
		moveq	#1,d4
		bra.s	Offset_0x008B32
Offset_0x008B2E:
		lea	6(A1),a1
Offset_0x008B32:
		cmp.w	2(A1),d4
		bhi.s	Offset_0x008B2E
		bra.s	Offset_0x008B3C
Offset_0x008B3A:
		subq.w	#6,a1
Offset_0x008B3C:
		cmp.w	-4(A1),d4
		bls.s	Offset_0x008B3A
		move.l	A1,(CNz_Triangle_Pos_Start_2P).w            ; $FFFFF724
		move.l	(CNz_Triangle_Pos_End_2P).w,a2              ; $FFFFF728
		addi.w	#$150,d4
		bra.s	Offset_0x008B54
Offset_0x008B50:
		lea	6(A2),a2
Offset_0x008B54:
		cmp.w	2(A2),d4
		bhi.s	Offset_0x008B50
		bra.s	Offset_0x008B5E
Offset_0x008B5C:
		subq.w	#6,a2
Offset_0x008B5E:
		cmp.w	-4(A2),d4
		bls.s	Offset_0x008B5C
		move.l	A2,(CNz_Triangle_Pos_End_2P).w              ; $FFFFF728
		rts
;===============================================================================
; Rotina para carregar o posiconamento dos tri�ngulos na Casino Night
; <<<-   Sonic 2 left over
;===============================================================================

;===============================================================================
; Rotina para responder ao toque nos tri�ngulos na Casino Night
; ->>>   Sonic 2 left over
;===============================================================================
S2_Touch_Response_Cnz_Triangles:                               ; Offset_0x008B6A
		move.l	(CNz_Triangle_Pos_Start).w,a1               ; $FFFFF71C
		move.l	(CNz_Triangle_Pos_End).w,a2                 ; $FFFFF720
		cmpa.w	#Obj_Player_One,a0                              ; $B000
		beq.s	Offset_0x008B80
		move.l	(CNz_Triangle_Pos_Start_2P).w,a1            ; $FFFFF724
		move.l	(CNz_Triangle_Pos_End_2P).w,a2              ; $FFFFF728
Offset_0x008B80:
		cmpa.l	A1,a2
		beq.w	Offset_0x008C1A
		move.w	Obj_X(A0),d2                                    ; $0010
		move.w	Obj_Y(A0),d3                                    ; $0014
		subi.w	#9,d2
		moveq	#0,d5
		move.b	Obj_Height_2(A0),d5                             ; $001E
		subq.b	#3,d5
		sub.w	D5,d3
		cmpi.b	#$4D, Obj_Map_Id(A0)                             ; $0022
		bne.s	Offset_0x008BAA
		addi.w	#$C,d3
		moveq	#$A,d5
Offset_0x008BAA:
		move.w	#$12,d4
		add.w	D5,d5
Offset_0x008BB0:
		move.w	(A1),d0
		andi.w	#$E,d0
		lea	Offset_0x008BFA(pc,d0.w),a3
		moveq	#0,d1
		move.b	(A3)+,d1
		move.w	2(A1),d0
		sub.w	D1,d0
		sub.w	D2,d0
		bcc.s	Offset_0x008BD2
		add.w	D1,d1
		add.w	D1,d0
		bcs.s	Offset_0x008BD8
		bra.w	Offset_0x008C10
Offset_0x008BD2:
		cmp.w	D4,d0
		bhi.w	Offset_0x008C10
Offset_0x008BD8:
		moveq	#0,d1
		move.b	(A3)+,d1
		move.w	4(A1),d0
		sub.w	D1,d0
		sub.w	D3,d0
		bcc.s	Offset_0x008BF2
		add.w	D1,d1
		add.w	D1,d0
		bcs.w	Offset_0x008C06
		bra.w	Offset_0x008C10
Offset_0x008BF2:
		cmp.w	D5,d0
		bhi.w	Offset_0x008C10
		bra.s	Offset_0x008C06
;-------------------------------------------------------------------------------
Offset_0x008BFA:
		dc.b	$20, $20, $20, $20, $40, $08, $40, $08
		dc.b	$08, $40, $08, $40
;-------------------------------------------------------------------------------
Offset_0x008C06:
		move.w	(A1),d0
		move.w	Offset_0x008C1C(pc,d0.w),d0
		jmp	Offset_0x008C1C(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x008C10:
		lea	6(A1),a1
		cmpa.l	A1,a2
		bne.w	Offset_0x008BB0
Offset_0x008C1A:
		rts
;-------------------------------------------------------------------------------
Offset_0x008C1C:
		dc.w	Offset_0x008C28-Offset_0x008C1C
		dc.w	Offset_0x008CDA-Offset_0x008C1C
		dc.w	Offset_0x008D40-Offset_0x008C1C
		dc.w	Offset_0x008D98-Offset_0x008C1C
		dc.w	Offset_0x008DEE-Offset_0x008C1C
		dc.w	Offset_0x008E46-Offset_0x008C1C
;-------------------------------------------------------------------------------
Offset_0x008C28:
		move.w	Obj_Flags(A1),d0                                ; $0004
		sub.w	Obj_Y(A0),d0                                    ; $0014
		neg.w   D0
		cmpi.w	#$20,d0
		blt.s	Offset_0x008C42
		move.w	#$A00, Obj_Speed_Y(A0)                          ; $001A
		bra.w	Offset_0x008E9C
Offset_0x008C42:
		move.w	2(A1),d0
		sub.w	Obj_X(A0),d0                                    ; $0010
		neg.w   D0
		cmpi.w	#$20,d0
		blt.s	Offset_0x008C5C
		move.w	#$A00, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008C5C:
		move.w	2(A1),d0
		sub.w	Obj_X(A0),d0                                    ; $0010
		cmpi.w	#$20,d0
		blt.s	Offset_0x008C6E
		move.w	#$20,d0
Offset_0x008C6E:
		add.w	4(A1),d0
		subq.w	#8,d0
		move.w	Obj_Y(A0),d1                                    ; $0014
		addi.w	#$E,d1
		sub.w	D1,d0
		bcc.s	Offset_0x008C8A
		move.w	#$20,d3
		bsr.s	Offset_0x008C8C
		bra.w	Offset_0x008E9C
Offset_0x008C8A:
		rts
Offset_0x008C8C:
		move.w	Obj_Speed_X(A0),d1                              ; $0018
		move.w	Obj_Speed_Y(A0),d2                              ; $001A
		jsr	(CalcAngle).l                            ; Offset_0x001DB8
		move.b	D0,(CNz_Triangle_Angle_Buffer).w            ; $FFFFFFDC
		sub.w	D3,d0
		move.w	D0,d1
		bpl.s	Offset_0x008CA6
		neg.w   D1
Offset_0x008CA6:
		neg.w   D0
		add.w	D3,d0
		move.b	D0,(CNz_Triangle_Angle_Buffer+1).w        ; $FFFFFFDD
		move.b	D1,(CNz_Triangle_Angle_Buffer+3).w        ; $FFFFFFDF
		cmpi.b	#$38,d1
		bcs.s	Offset_0x008CBA
		move.w	D3,d0
Offset_0x008CBA:
		move.b	D0,(CNz_Triangle_Angle_Buffer+2).w        ; $FFFFFFDE
		jsr	(CalcSine).l                             ; Offset_0x001B20
		muls.w	#$F600,d1
		asr.l	#8,d1
		move.w	D1, Obj_Speed_X(A0)                              ; $0018
		muls.w	#$F600,d0
		asr.l	#8,d0
		move.w	D0, Obj_Speed_Y(A0)                              ; $001A
		rts
;-------------------------------------------------------------------------------
Offset_0x008CDA:
		move.w	4(A1),d0
		sub.w	Obj_Y(A0),d0                                    ; $0014
		neg.w   D0
		cmpi.w	#$20,d0
		blt.s	Offset_0x008CF4
		move.w	#$A00, Obj_Speed_Y(A0)                          ; $001A
		bra.w	Offset_0x008E9C
Offset_0x008CF4:
		move.w	2(A1),d0
		sub.w	Obj_X(A0),d0                                    ; $0010
		cmpi.w	#$20,d0
		blt.s	Offset_0x008D0C
		move.w	#$F600, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008D0C:
		move.w	2(A1),d0
		sub.w	Obj_X(A0),d0                                    ; $0010
		neg.w   D0
		cmpi.w	#$20,d0
		blt.s	Offset_0x008D20
		move.w	#$20,d0
Offset_0x008D20:
		add.w	4(A1),d0
		subq.w	#8,d0
		move.w	Obj_Y(A0),d1                                    ; $0014
		addi.w	#$E,d1
		sub.w	D1,d0
		bcc.s	Offset_0x008D3E
		move.w	#$60,d3
		bsr.w	Offset_0x008C8C
		bra.w	Offset_0x008E9C
Offset_0x008D3E:
		rts
;-------------------------------------------------------------------------------
Offset_0x008D40:
		move.w	4(A1),d0
		sub.w	Obj_Y(A0),d0                                    ; $0014
		neg.w   D0
		cmpi.w	#8,d0
		blt.s	Offset_0x008D5A
		move.w	#$A00, Obj_Speed_Y(A0)                          ; $001A
		bra.w	Offset_0x008E9C
Offset_0x008D5A:
		move.w	2(A1),d0
		sub.w	Obj_X(A0),d0                                    ; $0010
		cmpi.w	#$40,d0
		blt.s	Offset_0x008D72
		move.w	#$F600, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008D72:
		neg.w   D0
		cmpi.w	#$40,d0
		blt.s	Offset_0x008D84
		move.w	#$A00, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008D84:
		move.w	#$38,d3
		tst.w	D0
		bmi.s	Offset_0x008D90
		move.w	#$48,d3
Offset_0x008D90:
		bsr.w	Offset_0x008C8C
		bra.w	Offset_0x008E9C
;-------------------------------------------------------------------------------
Offset_0x008D98:
		move.w	4(A1),d0
		sub.w	Obj_Y(A0),d0                                    ; $0014
		cmpi.w	#8,d0
		blt.s	Offset_0x008DB0
		move.w	#$F600, Obj_Speed_Y(A0)                          ; $001A
		bra.w	Offset_0x008E9C
Offset_0x008DB0:
		move.w	2(A1),d0
		sub.w	Obj_X(A0),d0                                    ; $0010
		cmpi.w	#$40,d0
		blt.s	Offset_0x008DC8
		move.w	#$F600, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008DC8:
		neg.w   D0
		cmpi.w	#$40,d0
		blt.s	Offset_0x008DDA
		move.w	#$A00, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008DDA:
		move.w	#$C8,d3
		tst.w	D0
		bmi.s	Offset_0x008DE6
		move.w	#$B8,d3
Offset_0x008DE6:
		bsr.w	Offset_0x008C8C
		bra.w	Offset_0x008E9C
;-------------------------------------------------------------------------------
Offset_0x008DEE:
		move.w	2(A1),d0
		sub.w	Obj_X(A0),d0                                    ; $0010
		neg.w   D0
		cmpi.w	#8,d0
		blt.s	Offset_0x008E08
		move.w	#$A00, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008E08:
		move.w	4(A1),d0
		sub.w	Obj_Y(A0),d0                                    ; $0014
		cmpi.w	#$40,d0
		blt.s	Offset_0x008E20
		move.w	#$F600, Obj_Speed_Y(A0)                          ; $001A
		bra.w	Offset_0x008E9C
Offset_0x008E20:
		neg.w   D0
		cmpi.w	#$40,d0
		blt.s	Offset_0x008E32
		move.w	#$A00, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008E32:
		move.w	#8,d3
		tst.w	D0
		bmi.s	Offset_0x008E3E
		move.w	#$F8,d3
Offset_0x008E3E:
		bsr.w	Offset_0x008C8C
		bra.w	Offset_0x008E9C
;-------------------------------------------------------------------------------
Offset_0x008E46:
		move.w	2(A1),d0
		sub.w	Obj_X(A0),d0                                    ; $0010
		cmpi.w	#8,d0
		blt.s	Offset_0x008E5E
		move.w	#$A00, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008E5E:
		move.w	4(A1),d0
		sub.w	Obj_Y(A0),d0                                    ; $0014
		cmpi.w	#$40,d0
		blt.s	Offset_0x008E76
		move.w	#$F600, Obj_Speed_Y(A0)                          ; $001A
		bra.w	Offset_0x008E9C
Offset_0x008E76:
		neg.w   D0
		cmpi.w	#$40,d0
		blt.s	Offset_0x008E88
		move.w	#$A00, Obj_Speed_X(A0)                          ; $0018
		bra.w	Offset_0x008E9C
Offset_0x008E88:
		move.w	#$78,d3
		tst.w	D0
		bmi.s	Offset_0x008E94
		move.w	#$88,d3
Offset_0x008E94:
		bsr.w	Offset_0x008C8C
		bra.w	Offset_0x008E9C
Offset_0x008E9C:
		bset	#1,Obj_Status(A0)                             ; $002A
		bclr	#4,Obj_Status(A0)                             ; $002A
		bclr	#5,Obj_Status(A0)                             ; $002A
		clr.b	Obj_Player_St_Convex(A0)                         ; $003C
		move.w	#sfx_S2LargeBumper,d0                       ; $00D9
		jmp	(PlaySound).l                           ; Offset_0x001176
;===============================================================================
; Rotina para responder ao toque nos tri�ngulos na Casino Night
; <<<-   Sonic 2 left over
;===============================================================================
CNz_Triangles_Act_1:                                           ; Offset_0x008EBC
		binclude	"data\s2_cnz\tri_act1.dat"
CNz_Triangles_Act_2:                                           ; Offset_0x009000
		binclude	"data\s2_cnz\tri_act2.dat"
;===============================================================================
; Rotina para calcular o �ngulo do jogador
; ->>>
;===============================================================================
Player_AnglePos:                                               ; Offset_0x009144
		move.l	(Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b	#$C,Obj_Player_Top_Solid(A0)                   ; $0046
		beq.s	Offset_0x009158
		move.l	(Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009158:
		move.b	Obj_Player_Top_Solid(A0),d5                     ; $0046
		btst	#3,Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x009170
		moveq	#0,d0
		move.b	D0,(Primary_Angle).w                        ; $FFFFF768
		move.b	D0,(Secondary_Angle).w                      ; $FFFFF76A
		rts
Offset_0x009170:
		moveq	#3,d0
		move.b	D0,(Primary_Angle).w                        ; $FFFFF768
		move.b	D0,(Secondary_Angle).w                      ; $FFFFF76A
		move.b	Obj_Angle(A0),d0                                ; $0026
		addi.b	#$20,d0
		bpl.s	Offset_0x009192
		move.b	Obj_Angle(A0),d0                                ; $0026
		bpl.s	Offset_0x00918C
		subq.b	#1,d0
Offset_0x00918C:
		addi.b	#$20,d0
		bra.s	Offset_0x00919E
Offset_0x009192:
		move.b	Obj_Angle(A0),d0                                ; $0026
		bpl.s	Offset_0x00919A
		addq.b	#1,d0
Offset_0x00919A:
		addi.b	#$1F,d0
Offset_0x00919E:
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	Player_WalkVertL                       ; Offset_0x009418
		cmpi.b	#$80,d0
		beq.w	Player_WalkCeiling                     ; Offset_0x00936A
		cmpi.b	#$C0,d0
		beq.w	Player_WalkVertR                       ; Offset_0x0092A2
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		neg.w   D0
		add.w	D0,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.w	(sp)+,d0
		bsr.w	Player_Angle                           ; Offset_0x009262
		tst.w	D1
		beq.s	Offset_0x009228
		bpl.s	Offset_0x00922A
		cmpi.w	#-$E,d1
		blt.s	Offset_0x009228
		add.w	D1,Obj_Y(A0)                                    ; $0014
Offset_0x009228:
		rts
Offset_0x00922A:
		tst.b	Obj_Player_St_Convex(A0)                         ; $003C
		bne.s	Offset_0x009248
		move.b	Obj_Speed_X(A0),d0                              ; $0018
		bpl.s	Offset_0x009238
		neg.b   D0
Offset_0x009238:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	Offset_0x009244
		move.b	#$E,d0
Offset_0x009244:
		cmp.b	D0,d1
		bgt.s	Offset_0x00924E
Offset_0x009248:
		add.w	D1,Obj_Y(A0)                                    ; $0014
		rts
Offset_0x00924E:
		bset	#1,Obj_Status(A0)                             ; $002A
		bclr	#5,Obj_Status(A0)                             ; $002A
		move.b	#1,Obj_Ani_Flag(A0)                           ; $0021
		rts
;-------------------------------------------------------------------------------
Player_Angle:                                                  ; Offset_0x009262
		move.w	D0,d3
		move.b	(Secondary_Angle).w,d2                      ; $FFFFF76A
		cmp.w	D0,d1
		ble.s	Offset_0x009274
		move.b	(Primary_Angle).w,d2                        ; $FFFFF768
		move.w	D1,d3
		move.w	D0,d1
Offset_0x009274:
		btst	#0,d2
		bne.s	Offset_0x009290
		move.b	D2,d0
		sub.b	Obj_Angle(A0),d0                                ; $0026
		bpl.s	Offset_0x009284
		neg.b   D0
Offset_0x009284:
		cmpi.b	#$20,d0
		bcc.s	Offset_0x009290
		move.b	D2,Obj_Angle(A0)                                ; $0026
		rts
Offset_0x009290:
		move.b	Obj_Angle(A0),d2                                ; $0026
		addi.b	#$20,d2
		andi.b	#$C0,d2
		move.b	D2,Obj_Angle(A0)                                ; $0026
		rts
;===============================================================================
; Rotina para calcular o �ngulo do jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; ->>>
;===============================================================================
Player_WalkVertR:                                              ; Offset_0x0092A2
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		neg.w   D0
		add.w	D0,d2
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	(sp)+,d0
		bsr.w	Player_Angle                           ; Offset_0x009262
		tst.w	D1
		beq.s	Offset_0x009316
		bpl.s	Offset_0x009332
		cmpi.w	#-$E,d1
		blt.s	Offset_0x009324
		tst.b	Obj_Player_Angle_Flag(A0)                        ; $0041
		bne.s	Offset_0x009318
		add.w	D1,Obj_X(A0)                                    ; $0010
Offset_0x009316:
		rts
Offset_0x009318:
		subq.b	#1,Obj_Player_Angle_Flag(A0)                  ; $0041
		move.b	#$C0,Obj_Angle(A0)                              ; $0026
		rts
Offset_0x009324:
		move.b	#$C0,Obj_Angle(A0)                              ; $0026
		move.b	#3,Obj_Player_Angle_Flag(A0)                  ; $0041
		rts
Offset_0x009332:
		tst.b	Obj_Player_St_Convex(A0)                         ; $003C
		bne.s	Offset_0x009350
		move.b	Obj_Speed_Y(A0),d0                              ; $001A
		bpl.s	Offset_0x009340
		neg.b   D0
Offset_0x009340:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	Offset_0x00934C
		move.b	#$E,d0
Offset_0x00934C:
		cmp.b	D0,d1
		bgt.s	Offset_0x009356
Offset_0x009350:
		add.w	D1,Obj_X(A0)                                    ; $0010
		rts
Offset_0x009356:
		bset	#1,Obj_Status(A0)                             ; $002A
		bclr	#5,Obj_Status(A0)                             ; $002A
		move.b	#1,Obj_Ani_Flag(A0)                           ; $0021
		rts
;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular a posi��o do jogador ao andar no teto
; ->>>
;===============================================================================
Player_WalkCeiling:                                            ; Offset_0x00936A
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d2
		eori.w	#$F,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d2
		eori.w	#$F,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.w	(sp)+,d0
		bsr.w	Player_Angle                           ; Offset_0x009262
		tst.w	D1
		beq.s	Offset_0x0093DE
		bpl.s	Offset_0x0093E0
		cmpi.w	#-$E,d1
		blt.s	Offset_0x0093DE
		sub.w	D1,Obj_Y(A0)                                    ; $0014
Offset_0x0093DE:
		rts
Offset_0x0093E0:
		tst.b	Obj_Player_St_Convex(A0)                         ; $003C
		bne.s	Offset_0x0093FE
		move.b	Obj_Speed_X(A0),d0                              ; $0018
		bpl.s	Offset_0x0093EE
		neg.b   D0
Offset_0x0093EE:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	Offset_0x0093FA
		move.b	#$E,d0
Offset_0x0093FA:
		cmp.b	D0,d1
		bgt.s	Offset_0x009404
Offset_0x0093FE:
		sub.w	D1,Obj_Y(A0)                                    ; $0014
		rts
Offset_0x009404:
		bset	#1,Obj_Status(A0)                             ; $002A
		bclr	#5,Obj_Status(A0)                             ; $002A
		move.b	#1,Obj_Ani_Flag(A0)                           ; $0021
		rts
;===============================================================================
; Rotina para calcular a posi��o do jogador ao andar no teto
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; ->>>
;===============================================================================
Player_WalkVertL:                                              ; Offset_0x009418
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d2
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d3
		eori.w	#$F,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d3
		eori.w	#$F,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	(sp)+,d0
		bsr.w	Player_Angle                           ; Offset_0x009262
		tst.w	D1
		beq.s	Offset_0x00948C
		bpl.s	Offset_0x00948E
		cmpi.w	#-$E,d1
		blt.s	Offset_0x00948C
		sub.w	D1,Obj_X(A0)                                    ; $0010
Offset_0x00948C:
		rts
Offset_0x00948E:
		tst.b	Obj_Player_St_Convex(A0)                         ; $003C
		bne.s	Offset_0x0094AC
		move.b	Obj_Speed_Y(A0),d0                              ; $001A
		bpl.s	Offset_0x00949C
		neg.b   D0
Offset_0x00949C:
		addq.b	#4,d0
		cmpi.b	#$E,d0
		bcs.s	Offset_0x0094A8
		move.b	#$E,d0
Offset_0x0094A8:
		cmp.b	D0,d1
		bgt.s	Offset_0x0094B2
Offset_0x0094AC:
		sub.w	D1,Obj_X(A0)                                    ; $0010
		rts
Offset_0x0094B2:
		bset	#1,Obj_Status(A0)                             ; $002A
		bclr	#5,Obj_Status(A0)                             ; $002A
		move.b	#1,Obj_Ani_Flag(A0)                           ; $0021
		rts
;===============================================================================
; Rotina para calcular a posi��o do jogador em rampas
; <<<-
;===============================================================================

;===============================================================================
; Rotina para testar em qual tile o objeto esta
; ->>>
;===============================================================================
Floor_Check_Tile:                                              ; Offset_0x0094C6
		lea	(Fg_Mem_Start_Address).w,a1                 ; $FFFF8000
		move.w	D2,d0
		lsr.w	#5,d0
		and.w	(Level_Layout_Wrap_Row).w,d0                ; $FFFFEEAE
		move.w	$A(A1,d0),d0
		move.w	D3,d1
		lsr.w	#3,d1
		move.w	D1,d4
		lsr.w	#4,d1
		add.w	D1,d0
		moveq	#-1,d1
		clr.w	D1
		move.w	D0,a1
		move.b	(A1),d1
		add.w	D1,d1
		move.w	Chunk_Mem_Address(pc,d1.w),d1          ; Offset_0x00953A
		move.w	D2,d0
		andi.w	#$70,d0
		add.w	D0,d1
		andi.w	#$E,d4
		add.w	D4,d1
		move.l	D1,a1
		rts
;-------------------------------------------------------------------------------
Floor_Check_Tile_2:                                            ; Offset_0x009500
		lea	(Fg_Mem_Start_Address).w,a1                 ; $FFFF8000
		move.w	D2,d0
		lsr.w	#5,d0
		and.w	(Level_Layout_Wrap_Row).w,d0                ; $FFFFEEAE
		move.w	8(A1,d0),d0
		move.w	D3,d1
		lsr.w	#3,d1
		move.w	D1,d4
		lsr.w	#4,d1
		add.w	D1,d0
		moveq	#-1,d1
		clr.w	D1
		move.w	D0,a1
		move.b	(A1),d1
		add.w	D1,d1
		move.w	Chunk_Mem_Address(pc,d1.w),d1          ; Offset_0x00953A
		move.w	D2,d0
		andi.w	#$70,d0
		add.w	D0,d1
		andi.w	#$E,d4
		add.w	D4,d1
		move.l	D1,a1
		rts
;-------------------------------------------------------------------------------
; Tabela contendo os endere�os dos tiles 128x128 -> Ex: Tile 1 = $0080
; ->>>
;-------------------------------------------------------------------------------
Chunk_Mem_Address:                                             ; Offset_0x00953A
c := 0
	rept 256
		dc.w	c
c := c+$80
	endm
;-------------------------------------------------------------------------------
; Tabela contendo os endere�os dos tiles 128x128 -> Ex: Tile 1 = $0080
; <<<-
;-------------------------------------------------------------------------------

;===============================================================================
; Rotina para testar em qual tile o objeto esta
; <<<-
;===============================================================================

;===============================================================================
; Rotina para localizar o ch�o
; ->>>
;===============================================================================
FindFloor:                                                     ; Offset_0x00973A
		lea	(Floor_Check_Tile_2).l,a5               ; Offset_0x009500
		tst.b	(Background_Collision_Flag).w                ; $FFFFF664
		beq.s	Offset_0x009774
		bsr.s	Offset_0x009774
		move.b	(A4),1(A4)
		move.w	D1,-(sp)
		sub.w	(Camera_X_Difference).w,d3                  ; $FFFFEE3E
		sub.w	(Camera_Y_Difference).w,d2                  ; $FFFFEE40
		lea	(Floor_Check_Tile).l,a5                 ; Offset_0x0094C6
		bsr.s	Offset_0x009774
		add.w	(Camera_X_Difference).w,d3                  ; $FFFFEE3E
		add.w	(Camera_Y_Difference).w,d2                  ; $FFFFEE40
		move.w	(sp)+,d0
		cmp.w	D0,d1
		ble.s	Offset_0x009772
		move.b	1(A4),(A4)
		move.w	D0,d1
Offset_0x009772:
		rts
Offset_0x009774:
		jsr	(A5)
		move.w	(A1),d0
		move.w	D0,d4
		andi.w	#$3FF,d0
		beq.s	Offset_0x009784
		btst	D5,d4
		bne.s	Offset_0x009792
Offset_0x009784:
		add.w	A3,d2
		bsr.w	Offset_0x009818
		sub.w	A3,d2
		addi.w	#$10,d1
		rts
Offset_0x009792:
		move.l	(Current_Collision_Ptr).w,a2                ; $FFFFF796
		add.w	D0,d0
		move.w	(A2,d0),d0
		beq.s	Offset_0x009784
		lea	(AngleMap).l,a2                         ; Offset_0x1C9040
		move.b	(A2,d0),(A4)
		lsl.w	#4,d0
		move.w	D3,d1
		btst	#$A,d4
		beq.s	Offset_0x0097B6
		not.w   D1
		neg.b   (A4)
Offset_0x0097B6:
		btst	#$B,d4
		beq.s	Offset_0x0097C6
		addi.b	#$40,(A4)
		neg.b   (A4)
		subi.b	#$40,(A4)
Offset_0x0097C6:
		andi.w	#$F,d1
		add.w	D0,d1
		lea	(Collision_Array_1).l,a2                ; Offset_0x1C9240
		move.b	(A2,d1),d0
		ext.w	D0
		eor.w	D6,d4
		btst	#$B,d4
		beq.s	Offset_0x0097E2
		neg.w   D0
Offset_0x0097E2:
		tst.w	D0
		beq.s	Offset_0x009784
		bmi.s	Offset_0x0097FE
		cmpi.b	#$10,d0
		beq.s	Offset_0x00980A
		move.w	D2,d1
		andi.w	#$F,d1
		add.w	D1,d0
		move.w	#$F,d1
		sub.w	D0,d1
		rts
Offset_0x0097FE:
		move.w	D2,d1
		andi.w	#$F,d1
		add.w	D1,d0
		bpl.w	Offset_0x009784
Offset_0x00980A:
		sub.w	A3,d2
		bsr.w	Offset_0x009818
		add.w	A3,d2
		subi.w	#$10,d1
		rts
Offset_0x009818:
		jsr	(A5)
		move.w	(A1),d0
		move.w	D0,d4
		andi.w	#$3FF,d0
		beq.s	Offset_0x009828
		btst	D5,d4
		bne.s	Offset_0x009836
Offset_0x009828:
		move.w	#$F,d1
		move.w	D2,d0
		andi.w	#$F,d0
		sub.w	D0,d1
		rts
Offset_0x009836:
		move.l	(Current_Collision_Ptr).w,a2                ; $FFFFF796
		add.w	D0,d0
		move.w	(A2,d0),d0
		beq.s	Offset_0x009828
		lea	(AngleMap).l,a2                         ; Offset_0x1C9040
		move.b	(A2,d0),(A4)
		lsl.w	#4,d0
		move.w	D3,d1
		btst	#$A,d4
		beq.s	Offset_0x00985A
		not.w   D1
		neg.b   (A4)
Offset_0x00985A:
		btst	#$B,d4
		beq.s	Offset_0x00986A
		addi.b	#$40,(A4)
		neg.b   (A4)
		subi.b	#$40,(A4)
Offset_0x00986A:
		andi.w	#$F,d1
		add.w	D0,d1
		lea	(Collision_Array_1).l,a2                ; Offset_0x1C9240
		move.b	(A2,d1),d0
		ext.w	D0
		eor.w	D6,d4
		btst	#$B,d4
		beq.s	Offset_0x009886
		neg.w   D0
Offset_0x009886:
		tst.w	D0
		beq.s	Offset_0x009828
		bmi.s	Offset_0x00989C
		move.w	D2,d1
		andi.w	#$F,d1
		add.w	D1,d0
		move.w	#$F,d1
		sub.w	D0,d1
		rts
Offset_0x00989C:
		move.w	D2,d1
		andi.w	#$F,d1
		add.w	D1,d0
		bpl.w	Offset_0x009828
		not.w   D1
		rts
;===============================================================================
; Rotina para localizar o ch�o
; <<<-
;===============================================================================

;===============================================================================
; Rotina para o objeto localizar o ch�o
; ->>>
;===============================================================================
Object_FindFloor:                                              ; Offset_0x0098AC
		lea	(Floor_Check_Tile_2).l,a5               ; Offset_0x009500
		tst.b	(Background_Collision_Flag).w                ; $FFFFF664
		beq.s	Offset_0x0098E6
		bsr.s	Offset_0x0098E6
		move.b	(A4),1(A4)
		move.w	D1, -(sp)
		sub.w	(Camera_X_Difference).w,d3                  ; $FFFFEE3E
		sub.w	(Camera_Y_Difference).w,d2                  ; $FFFFEE40
		lea	(Floor_Check_Tile).l,a5                 ; Offset_0x0094C6
		bsr.s	Offset_0x0098E6
		add.w	(Camera_X_Difference).w,d3                  ; $FFFFEE3E
		add.w	(Camera_Y_Difference).w,d2                  ; $FFFFEE40
		move.w	(sp)+,d0
		cmp.w	D0,d1
		ble.s	Offset_0x0098E4
		move.b	1(A4),(A4)
		move.w	D0,d1
Offset_0x0098E4:
		rts
Offset_0x0098E6:
		jsr	(A5)
		move.w	(A1),d0
		move.w	D0,d4
		andi.w	#$3FF,d0
		beq.s	Offset_0x0098F6
		btst	D5,d4
		bne.s	Offset_0x0098FC
Offset_0x0098F6:
		move.w	#$10,d1
		rts
Offset_0x0098FC:
		move.l	(Current_Collision_Ptr).w,a2                ; $FFFFF796
		add.w	D0,d0
		move.w	(A2,d0),d0
		beq.s	Offset_0x0098F6
		lea	(AngleMap).l,a2                         ; Offset_0x1C9040
		move.b	(A2,d0),(A4)
		lsl.w	#4,d0
		move.w	D3,d1
		btst	#$A,d4
		beq.s	Offset_0x009920
		not.w   D1
		neg.b   (A4)
Offset_0x009920:
		btst	#$B,d4
		beq.s	Offset_0x009930
		addi.b	#$40,(A4)
		neg.b   (A4)
		subi.b	#$40,(A4)
Offset_0x009930:
		andi.w	#$F,d1
		add.w	D0,d1
		lea	(Collision_Array_1).l,a2                ; Offset_0x1C9240
		move.b	(A2,d1),d0
		ext.w	D0
		eor.w	D6,d4
		btst	#$B,d4
		beq.s	Offset_0x00994C
		neg.w   D0
Offset_0x00994C:
		tst.w	D0
		beq.s	Offset_0x0098F6
		bmi.s	Offset_0x009968
		cmpi.b	#$10,d0
		beq.s	Offset_0x009974
		move.w	D2,d1
		andi.w	#$F,d1
		add.w	D1,d0
		move.w	#$F,d1
		sub.w	D0,d1
		rts
Offset_0x009968:
		move.w	D2,d1
		andi.w	#$F,d1
		add.w	D1,d0
		bpl.w	Offset_0x0098F6
Offset_0x009974:
		sub.w	A3,d2
		bsr.w	Offset_0x009818
		add.w	A3,d2
		subi.w	#$10,d1
		rts
;===============================================================================
; Rotina para o objeto localizar o ch�o
; <<<-
;===============================================================================

;===============================================================================
; Rotina para localizar a parede
; ->>>
;===============================================================================
FindWall:                                                      ; Offset_0x009982
		lea	(Floor_Check_Tile_2).l,a5               ; Offset_0x009500
		tst.b	(Background_Collision_Flag).w                ; $FFFFF664
		beq.s	Offset_0x0099E0
		bsr.s	Offset_0x0099E0
		move.b	(A4),1(A4)
		move.w	D1,-(sp)
		move.w	A3,d0
		bpl.s	Offset_0x0099A8
		eori.w	#$F,d3
		sub.w	(Camera_X_Difference).w,d3                  ; $FFFFEE3E
		eori.w	#$F,d3
		bra.s	Offset_0x0099AC
Offset_0x0099A8:
		sub.w	(Camera_X_Difference).w,d3                  ; $FFFFEE3E
Offset_0x0099AC:
		sub.w	(Camera_Y_Difference).w,d2                  ; $FFFFEE40
		lea	(Floor_Check_Tile).l,a5                 ; Offset_0x0094C6
		bsr.s	Offset_0x0099E0
		move.w	A3,d0
		bpl.s	Offset_0x0099CA
		eori.w	#$F,d3
		add.w	(Camera_X_Difference).w,d3                  ; $FFFFEE3E
		eori.w	#$F,d3
		bra.s	Offset_0x0099CE
Offset_0x0099CA:
		add.w	(Camera_X_Difference).w,d3                  ; $FFFFEE3E
Offset_0x0099CE:
		add.w	(Camera_Y_Difference).w,d2                  ; $FFFFEE40
		move.w	(sp)+,d0
		cmp.w	D0,d1
		ble.s	Offset_0x0099DE
		move.b	1(A4),(A4)
		move.w	D0,d1
Offset_0x0099DE:
		rts
Offset_0x0099E0:
		jsr	(A5)
		move.w	(A1),d0
		move.w	D0,d4
		andi.w	#$3FF,d0
		beq.s	Offset_0x0099F0
		btst	D5,d4
		bne.s	Offset_0x0099FE
Offset_0x0099F0:
		add.w	A3,d3
		bsr.w	FindWall2                              ; Offset_0x009A84
		sub.w	A3,d3
		addi.w	#$10,d1
		rts
Offset_0x0099FE:
		move.l	(Current_Collision_Ptr).w,a2                ; $FFFFF796
		add.w	D0,d0
		move.w	(A2,d0),d0
		beq.s	Offset_0x0099F0
		lea	(AngleMap).l,a2                         ; Offset_0x1C9040
		move.b	(A2,d0),(A4)
		lsl.w	#4,d0
		move.w	D2,d1
		btst	#$B,d4
		beq.s	Offset_0x009A2A
		not.w   D1
		addi.b	#$40,(A4)
		neg.b   (A4)
		subi.b	#$40,(A4)
Offset_0x009A2A:
		btst	#$A,d4
		beq.s	Offset_0x009A32
		neg.b   (A4)
Offset_0x009A32:
		andi.w	#$F,d1
		add.w	D0,d1
		lea	(Collision_Array_2).l,a2                ; Offset_0x1CB240
		move.b	(A2,d1),d0
		ext.w	D0
		eor.w	D6,d4
		btst	#$A,d4
		beq.s	Offset_0x009A4E
		neg.w   D0
Offset_0x009A4E:
		tst.w	D0
		beq.s	Offset_0x0099F0
		bmi.s	Offset_0x009A6A
		cmpi.b	#$10,d0
		beq.s	Offset_0x009A76
		move.w	D3,d1
		andi.w	#$F,d1
		add.w	D1,d0
		move.w	#$F,d1
		sub.w	D0,d1
		rts
Offset_0x009A6A:
		move.w	D3,d1
		andi.w	#$F,d1
		add.w	D1,d0
		bpl.w	Offset_0x0099F0
Offset_0x009A76:
		sub.w	A3,d3
		bsr.w	FindWall2                              ; Offset_0x009A84
		add.w	A3,d3
		subi.w	#$10,d1
		rts
;-------------------------------------------------------------------------------
FindWall2:                                                     ; Offset_0x009A84
		jsr	(A5)
		move.w	(A1),d0
		move.w	D0,d4
		andi.w	#$3FF,d0
		beq.s	Offset_0x009A94
		btst	D5,d4
		bne.s	Offset_0x009AA2
Offset_0x009A94:
		move.w	#$F,d1
		move.w	D3,d0
		andi.w	#$F,d0
		sub.w	D0,d1
		rts
Offset_0x009AA2:
		move.l	(Current_Collision_Ptr).w,a2                ; $FFFFF796
		add.w	D0,d0
		move.w	(A2,d0),d0
		beq.s	Offset_0x009A94
		lea	(AngleMap).l,a2                         ; Offset_0x1C9040
		move.b	(A2,d0),(A4)
		lsl.w	#4,d0
		move.w	D2,d1
		btst	#$B,d4
		beq.s	Offset_0x009ACE
		not.w   D1
		addi.b	#$40,(A4)
		neg.b   (A4)
		subi.b	#$40,(A4)
Offset_0x009ACE:
		btst	#$A,d4
		beq.s	Offset_0x009AD6
		neg.b   (A4)
Offset_0x009AD6:
		andi.w	#$F,d1
		add.w	D0,d1
		lea	(Collision_Array_2).l,a2                ; Offset_0x1CB240
		move.b	(A2,d1),d0
		ext.w	D0
		eor.w	D6,d4
		btst	#$A,d4
		beq.s	Offset_0x009AF2
		neg.w   D0
Offset_0x009AF2:
		tst.w	D0
		beq.s	Offset_0x009A94
		bmi.s	Offset_0x009B08
		move.w	D3,d1
		andi.w	#$F,d1
		add.w	D1,d0
		move.w	#$F,d1
		sub.w	D0,d1
		rts
Offset_0x009B08:
		move.w	D3,d1
		andi.w	#$F,d1
		add.w	D1,d0
		bpl.w	Offset_0x009A94
		not.w   D1
		rts
;===============================================================================
; Rotina para localizar a parede
; <<<-
;===============================================================================

;===============================================================================
; Rotina n�o usada,algo como executar um log das colis�es
; ->>>             (Talvez usada durante o desenvolvimento)
;===============================================================================
S2_FloorLog_Unk:                                               ; Offset_0x009B18
		rts
;===============================================================================
; Rotina n�o usada,algo como executar um log das colis�es
; <<<-             (Talvez usada durante o desenvolvimento)
;===============================================================================

;===============================================================================
; Rotina para calcular o quanto de espa�o h� na frente do jogador
; ->>>
;===============================================================================
Player_WalkSpeed:                                              ; Offset_0x009B1A
		move.l	(Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b	#$C,Obj_Player_Top_Solid(A0)                   ; $0046
		beq.s	Offset_0x009B2E
		move.l	(Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009B2E:
		move.b	Obj_Player_LRB_Solid(A0),d5                     ; $0047
		move.l	Obj_X(A0),d3                                    ; $0010
		move.l	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_Speed_X(A0),d1                              ; $0018
		ext.l	D1
		asl.l	#8,d1
		add.l	D1,d3
		move.w	Obj_Speed_Y(A0),d1                              ; $001A
		ext.l	D1
		asl.l	#8,d1
		add.l	D1,d2
		swap	D2
		swap	D3
		move.b	D0,(Primary_Angle).w                        ; $FFFFF768
		move.b	D0,(Secondary_Angle).w                      ; $FFFFF76A
		move.b	D0,d1
		addi.b	#$20,d0
		bpl.s	Offset_0x009B6E
		move.b	D1,d0
		bpl.s	Offset_0x009B68
		subq.b	#1,d0
Offset_0x009B68:
		addi.b	#$20,d0
		bra.s	Offset_0x009B78
Offset_0x009B6E:
		move.b	D1,d0
		bpl.s	Offset_0x009B74
		addq.b	#1,d0
Offset_0x009B74:
		addi.b	#$1F,d0
Offset_0x009B78:
		andi.b	#$C0,d0
		beq.w	Check_Floor_Dist_D2_D3                 ; Offset_0x009C68
		cmpi.b	#$80,d0
		beq.w	Offset_0x009F90
		cmpi.b	#$40,d0
		beq.w	Offset_0x00A0C4
		bra.w	Offset_0x009ECE
;===============================================================================
; Rotina para calcular o quanto de espa�o h� na frente do jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular o quanto de espa�o h� acima do jogador
; ->>>
;===============================================================================
CalcRoomOverHead:                                              ; Offset_0x009B94
		move.l	(Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b	#$C,Obj_Player_Top_Solid(A0)                   ; $0046
		beq.s	Offset_0x009BA8
		move.l	(Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009BA8:
		move.b	Obj_Player_LRB_Solid(A0),d5                     ; $0047
		move.b	D0,(Primary_Angle).w                        ; $FFFFF768
		move.b	D0,(Secondary_Angle).w                      ; $FFFFF76A
		addi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	Player_DontRunOnWallsL                 ; Offset_0x009FEC
		cmpi.b	#$80,d0
		beq.w	Player_DontRunOnWalls                  ; Offset_0x009F1C
		cmpi.b	#$C0,d0
		beq.w	Player_DontRunOnWallsR                 ; Offset_0x009E06
Player_Check_Floor:                                            ; Offset_0x009BD4
		move.l	(Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b	#$C,Obj_Player_Top_Solid(A0)                   ; $0046
		beq.s	Offset_0x009BE8
		move.l	(Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009BE8:
		move.b	Obj_Player_Top_Solid(A0),d5                     ; $0046
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.w	(sp)+,d0
		move.b	#0,d2
Offset_0x009C48:
		move.b	(Secondary_Angle).w,d3                      ; $FFFFF76A
		cmp.w	D0,d1
		ble.s	Offset_0x009C56
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		exg	D0,d1
Offset_0x009C56:
		btst	#0,d3
		beq.s	Offset_0x009C5E
		move.b	D2,d3
Offset_0x009C5E:
		rts
;===============================================================================
; Rotina para calcular o quanto de espa�o h� acima do jogador
; <<<-
;===============================================================================
; Check_Floor_Dist:                                            ; Offset_0x009C60
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
Check_Floor_Dist_D2_D3:                                        ; Offset_0x009C68
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d2
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.b	#0,d2
Offset_0x009C84:
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Offset_0x009C90
		move.b	D2,d3
Offset_0x009C90:
		rts
;-------------------------------------------------------------------------------
Offset_0x009C92:
		move.w	Obj_X(A0),d3                                    ; $0010
		move.w	Obj_Y(A0),d2                                    ; $0014
		subq.w	#4,d2
		move.l	(Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b	#$D,Obj_Player_LRB_Solid(A0)                   ; $0047
		beq.s	Offset_0x009CB0
		move.l	(Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009CB0:
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#$10,a3
		move.w	#0,d6
		move.b	Obj_Player_LRB_Solid(A0),d5                     ; $0047
		movem.l	A4-A6,-(sp)
		bsr.w	FindFloor                              ; Offset_0x00973A
		movem.l	(sp)+,a4-A6
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Offset_0x009CDE
		move.b	#0,d3
Offset_0x009CDE:
		rts
;===============================================================================
; Rotina para detectar se o jogador tocou o ch�o
; ->>>
;===============================================================================
Player_HitFloor:                                               ; Offset_0x009CE0
		move.w	Obj_X(A0),d3                                    ; $0010
Player_HitFloor_D3:                                            ; Offset_0x009CE4
		move.w	Obj_Y(A0),d2                                    ; $0014
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		move.l	(Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b	#$C,Obj_Player_Top_Solid(A0)                   ; $0046
		beq.s	Offset_0x009D06
		move.l	(Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009D06:
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#$10,a3
		move.w	#0,d6
		move.b	Obj_Player_Top_Solid(A0),d5                     ; $0046
		movem.l	A4-A6,-(sp)
		bsr.w	FindFloor                              ; Offset_0x00973A
		movem.l	(sp)+,a4-A6
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Offset_0x009D34
		move.b	#0,d3
Offset_0x009D34:
		rts
;-------------------------------------------------------------------------------
Player_HitFloor_A1:                                            ; Offset_0x009D36
		move.w	Obj_X(A1),d3                                    ; $0010
		move.w	Obj_Y(A1),d2                                    ; $0014
		moveq	#0,d0
		move.b	Obj_Height_2(A1),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		move.l	(Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b	#$C,Obj_Player_Top_Solid(A1)                   ; $0046
		beq.s	Offset_0x009D5C
		move.l	(Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x009D5C:
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#$10,a3
		move.w	#0,d6
		move.b	Obj_Player_Top_Solid(A1),d5                     ; $0046
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Offset_0x009D82
		move.b	#0,d3
Offset_0x009D82:
		rts
;===============================================================================
; Rotina para detectar se o jogador tocou o ch�o
; <<<-
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto tocou o ch�o
; ->>>
;===============================================================================
ObjHitFloor:                                                   ; Offset_0x009D84
		move.w	Obj_X(A0),d3                                    ; $0010
ObjHitFloor_D3:                                                ; Offset_0x009D88
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Offset_0x009DB8
		move.b	#0,d3
Offset_0x009DB8:
		rts
;===============================================================================
; Rotina para detectar se o objeto tocou o ch�o
; <<<-
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto bola de fogo tocou o ch�o
; ->>>
;===============================================================================
Fire_FindFloor:                                                ; Offset_0x009DBA
		move.w	Obj_X(A1),d3                                    ; $0010
		move.w	Obj_Y(A1),d2                                    ; $0014
		move.b	Obj_Height_2(A1),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bra.w	FindFloor                              ; Offset_0x00973A
;===============================================================================
; Rotina para detectar se o objeto bola de fogo tocou o ch�o
; <<<-
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto anel tocou o ch�o
; ->>>
;===============================================================================
Ring_FindFloor:                                                ; Offset_0x009DE0
		move.w	Obj_X(A0),d3                                    ; $0010
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#$10,a3
		move.w	#0,d6
		moveq	#$C,d5
		bra.w	Object_FindFloor                       ; Offset_0x0098AC
;===============================================================================
; Rotina para detectar se o objeto anel tocou o ch�o
; <<<-
;===============================================================================
Player_DontRunOnWallsR:                                        ; Offset_0x009E06
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d2
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	(sp)+,d0
		move.b	#$C0,d2
		bra.w	Offset_0x009C48
;-------------------------------------------------------------------------------
Offset_0x009E66:
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	(sp)+,d0
		move.b	#$C0,d2
		bra.w	Offset_0x009C48
;-------------------------------------------------------------------------------
Offset_0x009EC6:
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
Offset_0x009ECE:
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#$10,a3
		move.w	#0,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.b	#$C0,d2
		bra.w	Offset_0x009C84
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a direita
; ->>>
;===============================================================================
Object_HitWall_Right:                                          ; Offset_0x009EEE
		add.w	Obj_X(A0),d3                                    ; $0010
		move.w	Obj_Y(A0),d2                                    ; $0014
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#$10,a3
		move.w	#0,d6
		moveq	#$D,d5
		bsr.w	FindWall                               ; Offset_0x009982
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Offset_0x009F1A
		move.b	#$C0,d3
Offset_0x009F1A:
		rts
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a direita
; <<<-
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto tocou a parede a direita
; <<<-
;===============================================================================
Player_DontRunOnWalls:                                         ; Offset_0x009F1C
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d2
		eori.w	#$F,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		subq.w	#2,d0
		add.w	D0,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d2
		eori.w	#$F,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		subq.w	#2,d0
		sub.w	D0,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.w	(sp)+,d0
		move.b	#$80,d2
		bra.w	Offset_0x009C48
;-------------------------------------------------------------------------------
; Offset_0x009F88
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
Offset_0x009F90:
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d2
		eori.w	#$F,d2
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#-$10,a3
		move.w	#$800,d6
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.b	#$80,d2
		bra.w	Offset_0x009C84
;===============================================================================
; Rotina para detectar se o objeto tocou o teto
; ->>>
;===============================================================================
Object_HitCeiling:                                             ; Offset_0x009FB4
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d2
		eori.w	#$F,d2
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#-$10,a3
		move.w	#$800,d6
		moveq	#$D,d5
		bsr.w	FindFloor                              ; Offset_0x00973A
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Offset_0x009FEA
		move.b	#$80,d3
Offset_0x009FEA:
		rts
;===============================================================================
; Rotina para detectar se o objeto tocou o teto
; <<<-
;===============================================================================
Player_DontRunOnWallsL:                                        ; Offset_0x009FEC
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d2
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d3
		eori.w	#$F,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d3
		eori.w	#$F,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	(sp)+,d0
		move.b	#$40,d2
		bra.w	Offset_0x009C48
;-------------------------------------------------------------------------------
Offset_0x00A054:
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d3
		eori.w	#$F,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	D1,-(sp)
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		moveq	#0,d0
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		add.w	D0,d2
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d3
		eori.w	#$F,d3
		lea	(Secondary_Angle).w,a4                      ; $FFFFF76A
		move.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.w	(sp)+,d0
		move.b	#$40,d2
		bra.w	Offset_0x009C48
;-------------------------------------------------------------------------------
Player_HitWall:                                                ; Offset_0x00A0BC
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
Offset_0x00A0C4:
		move.b	Obj_Width_2(A0),d0                              ; $001F
		ext.w	D0
		sub.w	D0,d3
		eori.w	#$F,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.w	#-$10,a3
		move.w	#$400,d6
		bsr.w	FindWall                               ; Offset_0x009982
		move.b	#$40,d2
		bra.w	Offset_0x009C84
;-------------------------------------------------------------------------------
Offset_0x00A0E8:
		move.l	(Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b	#$C,Obj_Player_Top_Solid(A0)                   ; $0046
		beq.s	Offset_0x00A0FC
		move.l	(Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x00A0FC:
		move.w	Obj_X(A0),d3                                    ; $0010
		move.w	Obj_Y(A0),d2                                    ; $0014
		move.b	Obj_Height_2(A0),d0                             ; $001E
		ext.w	D0
		sub.w	D0,d3
		eori.w	#$F,d3
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#-$10,a3
		move.w	#$400,d6
		move.b	Obj_Player_LRB_Solid(A0),d5                     ; $0047
		bsr.w	FindWall                               ; Offset_0x009982
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Offset_0x00A136
		move.b	#$40,d3
Offset_0x00A136:
		rts
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a esquerda
; ->>>
;===============================================================================
Object_HitWall_Left:                                          ;  Offset_0x00A138
		add.w	Obj_X(A0),d3                                    ; $0010
		move.w	Obj_Y(A0),d2                                    ; $0014
		lea	(Primary_Angle).w,a4                        ; $FFFFF768
		move.b	#0,(A4)
		move.w	#-$10,a3
		move.w	#$400,d6
		moveq	#$D,d5
		bsr.w	FindWall                               ; Offset_0x009982
		move.b	(Primary_Angle).w,d3                        ; $FFFFF768
		btst	#0,d3
		beq.s	Exit_Object_HitWall_Left               ; Offset_0x00A164
		move.b	#$40,d3
Exit_Object_HitWall_Left:                                      ; Offset_0x00A164
		rts
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a esquerda
; <<<-
;===============================================================================
; Offset_0x00A166:
		rts
;===============================================================================
; Rotina usada para responder quando o jogador tocar em algum objeto
; ->>>
;===============================================================================
Touch_Response_2P:                                             ; Offset_0x00A168
		nop
		move.w	Obj_X(A0),d2                                    ; $0010
		move.w	Obj_Y(A0),d3                                    ; $0014
		subi.w	#4,d2
		moveq	#0,d5
		move.b	Obj_Height_2(A0),d5                             ; $001E
		subq.b	#3,d5
		sub.w	D5,d3
		move.w	#8,d4
		add.w	D5,d5
		bra.s	Touch_Process                          ; Offset_0x00A1BA
;-------------------------------------------------------------------------------
Touch_Response:                                                ; Offset_0x00A188
		nop
		jsr	(TouchRings)                           ; Offset_0x0088AE
		move.w	Obj_X(A0),d2                                    ; $0010
		move.w	Obj_Y(A0),d3                                    ; $0014
		subi.w	#8,d2
		moveq	#0,d5
		move.b	Obj_Height_2(A0),d5                             ; $001E
		subq.b	#3,d5
		sub.w	D5,d3
		cmpi.b	#$4D,Obj_Map_Id(A0)                             ; $0022
		bne.s	Offset_0x00A1B4
		addi.w	#$C,d3
		moveq	#$A,d5
Offset_0x00A1B4:
		move.w	#$10,d4
		add.w	D5,d5
Touch_Process:                                                 ; Offset_0x00A1BA
		lea	(Collision_Response_List).w,a4              ; $FFFFE380
		move.w	(A4)+,d6
		beq.s	Offset_0x00A1D0
Touch_Loop:                                                    ; Offset_0x00A1C2
		move.w	(A4)+,a1
		move.b	Obj_Col_Flags(A1),d0                            ; $0028
		bne.s	Touch_Width                            ; Offset_0x00A1D2
Touch_Next_Object:                                             ; Offset_0x00A1CA
		subq.w	#2,d6
		bne.s	Touch_Loop                             ; Offset_0x00A1C2
		moveq	#0,d0
Offset_0x00A1D0:
		rts
;-------------------------------------------------------------------------------
Touch_Width:                                                   ; Offset_0x00A1D2
		andi.w	#$3F,d0
		add.w	D0,d0
		lea	Touch_Sizes(pc,d0.w),a2                ; Offset_0x00A216
		moveq	#0,d1
		move.b	(A2)+,d1
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	D1,d0
		sub.w	D2,d0
		bcc.s	Offset_0x00A1F2
		add.w	D1,d1
		add.w	D1,d0
		bcs.s	Touch_Height                           ; Offset_0x00A1F6
		bra.s	Touch_Next_Object                      ; Offset_0x00A1CA
Offset_0x00A1F2:
		cmp.w	D4,d0
		bhi.s	Touch_Next_Object                      ; Offset_0x00A1CA
Touch_Height:                                                  ; Offset_0x00A1F6
		moveq	#0,d1
		move.b	(A2)+,d1
		move.w	Obj_Y(A1),d0                                    ; $0014
		sub.w	D1,d0
		sub.w	D3,d0
		bcc.s	Offset_0x00A20E
		add.w	D1,d1
		add.w	D1,d0
		bcs.w	Touch_Check_Value                      ; Offset_0x00A27A
		bra.s	Touch_Next_Object                      ; Offset_0x00A1CA
Offset_0x00A20E:
		cmp.w	D5,d0
		bhi.s	Touch_Next_Object                      ; Offset_0x00A1CA
		bra.w	Touch_Check_Value                      ; Offset_0x00A27A
;-------------------------------------------------------------------------------
Touch_Sizes:           ; W   H                                 ; Offset_0x00A216
		dc.b	$04, $04
		dc.b	$14, $14
		dc.b	$0C, $14
		dc.b	$14, $0C
		dc.b	$04, $10
		dc.b	$0C, $12
		dc.b	$10, $10
		dc.b	$06, $06
		dc.b	$18, $0C
		dc.b	$0C, $10
		dc.b	$10, $08
		dc.b	$08, $08
		dc.b	$14, $10
		dc.b	$14, $08
		dc.b	$0E, $0E
		dc.b	$18, $18
		dc.b	$28, $10
		dc.b	$10, $18
		dc.b	$08, $10
		dc.b	$20, $70
		dc.b	$40, $20
		dc.b	$80, $20
		dc.b	$20, $20
		dc.b	$08, $08
		dc.b	$04, $04
		dc.b	$20, $08
		dc.b	$0C, $0C
		dc.b	$08, $04
		dc.b	$18, $04
		dc.b	$28, $04
		dc.b	$04, $08
		dc.b	$04, $18
		dc.b	$04, $28
		dc.b	$18, $18
		dc.b	$18, $18
		dc.b	$0C, $18
		dc.b	$48, $08
		dc.b	$18, $28
		dc.b	$10, $04
		dc.b	$20, $02
		dc.b	$10, $1C
		dc.b	$0C, $24
		dc.b	$10, $02
		dc.b	$04, $40
		dc.b	$18, $40
		dc.b	$20, $10
		dc.b	$1C, $14
		dc.b	$10, $02
		dc.b	$10, $01
		dc.b	$02, $08
;-------------------------------------------------------------------------------
Touch_Check_Value:                                             ; Offset_0x00A27A
		move.b	Obj_Col_Flags(A1),d1                            ; $0028
		andi.b	#$C0,d1
		beq.w	Touch_Enemy                            ; Offset_0x00A314
		cmpi.b	#$C0,d1
		beq.w	Touch_Special                          ; Offset_0x00A4EE
		tst.b	D1
		bmi.w	Touch_Enemy_Hurt                       ; Offset_0x00A3E4
		move.b	Obj_Col_Flags(A1),d0                            ; $0028
		andi.b	#$3F,d0
		cmpi.b	#6,d0
		beq.s	Touch_Monitor                          ; Offset_0x00A2C4
		move.b	(Obj_Player_One+Obj_P_Invunerblt_Time).w,d0 ; $FFFFB034
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s	Offset_0x00A2B0
		move.b	Obj_P_Invunerblt_Time(A0),d0                    ; $0034
Offset_0x00A2B0:
		cmpi.b	#$5A,d0
		bcc.w	Offset_0x00A2C2
		move.b	#4,Obj_Routine(A1)                            ; $0005
		move.w	A0,Obj_Parent_Ref(A1)                           ; $003E
Offset_0x00A2C2:
		rts
;-------------------------------------------------------------------------------
Touch_Monitor:                                                 ; Offset_0x00A2C4
		tst.w	Obj_Speed_Y(A0)                                  ; $001A
		bpl.s	Offset_0x00A2F0
		move.w	Obj_Y(A0),d0                                    ; $0014
		subi.w	#$10,d0
		cmp.w	Obj_Y(A1),d0                                    ; $0014
		bcs.s	Offset_0x00A312
		neg.w   Obj_Speed_Y(A0)                                  ; $001A
		move.w	#$FE80, Obj_Speed_Y(A1)                          ; $001A
		tst.b	Obj_Player_St_Convex(A1)                         ; $003C
		bne.s	Offset_0x00A312
		move.b	#4, Obj_Player_St_Convex(A1)                   ; $003C
		rts
Offset_0x00A2F0:
		cmpa.w	#Obj_Player_One,a0                              ; $B000
		beq.s	Offset_0x00A2FC
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s	Offset_0x00A312
Offset_0x00A2FC:
		cmpi.b	#2, Obj_Ani_Number(A0)                         ; $0020
		bne.s	Offset_0x00A312
		neg.w   Obj_Speed_Y(A0)                                  ; $001A
		move.b	#4, Obj_Routine(A1)                            ; $0005
		move.w	A0, Obj_Player_Last(A1)                          ; $0042
Offset_0x00A312:
		rts
;-------------------------------------------------------------------------------
Touch_Enemy:                                                   ; Offset_0x00A314
		btst	#1, Obj_Player_Status(A0)                      ; $002F
		bne.s	Offset_0x00A32E
		cmpi.b	#9, Obj_Ani_Number(A0)                         ; $0020
		beq.s	Offset_0x00A32E
		cmpi.b	#2, Obj_Ani_Number(A0)                         ; $0020
		bne.w	Touch_Enemy_Hurt                       ; Offset_0x00A3E4
Offset_0x00A32E:
		tst.b	Obj_Col_Prop(A1)                                 ; $0029
		beq.s	Touch_Enemy_Normal                     ; Offset_0x00A35A
		neg.w   Obj_Speed_X(A0)                                  ; $0018
		neg.w   Obj_Speed_Y(A0)                                  ; $001A
		neg.w   Obj_Inertia(A0)                                  ; $001C
		move.b	Obj_Col_Flags(A1), Obj_Ani_Time_2(A1)     ; $0025, $0028
		move.b	#0, Obj_Col_Flags(A1)                          ; $0028
		subq.b	#1, Obj_Col_Prop(A1)                           ; $0029
		bne.s	Offset_0x00A358
		bset	#7, Obj_Status(A1)                             ; $002A
Offset_0x00A358:
		rts
;-------------------------------------------------------------------------------
Touch_Enemy_Normal:                                            ; Offset_0x00A35A
		btst	#2, Obj_Status(A1)                             ; $002A
		beq.s	Touch_Kill_Enemy                       ; Offset_0x00A36C
		move.b	Obj_Player_Tilt(A1),d0                          ; $003B
		move.w	Obj_Player_St_Convex(A1),a2                     ; $003C
		bclr	D0,(A2)
Touch_Kill_Enemy:                                              ; Offset_0x00A36C
		bset	#7, Obj_Status(A1)                             ; $002A
		moveq	#0,d0
		move.w	(Enemy_Hit_Chain_Count).w,d0                ; $FFFFF7D0
		addq.w	#2,(Enemy_Hit_Chain_Count).w              ; $FFFFF7D0
		cmpi.w	#6,d0
		bcs.s	Offset_0x00A384
		moveq	#6,d0
Offset_0x00A384:
		move.w	D0, Obj_Player_Spdsh_Cnt(A1)                     ; $003E
		move.w	Enemy_Points(pc,d0.w),d0               ; Offset_0x00A3D6
		cmpi.w	#$20,(Enemy_Hit_Chain_Count).w            ; $FFFFF7D0
		bcs.s	Offset_0x00A39E
		move.w	#$3E8,d0       ; 10000
		move.w	#$A, Obj_Player_Spdsh_Cnt(A1)                 ; $003E
Offset_0x00A39E:
		move.w	A0,a3
		bsr.w	Add_Points                             ; Offset_0x007AEC
		move.l	#Obj_Explosion,(A1)                      ; Offset_0x013D7C
		move.b	#0, Obj_Routine(A1)                            ; $0005
		tst.w	Obj_Speed_Y(A0)                                  ; $001A
		bmi.s	Offset_0x00A3C6
		move.w	Obj_Y(A0),d0                                    ; $0014
		cmp.w	Obj_Y(A1),d0                                    ; $0014
		bcc.s	Offset_0x00A3CE
		neg.w   Obj_Speed_Y(A0)                                  ; $001A
		rts
Offset_0x00A3C6:
		addi.w	#$100, Obj_Speed_Y(A0)                          ; $001A
		rts
Offset_0x00A3CE:
		subi.w	#$100, Obj_Speed_Y(A0)                          ; $001A
		rts
;-------------------------------------------------------------------------------
Enemy_Points:                                                  ; Offset_0x00A3D6
		dc.w	$000A      ;  100
		dc.w	$0014      ;  200
		dc.w	$0032      ;  500
		dc.w	$0064      ; 1000
;-------------------------------------------------------------------------------
; Offset_0x00A3DE ; Sonic 2 Left over
		bset	#7, Obj_Status(A1)                             ; $002A
Touch_Enemy_Hurt:                                              ; Offset_0x00A3E4
		btst	#1, Obj_Player_Status(A0)                      ; $002F
		beq.s	Touch_Hurt                             ; Offset_0x00A3F0
Offset_0x00A3EC:
		moveq	#-1,d0
		rts
;-------------------------------------------------------------------------------
Touch_Hurt:                                                    ; Offset_0x00A3F0
		nop
		tst.b	Obj_P_Invunerblt_Time(A0)                        ; $0034
		bne.s	Offset_0x00A3EC
		move.l	A1,a2
Hurt_Player:                                                   ; Offset_0x00A3FA
		move.w	(Ring_count).w,d0                   ; $FFFFFE20
		cmpa.w	#Obj_Player_One,a0                              ; $B000
		beq.s	Hurt_Player_D0                         ; Offset_0x00A40E
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s	Offset_0x00A446
		move.w	(Ring_Count_Address_P2).w,d0                ; $FFFFFED0
Hurt_Player_D0:                                                ; Offset_0x00A40E
		btst	#0, Obj_Player_Status(A0)                      ; $002F
		bne.s	Hurt_Shield                            ; Offset_0x00A440
		tst.b	Obj_Player_Hit_Flag(A0)                          ; $0037
		bmi.s	Offset_0x00A446
		tst.w	D0
		beq.w	Kill_Player                            ; Offset_0x00A4A4
		jsr	(AllocateObject).l                     ; Offset_0x011DD8
		bne.s	Hurt_Shield                            ; Offset_0x00A440
		move.l	#Rings_Lost,(A1)                      ; Offset_0x010AD6
		move.w	Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
		move.w	A0, Obj_Player_Spdsh_Cnt(A1)                     ; $003E
Hurt_Shield:                                                   ; Offset_0x00A440
		bclr	#0, Obj_Player_Status(A0)                      ; $002F
Offset_0x00A446:
		move.b	#4, Obj_Routine(A0)                            ; $0005
		jsr	(Sonic_ResetOnFloor).l                   ; Offset_0x00BF76
		bset	#1, Obj_Status(A0)                             ; $002A
		move.w	#$FC00, Obj_Speed_Y(A0)                          ; $001A
		move.w	#$FE00, Obj_Speed_X(A0)                          ; $0018
		btst	#6, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x00A478
		move.w	#$FE00, Obj_Speed_Y(A0)                          ; $001A
		move.w	#$FF00, Obj_Speed_X(A0)                          ; $0018
Offset_0x00A478:
		move.w	Obj_X(A0),d0                                    ; $0010
		cmp.w	Obj_X(A2),d0                                    ; $0010
		bcs.s	Offset_0x00A486
		neg.w   Obj_Speed_X(A0)                                  ; $0018
Offset_0x00A486:
		move.w	#0, Obj_Inertia(A0)                          ; $001C
		move.b	#$1A, Obj_Ani_Number(A0)                         ; $0020
		move.b	#$78, Obj_P_Invunerblt_Time(A0)                  ; $0034
		moveq	#sfx_Death,d0                                      ; $35
		jsr	(PlaySound).l                           ; Offset_0x001176
		moveq	#-1,d0
		rts
;===============================================================================
; Rotina Kill_Player - Rotina para matar o jogador
; ->>>
;===============================================================================
Kill_Player:                                                   ; Offset_0x00A4A4
		tst.w	(Debug_placement_mode).w                    ; $FFFFFE08
		bne.s	Kill_NoDeath                           ; Offset_0x00A4EA
		clr.b	Obj_Player_Status(A0)                            ; $002F
		clr.b	Obj_Player_Hit_Flag(A0)                          ; $0037
		move.b	#6, Obj_Routine(A0)                            ; $0005
		jsr	(Sonic_ResetOnFloor)                   ; Offset_0x00BF76
		bset	#1, Obj_Status(A0)                             ; $002A
		move.w	#$F900, Obj_Speed_Y(A0)                          ; $001A
		move.w	#0, Obj_Speed_X(A0)                          ; $0018
		move.w	#0, Obj_Inertia(A0)                          ; $001C
		move.b	#$18, Obj_Ani_Number(A0)                         ; $0020
		bset	#7, Obj_Art_VRAM(A0)                           ; $000A
		moveq	#sfx_Death,d0                                      ; $35
		jsr	(PlaySound).l                           ; Offset_0x001176
Kill_NoDeath:                                                  ; Offset_0x00A4EA
		moveq	#-1,d0
		rts
;===============================================================================
; Rotina Kill_Player - Rotina para matar o jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotina Touch_Special
; ->>>
;===============================================================================
Touch_Special:                                                 ; Offset_0x00A4EE
		move.b	Obj_Col_Flags(A1),d1                            ; $0028
		andi.b	#$3F,d1
		cmpi.b	#7,d1
		beq.s	Offset_0x00A52E
		cmpi.b	#6,d1
		beq.s	Offset_0x00A52E
		cmpi.b	#$A,d1
		beq.s	Offset_0x00A52E
		cmpi.b	#$C,d1
		beq.s	Offset_0x00A52E
		cmpi.b	#$15,d1
		beq.s	Offset_0x00A52E
		cmpi.b	#$16,d1
		beq.s	Offset_0x00A52E
		cmpi.b	#$17,d1
		beq.s	Offset_0x00A52E
		cmpi.b	#$18,d1
		beq.s	Offset_0x00A52E
		cmpi.b	#$21,d1
		beq.s	Offset_0x00A52E
		rts
Offset_0x00A52E:
		move.w	A0,d1
		subi.w	#Obj_Memory_Address,d1                          ; $B000
		beq.s	Offset_0x00A53A
		addq.b	#1, Obj_Col_Prop(A1)                           ; $0029
Offset_0x00A53A:
		addq.b	#1, Obj_Col_Prop(A1)                           ; $0029
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to add a sprite to the collision response list
; ---------------------------------------------------------------------------

; Offset_0x00A540: Add_To_Collision_Response_List:
Add_SpriteToCollisionResponseList:
		lea	(Collision_Response_List).w,a1
		cmpi.w	#$7E,(a1)		; is the list full?
		bcc.s	.skip			; if yes, branch
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)
; Offset_0x00A550:
.skip:
		rts
; End of function Add_SpriteToCollisionResponseList

;-------------------------------------------------------------------------------
Obj_Sonic_Knuckles_2P:                                         ; Offset_0x00A552
		include "data\objects\chars_2p.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Sonic
; ---------------------------------------------------------------------------
; Offset_0x00AA36:
Obj_Sonic:
		lea	(Sonic_Max_Speed).w,a4
		lea	(Distance_From_Top).w,a5
		lea	(Obj_P1_Dust_Water_Splash).w,a6
		tst.w	(Debug_placement_mode).w		; is debug mode being used?
		beq.s	Sonic_Normal				; if not, branch
		jmp	(Debug_Mode).l
; ---------------------------------------------------------------------------
; Offset_0x00AA4E:
Sonic_Normal:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	Sonic_Index(pc,d0.w),d1
		jmp	Sonic_Index(pc,d1.w)
; ===========================================================================
; Offset_0x00AA5C:
Sonic_Index:	dc.w Sonic_Init-Sonic_Index
		dc.w Sonic_Control-Sonic_Index
		dc.w Sonic_Hurt-Sonic_Index
		dc.w Sonic_Death-Sonic_Index
		dc.w Sonic_ResetLevel-Sonic_Index
		dc.w Sonic_Animate-Sonic_Index
; ===========================================================================
; Offset_0x00AA68: Sonic_Main:
Sonic_Init:
		addq.b	#2,Obj_Routine(a0)
		move.b	#$13,Obj_Height_2(a0)
		move.b	#9,Obj_Width_2(a0)
		move.b	#$13,Obj_Height_3(a0)
		move.b	#9,Obj_Width_3(a0)
		move.l	#Sonic_Mappings,Obj_Map(a0)
		move.w	#$100,Obj_Priority(a0)
		move.b	#$18,Obj_Width(a0)
		move.b	#$18,Obj_Height(a0)
		move.b	#4,Obj_Flags(a0)
		move.b	#0,Obj_Player_Selected(a0)
		move.w	#$600,(a4)
		move.w	#$C,Acceleration(a4)
		move.w	#$80,Deceleration(a4)
		tst.b	(Saved_Level_Flag).w
		bne.s	Sonic_Init_Continued
		move.w	#$680,Obj_Art_VRAM(a0)
		move.b	#$C,Obj_Player_Top_Solid(a0)
		move.b	#$D,Obj_Player_LRB_Solid(a0)
		move.w	Obj_X(a0),(Saved_Obj_X_P1).w
		move.w	Obj_Y(a0),(Saved_Obj_Y_P1).w
		move.w	Obj_Art_VRAM(a0),(Saved_Obj_Art_VRAM_P1).w
		move.w	Obj_Player_Top_Solid(a0),(Saved_Top_Solid_P1).w
; Offset_0x00AAEA:
Sonic_Init_Continued:
		move.b	#0,Obj_P_Flips_Remaining(a0)
		move.b	#4,Obj_Player_Flip_Speed(a0)
		move.b	#0,(Super_Sonic_flag).w
		move.b	#$1E,Obj_Subtype(a0)
		subi.w	#$20,Obj_X(a0)
		addi.w	#4,Obj_Y(a0)
		bsr.w	ResetPlayerPositionArray
		addi.w	#$20,Obj_X(a0)
		subi.w	#4,Obj_Y(a0)
		move.w	#0,(Dropdash_flag).w

; ---------------------------------------------------------------------------
; Normal state for Sonic
; ---------------------------------------------------------------------------
; Offset_0x00AB24:
Sonic_Control:
		tst.w	(Debug_Mode_Active).w			; is debug cheat enabled?
		beq.s	Offset_0x00AB3E				; if not, branch
		btst	#4,(Control_Ports_Buffer_Data+1).w	; is button B pressed?
		beq.s	Offset_0x00AB3E				; if not, branch
		move.w	#1,(Debug_placement_mode).w		; change Sonic into a ring/item
		clr.b	(Control_Locked_Flag_P1).w		; unlock controls
		rts
; ---------------------------------------------------------------------------

Offset_0x00AB3E:
		tst.b	(Control_Locked_Flag_P1).w		; are controls locked?
		bne.s	Offset_0x00AB4A				; if yes, branch
		move.w	(Control_Ports_Buffer_Data).w,(Control_Ports_Logical_Data).w	; copy new held buttons to enable joypad control

Offset_0x00AB4A:
		btst	#0,Obj_Player_Control(a0)
		bne.s	Offset_0x00AB6C
		movem.l	a4-a6,-(sp)
		moveq	#0,d0
		move.b	Obj_Status(a0),d0
		andi.w	#6,d0
		move.w	Sonic_Modes(pc,d0.w),d1
		jsr	Sonic_Modes(pc,d1.w)
		movem.l	(sp)+,a4-a6

Offset_0x00AB6C:
		cmpi.w	#-$100,(Sonic_Level_Limits_Min_Y).w	; is vertical wrapping enabled?
		bne.s	Offset_0x00AB7C				; if not, branch
		move.w	(Screen_Wrap_Y).w,d0
		and.w	d0,Obj_Y(a0)				; perform wrapping of Sonic's y-position

Offset_0x00AB7C:
		bsr.s	Sonic_Display
		bsr.w	Sonic_Super
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Water
		move.b	(Primary_Angle).w,Obj_Player_Next_Tilt(a0)
		move.b	(Secondary_Angle).w,Obj_Player_Tilt(a0)
		tst.b	(Sonic_Wind_Flag).w
		beq.s	Offset_0x00ABA8
		tst.b	Obj_Ani_Number(a0)
		bne.s	Offset_0x00ABA8
		move.b	Obj_Ani_Flag(a0),Obj_Ani_Number(a0)

Offset_0x00ABA8:
		btst	#1,Obj_Player_Control(a0)
		bne.s	Offset_0x00ABB8
		bsr.w	Sonic_Animate1P
		bsr.w	LoadSonicDynamicPLC

Offset_0x00ABB8:
		move.b	Obj_Player_Control(a0),d0
		andi.b	#$A0,d0
		bne.s	Offset_0x00ABC8
		jsr	(Touch_Response).l

Offset_0x00ABC8:
		rts
; ===========================================================================
; Offset_0x00ABCA:
Sonic_Modes:	dc.w	Sonic_MdNormal_Checks-Sonic_Modes
		dc.w	Sonic_MdAir-Sonic_Modes
		dc.w	Sonic_MdRoll-Sonic_Modes
		dc.w	Sonic_MdJump-Sonic_Modes
; ===========================================================================
; Offset_0x00ABD2:
Sonic_Display:
		move.b	Obj_P_Invunerblt_Time(a0),d0
		beq.s	Offset_0x00ABE0
		subq.b	#1,Obj_P_Invunerblt_Time(a0)
		lsr.b	#3,d0
		bcc.s	Sonic_ChkInvin

Offset_0x00ABE0:
		jsr	(DisplaySprite).l
; Offset_0x00ABE6:
Sonic_ChkInvin:
		btst	#1,Obj_Player_Status(a0)		; does Sonic have invincibility?
		beq.s	Sonic_ChkShoes				; if not, branch
		tst.b	Obj_P_Invcbility_Time(a0)		; has the invincibility run out?
		beq.s	Sonic_ChkShoes				; if yes, branch
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0					; countdown invincibility timer every eighth frame (used to save a byte of Sonic's SST)
		bne.s	Sonic_ChkShoes
		subq.b	#1,Obj_P_Invcbility_Time(a0)
		bne.s	Sonic_ChkShoes
		tst.b	(Boss_Flag).w
		bne.s	Sonic_RmvInvin
		cmpi.b	#$C,Obj_Subtype(a0)
		bcs.s	Sonic_RmvInvin
		move.w	(Level_Music_Buffer).w,d0
		jsr	(PlaySound).l
; Offset_0x00AC1C:
Sonic_RmvInvin:
		bclr	#1,Obj_Player_Status(a0)		; remove invincibility
; Offset_0x00AC22:
Sonic_ChkShoes:
		btst	#2,Obj_Player_Status(a0)		; does Sonic have speed shoes?
		beq.s	Sonic_ExitChk				; if not, branch
		tst.b	Obj_P_Spd_Shoes_Time(a0)		; has the speed shoes run out?
		beq.s	Sonic_ExitChk				; if yes, branch
		move.b	(Level_frame_counter+1).w,d0
		andi.b	#7,d0					; again, countdown speed shoes timer every eighth frame
		bne.s	Sonic_ExitChk
		subq.b	#1,Obj_P_Spd_Shoes_Time(a0)
		bne.s	Sonic_ExitChk
		tst.w	(Two_Player_Flag).w			; is this two competition mode?
		bne.s	Sonic_ChkShoesCompetition		; if yes, branch
		; reset Sonic's speed values
		move.w	#$600,(a4)
		move.w	#$C,Acceleration(a4)
		move.w	#$80,Deceleration(a4)
		tst.b	(Super_Sonic_flag).w
		beq.s	Sonic_RmvSpeed
		move.w	#$A00,(a4)
		move.w	#$30,Acceleration(a4)
		move.w	#$100,Deceleration(a4)
; Offset_0x00AC6C:
Sonic_RmvSpeed:
		bclr	#2,Obj_Player_Status(a0)		; remove speed shoes
		move.w	#cmd_S2SlowDown,d0
		jmp	(PlaySound).l
; ---------------------------------------------------------------------------
; Offset_0x00AC7C:
Sonic_ExitChk:
		rts
; ---------------------------------------------------------------------------
; Offset_0x00AC7E:
Sonic_ChkShoesCompetition:
		lea	(Player_Start_Speed_Array).l,a1
		moveq	#0,d0
		move.b	Obj_Player_Selected(a0),d0
		lsl.w	#3,d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,(a4)
		move.w	(a1)+,Acceleration(a4)
		move.w	(a1)+,Deceleration(a4)
		bclr	#2,Obj_Player_Status(a0)
		rts
; End of subroutine Sonic_Display

; ---------------------------------------------------------------------------
; Subroutine to record Sonic's previous positions for invincibility stars
; and input/status flags for Tails' AI to follow
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00ACA2: CopySonicMovesForMiles:
Sonic_RecordPos:
		cmpa.w	#Obj_Player_One,a0
		bne.s	Offset_0x00ACD2
		move.w	(Position_Table_Index).w,d0
		lea	(Position_Table_Data).w,a1
		lea	(a1,d0.w),a1
		move.w	Obj_X(a0),(a1)+
		move.w	Obj_Y(a0),(a1)+
		addq.b	#4,(Position_Table_Index+1).w
		lea	(Status_Table_Data).w,a1
		lea	(a1,d0.w),a1
		move.w	(Control_Ports_Logical_Data).w,(a1)+
		move.w	Obj_Status(a0),(a1)+
		rts
; End of subroutine Sonic_RecordPos

Offset_0x00ACD2:
		move.w  (Position_Table_Index_2P).w,d0              ; $FFFFEE2A
		lea     (Position_Table_Data_P2).w,a1               ; $FFFFE600
		lea     (A1,d0),a1
		move.w  Obj_X(A0),(A1)+				 ; $0010
		move.w  Obj_Y(A0),(A1)+				 ; $0014
		addq.b  #4,(Position_Table_Index_2P+$01).w        ; $FFFFEE2B
		rts

; ---------------------------------------------------------------------------
; Subroutine to refresh the player's old position values to their current ones
;
; This is a hackish work around to stop the camera from jerking around from
; being delayed (try spindashing against a wall in Sonic 2 to see this)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00ACEC: Reset_Player_Position_Array:
ResetPlayerPositionArray:
		cmpa.w	#Obj_Player_One,a0		; is this player one?
		bne.s	Reset_Player_Position_Array_P2	; if not, branch
		lea	(Position_Table_Data).w,a1
		lea	(Status_Table_Data).w,a2
		move.w	#($100>>2)-1,d0

Offset_0x00ACFE:
		move.w	Obj_X(a0),(a1)+
		move.w	Obj_Y(a0),(a1)+
		move.l	#0,(a2)+		; set all position data to 0
		dbf	d0,Offset_0x00ACFE
		move.w	#0,(Position_Table_Index).w
		rts

; Offset_0x00AD18:
Reset_Player_Position_Array_P2:
		lea	(Position_Table_Data_P2).w,a1
		move.w	#($100>>2)-1,d0

Offset_0x00AD20:
		move.w	Obj_X(a0),(a1)+
		move.w	Obj_Y(a0),(a1)+
		dbf	d0,Offset_0x00AD20
		move.w	#0,(Position_Table_Index_2P).w
		rts
; End of function ResetPlayerPositionArray

; ---------------------------------------------------------------------------
; Subroutine for Sonic when he's underwater
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00AD34:
Sonic_Water:
		tst.b	(Water_Level_Flag).w
		bne.s	Sonic_InWater

Offset_0x00AD3A:
		rts
; ---------------------------------------------------------------------------
; Offset_0x00AD3C: Sonic_InLevelWithWater:
Sonic_InWater:
		move.w	(Water_Level_Move).w,d0
		cmp.w	Obj_Y(a0),d0				; is Sonic above the water?
		bge.s	Sonic_OutWater				; if yes, branch

		bset	#6,Obj_Status(a0)			; set underwater flag
		bne.s	Offset_0x00AD3A				; if already underwater, branch

		addq.b	#1,(Water_Entered_Counter).w
		move.l	a0,a1
		bsr.w	ResumeMusic
		move.l	#Obj_Player_Underwater,(Obj_P1_Underwater_Control).w	; load Sonic's breathing bubbles
		move.b	#$81,(Obj_P1_Underwater_Control+Obj_Subtype).w
		move.l	a0,(Obj_P1_Underwater_Control+$0040).w
		move.w	#$300,(a4)
		move.w	#6,Acceleration(a4)
		move.w	#$40,Deceleration(a4)
		tst.b	(Super_Sonic_flag).w
		beq.s	Offset_0x00AD90
		move.w	#$500,(a4)
		move.w	#$18,Acceleration(a4)
		move.w	#$80,Deceleration(a4)

Offset_0x00AD90:
		asr.w	Obj_Speed_X(a0)
		asr.w	Obj_Speed_Y(a0)				; memory operands can only be shifted one bit at a time
		asr.w	Obj_Speed_Y(a0)
		beq.s	Offset_0x00AD3A
		move.w	#$100,Obj_Ani_Number(a6)		; splash animation
		move.w	#sfx_Splash,d0			; splash sound
		jmp	(PlaySound).l
; ---------------------------------------------------------------------------
; Offset_0x00ADAE: Sonic_NotInWater:
Sonic_OutWater:
		bclr	#6,Obj_Status(a0)			; unset underwater flag
		beq.s	Offset_0x00AD3A				; if already above water, branch
		addq.b	#1,(Water_Entered_Counter).w

		move.l	a0,a1
		bsr.w	ResumeMusic
		move.w	#$600,(a4)
		move.w	#$C,Acceleration(a4)
		move.w	#$80,Deceleration(a4)
		tst.b	(Super_Sonic_flag).w
		beq.s	Offset_0x00ADE6				; if Super, set different values
		move.w	#$A00,(a4)
		move.w	#$30,Acceleration(a4)
		move.w	#$100,Deceleration(a4)

Offset_0x00ADE6:
		cmpi.b	#4,Obj_Routine(a0)			; is Sonic falling back from getting hurt?
		beq.s	Offset_0x00ADFC				; if yes, branch
		move.w	Obj_Speed_Y(a0),d0
		cmpi.w	#-$400,d0
		blt.s	Offset_0x00ADFC
		asl.w	Obj_Speed_Y(a0)

Offset_0x00ADFC:
		cmpi.b	#$1C,Obj_Ani_Number(a0)			; is Sonic in his 'blank' animation?
		beq.w	Offset_0x00AD3A				; if yes, branch
		tst.w	Obj_Speed_Y(a0)
		beq.w	Offset_0x00AD3A
		move.w	#$100,Obj_Ani_Number(a6)		; splash animation
		move.l	a0,a1
		bsr.w	ResumeMusic
		cmpi.w	#-$1000,Obj_Speed_Y(a0)
		bgt.s	Offset_0x00AE28
		move.w	#-$1000,Obj_Speed_Y(a0)			; limit upward y velocity exiting the water

Offset_0x00AE28:
		move.w	#sfx_Splash,d0
		jmp	(PlaySound).l
; End of subroutine Sonic_Water

; ===========================================================================
; ---------------------------------------------------------------------------
; Start of subroutine Sonic_MdNormal
; Called if Sonic is neither airborne nor rolling this frame
; ---------------------------------------------------------------------------
; Offset_0x00AE32:
Sonic_MdNormal_Checks:
		; If Sonic has been waiting for a while,and is tapping his foot
		; impatiently, then make him blink once the player starts moving
		; again. Likewise, if he's been waiting for so long that he's laying
		; down, then make him play an animation of standing up.
		move.b	(Control_Ports_Logical_Data+1).w,d0
		andi.b	#button_A_mask+button_B_mask+button_C_mask,d0
		bne.s	Sonic_MdNormal
		cmpi.b	#$A,Obj_Ani_Number(a0)
		beq.s	Offset_0x00AEB6
		cmpi.b	#$B,Obj_Ani_Number(a0)
		beq.s	Offset_0x00AEB6
		cmpi.b	#5,Obj_Ani_Number(a0)
		bne.s	Sonic_MdNormal
		cmpi.b	#$1E,Obj_Ani_Frame(a0)
		bcs.s	Sonic_MdNormal
		bsr.w	Sonic_SlopeResist
		move.b	(Control_Ports_Logical_Data).w,d0
		andi.b	#button_A_mask+button_B_mask+button_C_mask+button_up_mask+button_down_mask+button_left_mask+button_right_mask,d0
		beq.s	Offset_0x00AE9E
		move.b	#$A,Obj_Ani_Number(a0)
		cmpi.b	#$AC,Obj_Ani_Frame(a0)
		bcs.s	Offset_0x00AE9E
		move.b	#$B,Obj_Ani_Number(a0)
		bra.s	Offset_0x00AE9E
; ---------------------------------------------------------------------------
; Offset_0x00AE80:
Sonic_MdNormal:
		bsr.w	Sonic_CheckSpindash
		bsr.w	Sonic_Jump
		bsr.w	Sonic_SlopeResist
		bsr.w	Sonic_Move
		bsr.w	Sonic_Roll
		bsr.w	Sonic_LevelBoundaries
		jsr	(SpeedToPos).l

Offset_0x00AE9E:
		bsr.w	Player_AnglePos
		bsr.w	Sonic_SlopeRepel
		tst.b	(Background_Collision_Flag).w
		beq.s	Offset_0x00AEB6
		bsr.w	Offset_0x009C92
		tst.w	d1
		bmi.w	Kill_Player

Offset_0x00AEB6:
		rts
; End of subroutine Sonic_MdNormal_Checks

; ---------------------------------------------------------------------------
; Start of subroutine Sonic_MdAir
; Called if Sonic is airborne, but not in a ball (thus, probably not jumping)
; ---------------------------------------------------------------------------
; Offset_0x00AEB8: Sonic_MdJump:
Sonic_MdAir:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		bsr.w	Sonic_LevelBoundaries
		jsr	(ObjectFall).l
		btst	#6,Obj_Status(a0)			; is Sonic underwater?
		beq.s	Offset_0x00AED8				; if not, branch
		subi.w	#$28,Obj_Speed_Y(a0)			; reduce gravity by $28 ($38-$28=$10)

Offset_0x00AED8:
		bsr.w	Sonic_JumpAngle
		bsr.w	Sonic_Floor
		rts
; End of subroutine Sonic_MdAir

; ---------------------------------------------------------------------------
; Start of subroutine Sonic_MdRoll
; Called if Sonic is in a ball, but not airborne (thus, probably rolling)
; ---------------------------------------------------------------------------
; Offset_0x00AEE2:
Sonic_MdRoll:
		tst.b	Obj_Player_Spdsh_Flag(A0)
		bne.s	Offset_0x00AEEC
		bsr.w	Sonic_Jump

Offset_0x00AEEC:
		bsr.w	Sonic_RollRepel
		bsr.w	Sonic_RollSpeed
		bsr.w	Sonic_LevelBoundaries
		jsr	(SpeedToPos).l
		bsr.w	Player_AnglePos
		bsr.w	Sonic_SlopeRepel
		tst.b	(Background_Collision_Flag).w
		beq.s	Offset_0x00AF16
		bsr.w	Offset_0x009C92
		tst.w	d1
		bmi.w	Kill_Player

Offset_0x00AF16:
		rts
; End of subroutine Sonic_MdRoll

; ---------------------------------------------------------------------------
; Start of subroutine Sonic_MdJump
; Called if Sonic is in a ball and airborne (he could be jumping but not necessarily)
; ---------------------------------------------------------------------------
; Offset_0x00AF18: Sonic_MdJump2:
Sonic_MdJump:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		bsr.w	Sonic_LevelBoundaries
		jsr	(ObjectFall).l
		btst	#6,Obj_Status(a0)			; is Sonic underwater?
		beq.s	Offset_0x00AF38				; if not, branch
		subi.w	#$28,Obj_Speed_Y(a0)			; reduce gravity by $28 ($38-$28=$10)

Offset_0x00AF38:
		bsr.w	Sonic_JumpAngle
		bsr.w	Sonic_Floor
		rts
; End of subroutine Sonic_MdJump

; ---------------------------------------------------------------------------
; Subroutine to make Sonic walk/run
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00AF42:
Sonic_Move:
		move.w	(a4),d6
		move.w	Acceleration(a4),d5
		move.w	Deceleration(a4),d4
		tst.b	Obj_Player_Status(a0)
		bmi.w	Sonic_Traction
		tst.w	Obj_P_Horiz_Ctrl_Lock(a0)
		bne.w	Sonic_ResetScr
		btst	#button_left,(Control_Ports_Logical_Data).w	; is left being pressed?
		beq.s	Sonic_NotLeft				; if not, branch
		bsr.w	Offset_0x00B2A6
; Offset_0x00AF68:
Sonic_NotLeft:
		btst	#button_right,(Control_Ports_Logical_Data).w	; is right being pressed?
		beq.s	Sonic_NotRight				; if not, branch
		bsr.w	Offset_0x00B32C
; Offset_0x00AF74:
Sonic_NotRight:
		move.b	Obj_Angle(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0					; is Sonic on a slope?
		bne.w	Sonic_ResetScr				; if yes, branch
		tst.w	Obj_Inertia(a0)				; is Sonic moving?
		bne.w	Sonic_ResetScr				; if yes, branch
		bclr	#5,Obj_Status(a0)
		move.b	#5,Obj_Ani_Number(a0)			; use "standing" animation
		btst	#3,Obj_Status(a0)
		beq.w	Sonic_Balance
		move.w	Obj_Player_Last(a0),a1
		tst.b	Obj_Status(a1)
		bmi.w	Sonic_Lookup
		moveq	#0,d1
		move.b	Obj_Width(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#2,d2
		add.w	Obj_X(a0),d1
		sub.w	Obj_X(a1),d1
		tst.b	(Super_Sonic_flag).w
		bne.w	SuperSonic_Balance
		cmpi.w	#2,d1
		blt.s	Sonic_BalanceOnObjLeft
		cmp.w	d2,d1
		bge.s	Sonic_BalanceOnObjRight
		bra.w	Sonic_Lookup
; ---------------------------------------------------------------------------
; Offset_0x00AFD8:
SuperSonic_Balance:
		cmpi.w	#2,d1
		blt.w	SuperSonic_BalanceOnObjLeft
		cmp.w	d2,d1
		bge.w	SuperSonic_BalanceOnObjRight
		bra.w	Sonic_Lookup
; ---------------------------------------------------------------------------
; Balancing checks for when you're on the right edge of an object
; Offset_0x00AFEA:
Sonic_BalanceOnObjRight:
		btst	#0,Obj_Status(a0)			; is Sonic facing right?
		bne.s	.facingRight				; if yes, branch
		move.b	#6,Obj_Ani_Number(a0)			; use "balancing" animation 1
		addq.w	#6,d2
		cmp.w	d2,d1					; is Sonic REALLY close to the edge?
		blt.w	Sonic_ResetScr				; if yes, branch
		move.b	#$C,Obj_Ani_Number(a0)			; use "balancing" animation 2
		bra.w	Sonic_ResetScr
; Offset_0x00B00A:
.facingRight:
		; this code is still in final, but redundant since both animation sets are the same
		move.b	#$1D,Obj_Ani_Number(a0)			; use "balancing" animation 3
		addq.w	#6,d2
		cmp.w	d2,d1					; is Sonic REALLY close to the edge?
		blt.w	Sonic_ResetScr				; if yes, branch
		move.b	#$1E,Obj_Ani_Number(a0)			; use "balancing" animation 4
		bclr	#0,Obj_Status(a0)
		bra.w	Sonic_ResetScr
; ---------------------------------------------------------------------------
; Balancing checks for when you're on the left edge of an object
; Offset_0x00B028:
Sonic_BalanceOnObjLeft:
		btst	#0,Obj_Status(a0)			; is Sonic facing left?
		beq.s	.facingLeft				; if yes, branch
		move.b	#6,Obj_Ani_Number(a0)			; use "balancing" animation 1
		cmpi.w	#-4,d1					; is Sonic REALLY close to the edge?
		bge.w	Sonic_ResetScr				; if yes, branch
		move.b	#$C,Obj_Ani_Number(a0)			; use "balancing" animation 2
		bra.w	Sonic_ResetScr
; Offset_0x00B048:
.facingLeft:
		; same as above
		move.b	#$1D,Obj_Ani_Number(a0)			; use "balancing" animation 3
		cmpi.w	#-4,d1					; is Sonic REALLY close to the edge?
		bge.w	Sonic_ResetScr				; if yes, branch
		move.b	#$1E,Obj_Ani_Number(a0)			; use "balancing" animation 4
		bset	#0,Obj_Status(a0)
		bra.w	Sonic_ResetScr
; ---------------------------------------------------------------------------
; Balancing checks for when you're on the edge of part of the level
; Offset_0x00B066:
Sonic_Balance:
		jsr	(Player_HitFloor).l
		cmpi.w	#$C,d1
		blt.w	Sonic_Lookup
		tst.b	(Super_Sonic_flag).w			; is Sonic super?
		bne.w	SuperSonic_Balance2			; if yes, branch
		cmpi.b	#3,Obj_Player_Next_Tilt(a0)
		bne.s	Sonic_BalanceLeft
		btst	#0,Obj_Status(a0)			; is Sonic facing right?
		bne.s	.facingRight				; if yes, branch
		move.b	#6,Obj_Ani_Number(a0)			; use "balancing" animation 1
		move.w	Obj_X(a0),d3
		subq.w	#6,d3
		jsr	(Player_HitFloor_D3).l
		cmpi.w	#$C,d1					; is Sonic REALLY close to the edge?
		blt.w	Sonic_ResetScr				; if yes, branch
		move.b	#$C,Obj_Ani_Number(a0)			; use "balancing" animation 2
		bra.w	Sonic_ResetScr
; Offset_0x00B0B0:
.facingRight:
		; same as above as above
		move.b	#$1D,Obj_Ani_Number(a0)			; use "balancing" animation 3
		move.w	Obj_X(a0),d3
		subq.w	#6,d3
		jsr	(Player_HitFloor_D3).l
		cmpi.w	#$C,d1					; is Sonic REALLY close to the edge?
		blt.w	Sonic_ResetScr				; if yes, branch
		move.b	#$1E,Obj_Ani_Number(a0)			; use "balancing" animation 4
		bclr	#0,Obj_Status(a0)
		bra.w	Sonic_ResetScr
; ---------------------------------------------------------------------------
; Offset_0x00B0DA:
Sonic_BalanceLeft:
		cmpi.b	#3,Obj_Player_Tilt(a0)
		bne.s	Sonic_Lookup
		btst	#0,Obj_Status(a0)			; is Sonic facing left?
		beq.s	.facingLeft				; if yes, branch
		move.b	#6,Obj_Ani_Number(a0)			; use "balancing" animation 1
		move.w	Obj_X(a0),d3
		addq.w	#6,d3
		jsr	(Player_HitFloor_D3).l
		cmpi.w	#$C,d1					; is Sonic REALLY close to the edge?
		blt.w	Sonic_ResetScr				; if yes, branch
		move.b	#$C,Obj_Ani_Number(a0)			; use "balancing" animation 2
		bra.w	Sonic_ResetScr
; Offset_0x00B10E:
.facingLeft:
		; you get the point, right?
		move.b	#$1D,Obj_Ani_Number(a0)			; use "balancing" animation 3
		move.w	Obj_X(a0),d3
		addq.w	#6,d3
		jsr	(Player_HitFloor_D3).l
		cmpi.w	#$C,d1					; is Sonic REALLY close to the edge?
		blt.w	Sonic_ResetScr				; if yes, branch
		move.b	#$1E,Obj_Ani_Number(a0)			; use "balancing" animation 4
		bset	#0,Obj_Status(a0)
		bra.w	Sonic_ResetScr
; ---------------------------------------------------------------------------
; Offset_0x00B138:
SuperSonic_Balance2:
		cmpi.b	#3,Obj_Player_Next_Tilt(a0)
		bne.s	SuperSonic_Balance3
; Offset_0x00B140:
SuperSonic_BalanceOnObjRight:
		bclr	#0,Obj_Status(a0)
		bra.s	SuperSonic_SetBalanceAnim
; ---------------------------------------------------------------------------
; Offset_0x00B148:
SuperSonic_Balance3:
		cmpi.b	#3,Obj_Player_Tilt(a0)
		bne.s	Sonic_Lookup
; Offset_0x00B150:
SuperSonic_BalanceOnObjLeft:
		bset	#0,Obj_Status(A0)
; Offset_0x00B156:
SuperSonic_SetBalanceAnim:
		move.b	#6,Obj_Ani_Number(a0)
		bra.s	Sonic_ResetScr
; ===========================================================================
; Offset_0x00B15E:
Sonic_Lookup:
		btst	#button_up,(Control_Ports_Logical_Data).w	; is up being pressed?
		beq.s	Offset_0x00B188				; if not, branch
		move.b	#7,Obj_Ani_Number(a0)			; use "looking up" animation
		addq.b	#1,Obj_Look_Up_Down_Time(a0)
		cmpi.b	#$78,Obj_Look_Up_Down_Time(a0)
		bcs.s	Sonic_ResetScr_Part2
		move.b	#$78,Obj_Look_Up_Down_Time(a0)
		cmpi.w	#$C8,(a5)
		beq.s	Sonic_UpdateSpeedOnGround
		addq.w	#2,(a5)
		bra.s	Sonic_UpdateSpeedOnGround
; ---------------------------------------------------------------------------

Offset_0x00B188:
		btst	#button_down,(Control_Ports_Logical_Data).w	; is down being pressed?
		beq.s	Sonic_ResetScr				; if not, branch
		move.b	#8,Obj_Ani_Number(a0)			; use "ducking" animation
		addq.b	#1,Obj_Look_Up_Down_Time(a0)
		cmpi.b	#$78,Obj_Look_Up_Down_Time(a0)
		bcs.s	Sonic_ResetScr_Part2
		move.b	#$78,Obj_Look_Up_Down_Time(a0)
		cmpi.w	#8,(a5)
		beq.s	Sonic_UpdateSpeedOnGround
		subq.w	#2,(a5)
		bra.s	Sonic_UpdateSpeedOnGround
; ===========================================================================
; moves the screen back to its normal position after looking up or down
; Offset_0x00B1B2:
Sonic_ResetScr:
		move.b	#0,Obj_Look_Up_Down_Time(a0)
; Offset_0x00B1B8:
Sonic_ResetScr_Part2:
		cmpi.w	#$60,(a5)				; is screen in its default position?
		beq.s	Sonic_UpdateSpeedOnGround		; if yes, branch
		bcc.s	Offset_0x00B1C2				; depending on the sign of the difference,
		addq.w	#4,(a5)					; either add 2

Offset_0x00B1C2:
		subq.w	#2,(a5)					; or subtract 2

; ---------------------------------------------------------------------------
; Updates Sonic's speed on the ground
; ---------------------------------------------------------------------------
; Offset_0x00B1C4:
Sonic_UpdateSpeedOnGround:
		tst.b	(Super_Sonic_flag).w
		beq.w	Offset_0x00B1D0
		move.w	#$C,d5

Offset_0x00B1D0:
		move.b	(Control_Ports_Logical_Data).w,d0
		andi.b	#button_left_mask+button_right_mask,d0					; is left/right pressed?
		bne.s	Sonic_Traction				; if yes, branch
		move.w	Obj_Inertia(a0),d0
		beq.s	Sonic_Traction
		bmi.s	Sonic_SettleLeft

; Slow down when facing right and not pressing a direction
; Sonic_SettleRight:
		sub.w	d5,d0
		bcc.s	Offset_0x00B1EA
		move.w	#0,d0

Offset_0x00B1EA:
		move.w	d0,Obj_Inertia(a0)
		bra.s	Sonic_Traction
; ---------------------------------------------------------------------------
; Slow down when facing left and not pressing a direction
; Offset_0x00B1F0:
Sonic_SettleLeft:
		add.w	d5,d0
		bcc.s	Offset_0x00B1F8
		move.w	#0,d0

Offset_0x00B1F8:
		move.w	d0,Obj_Inertia(a0)

; Increase or decrease speed on the ground
; Offset_0x00B1FC:
Sonic_Traction:
		move.b	Obj_Angle(a0),d0
		jsr	(CalcSine).l
		muls.w	Obj_Inertia(a0),d1
		asr.l	#8,d1
		move.w	d1,Obj_Speed_X(a0)
		muls.w	Obj_Inertia(a0),d0
		asr.l	#8,d0
		move.w	d0,Obj_Speed_Y(a0)

; Stops Sonic from running through walls that meet the ground
; Offset_0x00B21A:
Sonic_CheckWallsOnGround:
		btst	#6,Obj_Player_Control(a0)
		bne.w	Offset_0x00B2A4
		move.b	Obj_Angle(a0),d0
		addi.b	#$40,d0
		bmi.s	Offset_0x00B2A4
		move.b	#$40,d1					; rotate 90 degrees clockwise
		tst.w	Obj_Inertia(a0)				; is Sonic moving?
		beq.s	Offset_0x00B2A4				; if not, branch
		bmi.s	Offset_0x00B23C				; if Sonic is moving backwards, branch
		neg.w	d1					; otherwise, rotate counter clockwise

Offset_0x00B23C:
		move.b	Obj_Angle(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		bsr.w	Player_WalkSpeed
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	Offset_0x00B2A4
		asl.w	#8,d1
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	Offset_0x00B2A0
		cmpi.b	#$40,d0
		beq.s	Offset_0x00B286
		cmpi.b	#$80,d0
		beq.s	Offset_0x00B280
		add.w	d1,Obj_Speed_X(a0)
		move.w	#0,Obj_Inertia(a0)
		btst	#0,Obj_Status(a0)
		bne.s	Offset_0x00B27E
		bset	#5,Obj_Status(a0)

Offset_0x00B27E:
		rts
; ---------------------------------------------------------------------------

Offset_0x00B280:
		sub.w	d1,Obj_Speed_Y(a0)
		rts
; ---------------------------------------------------------------------------

Offset_0x00B286:
		sub.w	d1,Obj_Speed_X(a0)
		move.w	#0,Obj_Inertia(a0)
		btst	#0,Obj_Status(a0)
		beq.s	Offset_0x00B27E
		bset	#5,Obj_Status(a0)
		rts
; ---------------------------------------------------------------------------

Offset_0x00B2A0:
		add.w	d1,Obj_Speed_Y(a0)

Offset_0x00B2A4:
		rts
; End of subroutine Sonic_Move

Offset_0x00B2A6:
		move.w  Obj_Inertia(A0),d0		              ; $001C
		beq.s   Offset_0x00B2AE
		bpl.s   Offset_0x00B2E0
Offset_0x00B2AE:
		bset    #0,Obj_Status(A0)		             ; $002A
		bne.s   Offset_0x00B2C2
		bclr    #5,Obj_Status(A0)		             ; $002A
		move.b  #1,Obj_Ani_Flag(A0)		           ; $0021
Offset_0x00B2C2:
		sub.w   D5,d0
		move.w  D6,d1
		neg.w   D1
		cmp.w   D1,d0
		bgt.s   Offset_0x00B2D4
		add.w   D5,d0
		cmp.w   D1,d0
		ble.s   Offset_0x00B2D4
		move.w  D1,d0
Offset_0x00B2D4:
		move.w  D0,Obj_Inertia(A0)		              ; $001C
		move.b  #0,Obj_Ani_Number(A0)		         ; $0020
		rts
Offset_0x00B2E0:
		sub.w   D4,d0
		bcc.s   Offset_0x00B2E8
		move.w  #-$80,d0
Offset_0x00B2E8:
		move.w  D0, Obj_Inertia(A0)		              ; $001C
		move.b  Obj_Angle(A0),d0				; $0026
		addi.b  #$20,d0
		andi.b  #$C0,d0
		bne.s   Offset_0x00B32A
		cmpi.w  #$400,d0
		blt.s   Offset_0x00B32A
		move.b  #$D,Obj_Ani_Number(A0)		         ; $0020
		bclr    #0,Obj_Status(A0)		             ; $002A
		move.w  #sfx_Skid,d0				; $0036
		jsr     (PlaySound).l		           ; Offset_0x001176
		cmpi.b  #$C,Obj_Subtype(A0)		            ; $002C
		bcs.s   Offset_0x00B32A
		move.b  #6,Obj_Routine(A6)		            ; $0005
		move.b  #$15,Obj_Map_Id(A6)		             ; $0022
Offset_0x00B32A:
		rts
Offset_0x00B32C:
		move.w  Obj_Inertia(A0),d0		              ; $001C
		bmi.s   Offset_0x00B360
		bclr    #0,Obj_Status(A0)		             ; $002A
		beq.s   Offset_0x00B346
		bclr    #5,Obj_Status(A0)		             ; $002A
		move.b  #1,Obj_Ani_Flag(A0)		           ; $0021
Offset_0x00B346:
		add.w   D5,d0
		cmp.w   D6,d0
		blt.s   Offset_0x00B354
		sub.w   D5,d0
		cmp.w   D6,d0
		bge.s   Offset_0x00B354
		move.w  D6,d0
Offset_0x00B354:
		move.w  D0,Obj_Inertia(A0)		              ; $001C
		move.b  #0,Obj_Ani_Number(A0)		         ; $0020
		rts
Offset_0x00B360:
		add.w   D4,d0
		bcc.s   Offset_0x00B368
		move.w  #$80,d0
Offset_0x00B368:
		move.w  D0,Obj_Inertia(A0)		              ; $001C
		move.b  Obj_Angle(A0),d0				; $0026
		addi.b  #$20,d0
		andi.b  #$C0,d0
		bne.s   Offset_0x00B3AA
		cmpi.w  #-$400,d0
		bgt.s   Offset_0x00B3AA
		move.b  #$D,Obj_Ani_Number(A0)		         ; $0020
		bset    #0,Obj_Status(A0)		             ; $002A
		move.w  #sfx_Skid,d0				; $0036
		jsr     (PlaySound).l		           ; Offset_0x001176
		cmpi.b  #$C,Obj_Subtype(A0)		            ; $002C
		bcs.s   Offset_0x00B3AA
		move.b  #6,Obj_Routine(A6)		            ; $0005
		move.b  #$15,Obj_Map_Id(A6)		             ; $0022
Offset_0x00B3AA:
		rts
;-------------------------------------------------------------------------------
Sonic_RollSpeed:				               ; Offset_0x00B3AC
		move.w  (A4),d6
		asl.w   #1,d6
		move.w  Acceleration(A4),d5		             ; $0002
		asr.w   #1,d5
		move.w  #$20,d4
		tst.b   Obj_Player_Status(A0)		            ; $002F
		bmi.w   Offset_0x00B448
		tst.w   Obj_P_Horiz_Ctrl_Lock(A0)		        ; $0032
		bne.s   Offset_0x00B3E0
		btst    #button_left,(Control_Ports_Logical_Data).w         ; $FFFFF602
		beq.s   Offset_0x00B3D4
		bsr.w   Offset_0x00B48A
Offset_0x00B3D4:
		btst    #button_right,(Control_Ports_Logical_Data).w         ; $FFFFF602
		beq.s   Offset_0x00B3E0
		bsr.w   Offset_0x00B4AE
Offset_0x00B3E0:
		move.w  Obj_Inertia(A0),d0		              ; $001C
		beq.s   Offset_0x00B402
		bmi.s   Offset_0x00B3F6
		sub.w   D5,d0
		bcc.s   Offset_0x00B3F0
		move.w  #0,d0
Offset_0x00B3F0:
		move.w  D0,Obj_Inertia(A0)		              ; $001C
		bra.s   Offset_0x00B402
Offset_0x00B3F6:
		add.w   D5,d0
		bcc.s   Offset_0x00B3FE
		move.w  #0,d0
Offset_0x00B3FE:
		move.w  D0,Obj_Inertia(A0)		              ; $001C
Offset_0x00B402:
		tst.w   Obj_Inertia(A0)				  ; $001C
		bne.s   Offset_0x00B448
		tst.b   Obj_Player_Spdsh_Flag(A0)		        ; $003D
		bne.s   Offset_0x00B436
		bclr    #2,Obj_Status(A0)		             ; $002A
		move.b  Obj_Height_2(A0),d0		             ; $001E
		move.b  Obj_Height_3(A0), Obj_Height_2(A0)        ; $001E, $0044
		move.b  Obj_Width_3(A0), Obj_Width_2(A0)          ; $001F, $0045
		move.b  #5,Obj_Ani_Number(A0)		         ; $0020
		sub.b   Obj_Height_3(A0),d0		             ; $0044
		ext.w   D0
		add.w   D0,Obj_Y(A0)				    ; $0014
		bra.s   Offset_0x00B448
Offset_0x00B436:
		move.w  #$400,Obj_Inertia(A0)		          ; $001C
		btst    #0,Obj_Status(A0)		             ; $002A
		beq.s   Offset_0x00B448
		neg.w   Obj_Inertia(A0)				  ; $001C
Offset_0x00B448:
		cmpi.w  #$60,(A5)
		beq.s   Offset_0x00B454
		bcc.s   Offset_0x00B452
		addq.w  #4,(A5)
Offset_0x00B452:
		subq.w  #2,(A5)
Offset_0x00B454:
		move.b  Obj_Angle(A0),d0				; $0026
		jsr	(CalcSine).l		             ; Offset_0x001B20
		muls.w  Obj_Inertia(A0),d0		              ; $001C
		asr.l   #8,d0
		move.w  D0,Obj_Speed_Y(A0)		              ; $001A
		muls.w  Obj_Inertia(A0),d1		              ; $001C
		asr.l   #8,d1
		cmpi.w  #$1000,d1
		ble.s   Offset_0x00B478
		move.w  #$1000,d1
Offset_0x00B478:
		cmpi.w  #-$1000,d1
		bge.s   Offset_0x00B482
		move.w  #-$1000,d1
Offset_0x00B482:
		move.w  D1,Obj_Speed_X(A0)		              ; $0018
		bra.w	Sonic_CheckWallsOnGround
Offset_0x00B48A:
		move.w  Obj_Inertia(A0),d0		              ; $001C
		beq.s   Offset_0x00B492
		bpl.s   Offset_0x00B4A0
Offset_0x00B492:
		bset    #0,Obj_Status(A0)		             ; $002A
		move.b  #2,Obj_Ani_Number(A0)		         ; $0020
		rts
Offset_0x00B4A0:
		sub.w   D4,d0
		bcc.s   Offset_0x00B4A8
		move.w  #-$80,d0
Offset_0x00B4A8:
		move.w  D0,Obj_Inertia(A0)		              ; $001C
		rts
Offset_0x00B4AE:
		move.w  Obj_Inertia(A0),d0		              ; $001C
		bmi.s   Offset_0x00B4C2
		bclr    #0,Obj_Status(A0)		             ; $002A
		move.b  #2,Obj_Ani_Number(A0)		         ; $0020
		rts
Offset_0x00B4C2:
		add.w   D4,d0
		bcc.s   Offset_0x00B4CA
		move.w  #$80,d0
Offset_0x00B4CA:
		move.w  D0,Obj_Inertia(A0)		              ; $001C
		rts

; ---------------------------------------------------------------------------
; Subroutine for moving Sonic left or right when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00B4D0:
Sonic_ChgJumpDir:
		move.w	(a4),d6
		move.w	Acceleration(a4),d5
		asl.w	#1,d5
		btst	#4,Obj_Status(a0)			; did Sonic jump from rolling?
		bne.s	Sonic_Jump_ResetScr			; if yes, branch to skip bidair control
		move.w	Obj_Speed_X(a0),d0
		btst	#button_left,(Control_Ports_Logical_Data).w	; is left being held?
		beq.s	.jumpRight				; if not, branch

		bset	#0,Obj_Status(a0)
		sub.w	d5,d0					; add acceleration to the left
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0					; compare new speed with top speed
		bgt.s	.jumpRight				; if new speed is less than the maximum, branch
		add.w	d5,d0					; remove this frame's acceleration change
		cmp.w	d1,d0					; compare speed with top speed
		ble.s	.jumpRight				; if speed was already greater than the maximum, branch
		move.w	d1,d0					; limit speed in air going left, even if Sonic was already going faster (speed limit/cap)
; Offset_0x00B504:
.jumpRight:
		btst	#button_right,(Control_Ports_Logical_Data).w	; is right being held?
		beq.s	Sonic_JumpMove				; if not, branch
		bclr	#0,Obj_Status(a0)
		add.w	d5,d0					; add acceleration to the right
		cmp.w	d6,d0					; compare new speed with top speed
		blt.s	Sonic_JumpMove				; if new speed is less than the maximum, branch
		sub.w	d5,d0					; remove this frame's acceleration change
		cmp.w	d6,d0					; compare speed with top speed
		bge.s	Sonic_JumpMove				; if speed was already greater than the maximum, branch
		move.w	d6,d0					; limit speed in air going right, even if Sonic was already going faster (speed limit/cap)
; Offset_0x00B520:
Sonic_JumpMove:
		move.w	d0,Obj_Speed_X(a0)
; Offset_0x00B524:
Sonic_Jump_ResetScr:
		cmpi.w	#$60,(a5)				; is screen in its default position?
		beq.s	Sonic_JumpPeakDecelerate		; if yes, branch
		bcc.s	Offset_0x00B52E				; depending on the sign of the difference,
		addq.w	#4,(a5)					; either add 2

Offset_0x00B52E:
		subq.w  #2,(a5)					; or subtract 2
; Offset_0x00B530:
Sonic_JumpPeakDecelerate:
		cmpi.w	#-$400,Obj_Speed_Y(a0)			; is Sonic moving faster than -$400 upwards?
		bcs.s	Offset_0x00B55E				; if yes, branch
		move.w	Obj_Speed_X(a0),d0
		move.w	d0,d1
		asr.w	#5,d1					; d1 = x_velocity / 32
		beq.s	Offset_0x00B55E				; return if d1 is 0
		bmi.s	Sonic_JumpPeakDecelerateLeft		; branch if moving left

; Sonic_JumpPeakDecelerateRight:
		sub.w	d1,d0					; reduce x velocity by d1
		bcc.s	Offset_0x00B54C
		move.w	#0,d0

Offset_0x00B54C:
		move.w	d0,Obj_Speed_X(a0)
		rts
; ---------------------------------------------------------------------------
; Offset_0x00B552:
Sonic_JumpPeakDecelerateLeft:
		sub.w	d1,d0					; reduce x velocity by d1
		bcs.s	Offset_0x00B55A
		move.w	#0,d0

Offset_0x00B55A:
		move.w	d0,Obj_Speed_X(a0)

Offset_0x00B55E:
		rts
; End of subroutine Sonic_ChgJumpDir

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to prevent Sonic from leaving the boundaries of a level
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00B562:
Sonic_LevelBoundaries:
		move.l	Obj_X(a0),d1
		move.w	Obj_Speed_X(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d1
		swap	d1
		move.w	(Sonic_Level_Limits_Min_X).w,d0
		addi.w	#$10,d0
		cmp.w	d1,d0					; has Sonic touched the left boundary?
		bhi.s	Sonic_Boundary_Sides			; if yes, branch
		move.w	(Sonic_Level_Limits_Max_X).w,d0
		addi.w	#$128,d0				; screen width - Sonic's width_pixels
		cmp.w	d1,d0					; has Sonic touched the right boundary?
		bls.s	Sonic_Boundary_Sides			; if yes, branch
; Offset_0x00B588:
Sonic_Boundary_CheckBottom:
		move.w	(Sonic_Level_Limits_Max_Y).w,d0
		addi.w	#$E0,d0
		cmp.w	Obj_Y(a0),d0				; has Sonic touched the bottom boundary?
		blt.s	Sonic_Boundary_Bottom			; if yes, branch
		rts
; ---------------------------------------------------------------------------
; Offset_0x00B598:
Sonic_Boundary_Bottom:
		jmp	(Kill_Player).l
; ===========================================================================
; Offset_0x00B59E:
Sonic_Boundary_Sides:
		move.w	d0,Obj_X(a0)
		move.w	#0,Obj_Sub_X(a0)
		move.w	#0,Obj_Speed_X(a0)
		move.w	#0,Obj_Inertia(a0)
		bra.s	Sonic_Boundary_CheckBottom
; End of function Sonic_LevelBoundaries

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to start rolling when he's moving
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00B5B6:
Sonic_Roll:
		tst.b	Obj_Player_Status(a0)
		bmi.s	Sonic_NoRoll
		move.w	Obj_Inertia(a0),d0
		bpl.s	Offset_0x00B5C4
		neg.w	d0

Offset_0x00B5C4:
		cmpi.w	#$80,d0					; is Sonic moving at $80 speed or faster?
		bcs.s	Sonic_NoRoll				; if not, branch
		move.b	(Control_Ports_Logical_Data).w,d0
		andi.b	#button_left_mask+button_right_mask,d0	; is left/right being pressed?
		bne.s	Sonic_NoRoll				; if yes, branch
		btst	#button_down,(Control_Ports_Logical_Data).w	; is down being pressed?
		bne.s	Sonic_ChkRoll				; if yes, branch
; Offset_0x00B5DC:
Sonic_NoRoll:
		rts
; ---------------------------------------------------------------------------
; Offset_0x00B5DE:
Sonic_ChkRoll:
		btst	#2,Obj_Status(a0)			; is Sonic already rolling?
		beq.s	Sonic_DoRoll				; if not, branch
		rts
; ---------------------------------------------------------------------------
; Offset_0x00B5E8:
Sonic_DoRoll:
		bset	#2,Obj_Status(a0)
		move.b	#$E,Obj_Height_2(a0)
		move.b	#7,Obj_Width_2(a0)
		move.b	#2,Obj_Ani_Number(a0)			; use "rolling" animation
		addq.w	#5,Obj_Y(a0)
		move.w	#sfx_Roll,d0
		jsr	(PlaySound).l				; play rolling sound
		tst.w	Obj_Inertia(a0)
		bne.s	Offset_0x00B61A
		move.w	#$200,Obj_Inertia(a0)

Offset_0x00B61A:
		rts
; End of function Sonic_Roll

; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to jump
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00B61C:
Sonic_Jump:
		move.b	(Control_Ports_Logical_Data+1).w,d0
		andi.b	#button_A_mask+button_B_mask+button_C_mask,d0	; is A/B/C pressed?
		beq.w	Offset_0x00B6F0				; if not, branch
		move.b	(Control_Ports_Logical_Data).w,d0
		andi.b	#button_up_mask+button_left_mask+button_right_mask,d0	; is up, left, or right being pressed?
		cmpi.b	#button_up_mask,d0	; invalidate the previous check minus up
		bne.s	Offset_0x00B63C	; if not, branch
		move.w	#-1,(Dropdash_flag).w

Offset_0x00B63C:
		moveq	#0,d0
		move.b	Obj_Angle(a0),d0
		addi.b	#$80,d0
		movem.l	a4-a6,-(sp)
		bsr.w	CalcRoomOverHead
		movem.l	(sp)+,a4-a6
		cmpi.w	#6,d1					; does Sonic have room to jump?
		blt.w	Offset_0x00B6F0				; if not, branch
		move.w	#$680,d2
		tst.b	(Super_Sonic_flag).w
		beq.s	Offset_0x00B668
		move.w	#$800,d2				; set higher jump speed if super

Offset_0x00B668:
		btst	#6,Obj_Status(a0)
		beq.s	Offset_0x00B674
		move.w	#$380,d2				; set lower jump speed if under

Offset_0x00B674:
		moveq	#0,d0
		move.b	Obj_Angle(a0),d0
		subi.b	#$40,d0
		jsr	(CalcSine).l
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,Obj_Speed_X(a0)			; make Sonic jump (in X... this adds nothing on level ground)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,Obj_Speed_Y(a0)			; make Sonic jump (in Y)
		bset	#1,Obj_Status(a0)
		bclr	#5,Obj_Status(a0)
		addq.l	#4,sp
		move.b	#1,Obj_Player_Jump(a0)
		clr.b	Obj_Player_St_Convex(a0)
		move.w	#sfx_Jump,d0
		jsr	(PlaySound).l				; play jumping sound
		move.b	Obj_Height_3(a0),Obj_Height_2(a0)
		move.b	Obj_Width_3(a0),Obj_Width_2(a0)
		btst	#2,Obj_Status(a0)
		bne.s	Sonic_RollJump
		move.b	#$E,Obj_Height_2(a0)
		move.b	#7,Obj_Width_2(a0)
		move.b	#2,Obj_Ani_Number(a0)			; use "jumping" animation
		bset	#2,Obj_Status(a0)
		move.b	Obj_Height_2(a0),d0
		sub.b	Obj_Height_3(a0),d0
		ext.w	d0
		sub.w	d0,Obj_Y(a0)

Offset_0x00B6F0:
		rts
; ---------------------------------------------------------------------------
; Offset_0x00B6F2:
Sonic_RollJump:
		bset	#4,Obj_Status(a0)			; set the rolling+jumping flag
		rts
; End of function Sonic_Jump

; ---------------------------------------------------------------------------
; Subroutine letting Sonic control the height of the jump
; when the jump button is released
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00B6FA:
Sonic_JumpHeight:
		tst.b	Obj_Player_Jump(A0)			; is Sonic jumping?
		beq.s	Sonic_UpVelCap				; if not, branch

		move.w	#-$400,d1
		btst	#6,Obj_Status(a0)			; is Sonic underwater?
		beq.s	Offset_0x00B710				; if not, branch
		move.w	#-$200,d1

Offset_0x00B710:
		cmp.w	Obj_Speed_Y(a0),d1			; if Sonic is not going up faster than d1, branch
		ble.w	Sonic_ThrowRings			; this is altered from Sonic 2 to prevent the Super Sonic transformation, change the branch to Sonic_CheckGoSuper to re-enable him

		move.b	(Control_Ports_Logical_Data).w,d0
		andi.b	#button_A_mask+button_B_mask+button_C_mask,d0	; is A/B/C pressed?
		bne.s	Offset_0x00B726				; if yes, branch
		move.w	d1,Obj_Speed_Y(a0)			; immediately reduce Sonic's upward speed to d1

Offset_0x00B726:
		tst.b	Obj_Speed_Y(a0)				; is Sonic exactly at the height of his jump?
		beq.s	Sonic_CheckGoSuper			; if yes, test for turning into Super Sonic
		rts
; ---------------------------------------------------------------------------
; Offset_0x00B72E:
Sonic_UpVelCap:
		tst.b	Obj_Player_Spdsh_Flag(a0)		; is Sonic charging a spindash or in a rolling-only area?
		bne.s	Offset_0x00B742				; if yes, branch
		cmpi.w	#-$FC0,Obj_Speed_Y(a0)			; is Sonic moving up really fast?
		bge.s	Offset_0x00B742				; if not, branch
		move.w	#-$FC0,Obj_Speed_Y(a0)			; cap upward speed

Offset_0x00B742:
		rts
; End of subroutine Sonic_JumpHeight

; ---------------------------------------------------------------------------
; Subroutine that transforms Sonic into Super Sonic if he has enough rings and emeralds
; Effectively unused due to a change in code above
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00B744:
Sonic_CheckGoSuper:
		tst.b	(Super_Sonic_flag).w
		bne.s	Offset_0x00B7B6
		cmpi.b	#7,(Emeralds_Count).w
		bne.s	Offset_0x00B7B6
		cmpi.w	#50,(Ring_count).w
		bcs.s	Offset_0x00B7B6
		tst.b	(Update_HUD_timer).w
		beq.s	Offset_0x00B7B6
		move.b	#1,(Super_Sonic_Palette_Status).w
		move.b	#$F,(Super_Sonic_Palette_Timer).w
		move.b	#1,(Super_Sonic_flag).w
		move.b	#$81,Obj_Player_Control(a0)
		move.b	#$1F,Obj_Ani_Number(a0)
		move.l	#Obj_Super_Sonic_Stars,(Obj_Super_Sonic_Stars_RAM).w
		move.w	#$A00,(a4)
		move.w	#$30,Acceleration(a4)
		move.w	#$100,Deceleration(a4)
		move.b	#0,Obj_P_Invcbility_Time(a0)
		bset	#1,Obj_Player_Status(a0)
		move.w	#signextendB(sfx_SuperTransform),d0
		jsr	(PlaySound).l
		move.w	#mus_SuperSonicUnk,d0
		jmp	(PlaySound).l

Offset_0x00B7B6:
		rts
; End of function Sonic_CheckGoSuper

; ===========================================================================
; ---------------------------------------------------------------------------
; An unused ability that lets Sonic shoot rings while jumping; the rings were
; likely meant to be a placeholder until proper graphics were added, which they
; never were as this was completely scrapped in the final.
;
; Judging from Sonic Origins' concept art of the many shield types, this might've
; been the "attack" ability the Flame Shield (NOT "Fire"!) was intended to have.
;
; However, given that Mecha Sonic throws rings in Knuckles' final boss, maybe it
; really was an actual ring throw ability... yeah, it's complicated.
; Offset_0x00B7B8:
Sonic_ThrowRings:
		bra.w	Offset_0x00B8B6				; immediately skip over all the code
; ---------------------------------------------------------------------------
		btst	#2,Obj_Status(a0)			; is Sonic rolling?
		beq.w	Offset_0x00B8B6				; if not, branch
		move.b	(Control_Ports_Logical_Data+1).w,d0
		andi.b	#button_C_mask,d0		; has C been pressed?
		beq.s	.notRolling				; if not, branch
		move.w	Obj_Speed_X(a0),d2
		bsr.w	AllocateObject
		bne.w	.skip
		bsr.w	Obj_ThrownRing				; load a ring firing right
		move.w	#$800,Obj_Speed_X(a1)
		move.w	#0,Obj_Speed_Y(a1)
		add.w	d2,Obj_Speed_X(a1)
		bsr.w	AllocateObject
		bne.w	.skip
		bsr.w	Obj_ThrownRing				; load a ring firing left
		move.w	#-$800,Obj_Speed_X(a1)
		move.w	#0,Obj_Speed_Y(a1)
		add.w	d2,Obj_Speed_X(a1)
; Offset_0x00B80C:
.skip:
		btst	#2,Obj_Status(a0)			; is Sonic rolling?
		beq.s	.notRolling				; if not, branch
		bclr	#2,Obj_Status(a0)			; clear Sonic's roll status
		; and reset Sonic's size and animation
		move.b	Obj_Height_2(a0),d0
		move.b	Obj_Height_3(a0),Obj_Height_2(a0)
		move.b	Obj_Width_3(a0),Obj_Width_2(a0)
		move.b	#0,Obj_Ani_Number(a0)
		sub.b	Obj_Height_3(a0),d0
		ext.w	d0
		add.w	d0,Obj_Y(a0)
; Offset_0x00B83A:
.notRolling:
		move.b	(Control_Ports_Logical_Data+1).w,d0
		andi.b	#button_B_mask,d0			; has B been pressed?
		beq.s	Offset_0x00B8B6				; if not, branch
		move.w	Obj_Speed_X(a0),d2
		bsr.w	AllocateObject
		bne.w	Offset_0x00B870
		bsr.w	Obj_ThrownRing				; load only one ring facing Sonic's direction
		move.w	#$800,Obj_Speed_X(a1)
		btst	#0,Obj_Status(a0)
		beq.s	Offset_0x00B866
		neg.w	Obj_Speed_X(a1)

Offset_0x00B866:
		move.w	#0,Obj_Speed_Y(a1)
		add.w	d2,Obj_Speed_X(a1)

Offset_0x00B870:
		btst	#2,Obj_Status(a0)			; is Sonic rolling?
		beq.s	.notRolling2				; if not, branch
		bclr	#2,Obj_Status(a0)			; clear Sonic's roll status
		; and reset Sonic's size and animation
		move.b	Obj_Height_2(a0),d0
		move.b	Obj_Height_3(a0),Obj_Height_2(a0)
		move.b	Obj_Width_3(a0),Obj_Width_2(a0)
		move.b	#0,Obj_Ani_Number(a0)
		sub.b	Obj_Height_3(a0),d0
		ext.w	d0
		add.w	d0,Obj_Y(a0)
; Offset_0x00B89E:
.notRolling2:
		; strangely, only the single ring fire clears Sonic's vertical momentum
		move.w	#0,Obj_Speed_Y(a0)
		move.w	#$200,d0
		btst	#0,Obj_Status(a0)
		bne.s	Offset_0x00B8B2
		neg.w	d0

Offset_0x00B8B2:
		add.w	d0,Obj_Speed_X(A0)

Offset_0x00B8B6:
		rts
; End of subroutine Sonic_ThrowRings

; ---------------------------------------------------------------------------
; An early version of what ultimately became Sonic's Hyper Dash ability in
; Sonic 3 & Knuckles; judging from Origins' concept art again, this was the
; original double jump ability of the Lightning Shield.
; Offset_0x00B8B8:
Sonic_HyperDash:
		tst.w	(Dropdash_flag).w
		bne.w	Offset_0x00B952
		move.b	(Control_Ports_Logical_Data+1).w,d0
		andi.b	#button_A_mask,d0
		beq.w	Offset_0x00B952
		move.b	(Control_Ports_Logical_Data).w,d0
		andi.w	#button_up_mask+button_down_mask+button_left_mask+button_right_mask,d0
		beq.s	.noInput
		lsl.w	#2,d0
		lea	Sonic_HyperDash_Velocities(pc,d0.w),a1
		move.w	(a1)+,d0
		move.w	d0,Obj_Speed_X(a0)
		move.w	d0,Obj_Inertia(a0)
		move.w	(a1)+,d0
		move.w	d0,Obj_Speed_Y(a0)
		lea	(Camera_X_Scroll_Delay).w,a1
		cmpa.w	#Obj_Player_One,a0
		beq.s	.notPlayerTwo
		lea	(Camera_X_Scroll_Delay_2P).w,a1
; Offset_0x00B8FA:
.notPlayerTwo:
		move.w	d0,(a1)
		bsr.w	ResetPlayerPositionArray
		move.w	#1,(Dropdash_flag).w
		move.w	#sfx_Roll,d0
		jsr	(PlaySound).l
		rts
; ---------------------------------------------------------------------------
; Offset_0x00B912:
.noInput:
		; if there's no directional input, we just dash forward
		move.w	#$800,d0
		btst	#0,Obj_Status(a0)
		beq.s	.applySpeeds
		neg.w	d0
; Offset_0x00B920:
.applySpeeds:
		move.w	d0,Obj_Speed_X(a0)
		move.w	d0,Obj_Inertia(a0)
		move.w	#0,Obj_Speed_Y(a0)
		lea	(Camera_X_Scroll_Delay).w,a1
		cmpa.w	#Obj_Player_One,a0
		beq.s	.notPlayerTwoAgain
		lea	(Camera_X_Scroll_Delay_2P).w,a1
; Offset_0x00B93C:
.notPlayerTwoAgain:
		move.w	d0,(a1)
		bsr.w	ResetPlayerPositionArray
		move.w	#1,(Dropdash_flag).w
		move.w	#sfx_Roll,d0
		jsr	(PlaySound).l

Offset_0x00B952:
		rts
; ===========================================================================
; Offset_0x00B954:
Sonic_HyperDash_Velocities:
		dc.w	$0000, $0000, $0000, $F800, $0000, $0800, $0000, $0000
		dc.w	$F800, $0000, $F800, $F800, $F800, $0800, $0000, $0000
		dc.w 	$0800, $0000, $0800, $F800, $0800, $0800, $0000, $0000
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Thrown Ring
; ---------------------------------------------------------------------------
; Offset_0x00B994:
Obj_ThrownRing:
		move.l	#ThrownRing_LoadIndex,(a1)
		move.w	Obj_X(a0),Obj_X(a1)
		move.w	Obj_Y(a0),Obj_Y(a1)
		move.l	#Rings_Mappings,Obj_Map(a1)
		move.w	#$26BC,Obj_Art_VRAM(a1)
		move.b	#$84,Obj_Flags(a1)
		move.w	#$180,Obj_Priority(a1)
		move.b	#8,Obj_Width(a1)
		rts
; ---------------------------------------------------------------------------
; Offset_0x00B9C8:
ThrownRing_LoadIndex:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	ThrownRing_Index(pc,d0.w),d1
		jmp	ThrownRing_Index(pc,d1.w)
; ===========================================================================
; Offset_0x00B9D6:
ThrownRing_Index:
		dc.w ThrownRing_Init-ThrownRing_Index
		dc.w ThrownRing_Main-ThrownRing_Index
; ===========================================================================
; Offset_0x00B9DA:
ThrownRing_Init:
		addq.b	#2,Obj_Routine(a0)
		move.b	#2,Obj_Ani_Number(a0)
		move.b	#8,Obj_Height_2(a0)
		move.b	#8,Obj_Width_2(a0)
		bset	#1,Obj_Player_Status(a0)
; ---------------------------------------------------------------------------
; Offset_0x00B9F6:
ThrownRing_Main:
		move.l	a0,a2
		jsr	(Touch_Response).l
		cmpi.b	#2,Obj_Routine(a0)
		beq.s	Offset_0x00BA10
		nop
		nop
		nop
		nop
		nop

Offset_0x00BA10:
		cmpi.b	#2,Obj_Ani_Number(a0)
		beq.s	Offset_0x00BA22
		nop
		nop
		nop
		nop
		nop

Offset_0x00BA22:
		move.b	(Vint_runcount+3).w,d0
		andi.w	#3,d0
		bne.s	Offset_0x00BA36
		addq.b	#1,Obj_Map_Id(a0)
		andi.b	#3,Obj_Map_Id(a0)

Offset_0x00BA36:
		bsr.w	SpeedToPos
		tst.b   Obj_Flags(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite

; ===========================================================================
; Continue with Sonic's code...
; ---------------------------------------------------------------------------
; Subroutine doing the extra logic for Super Sonic
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00BA46:
Sonic_Super:
		tst.b	(Super_Sonic_flag).w
		beq.w	Offset_0x00BAD8
		tst.b	(Update_HUD_timer).w
		beq.s	Sonic_RevertToNormal
		subq.w	#1,(Super_Sonic_Frame_Count).w
		bpl.w	Offset_0x00BAD8		; this is should be a 'bhi' as it actually counts 61 frames instead of 60
		move.w	#60,(Super_Sonic_Frame_Count).w
		tst.w	(Ring_count).w
		beq.s	Sonic_RevertToNormal
		ori.b	#1,(Update_HUD_rings).w
		cmpi.w	#1,(Ring_count).w
		beq.s	.resetHUD
		cmpi.w	#10,(Ring_count).w
		beq.s	.resetHUD
		cmpi.w	#100,(Ring_count).w
		bne.s	.updateHUD
; Offset_0x00BA86:
.resetHUD:
		ori.b	#$80,(Update_HUD_rings).w
; Offset_0x00BA8C:
.updateHUD:
		subq.w	#1,(Ring_count).w
		bne.s	Offset_0x00BAD8
; Offset_0x00BA92:
Sonic_RevertToNormal:
		move.b	#2,(Super_Sonic_Palette_Status).w
		move.w	#$28,(Super_Sonic_Palette_Frame).w
		move.b	#0,(Super_Sonic_flag).w
		move.b	#1,Obj_Ani_Flag(a0)
		move.b	#1,Obj_P_Invcbility_Time(a0)
		move.w	#$600,(a4)
		move.w	#$C,Acceleration(a4)
		move.w	#$80,Deceleration(a4)
		btst	#6,Obj_Status(a0)
		beq.s	Offset_0x00BAD8
		move.w	#$300,(a4)
		move.w	#6,Acceleration(a4)
		move.w	#$40,Deceleration(a4)

Offset_0x00BAD8:
		rts
; End of subroutine Sonic_Super

; ---------------------------------------------------------------------------
; Subroutine to check for starting to charge a spindash
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00BADA: Sonic_Spindash:
Sonic_CheckSpindash:
		tst.b	Obj_Player_Spdsh_Flag(a0)
		bne.s	Sonic_UpdateSpindash
		cmpi.b	#8,Obj_Ani_Number(a0)
		bne.s	Offset_0x00BB28
		move.b	(Control_Ports_Logical_Data+1).w,d0
		andi.b	#button_A_mask+button_B_mask+button_C_mask,d0
		beq.w	Offset_0x00BB28
		move.b	#9,Obj_Ani_Number(a0)
		move.w	#sfx_Roll,d0
		jsr	(PlaySound).l
		addq.l	#4,sp
		move.b	#1,Obj_Player_Spdsh_Flag(a0)
		move.w	#0,Obj_Player_Spdsh_Cnt(a0)
		cmpi.b	#$C,Obj_Subtype(a0)			; if he's drowning, branch to not make dust
		bcs.s	Offset_0x00BB20
		move.b	#2,Obj_Ani_Number(a6)

Offset_0x00BB20:
		bsr.w	Sonic_LevelBoundaries
		bsr.w	Player_AnglePos

Offset_0x00BB28:
		rts
; End of subroutine Sonic_CheckSpindash

; ---------------------------------------------------------------------------
; Subrouting to update an already-charging spindash
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00BB2A:
Sonic_UpdateSpindash:
		move.b	(Control_Ports_Logical_Data).w,d0
		btst	#button_down,d0
		bne.w	Sonic_ChargingSpindash
		move.b	#$E,Obj_Height_2(a0)
		move.b	#7,Obj_Width_2(a0)
		move.b	#2,Obj_Ani_Number(a0)
		addq.w	#5,Obj_Y(a0)
		move.b	#0,Obj_Player_Spdsh_Flag(a0)
		moveq	#0,d0
		move.b	Obj_Player_Spdsh_Cnt(a0),d0
		add.w	d0,d0
		move.w	Sonic_Spindash_Speed(pc,d0.w),Obj_Inertia(a0)
		tst.b	(Super_Sonic_flag).w
		beq.s	Offset_0x00BB6C
		move.w	Super_Sonic_Spindash_Speed(pc,d0.w),Obj_Inertia(a0)

Offset_0x00BB6C:
		move.w	Obj_Inertia(a0),d0
		subi.w	#$800,d0
		add.w	d0,d0
		andi.w	#$1F00,d0			; this is basically useless as the unused bits are never written to anyway
		neg.w	d0
		addi.w	#$2000,d0
		lea	(Camera_X_Scroll_Delay).w,a1
		cmpa.w	#Obj_Player_One,a0
		beq.s	Offset_0x00BB8E
		lea	(Camera_X_Scroll_Delay_2P).w,a1

Offset_0x00BB8E:
		move.w	d0,(a1)
		btst	#0,Obj_Status(a0)
		beq.s	Offset_0x00BB9C
		neg.w	Obj_Inertia(a0)

Offset_0x00BB9C:
		bset	#2,Obj_Status(a0)
		move.b	#0,Obj_Ani_Number(a6)
		moveq	#sfx_Roll,d0
		jsr	(PlaySound).l
		bra.s	Offset_0x00BC1E
; ===========================================================================
; Offset_0x00BBB2:
Sonic_Spindash_Speed:
		dc.w	$800, $880, $900, $980, $A00, $A80, $B00, $B80
		dc.w	$C00

; Offset_0x00BBC4:
Super_Sonic_Spindash_Speed:
		dc.w	$B00, $B80, $C00, $C80, $D00, $D80, $E00, $E80
		dc.w	$F00
; ===========================================================================
; Offset_0x00BBD6:
Sonic_ChargingSpindash:
		tst.w	Obj_Player_Spdsh_Cnt(a0)
		beq.s	Offset_0x00BBEE
		move.w	Obj_Player_Spdsh_Cnt(a0),d0
		lsr.w	#5,d0
		sub.w	d0,Obj_Player_Spdsh_Cnt(a0)
		bcc.s	Offset_0x00BBEE
		move.w	#0,Obj_Player_Spdsh_Cnt(a0)

Offset_0x00BBEE:
		move.b	(Control_Ports_Logical_Data+1).w,d0
		andi.b	#button_A_mask+button_B_mask+button_C_mask,d0
		beq.w	Offset_0x00BC1E
		move.w	#$900,Obj_Ani_Number(a0)
		move.w	#sfx_Roll,d0
		jsr	(PlaySound).l
		addi.w	#$200,Obj_Player_Spdsh_Cnt(a0)
		cmpi.w	#$800,Obj_Player_Spdsh_Cnt(a0)
		bcs.s	Offset_0x00BC1E
		move.w	#$800,Obj_Player_Spdsh_Cnt(a0)

Offset_0x00BC1E:
		addq.l	#4,sp
		cmpi.w	#$60,(a5)
		beq.s	Offset_0x00BC2C
		bcc.s	Offset_0x00BC2A
		addq.w	#4,(a5)

Offset_0x00BC2A:
		subq.w	#2,(a5)

Offset_0x00BC2C:
		bsr.w	Sonic_LevelBoundaries
		bsr.w	Player_AnglePos
		rts
; End of function Sonic_UpdateSpindash


;-------------------------------------------------------------------------------
Sonic_SlopeResist:				             ; Offset_0x00BC36
		move.b  Obj_Angle(A0),d0				; $0026
		addi.b  #$60,d0
		cmpi.b  #$C0,d0
		bcc.s   Offset_0x00BC6A
		move.b  Obj_Angle(A0),d0				; $0026
		jsr	(CalcSine).l		             ; Offset_0x001B20
		muls.w  #$20,d0
		asr.l   #8,d0
		tst.w   Obj_Inertia(A0)				  ; $001C
		beq.s   Offset_0x00BC6C
		bmi.s   Offset_0x00BC66
		tst.w   D0
		beq.s   Offset_0x00BC64
		add.w   D0,Obj_Inertia(A0)		              ; $001C
Offset_0x00BC64:
		rts
Offset_0x00BC66:
		add.w   D0,Obj_Inertia(A0)		              ; $001C
Offset_0x00BC6A:
		rts
Offset_0x00BC6C:
		move.w  D0,d1
		bpl.s   Offset_0x00BC72
		neg.w   D1
Offset_0x00BC72:
		cmpi.w  #$D,d1
		bcs.s   Offset_0x00BC6A
		add.w   D0,Obj_Inertia(A0)		              ; $001C
		rts
;-------------------------------------------------------------------------------
Sonic_RollRepel:				               ; Offset_0x00BC7E
		move.b  Obj_Angle(A0),d0				; $0026
		addi.b  #$60,d0
		cmpi.b  #$C0,d0
		bcc.s   Offset_0x00BCB8
		move.b  Obj_Angle(A0),d0				; $0026
		jsr	(CalcSine).l		             ; Offset_0x001B20
		muls.w  #$50,d0
		asr.l   #8,d0
		tst.w   Obj_Inertia(A0)				  ; $001C
		bmi.s   Offset_0x00BCAE
		tst.w   D0
		bpl.s   Offset_0x00BCA8
		asr.l   #2,d0
Offset_0x00BCA8:
		add.w   D0,Obj_Inertia(A0)		              ; $001C
		rts
Offset_0x00BCAE:
		tst.w   D0
		bmi.s   Offset_0x00BCB4
		asr.l   #2,d0
Offset_0x00BCB4:
		add.w   D0,Obj_Inertia(A0)		              ; $001C
Offset_0x00BCB8:
		rts
;-------------------------------------------------------------------------------
Sonic_SlopeRepel:				              ; Offset_0x00BCBA
		nop
		tst.b   Obj_Player_St_Convex(A0)		         ; $003C
		bne.s   Offset_0x00BCFE
		tst.w   Obj_P_Horiz_Ctrl_Lock(A0)		        ; $0032
		bne.s   Offset_0x00BD16
		move.b  Obj_Angle(A0),d0				; $0026
		addi.b  #$18,d0
		cmpi.b  #$30,d0
		bcs.s   Offset_0x00BCFE
		move.w  Obj_Inertia(A0),d0		              ; $001C
		bpl.s   Offset_0x00BCDE
		neg.w   D0
Offset_0x00BCDE:
		cmpi.w  #$280,d0
		bcc.s   Offset_0x00BCFE
		move.w  #$1E, Obj_P_Horiz_Ctrl_Lock(A0)		; $0032
		move.b  Obj_Angle(A0),d0				; $0026
		addi.b  #$30,d0
		cmpi.b  #$60,d0
		bcs.s   Offset_0x00BD00
		bset    #1,Obj_Status(A0)		             ; $002A
Offset_0x00BCFE:
		rts
Offset_0x00BD00:
		cmpi.b  #$30,d0
		bcs.s   Offset_0x00BD0E
		addi.w  #$80,Obj_Inertia(A0)		          ; $001C
		rts
Offset_0x00BD0E:
		subi.w  #$80,Obj_Inertia(A0)		          ; $001C
		rts
Offset_0x00BD16:
		subq.w  #1,Obj_P_Horiz_Ctrl_Lock(A0)		  ; $0032
		rts
;-------------------------------------------------------------------------------
Sonic_JumpAngle:				               ; Offset_0x00BD1C
		move.b  Obj_Angle(A0),d0				; $0026
		beq.s   Offset_0x00BD36
		bpl.s   Offset_0x00BD2C
		addq.b  #2,d0
		bcc.s   Offset_0x00BD2A
		moveq   #0,d0
Offset_0x00BD2A:
		bra.s   Offset_0x00BD32
Offset_0x00BD2C:
		subq.b  #2,d0
		bcc.s   Offset_0x00BD32
		moveq   #0,d0
Offset_0x00BD32:
		move.b  D0,Obj_Angle(A0)				; $0026
Offset_0x00BD36:
		move.b  Obj_Flip_Angle(A0),d0		           ; $0027
		beq.s   Offset_0x00BD7A
		tst.w   Obj_Inertia(A0)				  ; $001C
		bmi.s   Offset_0x00BD5A
Offset_0x00BD42:
		move.b  Obj_Player_Flip_Speed(A0),d1		    ; $0031
		add.b   D1,d0
		bcc.s   Offset_0x00BD58
		subq.b  #1,Obj_P_Flips_Remaining(A0)		  ; $0030
		bcc.s   Offset_0x00BD58
		move.b  #0,Obj_P_Flips_Remaining(A0)		  ; $0030
		moveq   #0,d0
Offset_0x00BD58:
		bra.s   Offset_0x00BD76
Offset_0x00BD5A:
		tst.b   Obj_Player_Flip_Flag(A0)		         ; $002D
		bne.s   Offset_0x00BD42
		move.b  Obj_Player_Flip_Speed(A0),d1		    ; $0031
		sub.b   D1,d0
		bcc.s   Offset_0x00BD76
		subq.b  #1,Obj_P_Flips_Remaining(A0)		  ; $0030
		bcc.s   Offset_0x00BD76
		move.b  #0,Obj_P_Flips_Remaining(A0)		  ; $0030
		moveq   #0,d0
Offset_0x00BD76:
		move.b  D0,Obj_Flip_Angle(A0)		           ; $0027
Offset_0x00BD7A:
		rts
;-------------------------------------------------------------------------------
Sonic_Floor:						   ; Offset_0x00BD7C
		move.l  (Primary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B4, $FFFFF796
		cmpi.b  #$C, Obj_Player_Top_Solid(A0)		   ; $0046
		beq.s   Offset_0x00BD90
		move.l  (Secondary_Collision_Ptr).w,(Current_Collision_Ptr).w ; $FFFFF7B8, $FFFFF796
Offset_0x00BD90:
		move.b  Obj_Player_LRB_Solid(A0),d5		     ; $0047
		move.w  Obj_Speed_X(A0),d1		              ; $0018
		move.w  Obj_Speed_Y(A0),d2		              ; $001A
		jsr	(CalcAngle).l		            ; Offset_0x001DB8
		subi.b  #$20,d0
		andi.b  #$C0,d0
		cmpi.b  #$40,d0
		beq.w   Offset_0x00BE5A
		cmpi.b  #$80,d0
		beq.w   Offset_0x00BEB4
		cmpi.b  #$C0,d0
		beq.w   Offset_0x00BF10
		bsr.w   Player_HitWall		         ; Offset_0x00A0BC
		tst.w   D1
		bpl.s   Offset_0x00BDD4
		sub.w   D1,Obj_X(A0)				    ; $0010
		move.w  #0,Obj_Speed_X(A0)		          ; $0018
Offset_0x00BDD4:
		bsr.w   Offset_0x009EC6
		tst.w   D1
		bpl.s   Offset_0x00BDE6
		add.w   D1,Obj_X(A0)				    ; $0010
		move.w  #0,Obj_Speed_X(A0)		          ; $0018
Offset_0x00BDE6:
		bsr.w   Player_Check_Floor		     ; Offset_0x009BD4
		tst.w   D1
		bpl.s   Offset_0x00BE58
		move.b  Obj_Speed_Y(A0),d2		              ; $001A
		addq.b  #8,d2
		neg.b   D2
		cmp.b   D2,d1
		bge.s   Offset_0x00BDFE
		cmp.b   D2,d0
		blt.s   Offset_0x00BE58
Offset_0x00BDFE:
		add.w   D1, Obj_Y(A0)				    ; $0014
		move.b  D3, Obj_Angle(A0)				; $0026
		bsr.w   Offset_0x00BF6A
		move.b  D3,d0
		addi.b  #$20,d0
		andi.b  #$40,d0
		bne.s   Offset_0x00BE36
		move.b  D3,d0
		addi.b  #$10,d0
		andi.b  #$20,d0
		beq.s   Offset_0x00BE28
		asr.w   Obj_Speed_Y(A0)				  ; $001A
		bra.s   Offset_0x00BE4A
Offset_0x00BE28:
		move.w  #0, Obj_Speed_Y(A0)		          ; $001A
		move.w  Obj_Speed_X(A0), Obj_Inertia(A0)          ; $0018, $001C
		rts
Offset_0x00BE36:
		move.w  #0, Obj_Speed_X(A0)		          ; $0018
		cmpi.w  #$FC0, Obj_Speed_Y(A0)		          ; $001A
		ble.s   Offset_0x00BE4A
		move.w  #$FC0, Obj_Speed_Y(A0)		          ; $001A
Offset_0x00BE4A:
		move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $001A, $001C
		tst.b   D3
		bpl.s   Offset_0x00BE58
		neg.w   Obj_Inertia(A0)				  ; $001C
Offset_0x00BE58:
		rts
Offset_0x00BE5A:
		bsr.w   Player_HitWall		         ; Offset_0x00A0BC
		tst.w   D1
		bpl.s   Offset_0x00BE72
		sub.w   D1, Obj_X(A0)				    ; $0010
		move.w  #0, Obj_Speed_X(A0)		          ; $0018
		move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $001A, $001C
Offset_0x00BE72:
		bsr.w   Player_DontRunOnWalls		  ; Offset_0x009F1C
		tst.w   D1
		bpl.s   Offset_0x00BE8C
		sub.w   D1, Obj_Y(A0)				    ; $0014
		tst.w   Obj_Speed_Y(A0)				  ; $001A
		bpl.s   Offset_0x00BE8A
		move.w  #0, Obj_Speed_Y(A0)		          ; $001A
Offset_0x00BE8A:
		rts
Offset_0x00BE8C:
		tst.w   Obj_Speed_Y(A0)				  ; $001A
		bmi.s   Offset_0x00BEB2
		bsr.w   Player_Check_Floor		     ; Offset_0x009BD4
		tst.w   D1
		bpl.s   Offset_0x00BEB2
		add.w   D1, Obj_Y(A0)				    ; $0014
		move.b  D3, Obj_Angle(A0)				; $0026
		bsr.w   Offset_0x00BF6A
		move.w  #0, Obj_Speed_Y(A0)		          ; $001A
		move.w  Obj_Speed_X(A0), Obj_Inertia(A0)          ; $0018, $001C
Offset_0x00BEB2:
		rts
Offset_0x00BEB4:
		bsr.w   Player_HitWall		         ; Offset_0x00A0BC
		tst.w   D1
		bpl.s   Offset_0x00BEC6
		sub.w   D1, Obj_X(A0)				    ; $0010
		move.w  #0, Obj_Speed_X(A0)		          ; $0018
Offset_0x00BEC6:
		bsr.w   Offset_0x009EC6
		tst.w   D1
		bpl.s   Offset_0x00BED8
		add.w   D1, Obj_X(A0)				    ; $0010
		move.w  #0, Obj_Speed_X(A0)		          ; $0018
Offset_0x00BED8:
		bsr.w   Player_DontRunOnWalls		  ; Offset_0x009F1C
		tst.w   D1
		bpl.s   Offset_0x00BF0E
		sub.w   D1, Obj_Y(A0)				    ; $0014
		move.b  D3,d0
		addi.b  #$20,d0
		andi.b  #$40,d0
		bne.s   Offset_0x00BEF8
		move.w  #0, Obj_Speed_Y(A0)		          ; $001A
		rts
Offset_0x00BEF8:
		move.b  D3, Obj_Angle(A0)				; $0026
		bsr.w   Offset_0x00BF6A
		move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $001A, $001C
		tst.b   D3
		bpl.s   Offset_0x00BF0E
		neg.w   Obj_Inertia(A0)				  ; $001C
Offset_0x00BF0E:
		rts
Offset_0x00BF10:
		bsr.w   Offset_0x009EC6
		tst.w   D1
		bpl.s   Offset_0x00BF28
		add.w   D1, Obj_X(A0)				    ; $0010
		move.w  #0, Obj_Speed_X(A0)		          ; $0018
		move.w  Obj_Speed_Y(A0), Obj_Inertia(A0)          ; $001A, $001C
Offset_0x00BF28:
		bsr.w   Player_DontRunOnWalls		  ; Offset_0x009F1C
		tst.w   D1
		bpl.s   Offset_0x00BF42
		sub.w   D1, Obj_Y(A0)				    ; $0014
		tst.w   Obj_Speed_Y(A0)				  ; $001A
		bpl.s   Offset_0x00BF40
		move.w  #0, Obj_Speed_Y(A0)		          ; $001A
Offset_0x00BF40:
		rts
Offset_0x00BF42:
		tst.w   Obj_Speed_Y(A0)				  ; $001A
		bmi.s   Offset_0x00BF68
		bsr.w   Player_Check_Floor		     ; Offset_0x009BD4
		tst.w   D1
		bpl.s   Offset_0x00BF68
		add.w   D1, Obj_Y(A0)				    ; $0014
		move.b  D3, Obj_Angle(A0)				; $0026
		bsr.w   Offset_0x00BF6A
		move.w  #0, Obj_Speed_Y(A0)		          ; $001A
		move.w  Obj_Speed_X(A0), Obj_Inertia(A0)          ; $0018, $001C
Offset_0x00BF68:
		rts
Offset_0x00BF6A:
		tst.b   Obj_Player_Spdsh_Flag(A0)		        ; $003D
		bne.s   Sonic_ResetOnFloor_Part2
		move.b  #0, Obj_Ani_Number(A0)		         ; $0020

; ---------------------------------------------------------------------------
; Subroutine to reset Sonic's mode when he lands on the floor
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00BF76:
Sonic_ResetOnFloor:
		cmpi.l	#Obj_Miles,(a0)
		beq.w	Miles_ResetOnFloor

		move.b	Obj_Height_2(a0),d0
		move.b	Obj_Height_3(a0),Obj_Height_2(a0)
		move.b	Obj_Width_3(a0),Obj_Width_2(a0)
		btst	#2,Obj_Status(a0)
		beq.s	Sonic_ResetOnFloor_Part2
		bclr	#2,Obj_Status(a0)
		move.b	#0,Obj_Ani_Number(a0)
		sub.b	Obj_Height_3(a0),d0
		ext.w	d0
		add.w	d0,Obj_Y(a0)
; Offset_0x00BFAE:
Sonic_ResetOnFloor_Part2:
		bclr	#1,Obj_Status(a0)
		bclr	#5,Obj_Status(a0)
		bclr	#4,Obj_Status(a0)
		move.b	#0,Obj_Player_Jump(a0)
		move.w	#0,(Enemy_Hit_Chain_Count).w
		move.b	#0,Obj_Flip_Angle(a0)
		move.b	#0,Obj_Player_Flip_Flag(a0)
		move.b	#0,Obj_P_Flips_Remaining(a0)
		move.b	#0,Obj_Look_Up_Down_Time(a0)
		cmpi.b	#$14,Obj_Ani_Number(a0)
		bne.s	Sonic_ResetOnFloor_Part3
		move.b	#0,Obj_Ani_Number(a0)
; Offset_0x00BFF2:
Sonic_ResetOnFloor_Part3:
		tst.w	(Dropdash_flag).w
		beq.s	Offset_0x00C00E
		bmi.s	Sonic_Dropdash
		asr.w	Obj_Inertia(a0)
		asr.w	Obj_Speed_X(a0)
		move.w	#0,Obj_Speed_Y(a0)
		move.w	#0,(Dropdash_flag).w
Offset_0x00C00E:
		rts
; End of function Sonic_ResetOnFloor

; ---------------------------------------------------------------------------
; Subroutine for Sonic to do a dropdash-like ability (removed in final)
; ---------------------------------------------------------------------------
; Offset_0x00C010:
Sonic_Dropdash:
		move.w	#0,Obj_Speed_Y(a0)
		move.w	#0,(Dropdash_flag).w
		bsr.w	ResetPlayerPositionArray
		move.b	#9,Obj_Ani_Number(a0)
		move.w	#sfx_Roll,d0
		jsr	(PlaySound).l
		move.b	#1,Obj_Player_Spdsh_Flag(a0)
		move.w	#0,Obj_Player_Spdsh_Cnt(a0)
		rts
; End of subroutine Sonic_DropDash

; ===========================================================================
; Offset_0x00C03E:
Sonic_Hurt:
		tst.w	(Debug_Mode_Active).w
		beq.s	Sonic_Hurt_Normal
		btst	#4,(Control_Ports_Buffer_Data+1).w
		beq.s	Sonic_Hurt_Normal
		move.w	#1,(Debug_placement_mode).w
		clr.b	(Control_Locked_Flag_P1).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x00C058:
Sonic_Hurt_Normal:
		jsr	(SpeedToPos).l
		addi.w	#$30,Obj_Speed_Y(a0)
		btst	#6,Obj_Status(a0)
		beq.s	Offset_0x00C072
		subi.w	#$20,Obj_Speed_Y(a0)

Offset_0x00C072:
		cmpi.w	#-$100,(Sonic_Level_Limits_Min_Y).w
		bne.s	Offset_0x00C082
		move.w	(Screen_Wrap_Y).w,d0
		and.w	d0,Obj_Y(a0)

Offset_0x00C082:
		bsr.w	Sonic_HurtStop
		bsr.w	Sonic_LevelBoundaries
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Animate_Check2P
		jmp	(DisplaySprite).l
; ---------------------------------------------------------------------------
; Offset_0x00C098:
Sonic_HurtStop:
		move.w	(Sonic_Level_Limits_Max_Y).w,d0
		addi.w	#$E0,d0
		cmp.w	Obj_Y(a0),d0
		blt.w	KillSonic
		movem.l	a4-a6,-(sp)
		bsr.w	Sonic_Floor
		movem.l	(sp)+,a4-a6
		btst	#1,Obj_Status(a0)
		bne.s	Offset_0x00C0EC
		moveq	#0,d0
		move.w	d0,Obj_Speed_Y(a0)
		move.w	d0,Obj_Speed_X(a0)
		move.w	d0,Obj_Inertia(a0)
		move.b	d0,Obj_Player_Control(a0)
		move.b	#0,Obj_Ani_Number(a0)
		move.w	#$100,Obj_Priority(a0)
		move.b	#2,Obj_Routine(a0)
		move.b	#$78,Obj_P_Invunerblt_Time(a0)
		move.b	#0,Obj_Player_Spdsh_Flag(a0)

Offset_0x00C0EC:
		rts
; ---------------------------------------------------------------------------
; Offset_0x00C0EE:
KillSonic:
		jmp	(Kill_Player).l
; ===========================================================================
; Offset_0x00CF4:
Sonic_Death:
		tst.w	(Debug_Mode_Active).w
		beq.s	Offset_0x00C10E
		btst	#4,(Control_Ports_Buffer_Data+$0001).w
		beq.s	Offset_0x00C10E
		move.w	#1,(Debug_placement_mode).w
		clr.b	(Control_Locked_Flag_P1).w
		rts
; ---------------------------------------------------------------------------

Offset_0x00C10E:
		bsr.w	Player_GameOver
		jsr	(ObjectFall).l
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Animate_Check2P
		jmp	(DisplaySprite).l
; ===========================================================================
; Offset_0x00C126:
Player_GameOver:
		cmpa.w	#Obj_Player_One,a0
		bne.s	Offset_0x00C138
		move.w	(Camera_Y).w,d0
		move.b	#1,(Sonic_Scroll_Lock_Flag).w
		bra.s	Offset_0x00C142
; ---------------------------------------------------------------------------

Offset_0x00C138:
		move.w	(Camera_Y_P2).w,d0
		move.b	#1,(Miles_Scroll_Lock_Flag).w

Offset_0x00C142:
		move.b	#0,Obj_Player_Spdsh_Flag(a0)
		addi.w	#$100,d0
		tst.w	(Two_Player_Flag).w
		beq.s	Offset_0x00C156
		subi.w	#$70,d0

Offset_0x00C156:
		cmp.w	Obj_Y(a0),d0
		bge.w	Offset_0x00C20E
		tst.w	(Two_Player_Flag).w
		bne.w	Player_Respawning
		cmpi.b	#1,Obj_Player_Selected(a0)
		bne.s	Sonic_GameOver
		cmpi.w	#2,(Player_Selected_Flag).w
		beq.s	Sonic_GameOver
		move.b	#2,Obj_Routine(a0)
		bra.w	Miles_CPU_Despawn
; ---------------------------------------------------------------------------
; Offset_0x00C180:
Sonic_GameOver:
		move.b	#8,Obj_Routine(a0)
		move.w	#$3C,Obj_Player_Spdsh_Cnt(a0)
		addq.b	#1,(Update_HUD_lives).w
		subq.b	#1,(Life_count).w
		bne.s	Sonic_TimeOver
		move.w	#0,Obj_Player_Spdsh_Cnt(a0)
		move.l	#Obj_Time_Over_Game_Over,(Obj_02_Mem_Address).w
		move.l	#Obj_Time_Over_Game_Over,(Obj_Dynamic_RAM).w
		move.b	#0,(Obj_02_Mem_Address+Obj_Map_Id).w
		move.b	#1,(Obj_Dynamic_RAM+Obj_Map_Id).w
		move.w	a0,(Obj_02_Mem_Address+Obj_Parent_Ref).w
		clr.b	(Time_Over_flag).w
; Offset_0x00C1C0:
Sonic_Finished:
		clr.b	(Update_HUD_timer).w
		clr.b	(HUD_Timer_Refresh_Flag_P2).w
		move.b	#8,Obj_Routine(a0)
		move.w	#mus_GameOver,d0
		jsr	(PlaySound).l
		moveq	#id_PLC_GameOver,d0
		jmp	(LoadPLC).l
; ===========================================================================
; Offset_0x00C1E0:
Sonic_TimeOver:
		tst.b	(Time_Over_flag).w
		beq.s	Offset_0x00C20E
		move.w	#0,Obj_Player_Spdsh_Cnt(a0)
		move.l	#Obj_Time_Over_Game_Over,(Obj_02_Mem_Address).w
		move.l	#Obj_Time_Over_Game_Over,(Obj_Dynamic_RAM).w
		move.b	#2,(Obj_02_Mem_Address+Obj_Map_Id).w
		move.b	#3,(Obj_Dynamic_RAM+Obj_Map_Id).w
		move.w	a0,(Obj_02_Mem_Address+Obj_Parent_Ref).w
		bra.s	Sonic_Finished

Offset_0x00C20E:
		rts
; ===========================================================================
; Offset_0x00C210:
Player_Respawning:
		move.b	#2,Obj_Routine(a0)
		cmpa.w	#Obj_Player_One,a0
		bne.s	Tails_Respawning

; Sonic_Respawning:
		move.b	#0,(Sonic_Scroll_Lock_Flag).w
		move.w	(Saved_Obj_X_P1).w,Obj_X(a0)
		move.w	(Saved_Obj_Y_P1).w,Obj_Y(a0)
		move.w	(Saved_Obj_Art_VRAM_P1).w,Obj_Art_VRAM(a0)
		move.w	(Saved_Top_Solid_P1).w,Obj_Player_Top_Solid(a0)
		clr.w	(Ring_count).w
		clr.b	(Extra_life_flags).w
		bra.s	Offset_0x00C26A
; ---------------------------------------------------------------------------
; Offset_0x00C244:
Tails_Respawning:
		move.b	#0,(Miles_Scroll_Lock_Flag).w
		move.w	(Saved_Obj_X_P2).w,Obj_X(a0)
		move.w	(Saved_Obj_Y_P2).w,Obj_Y(a0)
		move.w	(Saved_Obj_Art_VRAM_P2).w,Obj_Art_VRAM(a0)
		move.w	(Saved_Top_Solid_P2).w,Obj_Player_Top_Solid(a0)
		clr.w	(Ring_Count_Address_P2).w
		clr.b	(Ring_Status_Flag_P2).w

Offset_0x00C26A:
		move.b	#0,Obj_Player_Control(a0)
		move.b	#5,Obj_Ani_Number(a0)
		move.w	#0,Obj_Speed_X(a0)
		move.w	#0,Obj_Speed_Y(a0)
		move.w	#0,Obj_Inertia(a0)
		move.b	#2,Obj_Status(a0)
		move.w	#0,Obj_P_Horiz_Ctrl_Lock(a0)
		move.w	#0,Obj_Player_Spdsh_Cnt(a0)
		rts
; ===========================================================================
; Offset_0x00C29C:
Sonic_ResetLevel:
		tst.w	Obj_Player_Spdsh_Cnt(a0)
		beq.s	Offset_0x00C2AE
		subq.w	#1,Obj_Player_Spdsh_Cnt(a0)
		bne.s	Offset_0x00C2AE
		move.w	#1,(Level_inactive_flag).w

Offset_0x00C2AE:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to animate Sonic's sprites
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00C2B0:
Sonic_Animate:
		tst.w	(Camera_RAM).w
		bne.s	Offset_0x00C2C2
		tst.w	(Vertical_Scrolling).w
		bne.s	Offset_0x00C2C2
		move.b	#2,Obj_Routine(a0)

Offset_0x00C2C2:
		bsr.w	Sonic_Animate_Check2P
		jmp	(DisplaySprite).l
;-------------------------------------------------------------------------------
; Offset_0x00C2CC:
Sonic_Animate_Check2P:
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x00C2D8
		bsr.s	Sonic_Animate1P
		bra.w	LoadSonicDynamicPLC

Offset_0x00C2D8:
		bsr.w	Sonic_Or_Knuckles_Animate_Sprite_2P
		bra.w	LoadSonicDynamicPLC_2P
;-------------------------------------------------------------------------------
; Offset_0x00C2E0: Sonic_Animate_2:
Sonic_Animate1P:
		lea	(Sonic_Animate_Data).l,a1
		tst.b	(Super_Sonic_flag).w
		beq.s	Sonic_Animate_Sprite
		lea	(Super_Sonic_Animate_Data).l,a1
; Offset_0x00C2F2:
Sonic_Animate_Sprite:
		moveq	#0,d0
		move.b	Obj_Ani_Number(a0),d0
		cmp.b	Obj_Ani_Flag(a0),d0	; has the animation changed?
		beq.s	SAnim_Do		; if not, branch
		move.b	d0,Obj_Ani_Flag(a0)	; set previous animation
		move.b	#0,Obj_Ani_Frame(a0)	; reset animation frame
		move.b	#0,Obj_Ani_Time(a0)	; reset frame duration
		bclr	#5,Obj_Status(a0)
; Offset_0x00C314:
SAnim_Do:
		add.w	d0,d0
		adda.w	(a1,d0.w),a1		; calculate address of appropriate animation script
		move.b	(a1),d0
		bmi.s	SAnim_WalkRun		; if animation is walk/run/roll/jump, branch
		move.b	Obj_Status(a0),d1
		andi.b	#1,d1
		andi.b	#$FC,Obj_Flags(a0)
		or.b	d1,Obj_Flags(a0)
		subq.b	#1,Obj_Ani_Time(a0)	; subtract 1 from frame duration
		bpl.s	Offset_0x00C352		; if time remains, branch
		move.b	d0,Obj_Ani_Time(a0)	; load frame duration

Offset_0x00C33A:
		moveq	#0,d1
		move.b	Obj_Ani_Frame(a0),d1	; load current frame
		move.b	1(a1,d1.w),d0		; read sprite number from script
		cmpi.b	#$FC,d0
		bcc.s	Offset_0x00C354		; if animation is complete, branch

Offset_0x00C34A:
		move.b	d0,Obj_Map_Id(a0)	; load sprite number
		addq.b	#1,Obj_Ani_Frame(a0)	; go to next frame

Offset_0x00C352:
		rts

Offset_0x00C354:
		addq.b  #1,d0
		bne.s   Offset_0x00C364
		move.b  #0, Obj_Ani_Frame(A0)		          ; $0023
		move.b  1(A1),d0
		bra.s   Offset_0x00C34A
Offset_0x00C364:
		addq.b  #1,d0
		bne.s   Offset_0x00C378
		move.b  2(A1,d1),d0
		sub.b   D0, Obj_Ani_Frame(A0)		            ; $0023
		sub.b   D0,d1
		move.b  1(A1,d1),d0
		bra.s   Offset_0x00C34A
Offset_0x00C378:
		addq.b  #1,d0
		bne.s   Offset_0x00C382
		move.b  2(A1,d1), Obj_Ani_Number(A0)		  ; $0020
Offset_0x00C382:
		rts
; ===========================================================================
; Offset_0x00C384:
SAnim_WalkRun:
		addq.b  #1,d0
		bne.w   Offset_0x00C516
		moveq   #0,d0
		move.b  Obj_Flip_Angle(A0),d0
		bne.w   Offset_0x00C4B0
		moveq   #0,d1
		move.b  Obj_Angle(A0),d0
		bmi.s   Offset_0x00C3A0
		beq.s   Offset_0x00C3A0
		subq.b  #1,d0

Offset_0x00C3A0:
		move.b  Obj_Status(A0),d2
		andi.b  #1,d2
		bne.s   Offset_0x00C3AC
		not.b   D0

Offset_0x00C3AC:
		addi.b  #$10,d0
		bpl.s   Offset_0x00C3B4
		moveq   #3,d1

Offset_0x00C3B4:
		andi.b  #$FC, Obj_Flags(A0)
		eor.b   D1,d2
		or.b    D2, Obj_Flags(A0)
		btst    #5, Obj_Status(A0)
		bne.w   Offset_0x00C55E
		lsr.b   #4,d0
		andi.b  #6,d0
		move.w  Obj_Inertia(A0),d2
		bpl.s   Offset_0x00C3D8
		neg.w   D2

Offset_0x00C3D8:
		tst.b   Obj_Player_Status(A0)
		bpl.w   Offset_0x00C3E2
		add.w   D2,d2

Offset_0x00C3E2:
		tst.b   (Super_Sonic_flag).w
		bne.s   Offset_0x00C43E
		lea     (Offset_0x00C5F6).l,a1
		cmpi.w  #$600,d2
		bcc.s   Offset_0x00C3FC
		lea     (Offset_0x00C5EC).l,a1
		add.b   D0,d0

Offset_0x00C3FC:
		add.b   D0,d0
		move.b  D0,d3
		moveq   #0,d1
		move.b  Obj_Ani_Frame(A0),d1
		move.b  1(A1,d1),d0
		cmpi.b  #$FF,d0
		bne.s   Offset_0x00C41A
		move.b  #0, Obj_Ani_Frame(A0)
		move.b  1(A1),d0

Offset_0x00C41A:
		move.b  D0, Obj_Map_Id(A0)
		add.b   D3, Obj_Map_Id(A0)
		subq.b  #1, Obj_Ani_Time(A0)
		bpl.s   Offset_0x00C43C
		neg.w   D2
		addi.w  #$800,d2
		bpl.s   Offset_0x00C432
		moveq   #0,d2

Offset_0x00C432:
		lsr.w   #8,d2
		move.b  D2, Obj_Ani_Time(A0)
		addq.b  #1, Obj_Ani_Frame(A0)

Offset_0x00C43C:
		rts
; ===========================================================================

Offset_0x00C43E:
		lea     (Offset_0x00C7B2).l,a1
		cmpi.w  #$800,d2
		bcc.s   Offset_0x00C456
		lea     (Offset_0x00C7A8).l,a1
		add.b   D0,d0
		add.b   D0,d0
		bra.s   Offset_0x00C458
Offset_0x00C456:
		lsr.b   #1,d0
Offset_0x00C458:
		move.b  D0,d3
		moveq   #0,d1
		move.b  Obj_Ani_Frame(A0),d1		            ; $0023
		move.b  1(A1,d1),d0
		cmpi.b  #$FF,d0
		bne.s   Offset_0x00C474
		move.b  #0, Obj_Ani_Frame(A0)		          ; $0023
		move.b  1(A1),d0
Offset_0x00C474:
		move.b  D0, Obj_Map_Id(A0)		               ; $0022
		add.b   D3, Obj_Map_Id(A0)		               ; $0022
		move.b  (Level_frame_counter+1).w,d1		; $FFFFFE05
		andi.b  #3,d1
		bne.s   Offset_0x00C494
		cmpi.b  #$B5, Obj_Map_Id(A0)		             ; $0022
		bcc.s   Offset_0x00C494
		addi.b  #$20, Obj_Map_Id(A0)		             ; $0022
Offset_0x00C494:
		subq.b  #1, Obj_Ani_Time(A0)		           ; $0024
		bpl.s   Offset_0x00C4AE
		neg.w   D2
		addi.w  #$800,d2
		bpl.s   Offset_0x00C4A4
		moveq   #0,d2
Offset_0x00C4A4:
		lsr.w   #8,d2
		move.b  D2, Obj_Ani_Time(A0)		             ; $0024
		addq.b  #1, Obj_Ani_Frame(A0)		          ; $0023
Offset_0x00C4AE:
		rts
Offset_0x00C4B0:
		move.b  Obj_Flip_Angle(A0),d0		           ; $0027
		moveq   #0,d1
		move.b  Obj_Status(A0),d2		               ; $002A
		andi.b  #1,d2
		bne.s   Offset_0x00C4DE
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		addi.b  #$B,d0
		divu.w  #$16,d0
		addi.b  #$5F,d0
		move.b  D0, Obj_Map_Id(A0)		               ; $0022
		move.b  #0, Obj_Ani_Time(A0)		           ; $0024
		rts
Offset_0x00C4DE:
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		tst.b   Obj_Player_Flip_Flag(A0)		         ; $002D
		beq.s   Offset_0x00C4F6
		ori.b   #1, Obj_Flags(A0)		              ; $0004
		addi.b  #$B,d0
		bra.s   Offset_0x00C502
Offset_0x00C4F6:
		ori.b   #3, Obj_Flags(A0)		              ; $0004
		neg.b   D0
		addi.b  #$8F,d0
Offset_0x00C502:
		divu.w  #$16,d0
		addi.b  #$5F,d0
		move.b  D0, Obj_Map_Id(A0)		               ; $0022
		move.b  #0, Obj_Ani_Time(A0)		           ; $0024
		rts
Offset_0x00C516:
		subq.b  #1, Obj_Ani_Time(A0)		           ; $0024
		bpl.w	Offset_0x00C352
		move.w  Obj_Inertia(A0),d2		              ; $001C
		bpl.s   Offset_0x00C526
		neg.w   D2
Offset_0x00C526:
		lea     (Offset_0x00C60A).l,a1
		cmpi.w  #$0600,d2
		bcc.s   Offset_0x00C538
		lea     (Offset_0x00C600).l,a1
Offset_0x00C538:
		neg.w   D2
		addi.w  #$400,d2
		bpl.s   Offset_0x00C542
		moveq   #0,d2
Offset_0x00C542:
		lsr.w   #8,d2
		move.b  D2, Obj_Ani_Time(A0)		             ; $0024
		move.b  Obj_Status(A0),d1		               ; $002A
		andi.b  #1,d1
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		or.b    D1, Obj_Flags(A0)				; $0004
		bra.w	Offset_0x00C33A
Offset_0x00C55E:
		subq.b  #1, Obj_Ani_Time(A0)		           ; $0024
		bpl.w	Offset_0x00C352
		move.w  Obj_Inertia(A0),d2		              ; $001C
		bmi.s   Offset_0x00C56E
		neg.w   D2
Offset_0x00C56E:
		addi.w  #$800,d2
		bpl.s   Offset_0x00C576
		moveq   #0,d2
Offset_0x00C576:
		lsr.w   #6,d2
		move.b  D2, Obj_Ani_Time(A0)		             ; $0024
		lea     (Offset_0x00C614).l,a1
		tst.b   (Super_Sonic_flag).w		         ; $FFFFFE19
		beq.s   Offset_0x00C58E
		lea     (Offset_0x00C7BC).l,a1
Offset_0x00C58E:
		move.b  Obj_Status(A0),d1		               ; $002A
		andi.b  #1,d1
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		or.b    D1, Obj_Flags(A0)				; $0004
		bra.w	Offset_0x00C33A
;-------------------------------------------------------------------------------
Sonic_Animate_Data:				            ; Offset_0x00C5A4
		dc.w	Offset_0x00C5EC-Sonic_Animate_Data
		dc.w	Offset_0x00C5F6-Sonic_Animate_Data
		dc.w	Offset_0x00C600-Sonic_Animate_Data
		dc.w	Offset_0x00C60A-Sonic_Animate_Data
		dc.w	Offset_0x00C614-Sonic_Animate_Data
		dc.w	Offset_0x00C61E-Sonic_Animate_Data
		dc.w	Offset_0x00C6D4-Sonic_Animate_Data
		dc.w	Offset_0x00C6DA-Sonic_Animate_Data
		dc.w	Offset_0x00C6DF-Sonic_Animate_Data
		dc.w	Offset_0x00C6E4-Sonic_Animate_Data
		dc.w	Offset_0x00C6F0-Sonic_Animate_Data
		dc.w	Offset_0x00C6F4-Sonic_Animate_Data
		dc.w	Offset_0x00C6F8-Sonic_Animate_Data
		dc.w	Offset_0x00C6FE-Sonic_Animate_Data
		dc.w	Offset_0x00C705-Sonic_Animate_Data
		dc.w	Offset_0x00C709-Sonic_Animate_Data
		dc.w	Offset_0x00C710-Sonic_Animate_Data
		dc.w	Offset_0x00C714-Sonic_Animate_Data
		dc.w	Offset_0x00C718-Sonic_Animate_Data
		dc.w	Offset_0x00C71E-Sonic_Animate_Data
		dc.w	Offset_0x00C723-Sonic_Animate_Data
		dc.w	Offset_0x00C727-Sonic_Animate_Data
		dc.w	Offset_0x00C72E-Sonic_Animate_Data
		dc.w	Offset_0x00C731-Sonic_Animate_Data
		dc.w	Offset_0x00C734-Sonic_Animate_Data
		dc.w	Offset_0x00C737-Sonic_Animate_Data
		dc.w	Offset_0x00C737-Sonic_Animate_Data
		dc.w	Offset_0x00C73A-Sonic_Animate_Data
		dc.w	Offset_0x00C73E-Sonic_Animate_Data
		dc.w	Offset_0x00C741-Sonic_Animate_Data
		dc.w	Offset_0x00C745-Sonic_Animate_Data
		dc.w	Offset_0x00C7D9-Sonic_Animate_Data
		dc.w	Offset_0x00C74D-Sonic_Animate_Data
		dc.w	Offset_0x00C751-Sonic_Animate_Data
		dc.w	Offset_0x00C755-Sonic_Animate_Data
		dc.w	Offset_0x00C75F-Sonic_Animate_Data
Offset_0x00C5EC:
		dc.b    $FF, $0F, $10, $11, $12, $13, $14, $0D
		dc.b    $0E, $FF
Offset_0x00C5F6:
		dc.b    $FF, $2D, $2E, $2F, $30, $FF, $FF, $FF
		dc.b    $FF, $FF
Offset_0x00C600:
		dc.b    $FE, $3D, $41, $3E, $41, $3F, $41, $40
		dc.b    $41, $FF
Offset_0x00C60A:
		dc.b    $FE, $3D, $41, $3E, $41, $3F, $41, $40
		dc.b    $41, $FF
Offset_0x00C614:
		dc.b    $FD, $48, $49, $4A, $4B, $FF, $FF, $FF
		dc.b    $FF, $FF
Offset_0x00C61E:
		dc.b    $05, $01, $01, $01, $01, $01, $01, $01
		dc.b    $01, $01, $01, $01, $01, $01, $01, $01
		dc.b    $01, $01, $01, $01, $01, $01, $01, $01
		dc.b    $01, $01, $01, $01, $01, $01, $01, $02
		dc.b    $03, $03, $03, $03, $03, $04, $04, $04
		dc.b    $05, $05, $05, $04, $04, $04, $05, $05
		dc.b    $05, $04, $04, $04, $05, $05, $05, $04
		dc.b    $04, $04, $05, $05, $05, $06, $06, $06
		dc.b    $06, $06, $06, $06, $06, $06, $06, $04
		dc.b    $04, $04, $05, $05, $05, $04, $04, $04
		dc.b    $05, $05, $05, $04, $04, $04, $05, $05
		dc.b    $05, $04, $04, $04, $05, $05, $05, $06
		dc.b    $06, $06, $06, $06, $06, $06, $06, $06
		dc.b    $06, $04, $04, $04, $05, $05, $05, $04
		dc.b    $04, $04, $05, $05, $05, $04, $04, $04
		dc.b    $05, $05, $05, $04, $04, $04, $05, $05
		dc.b    $05, $06, $06, $06, $06, $06, $06, $06
		dc.b    $06, $06, $06, $04, $04, $04, $05, $05
		dc.b    $05, $04, $04, $04, $05, $05, $05, $04
		dc.b    $04, $04, $05, $05, $05, $04, $04, $04
		dc.b    $05, $05, $05, $06, $06, $06, $06, $06
		dc.b    $06, $06, $06, $06, $06, $07, $08, $08
		dc.b    $08, $09, $09, $09, $FE, $06
Offset_0x00C6D4:
		dc.b    $09, $CC, $CD, $CE, $CD, $FF
Offset_0x00C6DA:
		dc.b    $05, $0B, $0C, $FE, $01
Offset_0x00C6DF:
		dc.b    $05, $4C, $4D, $FE, $01
Offset_0x00C6E4:
		dc.b    $00, $42, $43, $42, $44, $42, $45, $42
		dc.b    $46, $42, $47, $FF
Offset_0x00C6F0:
		dc.b    $01, $02, $FD, $00
Offset_0x00C6F4:
		dc.b    $03, $0A, $FD, $00
Offset_0x00C6F8:
		dc.b    $03, $C8, $C9, $CA, $CB, $FF
Offset_0x00C6FE:
		dc.b    $05, $D2, $D3, $D4, $D5, $FD, $00
Offset_0x00C705:
		dc.b    $07, $54, $59, $FF
Offset_0x00C709:
		dc.b    $07, $54, $55, $56, $57, $58, $FF
Offset_0x00C710:
		dc.b    $2F, $5B, $FD, $00
Offset_0x00C714:
		dc.b    $01, $50, $51, $FF
Offset_0x00C718:
		dc.b    $0F, $43, $43, $43, $FE, $01
Offset_0x00C71E:
		dc.b    $0F, $43, $44, $FE, $01
Offset_0x00C723:
		dc.b    $13, $6B, $6C, $FF
Offset_0x00C727:
		dc.b    $0B, $5A, $5A, $11, $12, $FD, $00
Offset_0x00C72E:
		dc.b    $20, $5E, $FF
Offset_0x00C731:
		dc.b    $20, $5D, $FF
Offset_0x00C734:
		dc.b    $20, $5C, $FF
Offset_0x00C737:
		dc.b    $40, $4E, $FF
Offset_0x00C73A:
		dc.b    $09, $4E, $4F, $FF
Offset_0x00C73E:
		dc.b    $77, $00, $FF
Offset_0x00C741:
		dc.b    $13, $D0, $D1, $FF
Offset_0x00C745:
		dc.b    $03, $CF, $C8, $C9, $CA, $CB, $FE, $04
Offset_0x00C74D:
		dc.b    $09, $08, $09, $FF
Offset_0x00C751:
		dc.b    $03, $07, $FD, $00
Offset_0x00C755:
		dc.b    $0B, $ED, $EE, $EF, $F0, $F1, $F0, $EF
		dc.b    $EE, $FF
Offset_0x00C75F:
		dc.b    $0B, $ED, $EE, $EF, $F0, $F1, $FD, $00
		even
;-------------------------------------------------------------------------------
Super_Sonic_Animate_Data:				      ; Offset_0x00C768
		dc.w	Offset_0x00C7A8-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C7B2-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C600-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C60A-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C7BC-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C7C6-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C7CC-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C6DA-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C7D6-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C6E4-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C6F0-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C6F4-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C6F8-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C6FE-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C705-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C709-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C710-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C714-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C718-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C71E-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C723-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C727-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C72E-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C731-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C734-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C737-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C737-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C73A-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C73E-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C741-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C745-Super_Sonic_Animate_Data
		dc.w	Offset_0x00C7D9-Super_Sonic_Animate_Data
Offset_0x00C7A8:
		dc.b    $FF, $77, $78, $79, $7A, $7B, $7C, $75
		dc.b    $76, $FF
Offset_0x00C7B2:
		dc.b    $FF, $B5, $B9, $FF, $FF, $FF, $FF, $FF
		dc.b    $FF, $FF
Offset_0x00C7BC:
		dc.b    $FD, $BD, $BE, $BF, $C0, $FF, $FF, $FF
		dc.b    $FF, $FF
Offset_0x00C7C6:
		dc.b    $07, $72, $73, $74, $73, $FF
Offset_0x00C7CC:
		dc.b    $09, $C2, $C3, $C4, $C3, $C5, $C6, $C7
		dc.b    $C6, $FF
Offset_0x00C7D6:
		dc.b    $05, $C1, $FF
Offset_0x00C7D9:
		dc.b    $02, $6D, $6D, $6E, $6E, $6F, $70, $71
		dc.b    $70, $71, $70, $71, $70, $71, $FD, $00
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00C7EA: Load_Sonic_Dynamic_PLC:
LoadSonicDynamicPLC:
		moveq	#0,d0
		move.b	Obj_Map_Id(a0),d0

Load_Sonic_Dynamic_PLC_D0:
		cmp.b	(Sonic_Previous_Frame).w,d0
		beq.s	Offset_0x00C83C
		move.b	d0,(Sonic_Previous_Frame).w
		lea	(Sonic_Dyn_Script).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	Offset_0x00C83C
		move.w	#($680&$7FF)<<5,d4
; Offset_0x00C818: Loop_Load_Sonic_Art:
.loadSonicArt:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#Art_Sonic,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,.loadSonicArt

Offset_0x00C83C:
		rts
; End of function LoadSonicDynamicPLC

;-------------------------------------------------------------------------------
Sonic_Or_Knuckles_Animate_Sprite_2P:		           ; Offset_0x00C83E
		lea	(Sonic_2P_AnimateData).l,a1             ; Offset_0x00CA8C
		tst.b   Obj_Player_Selected(A0)		          ; $0038
		beq.s   Sonic_Or_Knuckles_Animate_Sprite_2P_A1 ; Offset_0x00C850
		lea	(Knuckles_2P_AnimateData).l,a1          ; Offset_0x00CAD4
Sonic_Or_Knuckles_Animate_Sprite_2P_A1:		        ; Offset_0x00C850
		moveq   #0,d0
		move.b  Obj_Ani_Number(A0),d0		           ; $0020
		cmp.b   Obj_Ani_Flag(A0),d0		             ; $0021
		beq.s   Offset_0x00C872
		move.b  D0, Obj_Ani_Flag(A0)		             ; $0021
		move.b  #0, Obj_Ani_Frame(A0)		          ; $0023
		move.b  #0, Obj_Ani_Time(A0)		           ; $0024
		bclr    #5, Obj_Status(A0)		             ; $002A
Offset_0x00C872:
		add.w   D0,d0
		adda.w  (A1,d0),a1
		move.b  (A1),d0
		bmi.s   Offset_0x00C8E2
		move.b  Obj_Status(A0),d1		               ; $002A
		andi.b  #1,d1
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		or.b    D1, Obj_Flags(A0)				; $0004
		subq.b  #1, Obj_Ani_Time(A0)		           ; $0024
		bpl.s   Offset_0x00C8B0
		move.b  D0, Obj_Ani_Time(A0)		             ; $0024
Offset_0x00C898:
		moveq   #0,d1
		move.b  Obj_Ani_Frame(A0),d1		            ; $0023
		move.b  1(A1,d1),d0
		cmpi.b  #$FC,d0
		bcc.s   Offset_0x00C8B2
Offset_0x00C8A8:
		move.b  D0, Obj_Map_Id(A0)		               ; $0022
		addq.b  #1, Obj_Ani_Frame(A0)		          ; $0023
Offset_0x00C8B0:
		rts
Offset_0x00C8B2:
		addq.b  #1,d0
		bne.s   Offset_0x00C8C2
		move.b  #0, Obj_Ani_Frame(A0)		          ; $0023
		move.b  1(A1),d0
		bra.s   Offset_0x00C8A8
Offset_0x00C8C2:
		addq.b  #1,d0
		bne.s   Offset_0x00C8D6
		move.b  2(A1,d1),d0
		sub.b   D0, Obj_Ani_Frame(A0)		            ; $0023
		sub.b   D0,d1
		move.b  1(A1,d1),d0
		bra.s   Offset_0x00C8A8
Offset_0x00C8D6:
		addq.b  #1,d0
		bne.s   Offset_0x00C8E0
		move.b  2(A1,d1), Obj_Ani_Number(A0)		  ; $0020
Offset_0x00C8E0:
		rts
Offset_0x00C8E2:
		addq.b  #1,d0
		bne.w   Offset_0x00C9FC
		moveq   #0,d0
		move.b  Obj_Flip_Angle(A0),d0		           ; $0027
		bne.w   Offset_0x00C996
		moveq   #0,d1
		move.b  Obj_Angle(A0),d0				; $0026
		bmi.s   Offset_0x00C8FE
		beq.s   Offset_0x00C8FE
		subq.b  #1,d0
Offset_0x00C8FE:
		move.b  Obj_Status(A0),d2		               ; $002A
		andi.b  #1,d2
		bne.s   Offset_0x00C90A
		not.b   D0
Offset_0x00C90A:
		addi.b  #$10,d0
		bpl.s   Offset_0x00C912
		moveq   #3,d1
Offset_0x00C912:
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		eor.b   D1,d2
		or.b    D2, Obj_Flags(A0)				; $0004
		btst    #5, Obj_Status(A0)		             ; $002A
		bne.w   Offset_0x00CA44
		lsr.b   #5,d0
		andi.b  #3,d0
		move.w  Obj_Inertia(A0),d2		              ; $001C
		bpl.s   Offset_0x00C936
		neg.w   D2
Offset_0x00C936:
		tst.b   Obj_Player_Status(A0)		            ; $002F
		bpl.w   Offset_0x00C940
		add.w   D2,d2
Offset_0x00C940:
		move.b  D0,d3
		lea     (Offset_0x00CB22).l,a1
		cmpi.w  #$600,d2
		bcc.s   Offset_0x00C956
		lea     (Offset_0x00CB1C).l,a1
		add.b   D0,d0
Offset_0x00C956:
		add.b   D0,d3
		moveq   #0,d1
		move.b  Obj_Ani_Frame(A0),d1		            ; $0023
		move.b  1(A1,d1),d0
		cmpi.b  #$FF,d0
		bne.s   Offset_0x00C972
		move.b  #0, Obj_Ani_Frame(A0)		          ; $0023
		move.b  1(A1),d0
Offset_0x00C972:
		move.b  D0, Obj_Map_Id(A0)		               ; $0022
		add.b   D3, Obj_Map_Id(A0)		               ; $0022
		subq.b  #1, Obj_Ani_Time(A0)		           ; $0024
		bpl.s   Offset_0x00C994
		neg.w   D2
		addi.w  #$800,d2
		bpl.s   Offset_0x00C98A
		moveq   #0,d2
Offset_0x00C98A:
		lsr.w   #8,d2
		move.b  D2, Obj_Ani_Time(A0)		             ; $0024
		addq.b  #1, Obj_Ani_Frame(A0)		          ; $0023
Offset_0x00C994:
		rts
Offset_0x00C996:
		move.b  Obj_Flip_Angle(A0),d0		           ; $0027
		moveq   #0,d1
		move.b  Obj_Status(A0),d2		               ; $002A
		andi.b  #1,d2
		bne.s   Offset_0x00C9C4
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		addi.b  #$16,d0
		divu.w  #$2C,d0
		addi.b  #$15,d0
		move.b  D0, Obj_Map_Id(A0)		               ; $0022
		move.b  #0, Obj_Ani_Time(A0)		           ; $0024
		rts
Offset_0x00C9C4:
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		tst.b   Obj_Player_Flip_Flag(A0)		         ; $002D
		beq.s   Offset_0x00C9DC
		ori.b   #1, Obj_Flags(A0)		              ; $0004
		addi.b  #$16,d0
		bra.s   Offset_0x00C9E8
Offset_0x00C9DC:
		ori.b   #3, Obj_Flags(A0)		              ; $0004
		neg.b   D0
		addi.b  #$9A,d0
Offset_0x00C9E8:
		divu.w  #$2C,d0
		addi.b  #$15,d0
		move.b  D0, Obj_Map_Id(A0)		               ; $0022
		move.b  #0, Obj_Ani_Time(A0)		           ; $0024
		rts
Offset_0x00C9FC:
		subq.b  #1, Obj_Ani_Time(A0)		           ; $0024
		bpl.w	Offset_0x00C8B0
		move.w  Obj_Inertia(A0),d2		              ; $001C
		bpl.s   Offset_0x00CA0C
		neg.w   D2
Offset_0x00CA0C:
		lea	(Offset_0x00CB2E).l,a1
		cmpi.w  #$0600,d2
		bcc.s   Offset_0x00CA1E
		lea	(Offset_0x00CB28).l,a1
Offset_0x00CA1E:
		neg.w   D2
		addi.w  #$400,d2
		bpl.s   Offset_0x00CA28
		moveq   #0,d2
Offset_0x00CA28:
		lsr.w   #8,d2
		move.b  D2, Obj_Ani_Time(A0)		             ; $0024
		move.b  Obj_Status(A0),d1		               ; $002A
		andi.b  #1,d1
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		or.b    D1, Obj_Flags(A0)				; $0004
		bra.w	Offset_0x00C898
Offset_0x00CA44:
		subq.b  #1, Obj_Ani_Time(A0)		           ; $0024
		bpl.w	Offset_0x00C8B0
		move.w  Obj_Inertia(A0),d2		              ; $001C
		bmi.s   Offset_0x00CA54
		neg.w   D2
Offset_0x00CA54:
		addi.w  #$800,d2
		bpl.s   Offset_0x00CA5C
		moveq   #0,d2
Offset_0x00CA5C:
		lsr.w   #6,d2
		lea     (Offset_0x00CB34).l,a1
		tst.b   Obj_Player_Selected(A0)		          ; $0038
		beq.s   Offset_0x00CA72
		lea     (Offset_0x00CB3A).l,a1
		lsr.w   #2,d2
Offset_0x00CA72:
		move.b  D2, Obj_Ani_Time(A0)		             ; $0024
		move.b  Obj_Status(A0),d1		               ; $002A
		andi.b  #1,d1
		andi.b  #$FC, Obj_Flags(A0)		              ; $0004
		or.b    D1, Obj_Flags(A0)				; $0004
		bra.w	Offset_0x00C898
;-------------------------------------------------------------------------------
Sonic_2P_AnimateData:				          ; Offset_0x00CA8C
		dc.w	Offset_0x00CB1C-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB22-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB28-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB2E-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB34-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB40-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB40-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB40-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB5B-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB5E-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB40-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB40-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB40-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB62-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB69-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB6C-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB6F-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB73-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB76-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB79-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB7C-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB7F-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB82-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB85-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB88-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB8B-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB8B-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB8E-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB91-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB40-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB40-Sonic_2P_AnimateData
		dc.w	Offset_0x00C7D9-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB94-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB97-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB9B-Sonic_2P_AnimateData
		dc.w	Offset_0x00CB9E-Sonic_2P_AnimateData
;-------------------------------------------------------------------------------
Knuckles_2P_AnimateData:				       ; Offset_0x00CAD4
		dc.w	Offset_0x00CB1C-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB22-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB28-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB2E-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB3A-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB40-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB40-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB40-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB5B-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB5E-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB40-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB40-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB40-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB62-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB69-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB6C-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB6F-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB73-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB76-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB79-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB7C-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB7F-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB82-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB85-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB88-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB8B-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB8B-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB8E-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB91-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB40-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB40-Knuckles_2P_AnimateData
		dc.w	Offset_0x00C7D9-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB94-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB97-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB9B-Knuckles_2P_AnimateData
		dc.w	Offset_0x00CB9E-Knuckles_2P_AnimateData
;-------------------------------------------------------------------------------
Offset_0x00CB1C:
		dc.b    $FF, $01, $02, $03, $02, $FF
Offset_0x00CB22:
		dc.b    $FF, $0D, $0E, $FF, $FF, $FF
Offset_0x00CB28:
		dc.b    $FE, $29, $28, $2A, $28, $FF
Offset_0x00CB2E:
		dc.b    $FE, $29, $28, $2A, $28, $FF
Offset_0x00CB34:
		dc.b    $FD, $25, $26, $FF, $FF, $FF
Offset_0x00CB3A:
		dc.b    $FD, $25, $26, $27, $26, $FF
Offset_0x00CB40:
		dc.b    $07, $1B, $1B, $1B, $1B, $1B, $1B, $1B
		dc.b    $1B, $1C, $1C, $1C, $1C, $1C, $1C, $1D
		dc.b    $1E, $1D, $1E, $1D, $1E, $1D, $1E, $1D
		dc.b    $1E, $FE, $10
Offset_0x00CB5B:
		dc.b    $05, $2B, $FF
Offset_0x00CB5E:
		dc.b    $00, $23, $24, $FF
Offset_0x00CB62:
		dc.b    $05, $22, $22, $22, $22, $FD, $00
Offset_0x00CB69:
		dc.b    $07, $15, $FF
Offset_0x00CB6C:
		dc.b    $07, $15, $FF
Offset_0x00CB6F:
		dc.b    $2F, $15, $FD, $00
Offset_0x00CB73:
		dc.b    $01, $15, $FF
Offset_0x00CB76:
		dc.b    $0F, $15, $FF
Offset_0x00CB79:
		dc.b    $0F, $1F, $FF
Offset_0x00CB7C:
		dc.b    $13, $15, $FF
Offset_0x00CB7F:
		dc.b    $0B, $15, $FF
Offset_0x00CB82:
		dc.b    $20, $20, $FF
Offset_0x00CB85:
		dc.b    $20, $20, $FF
Offset_0x00CB88:
		dc.b    $20, $20, $FF
Offset_0x00CB8B:
		dc.b    $40, $21, $FF
Offset_0x00CB8E:
		dc.b    $09, $21, $FF
Offset_0x00CB91:
		dc.b    $77, $00, $FF
Offset_0x00CB94:
		dc.b    $09, $1B, $FF
Offset_0x00CB97:
		dc.b    $03, $1B, $FD, $00
Offset_0x00CB9B:
		dc.b    $0B, $1B, $FF
Offset_0x00CB9E:
		dc.b    $0B, $1B, $FF
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic/Knuckles 2P pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00CBA2: Load_Sonic_2P_Dynamic_PLC:
LoadSonicDynamicPLC_2P:
		moveq	#0,d0
		move.b	Obj_Map_Id(a0),d0
		lea	(Sonic_Dyn_Script_2P).l,a2
		move.l	#Art_Sonic_2P,d6
		tst.b	Obj_Player_Selected(a0)
		beq.s	Offset_0x00CBC6
		lea	(Knuckles_Dyn_Script_2P).l,a2
		move.l	#Art_Knuckles_2P,d6

Offset_0x00CBC6:
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	Offset_0x00CC08
		move.w	#($680&$7FF)<<5,d4
		cmpa.w	#Obj_Player_One,a0
		beq.s	Offset_0x00CBE0
		move.w	#($6A0&$7FF)<<5,d4

Offset_0x00CBE0:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	d6,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,Offset_0x00CBE0

Offset_0x00CC08:
		rts
; End of function LoadSonicDynamicPLC_2P


Obj_Miles_2P:                                                  ; Offset_0x00CC0A
		include "data\objects\miles_2p.asm"
Obj_Miles:                                                     ; Offset_0x00D11E
		include "data\objects\miles.asm"
Obj_Miles_Tails:                                               ; Offset_0x00F1A6
		include "data\objects\milestls.asm"
Obj_Miles_Tails_2P:                                            ; Offset_0x00F2AE
		include "data\objects\milest2p.asm"
Obj_Player_Underwater:                                         ; Offset_0x00F38C
		include "data\objects\underwtr.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to play music after a countdown (when Sonic leaves the water)
; Too bad the sound queue gets clogged meaning it'll never work properly
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x00F89E: Resume_Music:
ResumeMusic:
		cmpi.b	#$C,Obj_Subtype(a1)
		bhi.s	Offset_0x00F8D8
		cmpa.w	#Obj_Player_One,a1
		bne.s	Offset_0x00F8D8
		move.w	(Level_Music_Buffer).w,d0
		btst	#1,Obj_Player_Status(a1)
		beq.s	Offset_0x00F8BC
		; Literally all of checks these use the wrong sound ID, presumably leftover
		; from an earlier build as they don't even match up with Sonic 2.
		move.w	#mus_MVZ2,d0	; $10 (mus_Invincibility)

Offset_0x00F8BC:
		tst.b	(Super_Sonic_flag).w
		beq.w	Offset_0x00F8C8
		move.w	#mus_MVZ2,d0	; $10 (mus_Invincibility)

Offset_0x00F8C8:
		tst.b	(Boss_Flag).w
		beq.s	Offset_0x00F8D2
		move.w	#mus_ICZ2,d0	; $0C (mus_Miniboss)

Offset_0x00F8D2:
		jsr	(PlaySound).l

Offset_0x00F8D8:
		move.b	#$1E,Obj_Subtype(a1)
		rts
; End of function ResumeMusic


Bubbles_Animate_Data:                                          ; Offset_0x00F8E0
		dc.w	Offset_0x00F8FE-Bubbles_Animate_Data
		dc.w	Offset_0x00F907-Bubbles_Animate_Data
		dc.w	Offset_0x00F910-Bubbles_Animate_Data
		dc.w	Offset_0x00F919-Bubbles_Animate_Data
		dc.w	Offset_0x00F922-Bubbles_Animate_Data
		dc.w	Offset_0x00F92B-Bubbles_Animate_Data
		dc.w	Offset_0x00F934-Bubbles_Animate_Data
		dc.w	Offset_0x00F939-Bubbles_Animate_Data
		dc.w	Offset_0x00F941-Bubbles_Animate_Data
		dc.w	Offset_0x00F949-Bubbles_Animate_Data
		dc.w	Offset_0x00F951-Bubbles_Animate_Data
		dc.w	Offset_0x00F959-Bubbles_Animate_Data
		dc.w	Offset_0x00F961-Bubbles_Animate_Data
		dc.w	Offset_0x00F969-Bubbles_Animate_Data
		dc.w	Offset_0x00F96B-Bubbles_Animate_Data
Offset_0x00F8FE:
		dc.b	$05, $00, $01, $02, $03, $04, $09, $0D
		dc.b	$FC
Offset_0x00F907:
		dc.b	$05, $00, $01, $02, $03, $04, $0C, $12
		dc.b	$FC
Offset_0x00F910:
		dc.b	$05, $00, $01, $02, $03, $04, $0C, $11
		dc.b	$FC
Offset_0x00F919:
		dc.b	$05, $00, $01, $02, $03, $04, $0B, $10
		dc.b	$FC
Offset_0x00F922:
		dc.b	$05, $00, $01, $02, $03, $04, $0C, $0F
		dc.b	$FC
Offset_0x00F92B:
		dc.b	$05, $00, $01, $02, $03, $04, $0A, $0E
		dc.b	$FC
Offset_0x00F934:
		dc.b	$0E, $00, $01, $02, $FC
Offset_0x00F939:
		dc.b	$07, $16, $0D, $16, $0D, $16, $0D, $FC
Offset_0x00F941:
		dc.b	$07, $16, $12, $16, $12, $16, $12, $FC
Offset_0x00F949:
		dc.b	$07, $16, $11, $16, $11, $16, $11, $FC
Offset_0x00F951:
		dc.b	$07, $16, $10, $16, $10, $16, $10, $FC
Offset_0x00F959:
		dc.b	$07, $16, $0F, $16, $0F, $16, $0F, $FC
Offset_0x00F961:
		dc.b	$07, $16, $0E, $16, $0E, $16, $0E, $FC
Offset_0x00F969:
		dc.b	$0E, $FC
Offset_0x00F96B:
		dc.b	$0E, $01, $02, $03, $04, $FC
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Classic Shield (leftover from Sonic 2)
; ---------------------------------------------------------------------------
; Offset_0x00F972: Obj_Classic_Shield:
Obj_ClassicShield:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	ClassicShield_Index(pc,d0.w),d1
		jmp	ClassicShield_Index(pc,d1.w)
; ===========================================================================
; Offset_0x00F980:
ClassicShield_Index:
		dc.w ClassicShield_Init-ClassicShield_Index
		dc.w ClassicShield_Main-ClassicShield_Index
; ===========================================================================
; Offset_0x00F984:
ClassicShield_Init:
		addq.b	#2,Obj_Routine(a0)
		move.l	#Classic_Shield_Mappings,Obj_Map(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$80,Obj_Priority(a0)
		move.b	#$18,Obj_Width(a0)
		move.w	#$79C,Obj_Art_VRAM(a0)
; Offset_0x00F9A8:
ClassicShield_Main:
		move.w	Obj_Player_Last(a0),a2
		btst	#1,Obj_Player_Status(a2)
		bne.s	Offset_0x00F9F2
		btst	#0,Obj_Player_Status(a2)
		beq.s	ClassicShield_Delete
		move.w	Obj_X(a2),Obj_X(a0)
		move.w	Obj_Y(a2),Obj_Y(a0)
		move.b	Obj_Status(a2),Obj_Status(a0)
		andi.w	#$7FFF,Obj_Art_VRAM(a0)
		tst.w	Obj_Art_VRAM(a2)
		bpl.s	ClassicShield_Display
		ori.w	#$8000,Obj_Art_VRAM(a0)
; Offset_0x00F9E0:
ClassicShield_Display:
		lea	(Classic_Shield_Animate_Data).l,a1
		jsr	(AnimateSprite).l
		jmp	(DisplaySprite).l

Offset_0x00F9F2:
		rts
; ===========================================================================
; Offset_0x00F9F4:
ClassicShield_Delete:
		jmp	(DeleteObject).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Invincibility Stars (that don't display properly :P)
; ---------------------------------------------------------------------------
; Offset_0x00F9FA:
Obj_Invincibility:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	Invincibility_Index(pc,d0.w),d1
		jmp	Invincibility_Index(pc,d1.w)
; ===========================================================================
; Offset_0x00FA08:
Invincibility_Index:
		dc.w Invincibility_Init-Invincibility_Index
		dc.w Invincibility_BigStars-Invincibility_Index
		dc.w Invincibility_TrailingStars-Invincibility_Index
; ===========================================================================

Offset_0x00FA0E:
		dc.l	Offset_0x00FC11
		dc.w	$B
		dc.l	Offset_0x00FC26
		dc.w	$160D
		dc.l	Offset_0x00FC3F
		dc.w	$2C0D
; ===========================================================================
; Offset_0x00FA20:
Invincibility_Init:
		; This code is missing, meaning that the invincibility will only display if something else
		; (such as the Game/Time Over text) is loaded into its VRAM. Uncomment this to fix this.
		;move.l	#Art_Invincibility,d1
		;move.w	#$F380,d2
		;move.w	#$200,d3
		;jsr	(QueueDMATransfer).l
		moveq	#0,d2
		lea	Offset_0x00FA0E-6(pc),a2
		lea	(a0),a1
		moveq	#3,d1

Offset_0x00FA2A:
		move.l	(a0),(a1)
		move.b	#4,Obj_Routine(a1)
		move.l	#Invincibility_Mappings,Obj_Map(a1)
		move.w	#$79C,Obj_Art_VRAM(a1)
		move.w	#$80,Obj_Priority(a1)
		move.b	#4,Obj_Flags(a1)
		bset	#6,Obj_Flags(a1)
		move.b	#$10,Obj_Width(a1)
		move.w	#2,Obj_Sub_Y(a1)
		move.w	Obj_Player_Last(a0),Obj_Player_Last(a1)
		move.b	d2,Obj_Control_Var_06(a1)
		addq.w	#1,d2
		move.l	(a2)+,Obj_Control_Var_00(a1)
		move.w	(a2)+,Obj_Control_Var_04(a1)
		lea	Obj_Size(a1),a1
		dbf	d1,Offset_0x00FA2A

		move.b	#2,Obj_Routine(a0)
		move.b	#4,Obj_Control_Var_04(a0)
; Offset_0x00FA86:
Invincibility_BigStars:
		; These two lines were added since Sonic 2, which fixes an oversight where transforming
		; Super while invincible would keep the invincibility stars.
		tst.b	(Super_Sonic_flag).w
		bne.w	DeleteObject
		move.w	Obj_Player_Last(a0),a1
		btst	#Invincibility_Type,Obj_Player_Status(a1)
		beq.w	DeleteObject
		move.w	Obj_X(a1),d0
		move.w	D0, Obj_X(a0)
		move.w	Obj_Y(a1),d1
		move.w	d1,Obj_Y(a0)
		lea	Obj_Speed_X(a0),a2
		lea	Offset_0x00FC04(pc),a3
		moveq	#0,d5

Offset_0x00FAB6:
		move.w	Obj_Control_Var_08(a0),d2
		move.b	(a3,d2.w),d5
		bpl.s	Offset_0x00FAC6
		clr.w	Obj_Control_Var_08(a0)
		bra.s	Offset_0x00FAB6

Offset_0x00FAC6:
		addq.w	#1,Obj_Control_Var_08(a0)
		lea	Invincibility_StarPositions(pc),a6
		move.b	Obj_Control_Var_04(a0),d6
		jsr	Offset_0x00FBAE(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		addi.w	#$20,d6
		jsr	Offset_0x00FBAE(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		moveq	#$12,d0
		btst	#0,Obj_Status(a1)
		beq.s	Offset_0x00FAF6
		neg.w	d0

Offset_0x00FAF6:
		add.b	d0,Obj_Control_Var_04(a0)
		bra.w	DisplaySprite
; ===========================================================================
; Offset_0x00FAFE:
Invincibility_TrailingStars:
		; Same thing as above, but for the smaller, trailing stars behind the player.
		tst.b	(Super_Sonic_flag).w
		bne.w	DeleteObject
		move.w	Obj_Player_Last(a0),a1
		btst	#Invincibility_Type, Obj_Player_Status(a1)
		beq.w	DeleteObject
		cmpi.w	#Miles_Alone,(Player_Selected_Flag).w
		beq.s	Offset_0x00FB2A
		lea	(Position_Table_Index).w,a5
		lea	(Position_Table_Data).w,a6
		tst.b	Obj_Player_One_Or_Two_2(a0)
		beq.s	Offset_0x00FB32

Offset_0x00FB2A:
		lea	(Position_Table_Index_2P).w,a5
		lea	(Position_Table_Data_P2).w,a6

Offset_0x00FB32:
		move.b	Obj_Control_Var_06(a0),d1
		lsl.b	#2,d1
		move.w	d1,d2
		add.w	d1,d1
		add.w	d2,d1
		move.w	(a5),d0
		sub.b	d1,d0
		lea	(a6,d0.w),a2
		move.w	(a2)+,d0
		move.w	(a2)+,d1
		move.w	d0,Obj_X(a0)
		move.w	d1,Obj_Y(a0)
		lea	Obj_Speed_X(a0),a2
		move.l	Obj_Control_Var_00(a0),a3

Offset_0x00FB5A:
		move.w	Obj_Control_Var_08(a0),d2
		move.b	(a3,d2.w),d5
		bpl.s	Offset_0x00FB6A
		clr.w	Obj_Control_Var_08(A0)
		bra.s	Offset_0x00FB5A

Offset_0x00FB6A:
		swap	d5
		add.b	Obj_P_Invcbility_Time(a0),d2
		move.b	(a3,d2.w),d5
		addq.w	#1,Obj_Control_Var_08(a0)
		lea	Invincibility_StarPositions(pc),a6
		move.b	Obj_Control_Var_04(a0),d6
		jsr	Offset_0x00FBAE(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		addi.w	#$20,d6
		swap	d5
		jsr	Offset_0x00FBAE(pc)
		move.w	d2,(a2)+
		move.w	d3,(a2)+
		move.w	d5,(a2)+
		moveq	#2,d0
		btst	#0,Obj_Status(a1)
		beq.s	Offset_0x00FBA6
		neg.w	d0

Offset_0x00FBA6:
		add.b	d0,Obj_Control_Var_04(a0)
		bra.w	DisplaySprite
; ===========================================================================

Offset_0x00FBAE:
		andi.w	#$3E,d6
		move.b	(a6,d6.w),d2
		move.b	1(a6,d6.w),d3
		ext.w	d2
		ext.w	d3
		add.w	d0,d2
		add.w	d1,d3
		rts
; ===========================================================================
; This table seems to store the positions for each star
; Offset_0x00FBC4:
Invincibility_StarPositions:
		dc.b	$0F, $00, $0F, $03, $0E, $06, $0D, $08
		dc.b	$0B, $0B, $08, $0D, $06, $0E, $03, $0F
		dc.b	$00, $10, $FC, $0F, $F9, $0E, $F7, $0D
		dc.b	$F4, $0B, $F2, $08, $F1, $06, $F0, $03
		dc.b	$F0, $00, $F0, $FC, $F1, $F9, $F2, $F7
		dc.b	$F4, $F4, $F7, $F2, $F9, $F1, $FC, $F0
		dc.b	$FF, $F0, $03, $F0, $06, $F1, $08, $F2
		dc.b	$0B, $F4, $0D, $F7, $0E, $F9, $0F, $FC

; And these tables are the animation scripts
Offset_0x00FC04:
		dc.b	$08, $05, $07, $06, $06, $07, $05, $08
		dc.b	$06, $07, $07, $06, $FF

Offset_0x00FC11:
		dc.b	$08, $07, $06, $05, $04, $03, $04, $05
		dc.b	$06, $07, $FF, $03, $04, $05, $06, $07
		dc.b	$08, $07, $06, $05, $04

Offset_0x00FC26:
		dc.b	$08, $07, $06, $05, $04, $03, $02, $03
		dc.b	$04, $05, $06, $07, $FF, $02, $03, $04
		dc.b	$05, $06, $07, $08, $07, $06, $05, $04
		dc.b	$03

Offset_0x00FC3F:
		dc.b	$07, $06, $05, $04, $03, $02, $01, $02
		dc.b	$03, $04, $05, $06, $FF, $01, $02, $03
		dc.b	$04, $05, $06, $07, $06, $05, $04, $03
		dc.b	$02

;-------------------------------------------------------------------------------
Classic_Shield_Animate_Data:                                   ; Offset_0x00FC58
		dc.w	Offset_0x00FC5A-Classic_Shield_Animate_Data
Offset_0x00FC5A:
		dc.b	$00, $05, $00, $05, $01, $05, $02, $05
		dc.b	$03, $05, $04, $FF
;-------------------------------------------------------------------------------
Classic_Shield_Mappings:                                       ; Offset_0x00FC66
		dc.w	Offset_0x00FC72-Classic_Shield_Mappings
		dc.w	Offset_0x00FC8C-Classic_Shield_Mappings
		dc.w	Offset_0x00FCA6-Classic_Shield_Mappings
		dc.w	Offset_0x00FCC0-Classic_Shield_Mappings
		dc.w	Offset_0x00FCDA-Classic_Shield_Mappings
		dc.w	Offset_0x00FCF4-Classic_Shield_Mappings
Offset_0x00FC72:
		dc.w	$0004
		dc.w	$F005, $0000, $FFF0
		dc.w	$F005, $0800, $0000
		dc.w	$0005, $1000, $FFF0
		dc.w	$0005, $1800, $0000
Offset_0x00FC8C:
		dc.w	$0004
		dc.w	$F005, $0004, $FFF0
		dc.w	$F005, $0804, $0000
		dc.w	$0005, $1004, $FFF0
		dc.w	$0005, $1804, $0000
Offset_0x00FCA6:
		dc.w	$0004
		dc.w	$F005, $0008, $FFF0
		dc.w	$F005, $0808, $0000
		dc.w	$0005, $1008, $FFF0
		dc.w	$0005, $1808, $0000
Offset_0x00FCC0:
		dc.w	$0004
		dc.w	$F005, $000C, $FFF0
		dc.w	$F005, $080C, $0000
		dc.w	$0005, $100C, $FFF0
		dc.w	$0005, $180C, $0000
Offset_0x00FCDA:
		dc.w	$0004
		dc.w	$F005, $0010, $FFF0
		dc.w	$F005, $0810, $0000
		dc.w	$0005, $1010, $FFF0
		dc.w	$0005, $1810, $0000
Offset_0x00FCF4:
		dc.w	$0004
		dc.w	$E00B, $0014, $FFE8
		dc.w	$E00B, $0814, $0000
		dc.w	$000B, $1014, $FFE8
		dc.w	$000B, $1814, $0000
;-------------------------------------------------------------------------------
Invincibility_Mappings:                                        ; Offset_0x00FD0E
		dc.w	Offset_0x00FD20-Invincibility_Mappings
		dc.w	Offset_0x00FD22-Invincibility_Mappings
		dc.w	Offset_0x00FD2A-Invincibility_Mappings
		dc.w	Offset_0x00FD32-Invincibility_Mappings
		dc.w	Offset_0x00FD3A-Invincibility_Mappings
		dc.w	Offset_0x00FD42-Invincibility_Mappings
		dc.w	Offset_0x00FD4A-Invincibility_Mappings
		dc.w	Offset_0x00FD52-Invincibility_Mappings
		dc.w	Offset_0x00FD5A-Invincibility_Mappings
Offset_0x00FD20:
		dc.w	$0000
Offset_0x00FD22:
		dc.w	$0001
		dc.w	$F801, $0000, $FFFC
Offset_0x00FD2A:
		dc.w	$0001
		dc.w	$F801, $0002, $FFFC
Offset_0x00FD32:
		dc.w	$0001
		dc.w	$F801, $0004, $FFFC
Offset_0x00FD3A:
		dc.w	$0001
		dc.w	$F801, $0006, $FFFC
Offset_0x00FD42:
		dc.w	$0001
		dc.w	$F801, $0008, $FFFC
Offset_0x00FD4A:
		dc.w	$0001
		dc.w	$F805, $000A, $FFF8
Offset_0x00FD52:
		dc.w	$0001
		dc.w	$F805, $000E, $FFF8
Offset_0x00FD5A:
		dc.w	$0001
		dc.w	$F00F, $0012, $FFF0
;-------------------------------------------------------------------------------
Obj_Dust_Water_Splash:                                         ; Offset_0x00FD62
		include "data\objects\dustwtrs.asm"
Obj_Dust_Water_Splash_2P:                                      ; Offset_0x0100DA
		include "data\objects\dstwtr2p.asm"
Obj_Super_Sonic_Stars:                                         ; Offset_0x0102AA
		include "data\objects\ss_stars.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Fire Shield
; ---------------------------------------------------------------------------
; Offset_0x0103C6: Obj_Fire_Shield:
Obj_FireShield:
		move.l	#Fire_Shield_Mappings,Obj_Map(a0)
		move.l	#Fire_Shield_Dyn_Script,Obj_Control_Var_0C(a0)
		move.l	#Art_Fire_Shield,Obj_Control_Var_08(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$80,Obj_Priority(a0)
		move.b	#$18,Obj_Width(a0)
		move.b	#$18,Obj_Height(a0)
		move.w	#$79C,Obj_Art_VRAM(a0)
		move.w	#$F380,Obj_Control_Var_10(a0)
		btst	#7,(Obj_Player_One+Obj_Art_VRAM).w
		beq.s	.notHighPriority
		bset	#7,Obj_Art_VRAM(a0)
; Offset_0x010410:
.notHighPriority:
		move.l	#FireShield_Main,(a0)
; Offset_0x010416:
FireShield_Main:
		move.w	Obj_Player_Last(a0),a2
		btst	#Invincibility_Type,Obj_Player_Status(a2)
		bne.s	Offset_0x010464
		btst	#Classic_Type,Obj_Player_Status(a2)
		beq.s	FireShield_Delete
		move.w	Obj_X(a2),Obj_X(a0)
		move.w	Obj_Y(a2),Obj_Y(a0)
		move.b	Obj_Status(a2),Obj_Status(a0)
		andi.w	#$7FFF,Obj_Art_VRAM(a0)
		tst.w	Obj_Art_VRAM(A2)
		bpl.s	FireShield_Display
		ori.w	#$8000,Obj_Art_VRAM(a0)
; Offset_0x01044E: .notHighPriority:
FireShield_Display:
		lea	(FireShield_AnimateData).l,a1
		jsr	(AnimateSprite).l
		bsr.w	LoadShieldDynamicPLC
		jmp	(DisplaySprite).l

Offset_0x010464:
		rts
; ===========================================================================
; Offset_0x010466:
FireShield_Delete:
		jmp     (DeleteObject).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Lightning Shield (or Thunder Shield :P)
; ---------------------------------------------------------------------------
; Offset_0x01046C: Obj_Lightning_Shield:
Obj_LightningShield:
		move.l	#Lightning_Shield_Mappings,Obj_Map(a0)
		move.l	#Lightning_Shield_Dyn_Script,Obj_Control_Var_0C(a0)
		move.l	#Art_Lightning_Shield,Obj_Control_Var_08(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$80,Obj_Priority(a0)
		move.b	#$18,Obj_Width(a0)
		move.b	#$18,Obj_Height(a0)
		move.w	#$79C,Obj_Art_VRAM(a0)
		move.w	#$F380,Obj_Control_Var_10(a0)
		btst	#7,(Obj_Player_One+Obj_Art_VRAM).w
		beq.s	.notHighPriority
		bset	#7,Obj_Art_VRAM(a0)
; Offset_0x0104B6:
.notHighPriority:
		move.l	#LightningShield_Main,(a0)
; Offset_0x0104BC:
LightningShield_Main:
		move.w	Obj_Player_Last(a0),a2
		btst	#Invincibility_Type,Obj_Player_Status(a2)
		bne.s	Offset_0x01050A
		btst	#Classic_Type,Obj_Player_Status(a2)
		beq.s	LightningShield_Delete
		move.w	Obj_X(a2),Obj_X(a0)
		move.w	Obj_Y(a2),Obj_Y(a0)
		move.b	Obj_Status(a2),Obj_Status(a0)
		andi.w	#$7FFF,Obj_Art_VRAM(a0)
		tst.w	Obj_Art_VRAM(A2)
		bpl.s	LightningShield_Display
		ori.w	#$8000,Obj_Art_VRAM(a0)
; Offset_0x0104F4: .notHighPriority:
LightningShield_Display:
		lea	(LightningShield_AnimateData).l,a1
		jsr	(AnimateSprite).l
		bsr.w	LoadShieldDynamicPLC
		jmp	(DisplaySprite).l

Offset_0x01050A:
		rts
; ===========================================================================
; Offset_0x01050C:
LightningShield_Delete:
		jmp     (DeleteObject).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Bubble Shield
; ---------------------------------------------------------------------------
; Offset_0x010512: Obj_Water_Shield:
Obj_BubbleShield:
		move.l	#Water_Shield_Mappings,Obj_Map(a0)
		move.l	#Water_Shield_Dyn_Script,Obj_Control_Var_0C(a0)
		move.l	#Art_Water_Shield,Obj_Control_Var_08(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$80,Obj_Priority(a0)
		move.b	#$18,Obj_Width(a0)
		move.b	#$18,Obj_Height(a0)
		move.w	#$79C,Obj_Art_VRAM(a0)
		move.w	#$F380,Obj_Control_Var_10(a0)
		btst	#7,(Obj_Player_One+Obj_Art_VRAM).w
		beq.s	.notHighPriority
		bset	#7,Obj_Art_VRAM(a0)
; Offset_0x01055C:
.notHighPriority:
		move.l	#BubbleShield_Main,(a0)
; Offset_0x010562:
BubbleShield_Main:
		move.w	Obj_Player_Last(a0),a2
		btst	#Invincibility_Type,Obj_Player_Status(a2)
		bne.s	Offset_0x0105B0
		btst	#Classic_Type,Obj_Player_Status(a2)
		beq.s	BubbleShield_Delete
		move.w	Obj_X(a2),Obj_X(a0)
		move.w	Obj_Y(a2),Obj_Y(a0)
		move.b	Obj_Status(a2),Obj_Status(a0)
		andi.w	#$7FFF,Obj_Art_VRAM(a0)
		tst.w	Obj_Art_VRAM(A2)
		bpl.s	BubbleShield_Display
		ori.w	#$8000,Obj_Art_VRAM(a0)
; Offset_0x01059A: .notHighPriority:
BubbleShield_Display:
		lea	(BubbleShield_AnimateData).l,a1
		jsr	(AnimateSprite).l
		bsr.w	LoadShieldDynamicPLC
		jmp	(DisplaySprite).l

Offset_0x0105B0:
		rts
; ===========================================================================
; Offset_0x0105B2:
BubbleShield_Delete:
		jmp     (DeleteObject).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load shield graphics into VRAM dynamically
; ---------------------------------------------------------------------------
; Offset_0x0105B8: Load_Shield_Dynamic_PLC:
LoadShieldDynamicPLC:
		moveq	#0,d0
		move.b	Obj_Map_Id(a0),d0
		cmp.b	Obj_Control_Var_04(a0),d0
		beq.s	Offset_0x010606
		move.b	d0,Obj_Control_Var_04(a0)
		move.l	Obj_Control_Var_0C(a0),a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	Offset_0x010606
		move.w	Obj_Control_Var_10(a0),d4
; Offset_0x0105DC: Loop_Load_Shield_Dynamic_PLC:
.loop:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		add.l	Obj_Control_Var_08(a0),d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,.loop

Offset_0x010606:
		rts
; End of function LoadShieldDynamicPLC

; ===========================================================================
; ---------------------------------------------------------------------------
; Animation scripts for Elemental Shields
; ---------------------------------------------------------------------------
; Offset_0x010680: Fire_Shield_Animate_Data:
FireShield_AnimateData:	dc.w	Offset_0x01060A-FireShield_AnimateData
Offset_0x01060A:	dc.b	  3,  0,  1,  2,  3,  4,  5,  6
		dc.b	  7,  8,  9,  9,$FF
		even
; Offset_0x010618: Lightning_Shield_Animate_Data:
LightningShield_AnimateData:
		dc.w	Offset_0x01061A-LightningShield_AnimateData
Offset_0x01061A:
		dc.b	$03, $00, $01, $02, $03, $04, $05, $06
		dc.b	$07, $FF

; Offset_0x010624: Water_Shield_Animate_Data:
BubbleShield_AnimateData:
		dc.w	Offset_0x010626-BubbleShield_AnimateData
Offset_0x010626:
		dc.b	$03, $00, $01, $02, $03, $04, $05, $06
		dc.b	$07, $08, $09, $0A, $0B, $FF

;-------------------------------------------------------------------------------
Fire_Shield_Mappings:				          ; Offset_0x010634
		dc.w	Offset_0x010648-Fire_Shield_Mappings
		dc.w	Offset_0x010662-Fire_Shield_Mappings
		dc.w	Offset_0x01067C-Fire_Shield_Mappings
		dc.w	Offset_0x010696-Fire_Shield_Mappings
		dc.w	Offset_0x0106B0-Fire_Shield_Mappings
		dc.w	Offset_0x0106BE-Fire_Shield_Mappings
		dc.w	Offset_0x0106D8-Fire_Shield_Mappings
		dc.w	Offset_0x0106F2-Fire_Shield_Mappings
		dc.w	Offset_0x01070C-Fire_Shield_Mappings
		dc.w	Offset_0x010726-Fire_Shield_Mappings
Offset_0x010648:
		dc.w	$0004
		dc.w	$E809, $0000, $FFE8
		dc.w	$E809, $0006, $0000
		dc.w	$0809, $000C, $FFE8
		dc.w	$0809, $0012, $0000
Offset_0x010662:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0009, $0000
		dc.w	$000A, $0012, $FFE8
		dc.w	$000A, $001B, $0000
Offset_0x01067C:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0009, $0000
		dc.w	$000A, $0012, $FFE8
		dc.w	$000A, $001B, $0000
Offset_0x010696:
		dc.w	$0004
		dc.w	$EC0A, $0000, $FFE8
		dc.w	$EC0A, $0009, $0000
		dc.w	$0409, $0012, $FFE8
		dc.w	$0409, $0018, $0000
Offset_0x0106B0:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFE8
		dc.w	$F007, $0010, $0008
Offset_0x0106BE:
		dc.w	$0004
		dc.w	$FC0A, $1000, $FFE8
		dc.w	$FC0A, $1009, $0000
		dc.w	$EC09, $1012, $FFE8
		dc.w	$EC09, $1018, $0000
Offset_0x0106D8:
		dc.w	$0004
		dc.w	$000A, $1000, $FFE8
		dc.w	$000A, $1009, $0000
		dc.w	$E80A, $1012, $FFE8
		dc.w	$E80A, $101B, $0000
Offset_0x0106F2:
		dc.w	$0004
		dc.w	$000A, $1000, $FFE8
		dc.w	$000A, $1009, $0000
		dc.w	$E80A, $1012, $FFE8
		dc.w	$E80A, $101B, $0000
Offset_0x01070C:
		dc.w	$0004
		dc.w	$0809, $1000, $FFE8
		dc.w	$0809, $1006, $0000
		dc.w	$E809, $100C, $FFE8
		dc.w	$E809, $1012, $0000
Offset_0x010726:
		dc.w	$0000
;-------------------------------------------------------------------------------
Fire_Shield_Dyn_Script:				        ; Offset_0x010728
		dc.w	Offset_0x01073C-Fire_Shield_Dyn_Script
		dc.w	Offset_0x010746-Fire_Shield_Dyn_Script
		dc.w	Offset_0x010750-Fire_Shield_Dyn_Script
		dc.w	Offset_0x01075A-Fire_Shield_Dyn_Script
		dc.w	Offset_0x010764-Fire_Shield_Dyn_Script
		dc.w	Offset_0x01075A-Fire_Shield_Dyn_Script
		dc.w	Offset_0x010750-Fire_Shield_Dyn_Script
		dc.w	Offset_0x010746-Fire_Shield_Dyn_Script
		dc.w	Offset_0x01073C-Fire_Shield_Dyn_Script
		dc.w	Offset_0x01076A-Fire_Shield_Dyn_Script
Offset_0x01073C:
		dc.w	$0004
		dc.w	$5000, $5006, $500C, $5012
Offset_0x010746:
		dc.w	$0004
		dc.w	$8018, $8021, $802A, $8033
Offset_0x010750:
		dc.w	$0004
		dc.w	$803C, $8045, $804E, $8057
Offset_0x01075A:
		dc.w	$0004
		dc.w	$8060, $8069, $5072, $5078
Offset_0x010764:
		dc.w	$0002
		dc.w	$F07E, $708E
Offset_0x01076A:
		dc.w	$0000
;-------------------------------------------------------------------------------
Lightning_Shield_Mappings:				     ; Offset_0x01076C
		dc.w	Offset_0x01077C-Lightning_Shield_Mappings
		dc.w	Offset_0x010790-Lightning_Shield_Mappings
		dc.w	Offset_0x01079E-Lightning_Shield_Mappings
		dc.w	Offset_0x0107B2-Lightning_Shield_Mappings
		dc.w	Offset_0x0107C6-Lightning_Shield_Mappings
		dc.w	Offset_0x0107D4-Lightning_Shield_Mappings
		dc.w	Offset_0x0107EE-Lightning_Shield_Mappings
		dc.w	Offset_0x010808-Lightning_Shield_Mappings
Offset_0x01077C:
		dc.w	$0003
		dc.w	$E80C, $0000, $FFF0
		dc.w	$F007, $0004, $0000
		dc.w	$100C, $000C, $FFF0
Offset_0x010790:
		dc.w	$0002
		dc.w	$E80A, $0000, $FFF4
		dc.w	$000A, $0009, $FFF4
Offset_0x01079E:
		dc.w	$0003
		dc.w	$E808, $0000, $FFF0
		dc.w	$F00B, $0003, $FFF8
		dc.w	$1008, $000F, $FFF0
Offset_0x0107B2:
		dc.w	$0003
		dc.w	$E808, $0000, $FFF0
		dc.w	$F00E, $0003, $FFF0
		dc.w	$0809, $000F, $FFF0
Offset_0x0107C6:
		dc.w	$0002
		dc.w	$E807, $0000, $FFF8
		dc.w	$0805, $0008, $FFF8
Offset_0x0107D4:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0009, $0000
		dc.w	$000A, $1812, $FFE8
		dc.w	$000A, $181B, $0000
Offset_0x0107EE:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0009, $0000
		dc.w	$000A, $1812, $FFE8
		dc.w	$000A, $181B, $0000
Offset_0x010808:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0809, $0000
		dc.w	$000A, $1012, $FFE8
		dc.w	$000A, $181B, $0000
;-------------------------------------------------------------------------------
Lightning_Shield_Dyn_Script:				   ; Offset_0x010822
		dc.w	Offset_0x010832-Lightning_Shield_Dyn_Script
		dc.w	Offset_0x01083A-Lightning_Shield_Dyn_Script
		dc.w	Offset_0x010840-Lightning_Shield_Dyn_Script
		dc.w	Offset_0x010848-Lightning_Shield_Dyn_Script
		dc.w	Offset_0x010850-Lightning_Shield_Dyn_Script
		dc.w	Offset_0x010856-Lightning_Shield_Dyn_Script
		dc.w	Offset_0x010860-Lightning_Shield_Dyn_Script
		dc.w	Offset_0x01086A-Lightning_Shield_Dyn_Script
Offset_0x010832:
		dc.w	$0003
		dc.w	$3000, $7004, $300C
Offset_0x01083A:
		dc.w	$0002
		dc.w	$8010, $8019
Offset_0x010840:
		dc.w	$0003
		dc.w	$2022, $B025, $2031
Offset_0x010848:
		dc.w	$0003
		dc.w	$2034, $B037, $5043
Offset_0x010850:
		dc.w	$0002
		dc.w	$7049, $3051
Offset_0x010856:
		dc.w	$0004
		dc.w	$8055, $805E, $805E, $8055
Offset_0x010860:
		dc.w	$0004
		dc.w	$8067, $8070, $8070, $8067
Offset_0x01086A:
		dc.w	$0004
		dc.w	$8079, $8079, $8079, $8079
;-------------------------------------------------------------------------------
Water_Shield_Mappings:				         ; Offset_0x010874
		dc.w	Offset_0x01088C-Water_Shield_Mappings
		dc.w	Offset_0x01089A-Water_Shield_Mappings
		dc.w	Offset_0x0108A8-Water_Shield_Mappings
		dc.w	Offset_0x0108B6-Water_Shield_Mappings
		dc.w	Offset_0x0108C4-Water_Shield_Mappings
		dc.w	Offset_0x0108D2-Water_Shield_Mappings
		dc.w	Offset_0x0108E0-Water_Shield_Mappings
		dc.w	Offset_0x0108EE-Water_Shield_Mappings
		dc.w	Offset_0x0108FC-Water_Shield_Mappings
		dc.w	Offset_0x010916-Water_Shield_Mappings
		dc.w	Offset_0x010930-Water_Shield_Mappings
		dc.w	Offset_0x010938-Water_Shield_Mappings
Offset_0x01088C:
		dc.w	$0002
		dc.w	$E808, $0000, $FFE8
		dc.w	$E808, $0803, $0000
Offset_0x01089A:
		dc.w	$0002
		dc.w	$E809, $0000, $FFE8
		dc.w	$E809, $0806, $0000
Offset_0x0108A8:
		dc.w	$0002
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0809, $0000
Offset_0x0108B6:
		dc.w	$0002
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0809, $0000
Offset_0x0108C4:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFE8
		dc.w	$F00B, $080C, $0000
Offset_0x0108D2:
		dc.w	$0002
		dc.w	$000A, $0000, $FFE8
		dc.w	$000A, $0809, $0000
Offset_0x0108E0:
		dc.w	$0002
		dc.w	$000A, $0000, $FFE8
		dc.w	$000A, $0809, $0000
Offset_0x0108EE:
		dc.w	$0002
		dc.w	$0809, $0000, $FFE8
		dc.w	$0809, $0806, $0000
Offset_0x0108FC:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0809, $0000
		dc.w	$000A, $1012, $FFE8
		dc.w	$000A, $181B, $0000
Offset_0x010916:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$E80A, $0809, $0000
		dc.w	$000A, $1012, $FFE8
		dc.w	$000A, $181B, $0000
Offset_0x010930:
		dc.w	$0001
		dc.w	$FC00, $0000, $FFFC
Offset_0x010938:
		dc.w	$0001
		dc.w	$FC00, $0000, $FFFC
;-------------------------------------------------------------------------------
Water_Shield_Dyn_Script:				       ; Offset_0x010940
		dc.w	Offset_0x010958-Water_Shield_Dyn_Script
		dc.w	Offset_0x01095E-Water_Shield_Dyn_Script
		dc.w	Offset_0x010964-Water_Shield_Dyn_Script
		dc.w	Offset_0x01096A-Water_Shield_Dyn_Script
		dc.w	Offset_0x010970-Water_Shield_Dyn_Script
		dc.w	Offset_0x010976-Water_Shield_Dyn_Script
		dc.w	Offset_0x01097C-Water_Shield_Dyn_Script
		dc.w	Offset_0x010982-Water_Shield_Dyn_Script
		dc.w	Offset_0x010988-Water_Shield_Dyn_Script
		dc.w	Offset_0x010992-Water_Shield_Dyn_Script
		dc.w	Offset_0x01099C-Water_Shield_Dyn_Script
		dc.w	Offset_0x0109A0-Water_Shield_Dyn_Script
Offset_0x010958:
		dc.w	$0002
		dc.w	$2000, $2000
Offset_0x01095E:
		dc.w	$0002
		dc.w	$5003, $5003
Offset_0x010964:
		dc.w	$0002
		dc.w	$8009, $8009
Offset_0x01096A:
		dc.w	$0002
		dc.w	$8012, $8012
Offset_0x010970:
		dc.w	$0002
		dc.w	$B01B, $B01B
Offset_0x010976:
		dc.w	$0002
		dc.w	$8027, $8027
Offset_0x01097C:
		dc.w	$0002
		dc.w	$8030, $8030
Offset_0x010982:
		dc.w	$0002
		dc.w	$5039, $5039
Offset_0x010988:
		dc.w	$0004
		dc.w	$803F, $803F, $803F, $803F
Offset_0x010992:
		dc.w	$0004
		dc.w	$8048, $8048, $8048, $8048
Offset_0x01099C:
		dc.w	$0001
		dc.w	$0051
Offset_0x0109A0:
		dc.w	$0001
		dc.w	$0052

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 00 - Rings
;
; This just handles ones spawned in debug mode, the actual rings in levels
; are handled using a separate manager
; ---------------------------------------------------------------------------
; Offset_0x0109A4: Obj_0x00_Rings:
Obj00_Rings:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	Rings_Index(pc,d0.w),d1
		jmp	Rings_Index(pc,d1.w)
; ===========================================================================
; Offset_0x0109B2:
Rings_Index:	dc.w Rings_Init-Rings_Index
		dc.w Rings_Main-Rings_Index
		dc.w Rings_Collect-Rings_Index
		dc.w Rings_Display-Rings_Index
		dc.w Rings_Delete-Rings_Index
; ===========================================================================
; Offset_0x0109BC:
Rings_Init:
		addq.b	#2,Obj_Routine(a0)
		move.l	#Rings_Mappings,Obj_Map(a0)
		move.w	#$A6BC,Obj_Art_VRAM(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$100,Obj_Priority(a0)
		move.b	#$47,Obj_Col_Flags(a0)
		move.b	#8,Obj_Width(a0)
		tst.w	(Two_Player_Flag).w
		beq.s	Rings_Main
		move.w	#$63D2,Obj_Art_VRAM(a0)
; Offset_0x0109F2:
Rings_Main:
		move.b	(Object_Frame_Buffer).w,Obj_Map_Id(a0)
		bra.w	MarkObjGone_5
; ===========================================================================
; Offset_0x0109FC:
Rings_Collect:
		addq.b	#2,Obj_Routine(a0)
		move.b	#0,Obj_Col_Flags(a0)
		move.w	#$80,Obj_Priority(a0)
		bsr.s	CollectRing
; Offset_0x010A0E:
Rings_Display:
		lea	(Rings_Animate_Data).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================
; Offset_0x010A1C:
Rings_Delete:
		bra.w	DeleteObject

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to collect a ring
; ---------------------------------------------------------------------------
; Offset_0x010A20: Add_Rings_Check_Ring_Status:
CollectRing:
		tst.b	Obj_Player_One_Or_Two(a0)
		bne.s	CollectRing_Tails
; Offset_0x010A26: Add_Rings:
CollectRing_Sonic:
		cmpi.w	#999,(Total_Ring_Count_Address).w
		bcc.s	Offset_0x010A32
		addq.w	#1,(Total_Ring_Count_Address).w

Offset_0x010A32:
		move.w	#sfx_RingRight,d0
		cmpi.w	#999,(Ring_count).w
		bcc.s	Offset_0x010A74
		addq.w	#1,(Ring_count).w
		ori.b	#1,(Update_HUD_rings).w
		cmpi.w	#100,(Ring_count).w
		bcs.s	Offset_0x010A74
		bset	#1,(Extra_life_flags).w
		beq.s	Offset_0x010A68
		cmpi.w	#200,(Ring_count).w
		bcs.s	Offset_0x010A74
		bset	#2,(Extra_life_flags).w
		bne.s	Offset_0x010A74

Offset_0x010A68:
		addq.b	#1,(Life_count).w
		addq.b	#1,(Update_HUD_lives).w
		; Oddly, this doesn't actually use mus_ExtraLife, perhaps another leftover from an earlier sound driver?
		move.w	#sfx_RingLoss,d0 ; $34 (mus_ExtraLife)

Offset_0x010A74:
		jmp	(PlaySound).l
		; unused
		rts
; ---------------------------------------------------------------------------
; Offset_0x010A7C: Add_Rings_Player_Two:
CollectRing_Tails:
		cmpi.w	#999,(Total_Ring_Count_Address_P2).w
		bcc.s	Offset_0x010A88
		addq.w	#1,(Total_Ring_Count_Address_P2).w

Offset_0x010A88:
		cmpi.w	#999,(Ring_Count_Address_P2).w
		bcc.s	Offset_0x010A94
		addq.w	#1,(Ring_Count_Address_P2).w

Offset_0x010A94:
		tst.w	(Two_Player_Flag).w
		beq.s	Offset_0x010A32
		ori.b	#1,(HUD_Rings_Refresh_Flag_P2).w
		move.w	#sfx_RingRight,d0
		cmpi.w	#100,(Ring_Count_Address_P2).w
		bcs.s	Offset_0x010AD0
		bset	#1,(Ring_Status_Flag_P2).w
		beq.s	Offset_0x010AC4
		cmpi.w	#200,(Ring_Count_Address_P2).w
		bcs.s	Offset_0x010AD0
		bset	#2,(Ring_Status_Flag_P2).w
		bne.s	Offset_0x010AD0

Offset_0x010AC4:
		addq.b	#1,(Life_Count_P2).w
		addq.b	#1,(HUD_Life_Refresh_Flag_P2).w
		; Oddly, this doesn't actually use mus_ExtraLife, perhaps another leftover from an earlier sound driver?
		move.w	#sfx_RingLoss,d0 ; $34 (mus_ExtraLife)

Offset_0x010AD0:
		jmp	(PlaySound).l
; End of function CollectRing

;===============================================================================
; Rotina para adicionar an�is ao contador, verificando o limmite e bonificando
; <<<-        com vida extra ao adiquirir 100 e 200 an�is
;===============================================================================
Rings_Lost:                                                    ; Offset_0x010AD6
		include "data\objects\ringlost.asm"
Obj_S1_0x4B_Big_Ring: ; Sonic 1 Left over                      ; Offset_0x010C60
		include "data\s1_obj\obj_0x4B.asm"
Obj_S1_0x7C_Big_Ring_Flash: ; Sonic 1 Left over                ; Offset_0x010D26
		include "data\s1_obj\obj_0x7C.asm"
;-------------------------------------------------------------------------------
Rings_Animate_Data:                                            ; Offset_0x010DDA
		dc.w	Offset_0x010DDC-Rings_Animate_Data
Offset_0x010DDC:
		dc.b	$05, $04, $05, $06, $07, $FC
;-------------------------------------------------------------------------------
Rings_Mappings:	include	"data/mappings/00 - Rings.asm"
;-------------------------------------------------------------------------------
Big_Ring_Mappings: ; Sonic 1 Left over                         ; Offset_0x010E36
		dc.w	Offset_0x010E3E-Big_Ring_Mappings
		dc.w	Offset_0x010E7C-Big_Ring_Mappings
		dc.w	Offset_0x010EAE-Big_Ring_Mappings
		dc.w	Offset_0x010EC8-Big_Ring_Mappings
Offset_0x010E3E:
		dc.w	$000A
		dc.w	$E008, $0000, $FFE8
		dc.w	$E008, $0003, $0000
		dc.w	$E80C, $0006, $FFE0
		dc.w	$E80C, $000A, $0000
		dc.w	$F007, $000E, $FFE0
		dc.w	$F007, $0016, $0010
		dc.w	$100C, $001E, $FFE0
		dc.w	$100C, $0022, $0000
		dc.w	$1808, $0026, $FFE8
		dc.w	$1808, $0029, $0000
Offset_0x010E7C:
		dc.w	$0008
		dc.w	$E00C, $002C, $FFF0
		dc.w	$E808, $0030, $FFE8
		dc.w	$E809, $0033, $0000
		dc.w	$F007, $0039, $FFE8
		dc.w	$F805, $0041, $0008
		dc.w	$0809, $0045, $0000
		dc.w	$1008, $004B, $FFE8
		dc.w	$180C, $004E, $FFF0
Offset_0x010EAE:
		dc.w	$0004
		dc.w	$E007, $0052, $FFF4
		dc.w	$E003, $0852, $0004
		dc.w	$0007, $005A, $FFF4
		dc.w	$0003, $085A, $0004
Offset_0x010EC8:
		dc.w	$0008
		dc.w	$E00C, $082C, $FFF0
		dc.w	$E808, $0830, $0000
		dc.w	$E809, $0833, $FFE8
		dc.w	$F007, $0839, $0008
		dc.w	$F805, $0841, $FFE8
		dc.w	$0809, $0845, $FFE8
		dc.w	$1008, $084B, $0000
		dc.w	$180C, $084E, $FFF0
;-------------------------------------------------------------------------------
Big_Ring_Flash_Mappings: ; Sonic 1 Left over                   ; Offset_0x010EFA
		dc.w	Offset_0x010F0A-Big_Ring_Flash_Mappings
		dc.w	Offset_0x010F18-Big_Ring_Flash_Mappings
		dc.w	Offset_0x010F32-Big_Ring_Flash_Mappings
		dc.w	Offset_0x010F4C-Big_Ring_Flash_Mappings
		dc.w	Offset_0x010F66-Big_Ring_Flash_Mappings
		dc.w	Offset_0x010F80-Big_Ring_Flash_Mappings
		dc.w	Offset_0x010F9A-Big_Ring_Flash_Mappings
		dc.w	Offset_0x010FA8-Big_Ring_Flash_Mappings
Offset_0x010F0A:
		dc.w	$0002
		dc.w	$E00F, $0000, $0000
		dc.w	$000F, $1000, $0000
Offset_0x010F18:
		dc.w	$0004
		dc.w	$E00F, $0010, $FFF0
		dc.w	$E007, $0020, $0010
		dc.w	$000F, $1010, $FFF0
		dc.w	$0007, $1020, $0010
Offset_0x010F32:
		dc.w	$0004
		dc.w	$E00F, $0028, $FFE8
		dc.w	$E00B, $0038, $0008
		dc.w	$000F, $1028, $FFE8
		dc.w	$000B, $1038, $0008
Offset_0x010F4C:
		dc.w	$0004
		dc.w	$E00F, $0834, $FFE0
		dc.w	$E00F, $0034, $0000
		dc.w	$000F, $1834, $FFE0
		dc.w	$000F, $1034, $0000
Offset_0x010F66:
		dc.w	$0004
		dc.w	$E00B, $0838, $FFE0
		dc.w	$E00F, $0828, $FFF8
		dc.w	$000B, $1838, $FFE0
		dc.w	$000F, $1828, $FFF8
Offset_0x010F80:
		dc.w	$0004
		dc.w	$E007, $0820, $FFE0
		dc.w	$E00F, $0810, $FFF0
		dc.w	$0007, $1820, $FFE0
		dc.w	$000F, $1810, $FFF0
Offset_0x010F9A:
		dc.w	$0002
		dc.w	$E00F, $0800, $FFE0
		dc.w	$000F, $1800, $FFE0
Offset_0x010FA8:
		dc.w	$0004
		dc.w	$E00F, $0044, $FFE0
		dc.w	$E00F, $0844, $0000
		dc.w	$000F, $1044, $FFE0
		dc.w	$000F, $1844, $0000
;-------------------------------------------------------------------------------
Obj_S2_0xDC_Slot_Machine_Ring: ; Sonic 2 Casino Night left over ; Offset_0x010FC2
		include "data\s2_obj\obj_0xDC.asm"
;-------------------------------------------------------------------------------
Init_Sprite_Table:                                             ; Offset_0x011042
		clr.w	(Sprite_Mask_Flag).w                         ; $FFFFEF3A
		clr.l	(Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s	Offset_0x011072
		lea	(Sprite_Table_Buffer).w,a0                  ; $FFFFF800
		bsr.s	Offset_0x011076
		bsr.s	Offset_0x011090
		lea	(Sprite_Table_Buffer_2&$FFFFFF).l,a0        ; $00FF7880
		bsr.s	Offset_0x011076
		bsr.s	Offset_0x011090
		lea	(Sprite_Table_Buffer_P2&$FFFFFF).l,a0       ; $00FF7B00
		bsr.s	Offset_0x011076
		lea	(Sprite_Table_Buffer_P2_2&$FFFFFF).l,a0     ; $00FF7D80
		bra.s	Offset_0x011076
Offset_0x011072:
		lea	(Sprite_Table_Buffer).w,a0                  ; $FFFFF800
Offset_0x011076:
		moveq	#0,d0
		moveq	#1,d1
		moveq	#$50-1,d7
Offset_0x01107C:
		move.w	D0,(A0)
		move.b	D1,3(A0)
		addq.w	#1,d1
		addq.w	#8,a0
		dbf	D7, Offset_0x01107C
		move.b	D0,-5(A0)
		rts
Offset_0x011090:
		lea	-$280(A0),a0
		move.l	#$EB0301,(A0)+
		move.l	#1,(A0)+
		move.l	#$EB0302,(A0)+
		move.l	#0,(A0)
		rts

; ---------------------------------------------------------------------------
; This runs the code of all the objects that are in Object_RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x110AE: Load_Objects:
RunObjects:
		tst.b	(S2_Teleport_Flag).w
		bne.s	RunObjects_End
		lea	(Obj_Memory_Address).w,a0
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x0110C6
		cmpi.b	#6,(Obj_Player_One+Obj_Routine).w	; is the player dead?
		bcc.s	RunObjectsWhenPlayerIsDead		; if yes, branch

Offset_0x0110C6:
		moveq	#$6E-1,d7					; run the first $6E objects out of levels
; Offset_0x0110C8:
RunObject:
		move.l	(a0),d0					; get the object's ID
		beq.s	RunNextObject				; if it's invalid, skip it
		movea.l	d0,a1					; load the address of the object's code
		jsr	(a1)					; dynamic call! to one of the the entries in Obj_Index
; Offset_0x0110D0:
RunNextObject:
		lea	Obj_Size(a0),a0				; load Obj address
		dbf	d7,RunObject
; Offset_0x0110D8:
RunObjects_End:
		rts
; ---------------------------------------------------------------------------
; This skips certain objects to make enemies and things pause when Sonic dies
; Offset_0x0110DA:
RunObjectsWhenPlayerIsDead:
		moveq	#4-1,d7
		bsr.s	RunObject
		moveq	#$5A-1,d7
		bsr.s	RunObjectDisplayOnly
		moveq	#$10-1,d7
		bra.s	RunObject

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0110E6:
RunObjectDisplayOnly:
		move.l	(a0),d0					; get the object's idea
		beq.s	Offset_0x0110F4				; if it's invalid, skip it
		tst.b	Obj_Flags(a0)				; was the object displayed on the previous frame?
		bpl.s	Offset_0x0110F4				; if not, branch
		jsr	DisplaySprite(pc)

Offset_0x0110F4:
		lea	Obj_Size(a0),a0				; load Obj address
		dbf	d7,RunObjectDisplayOnly
		rts
; End of function RunObjects

;===============================================================================
; Rotina para fazer o objeto cair
; ->>>
;===============================================================================
ObjectFall:                                                    ; Offset_0x0110FE
		move.w	Obj_Speed_X(A0),d0                              ; $0018
		ext.l	D0
		lsl.l	#8,d0
		add.l	D0,Obj_X(A0)                                    ; $0010
		move.w	Obj_Speed_Y(A0),d0                              ; $001A
		addi.w	#$38,Obj_Speed_Y(A0)                          ; $001A
		ext.l	D0
		lsl.l	#8,d0
		add.l	D0,Obj_Y(A0)                                    ; $0014
		rts
;===============================================================================
; Rotina para fazer o objeto cair
; <<<-
;===============================================================================

SpeedToPos:                                                    ; Offset_0x01111E
		move.w	Obj_Speed_X(A0),d0                              ; $0018
		ext.l	D0
		lsl.l	#8,d0
		add.l	D0,Obj_X(A0)                                    ; $0010
		move.w	Obj_Speed_Y(A0),d0                              ; $001A
		ext.l	D0
		lsl.l	#8,d0
		add.l	D0,Obj_Y(A0)                                    ; $0014
		rts

; ---------------------------------------------------------------------------
; Subroutine to delete an object
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011138:
DeleteObject:
		move.l	a0,a1
; Offset_0x01113A:
Delete_A1_Object:
		moveq	#bytesToLcnt(Obj_Size),d0

		moveq   #0,d1					; we want to clear up to the next object
		; delete the object by setting all of its bytes to 0
; Offset_0x01113E:
DeleteObject_FreeRam:
		move.l  d1,(a1)+
		dbf    d0,DeleteObject_FreeRam
		move.w  d1,(a1)+
		rts
; End of function DeleteObject

; ---------------------------------------------------------------------------
; Subroutine to display a sprite/object, when a0 is the object RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011148:
DisplaySprite:
		lea	(Sprite_Table_Input).w,a1
		adda.w	Obj_Priority(a0),a1
		cmpi.w	#$7E,(a1)
		bcc.s	Exit_DisplaySprite
		addq.w	#2,(a1)
		adda.w	(a1),a1
		move.w	a0,(a1)

Exit_DisplaySprite:
		rts
; End of function DisplaySprite

;===============================================================================
; Rotina para anima��o do sprite
; ->>>
;===============================================================================
AnimateSprite:                                                 ; Offset_0x01115E
		moveq	#0,d0
		move.b	Obj_Ani_Number(A0),d0                           ; $0020
		cmp.b	Obj_Ani_Flag(A0),d0                             ; $0021
		beq.s	Offset_0x011176
		move.b	D0, Obj_Ani_Flag(A0)                             ; $0021
		clr.b	Obj_Ani_Frame(A0)                                ; $0023
		clr.b	Obj_Ani_Time(A0)                                 ; $0024
Offset_0x011176:
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bcc.s	Offset_0x0111AC
		add.w	D0,d0
		adda.w	(A1,d0),a1
		move.b	(A1), Obj_Ani_Time(A0)                           ; $0024
		moveq	#0,d1
		move.b	Obj_Ani_Frame(A0),d1                            ; $0023
		move.b	1(A1,d1),d0
		bmi.s	Offset_0x0111AE
Offset_0x011192:
		move.b	D0, Obj_Map_Id(A0)                               ; $0022
		move.b	Obj_Status(A0),d1                               ; $002A
		andi.b	#3,d1
		andi.b	#$FC, Obj_Flags(A0)                              ; $0004
		or.b	D1, Obj_Flags(A0)                                ; $0004
		addq.b	#1, Obj_Ani_Frame(A0)                          ; $0023
Offset_0x0111AC:
		rts
Offset_0x0111AE:
		addq.b	#1,d0
		bne.s	Offset_0x0111BE
		move.b	#0, Obj_Ani_Frame(A0)                          ; $0023
		move.b	1(A1),d0
		bra.s	Offset_0x011192
Offset_0x0111BE:
		addq.b	#1,d0
		bne.s	Offset_0x0111D2
		move.b	2(A1,d1),d0
		sub.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		sub.b	D0,d1
		move.b	1(A1,d1),d0
		bra.s	Offset_0x011192
Offset_0x0111D2:
		addq.b	#1,d0
		bne.s	Offset_0x0111DE
		move.b	2(A1,d1), Obj_Ani_Number(A0)                  ; $0020
		rts
Offset_0x0111DE:
		addq.b	#1,d0
		bne.s	Offset_0x0111F0
		addq.b	#2, Obj_Routine(A0)                            ; $0005
		clr.b	Obj_Ani_Time(A0)                                 ; $0024
		addq.b	#1, Obj_Ani_Frame(A0)                          ; $0023
		rts
Offset_0x0111F0:
		addq.b	#1,d0
		bne.s	Offset_0x0111FC
		move.w	#$7F00, Obj_X(A0)                                ; $0010
		rts
Offset_0x0111FC:
		rts
;-------------------------------------------------------------------------------
AnimateSprite_2:                                               ; Offset_0x0111FE
		moveq	#0,d0
		move.b	Obj_Ani_Number(A0),d0                           ; $0020
		cmp.b	Obj_Ani_Flag(A0),d0                             ; $0021
		beq.s	Offset_0x011216
		move.b	D0, Obj_Ani_Flag(A0)                             ; $0021
		clr.b	Obj_Ani_Frame(A0)                                ; $0023
		clr.b	Obj_Ani_Time(A0)                                 ; $0024
Offset_0x011216:
		subq.b	#1, Obj_Ani_Time(A0)                           ; $0024
		bcc.s	Offset_0x011250
		add.w	D0,d0
		adda.w	(A1,d0),a1
		moveq	#0,d1
		move.b	Obj_Ani_Frame(A0),d1                            ; $0023
		add.w	D1,d1
		move.b	(A1,d1),d0
		bmi.s	Offset_0x011252
Offset_0x011230:
		move.b	1(A1,d1), Obj_Ani_Time(A0)                    ; $0024
		move.b	D0, Obj_Map_Id(A0)                               ; $0022
		move.b	Obj_Status(A0),d1                               ; $002A
		andi.b	#3,d1
		andi.b	#$FC, Obj_Flags(A0)                              ; $0004
		or.b	D1, Obj_Flags(A0)                                ; $0004
		addq.b	#1, Obj_Ani_Frame(A0)                          ; $0023
Offset_0x011250:
		rts
Offset_0x011252:
		addq.b	#1,d0
		bne.s	Offset_0x011260
		move.b	#0, Obj_Ani_Frame(A0)                          ; $0023
		move.b	(A1),d0
		bra.s	Offset_0x011230
Offset_0x011260:
		addq.b	#1,d0
		bne.s	Offset_0x011276
		move.b	1(A1,d1),d0
		sub.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		add.w	D0,d0
		sub.b	D0,d1
		move.b	(A1,d1),d0
		bra.s	Offset_0x011230
Offset_0x011276:
		addq.b	#1,d0
		bne.s	Offset_0x011282
		move.b	1(A1,d1), Obj_Ani_Number(A0)                  ; $0020
		rts
Offset_0x011282:
		addq.b	#1,d0
		bne.s	Offset_0x011294
		addq.b	#2, Obj_Routine(A0)                            ; $0005
		clr.b	Obj_Ani_Time(A0)                                 ; $0024
		addq.b	#1, Obj_Ani_Frame(A0)                          ; $0023
		rts
Offset_0x011294:
		rts
;===============================================================================
; Rotina para anima��o do sprite
; <<<-
;===============================================================================

;===============================================================================
; Rotina para compilar os sprites de acordo com as defini��es dos objetos
; ->>>
;===============================================================================
Build_Sprites:                                                 ; Offset_0x011296
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		bne.w	Build_Sprites_2P                       ; Offset_0x01175E
		moveq	#80-1,d7
		moveq	#0,d6
		lea	(Sprite_Table_Input).w,a5                   ; $FFFFAC00
		lea	(Screen_Pos_Buffer_X).w,a3                  ; $FFFFEE80
		lea	(Sprite_Table_Buffer).w,a6                  ; $FFFFF800
		tst.b	(Title_Card_Flag).w                          ; $FFFFF711
		beq.s	Offset_0x0112C0
		jsr	(Build_HUD).l                            ; Offset_0x007994
		jsr	(BuildRings).l                          ; Offset_0x0089B6
Offset_0x0112C0:
		tst.w	(A5)
		beq.w	Offset_0x01135C
		lea	2(A5),a4
Offset_0x0112CA:
		move.w	(A4)+,a0
		andi.b	#$7F,Obj_Flags(A0)                              ; $0004
		move.b	Obj_Flags(A0),d6                                ; $0004
		move.w	Obj_X(A0),d0                                    ; $0010
		move.w	Obj_Y(A0),d1                                    ; $0014
		btst	#6,d6
		bne.w	Offset_0x0113C2
		btst	#2,d6
		beq.s	Offset_0x011328
		moveq	#0,d2
		move.b	Obj_Width(A0),d2                                ; $0007
		sub.w	(A3),d0
		move.w	D0,d3
		add.w	D2,d3
		bmi.s	Offset_0x011356
		move.w	D0,d3
		sub.w	D2,d3
		cmpi.w	#320,d3
		bge.s	Offset_0x011356
		addi.w	#128,d0
		sub.w	4(A3),d1
		move.b	Obj_Height(A0),d2                               ; $0006
		add.w	D2,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#224,d2
		cmp.w	D2,d1
		bcc.s	Offset_0x011356
		addi.w	#128,d1
		sub.w	D3,d1
Offset_0x011328:
		ori.b	#$80,Obj_Flags(A0)                              ; $0004
		tst.w	D7
		bmi.s	Offset_0x011356
		move.l	Obj_Map(A0),a1                                  ; $000C
		moveq	#0,d4
		btst	#5,d6
		bne.s	Offset_0x01134E
		move.b	Obj_Map_Id(A0),d4                               ; $0022
		add.w	D4,d4
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x011356
Offset_0x01134E:
		move.w	Obj_Art_VRAM(A0),d5                             ; $000A
		jsr	Offset_0x0114D6(PC)
Offset_0x011356:
		subq.w	#2,(A5)
		bne.w	Offset_0x0112CA
Offset_0x01135C:
		cmpa.l	#Sprite_Table_Input,a5                      ; $FFFFAC00
		bne.s	Offset_0x011372
		cmpi.w	#LRz_Act_1,(Current_ZoneAndAct).w              ; $0900, $FFFFFE10
		bne.s	Offset_0x011372
		jsr	(Build_LRz_Rocks).l                      ; Offset_0x012A3A
Offset_0x011372:
		lea	$80(A5),a5
		cmpa.l	#Obj_Memory_Address,a5                      ; $FFFFB000
		bcs.w	Offset_0x0112C0
		move.w	D7,d6
		bmi.s	Offset_0x01138E
		moveq	#0,d0
Offset_0x011386:
		move.w	D0,(A6)
		addq.w	#8,a6
		dbf	D7, Offset_0x011386
Offset_0x01138E:
		subi.w	#80-1,d6
		neg.w   D6
		move.b	D6,(Sprites_Drawn).w                        ; $FFFFF62C
		tst.w	(Sprite_Mask_Flag).w                         ; $FFFFEF3A
		beq.s	Offset_0x0113C0
		clr.w	(Sprite_Mask_Flag).w                         ; $FFFFEF3A
		lea	(Sprite_Table_Buffer-4).w,a0              ; $FFFFF7FC
		move.w	#$7C0,d0
		moveq	#80-1,d1
Offset_0x0113AC:
		addq.w	#8,a0
		cmp.w	(A0),d0
		dbeq	D1,Offset_0x0113AC
		bne.s	Offset_0x0113C0
		move.w	#1,2(A0)
		clr.w	$A(A0)
Offset_0x0113C0:
		rts
Offset_0x0113C2:
		btst	#2,d6
		bne.s	Offset_0x01140C
		moveq	#0,d2
		move.b	Obj_Width(A0),d2                                ; $0007
		subi.w	#128,d0
		move.w	D0,d3
		add.w	D2,d3
		bmi.w	Offset_0x011356
		move.w	D0,d3
		sub.w	D2,d3
		cmpi.w	#320,d3
		bge.w	Offset_0x011356
		addi.w	#128,d0
		move.b	Obj_Height(A0),d2                               ; $0006
		subi.w	#128,d1
		move.w	D1,d3
		add.w	D2,d3
		bmi.w	Offset_0x011356
		move.w	D1,d3
		sub.w	D2,d3
		cmpi.w	#224,d3
		bge.w	Offset_0x011356
		addi.w	#128,d1
		bra.s	Offset_0x01144E
Offset_0x01140C:
		moveq	#0,d2
		move.b	Obj_Width(A0),d2                                ; $0007
		sub.w	(A3),d0
		move.w	D0,d3
		add.w	D2,d3
		bmi.w	Offset_0x011356
		move.w	D0,d3
		sub.w	D2,d3
		cmpi.w	#320,d3
		bge.w	Offset_0x011356
		addi.w	#128,d0
		sub.w	4(A3),d1
		move.b	Obj_Height(A0),d2                               ; $0006
		add.w	D2,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#224,d2
		cmp.w	D2,d1
		bcc.w	Offset_0x011356
		addi.w	#128,d1
		sub.w	D3,d1
Offset_0x01144E:
		ori.b	#$80,Obj_Flags(A0)                              ; $0004
		tst.w	D7
		bmi.w	Offset_0x011356
		move.w	Obj_Art_VRAM(A0),d5                             ; $000A
		move.l	Obj_Map(A0),a2                                  ; $000C
		moveq	#0,d4
		move.b	Obj_Map_Id(A0),d4                               ; $0022
		beq.s	Offset_0x011486
		add.w	D4,d4
		lea	(A2),a1
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x011486
		move.w	D6,d3
		jsr	Offset_0x0115DA(PC)
		move.w	D3,d6
		tst.w	D7
		bmi.w	Offset_0x011356
Offset_0x011486:
		move.w	Obj_Sub_Y(A0),d3                                ; $0016
		subq.w	#1,d3
		bcs.w	Offset_0x011356
		lea	$18(A0),a0
Offset_0x011494:
		move.w	(A0)+,d0
		move.w	(A0)+,d1
		btst	#2,d6
		beq.s	Offset_0x0114B0
		sub.w	(A3),d0
		addi.w	#$80,d0
		sub.w	4(A3),d1
		addi.w	#$80,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
Offset_0x0114B0:
		addq.w	#1,a0
		moveq	#0,d4
		move.b	(A0)+,d4
		add.w	D4,d4
		lea	(A2),a1
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x0114CC
		move.w	D6,-(sp)
		jsr	Offset_0x0115DA(PC)
		move.w	(sp)+,d6
Offset_0x0114CC:
		tst.w	D7
		dbmi	D3,Offset_0x011494
		bra.w	Offset_0x011356
;-------------------------------------------------------------------------------
Offset_0x0114D6:
		lsr.b	#1,d6
		bcs.s	Offset_0x011508
		lsr.b	#1,d6
		bcs.w	Build_Sprite_Upside_Down_Right         ; Offset_0x0115A2
Build_Sprite_Right:                                            ; Offset_0x0114E0
		move.b	(A1)+,d2
		ext.w	D2
		add.w	D1,d2
		move.w	D2,(A6)+
		move.b	(A1)+,(A6)+
		addq.w	#1,a6
		move.w	(A1)+,d2
		add.w	D5,d2
		move.w	D2,(A6)+
		move.w	(A1)+,d2
		add.w	D0,d2
		andi.w	#$1FF,d2
		bne.s	Offset_0x0114FE
		addq.w	#1,d2
Offset_0x0114FE:
		move.w	D2,(A6)+
		subq.w	#1,d7
		dbmi	D4, Build_Sprite_Right                 ; Offset_0x0114E0
		rts
Offset_0x011508:
		lsr.b	#1,d6
		bcs.s	Build_Sprite_Upside_Down_Left          ; Offset_0x011552
Build_Sprite_Left:                                             ; Offset_0x01150C
		move.b	(A1)+,d2
		ext.w	D2
		add.w	D1,d2
		move.w	D2,(A6)+
		move.b	(A1)+,d6
		move.b	D6,(A6)+
		addq.w	#1,a6
		move.w	(A1)+,d2
		add.w	D5,d2
		eori.w	#$800,d2
		move.w	D2,(A6)+
		move.w	(A1)+,d2
		neg.w   D2
		move.b	Offset_0x011542(pc,d6.w),d6
		sub.w	D6,d2
		add.w	D0,d2
		andi.w	#$1FF,d2
		bne.s	Offset_0x011538
		addq.w	#1,d2
Offset_0x011538:
		move.w	D2,(A6)+
		subq.w	#1,d7
		dbmi	D4, Build_Sprite_Left                  ; Offset_0x01150C
		rts
;-------------------------------------------------------------------------------
Offset_0x011542:
		dc.b	$08, $08, $08, $08, $10, $10, $10, $10
		dc.b	$18, $18, $18, $18, $20, $20, $20, $20
;-------------------------------------------------------------------------------
Build_Sprite_Upside_Down_Left:                                 ; Offset_0x011552
		move.b	(A1)+,d2
		ext.w	D2
		neg.w   D2
		move.b	(A1),d6
		move.b	Offset_0x011592(pc,d6.w),d6
		sub.w	D6,d2
		add.w	D1,d2
		move.w	D2,(A6)+
		move.b	(A1)+,d6
		move.b	D6,(A6)+
		addq.w	#1,a6
		move.w	(A1)+,d2
		add.w	D5,d2
		eori.w	#$1800,d2
		move.w	D2,(A6)+
		move.w	(A1)+,d2
		neg.w   D2
		move.b	Offset_0x011542(pc,d6.w),d6
		sub.w	D6,d2
		add.w	D0,d2
		andi.w	#$1FF,d2
		bne.s	Offset_0x011588
		addq.w	#1,d2
Offset_0x011588:
		move.w	D2,(A6)+
		subq.w	#1,d7
		dbmi	D4, Build_Sprite_Upside_Down_Left      ; Offset_0x011552
		rts
;-------------------------------------------------------------------------------
Offset_0x011592:
		dc.b	$08, $10, $18, $20, $08, $10, $18, $20
		dc.b	$08, $10, $18, $20, $08, $10, $18, $20
;-------------------------------------------------------------------------------
Build_Sprite_Upside_Down_Right:                                ; Offset_0x0115A2
		move.b	(A1)+,d2
		ext.w	D2
		neg.w   D2
		move.b	(A1)+,d6
		move.b	D6,2(A6)
		move.b	Offset_0x011592(pc,d6.w),d6
		sub.w	D6,d2
		add.w	D1,d2
		move.w	D2,(A6)+
		addq.w	#2,a6
		move.w	(A1)+,d2
		add.w	D5,d2
		eori.w	#$1000,d2
		move.w	D2,(A6)+
		move.w	(A1)+,d2
		add.w	D0,d2
		andi.w	#$1FF,d2
		bne.s	Offset_0x0115D0
		addq.w	#1,d2
Offset_0x0115D0:
		move.w	D2,(A6)+
		subq.w	#1,d7
		dbmi	D4, Build_Sprite_Upside_Down_Right     ; Offset_0x0115A2
		rts
;-------------------------------------------------------------------------------
Offset_0x0115DA:
		lsr.b	#1,d6
		bcs.s	Offset_0x01162C
		lsr.b	#1,d6
		bcs.w	Offset_0x011706
Offset_0x0115E4:
		move.b	(A1)+,d2
		ext.w	D2
		add.w	D1,d2
		cmpi.w	#$60,d2
		bls.s	Offset_0x011624
		cmpi.w	#$160,d2
		bcc.s	Offset_0x011624
		move.w	D2,(A6)+
		move.b	(A1)+,(A6)+
		addq.w	#1,a6
		move.w	(A1)+,d2
		add.w	D5,d2
		move.w	D2,(A6)+
		move.w	(A1)+,d2
		add.w	D0,d2
		cmpi.w	#$60,d2
		bls.s	Offset_0x01161C
		cmpi.w	#$1C0,d2
		bcc.s	Offset_0x01161C
		move.w	D2,(A6)+
		subq.w	#1,d7
		dbmi	D4, Offset_0x0115E4
		rts
Offset_0x01161C:
		subq.w	#6,a6
		dbf	D4, Offset_0x0115E4
		rts
Offset_0x011624:
		addq.w	#5,a1
		dbf	D4, Offset_0x0115E4
		rts
Offset_0x01162C:
		lsr.b	#1,d6
		bcs.s	Offset_0x011696
Offset_0x011630:
		move.b	(A1)+,d2
		ext.w	D2
		add.w	D1,d2
		cmpi.w	#$60,d2
		bls.s	Offset_0x01167E
		cmpi.w	#$160,d2
		bcc.s	Offset_0x01167E
		move.w	D2,(A6)+
		move.b	(A1)+,d6
		move.b	D6,(A6)+
		addq.w	#1,a6
		move.w	(A1)+,d2
		add.w	D5,d2
		eori.w	#$800,d2
		move.w	D2,(A6)+
		move.w	(A1)+,d2
		neg.w   D2
		move.b	Offset_0x011686(pc,d6.w),d6
		sub.w	D6,d2
		add.w	D0,d2
		cmpi.w	#$60,d2
		bls.s	Offset_0x011676
		cmpi.w	#$1C0,d2
		bcc.s	Offset_0x011676
		move.w	D2,(A6)+
		subq.w	#1,d7
		dbmi	D4, Offset_0x011630
		rts
Offset_0x011676:
		subq.w	#6,a6
		dbf	D4, Offset_0x011630
		rts
Offset_0x01167E:
		addq.w	#5,a1
		dbf	D4, Offset_0x011630
		rts
;-------------------------------------------------------------------------------
Offset_0x011686:
		dc.b	$08, $08, $08, $08, $10, $10, $10, $10
		dc.b	$18, $18, $18, $18, $20, $20, $20, $20
;-------------------------------------------------------------------------------
Offset_0x011696:
		move.b	(A1)+,d2
		ext.w	D2
		neg.w   D2
		move.b	(A1),d6
		move.b	Offset_0x0116F6(pc,d6.w),d6
		sub.w	D6,d2
		add.w	D1,d2
		cmpi.w	#$60,d2
		bls.s	Offset_0x0116EE
		cmpi.w	#$160,d2
		bcc.s	Offset_0x0116EE
		move.w	D2,(A6)+
		move.b	(A1)+,d6
		move.b	D6,(A6)+
		addq.w	#1,a6
		move.w	(A1)+,d2
		add.w	D5,d2
		eori.w	#$1800,d2
		move.w	D2,(A6)+
		move.w	(A1)+,d2
		neg.w   D2
		move.b	Offset_0x011686(pc,d6.w),d6
		sub.w	D6,d2
		add.w	D0,d2
		cmpi.w	#$60,d2
		bls.s	Offset_0x0116E6
		cmpi.w	#$1C0,d2
		bcc.s	Offset_0x0116E6
		move.w	D2,(A6)+
		subq.w	#1,d7
		dbmi	D4, Offset_0x011696
		rts
Offset_0x0116E6:
		subq.w	#6,a6
		dbf	D4, Offset_0x011696
		rts
Offset_0x0116EE:
		addq.w	#5,a1
		dbf	D4, Offset_0x011696
		rts
;-------------------------------------------------------------------------------
Offset_0x0116F6:
		dc.b	$08, $10, $18, $20, $08, $10, $18, $20
		dc.b	$08, $10, $18, $20, $08, $10, $18, $20
;-------------------------------------------------------------------------------
Offset_0x011706:
		move.b	(A1)+,d2
		ext.w	D2
		neg.w   D2
		move.b	(A1)+,d6
		move.b	D6,2(A6)
		move.b	Offset_0x0116F6(pc,d6.w),d6
		sub.w	D6,d2
		add.w	D1,d2
		cmpi.w	#$60,d2
		bls.s	Offset_0x011756
		cmpi.w	#$160,d2
		bcc.s	Offset_0x011756
		move.w	D2,(A6)+
		addq.w	#2,a6
		move.w	(A1)+,d2
		add.w	D5,d2
		eori.w	#$1000,d2
		move.w	D2,(A6)+
		move.w	(A1)+,d2
		add.w	D0,d2
		cmpi.w	#$60,d2
		bls.s	Offset_0x01174E
		cmpi.w	#$1C0,d2
		bcc.s	Offset_0x01174E
		move.w	D2,(A6)+
		subq.w	#$01,d7
		dbmi	D4, Offset_0x011706
		rts
Offset_0x01174E:
		subq.w	#6,a6
		dbf	D4, Offset_0x011706
		rts
Offset_0x011756:
		addq.w	#4,a1
		dbf	D4, Offset_0x011706
		rts
;-------------------------------------------------------------------------------
Build_Sprites_2P:                                              ; Offset_0x01175E
		moveq	#(80-2)-1,d7
		moveq	#0,d6
		lea	(Sprite_Table_Input).w,a5                   ; $FFFFAC00
		lea	(Screen_Pos_Buffer_X).w,a3                  ; $FFFFEE80
		lea	(Sprite_Table_Buffer+$10).w,a6              ; $FFFFF810
		tst.w	(Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
		beq.s	Offset_0x01177A
		lea	((Sprite_Table_Buffer_2+$10)&$FFFFFF),a6  ; $00FF7890
Offset_0x01177A:
		tst.b	(Title_Card_Flag).w                          ; $FFFFF711
		beq.s	Offset_0x011786
		jsr	(Build_HUD_2P).l                         ; Offset_0x00798C
Offset_0x011786:
		move.b	1(A5),(A5)
		beq.w	Offset_0x011832
		lea	2(A5),a4
Offset_0x011792:
		move.w	(A4)+,a0
		andi.b	#$7F,Obj_Flags(A0)                              ; $0004
		move.b	Obj_Flags(A0),d6                                ; $0004
		btst	#4,d6
		bne.w	Offset_0x01182C
		move.w	Obj_X(A0),d0                                    ; $0010
		move.w	Obj_Y(A0),d1                                    ; $0014
		btst	#6,d6
		bne.w	Offset_0x011956
		btst	#2,d6
		beq.s	Offset_0x0117FE
		moveq	#0,d2
		sub.w	(A3),d0
		move.b	Obj_Width(A0),d2                                ; $0007
		add.w	D2,d0
		and.w	(Screen_Wrap_X).w,d0                        ; $FFFFEEA8
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#320,d2
		cmp.w	D2,d0
		bcc.s	Offset_0x01182C
		addi.w	#128,d0
		sub.w	D3,d0
		moveq	#0,d2
		sub.w	Obj_Flags(A3),d1                                ; $0004
		move.b	Obj_Height(A0),d2                               ; $0006
		add.w	D2,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#224/2,d2
		cmp.w	D2,d1
		bcc.s	Offset_0x01182C
		addi.w	#128,d1
		sub.w	D3,d1
Offset_0x0117FE:
		ori.b	#$80, Obj_Flags(A0)                              ; $0004
		tst.w	D7
		bmi.s	Offset_0x01182C
		move.l	Obj_Map(A0),a1                                  ; $000C
		moveq	#0,d4
		btst	#5,d6
		bne.s	Offset_0x011824
		move.b	Obj_Map_Id(A0),d4                               ; $0022
		add.w	D4,d4
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x01182C
Offset_0x011824:
		move.w	Obj_Art_VRAM(A0),d5                             ; $000A
		jsr	Offset_0x0114D6(PC)
Offset_0x01182C:
		subq.b	#2,(A5)
		bne.w	Offset_0x011792
Offset_0x011832:
		lea	$80(A5),a5
		cmpa.l	#Obj_Memory_Address,a5                      ; $FFFFB000
		bcs.w	Offset_0x011786
		tst.w	D7
		bmi.s	Offset_0x01184E
		moveq	#0,d0
Offset_0x011846:
		move.w	D0,(A6)
		addq.w	#8,a6
		dbf	D7, Offset_0x011846
Offset_0x01184E:
		move.l	(Sprite_Table_Input+$102).w,d0             ; $FFFFAD02
		cmpi.l	#(((Obj_Player_One&$FFFF)<<$10)|(Obj_Player_Two&$FFFF)),d0 ; $B000B04A
		bne.s	Offset_0x011860
		swap	D0
		move.l	D0,(Sprite_Table_Input+$102).w             ; $FFFFAD02
Offset_0x011860:
		moveq	#80-1,d7
		lea	(Sprite_Table_Input).w,a5                   ; $FFFFAC00
		lea	(Screen_Pos_Buffer_X_P2).w,a3               ; $FFFFEE68
		lea	(Sprite_Table_Buffer_P2&$FFFFFF),a6       ; $00FF7B00
		tst.w	(Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
		beq.s	Offset_0x01187C
		lea	(Sprite_Table_Buffer_P2_2&$FFFFFF),a6     ; $00FF7D80
Offset_0x01187C:
		tst.b	(Title_Card_Flag).w                          ; $FFFFF711
		beq.s	Offset_0x011888
		jsr	(Build_HUD_P2).l                         ; Offset_0x0079D2
Offset_0x011888:
		tst.b	1(A5)
		beq.w	Offset_0x011934
		lea	2(A5),a4
Offset_0x011894:
		move.w	(A4)+,a0
		move.b	Obj_Flags(A0),d6                                ; $0004
		btst	#3,d6
		bne.w	Offset_0x01192C
		move.w	Obj_X(A0),d0                                    ; $0010
		move.w	Obj_Y(A0),d1                                    ; $0014
		btst	#6,d6
		bne.w	Offset_0x011A22
		btst	#2,d6
		beq.s	Offset_0x0118FA
		moveq	#0,d2
		sub.w	(A3),d0
		move.b	Obj_Width(A0),d2                                ; $0007
		add.w	D2,d0
		and.w	(Screen_Wrap_X).w,d0                        ; $FFFFEEA8
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#320,d2
		cmp.w	D2,d0
		bcc.s	Offset_0x01192C
		addi.w	#128,d0
		sub.w	D3,d0
		moveq	#0,d2
		sub.w	Obj_Flags(A3),d1                                ; $0004
		move.b	Obj_Height(A0),d2                               ; $0006
		add.w	D2,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#224/2,d2
		cmp.w	D2,d1
		bcc.s	Offset_0x01192C
		addi.w	#128,d1
		sub.w	D3,d1
Offset_0x0118FA:
		addi.w	#112,d1
		ori.b	#$80, Obj_Flags(A0)                              ; $0004
		tst.w	D7
		bmi.s	Offset_0x01192C
		move.l	Obj_Map(A0),a1                                  ; $000C
		moveq	#0,d4
		btst	#5,d6
		bne.s	Offset_0x011924
		move.b	Obj_Map_Id(A0),d4                               ; $0022
		add.w	D4,d4
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x01192C
Offset_0x011924:
		move.w	Obj_Art_VRAM(A0),d5                             ; $000A
		jsr	Offset_0x0114D6(PC)
Offset_0x01192C:
		subq.b	#2,1(A5)
		bne.w	Offset_0x011894
Offset_0x011934:
		lea	$80(A5),a5
		cmpa.l	#Obj_Memory_Address,a5                      ; $FFFFB000
		bcs.w	Offset_0x011888
		tst.w	D7
		bmi.s	Offset_0x011950
		moveq	#0,d0
Offset_0x011948:
		move.w	D0,(A6)
		addq.w	#8,a6
		dbf	D7, Offset_0x011948
Offset_0x011950:
		st	(Normal_Sprite_Table_Flag).w                 ; $FFFFEF3E
		rts
Offset_0x011956:
		moveq	#0,d2
		sub.w	(A3),d0
		move.b	Obj_Width(A0),d2                                ; $0007
		add.w	D2,d0
		and.w	(Screen_Wrap_X).w,d0                        ; $FFFFEEA8
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#320,d2
		cmp.w	D2,d0
		bcc.w	Offset_0x01182C
		addi.w	#128,d0
		sub.w	D3,d0
		moveq	#0,d2
		sub.w	Obj_Flags(A3),d1                                ; $0004
		move.b	Obj_Height(A0),d2                               ; $0006
		add.w	D2,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#224/2,d2
		cmp.w	D2,d1
		bcc.w	Offset_0x01182C
		addi.w	#128,d1
		sub.w	D3,d1
		ori.b	#$80, Obj_Flags(A0)                              ; $0004
		tst.w	D7
		bmi.w	Offset_0x01182C
		move.w	Obj_Art_VRAM(A0),d5                             ; $000A
		move.l	Obj_Map(A0),a2                                  ; $000C
		moveq	#0,d4
		move.b	Obj_Map_Id(A0),d4                               ; $0022
		beq.s	Offset_0x0119D4
		add.w	D4,d4
		lea	(A2),a1
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x0119D4
		move.w	D6,d3
		jsr	Offset_0x0115DA(PC)
		move.w	D3,d6
		tst.w	D7
		bmi.w	Offset_0x01182C
Offset_0x0119D4:
		move.w	Obj_Sub_Y(A0),d3                                ; $0016
		subq.w	#1,d3
		bcs.w	Offset_0x01182C
		lea	Obj_Speed_X(A0),a0                              ; $0018
Offset_0x0119E2:
		move.w	(A0)+,d0
		sub.w	(A3),d0
		addi.w	#128,d0
		and.w	(Screen_Wrap_X).w,d0                        ; $FFFFEEA8
		move.w	(A0)+,d1
		sub.w	4(A3),d1
		addi.w	#128,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		addq.w	#1,a0
		moveq	#0,d4
		move.b	(A0)+,d4
		add.w	D4,d4
		lea	(A2),a1
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x011A18
		move.w	D6,-(sp)
		jsr	Offset_0x0115DA(PC)
		move.w	(sp)+,d6
Offset_0x011A18:
		tst.w	D7
		dbmi	D3,Offset_0x0119E2
		bra.w	Offset_0x01182C
Offset_0x011A22:
		moveq	#0,d2
		sub.w	(A3),d0
		move.b	Obj_Width(A0),d2                                ; $0007
		add.w	D2,d0
		and.w	(Screen_Wrap_X).w,d0                        ; $FFFFEEA8
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#320,d2
		cmp.w	D2,d0
		bcc.w	Offset_0x01192C
		addi.w	#128,d0
		sub.w	D3,d0
		moveq	#0,d2
		sub.w	Obj_Flags(A3),d1                                ; $0004
		move.b	Obj_Height(A0),d2                               ; $0006
		add.w	D2,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		move.w	D2,d3
		add.w	D2,d2
		addi.w	#224/2,d2
		cmp.w	D2,d1
		bcc.w	Offset_0x01192C
		addi.w	#$F0,d1
		sub.w	D3,d1
		ori.b	#$80, Obj_Flags(A0)                              ; $0004
		tst.w	D7
		bmi.w	Offset_0x01192C
		move.w	Obj_Art_VRAM(A0),d5                             ; $000A
		move.l	Obj_Map(A0),a2                                  ; $000C
		moveq	#0,d4
		move.b	Obj_Map_Id(A0),d4                               ; $0022
		beq.s	Offset_0x011AA0
		add.w	D4,d4
		lea	(A2),a1
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x011AA0
		move.w	D6,d3
		jsr	Offset_0x0115DA(PC)
		move.w	D3,d6
		tst.w	D7
		bmi.w	Offset_0x01192C
Offset_0x011AA0:
		move.w	Obj_Sub_Y(A0),d3                                ; $0016
		subq.w	#1,d3
		bcs.w	Offset_0x01192C
		lea	Obj_Speed_X(A0),a0                              ; $0018
Offset_0x011AAE:
		move.w	(A0)+,d0
		sub.w	(A3),d0
		addi.w	#128,d0
		and.w	(Screen_Wrap_X).w,d0                        ; $FFFFEEA8
		move.w	(A0)+,d1
		sub.w	Obj_Flags(A3),d1                                ; $0004
		addi.w	#128,d1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		addi.w	#224/2,d1
		addq.w	#1,a0
		moveq	#0,d4
		move.b	(A0)+,d4
		add.w	D4,d4
		lea	(A2),a1
		adda.w	(A1,d4),a1
		move.w	(A1)+,d4
		subq.w	#1,d4
		bmi.s	Offset_0x011AE8
		move.w	D6,-(sp)
		jsr	Offset_0x0115DA(PC)
		move.w	(sp)+,d6
Offset_0x011AE8:
		tst.w	D7
		dbmi	D3,Offset_0x011AAE
		bra.w	Offset_0x01192C
;===============================================================================
; Rotina para compilar os sprites de acordo com as defini��es dos objetos
; <<<-
;===============================================================================

;-------------------------------------------------------------------------------
MarkObjGone:                                                   ; Offset_0x011AF2
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$280,d0
		bhi.w	Offset_0x011B0A
		bra.w	DisplaySprite                          ; Offset_0x011148
Offset_0x011B0A:
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Offset_0x011B16
		move.w	D0,a2
		bclr	#7,(A2)
Offset_0x011B16:
		bra.w	DeleteObject                           ; Offset_0x011138
;-------------------------------------------------------------------------------
MarkObjGone_2:                                                 ; Offset_0x011B1A
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$280,d0
		bhi.w	Offset_0x011B2E
		bra.w	DisplaySprite                          ; Offset_0x011148
Offset_0x011B2E:
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Offset_0x011B3A
		move.w	D0,a2
		bclr	#7,(A2)
Offset_0x011B3A:
		bra.w	DeleteObject                           ; Offset_0x011138
;-------------------------------------------------------------------------------
MarkObjGone_3:                                                 ; Offset_0x011B3E
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$280,d0
		bhi.w	Offset_0x011B54
		rts
Offset_0x011B54:
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Offset_0x011B60
		move.w	D0,a2
		bclr	#7,(A2)
Offset_0x011B60:
		bra.w	DeleteObject                           ; Offset_0x011138
;-------------------------------------------------------------------------------
MarkObjGone_4:                                                 ; Offset_0x011B64
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		bne.s	MarkObjGone_4_2P                       ; Offset_0x011B92
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$280,d0
		bhi.w	Offset_0x011B82
		bra.w	DisplaySprite                          ; Offset_0x011148
Offset_0x011B82:
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Offset_0x011B8E
		move.w	D0,a2
		bclr	#7,(A2)
Offset_0x011B8E:
		bra.w	DeleteObject                           ; Offset_0x011138
MarkObjGone_4_2P:                                              ; Offset_0x011B92
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF00,d0
		move.w	D0,d1
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$300,d0
		bhi.w	Offset_0x011BAC
		bra.w	DisplaySprite                          ; Offset_0x011148
Offset_0x011BAC:
		sub.w	(Camera_X_Left_P2).w,d1                     ; $FFFFF7DC
		cmpi.w	#$300,d1
		bhi.w	Offset_0x011BBC
		bra.w	DisplaySprite                          ; Offset_0x011148
Offset_0x011BBC:
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Offset_0x011BC8
		move.w	D0,a2
		bclr	#7,(A2)
Offset_0x011BC8:
		bra.w	DeleteObject                           ; Offset_0x011138
;-------------------------------------------------------------------------------
MarkObjGone_5: ; Usado pelos an�is ; MarkObjGone_2 in Sonic 2  ; Offset_0x011BCC
		move.w	Obj_X(A0),d0                                    ; $0010
MarkObjGone_5_D0:                                              ; Offset_0x011BD0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$280,d0
		bhi.w	Offset_0x011BE8
		bsr.w	Add_SpriteToCollisionResponseList         ; Offset_0x00A540
		bra.w	DisplaySprite                          ; Offset_0x011148
Offset_0x011BE8:
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Offset_0x011BF4
		move.w	D0,a2
		bclr	#7,(A2)
Offset_0x011BF4:
		bra.w	DeleteObject                           ; Offset_0x011138

; ===========================================================================
; ---------------------------------------------------------------------------
; Objects Manager
; Subroutine that keeps track of any objects that need to remember their state,
; such as monitors or enemies. At this point, the object manager is missing the
; two-player functions, making it much more compact than the final.
;
; input variables:
; writes:
;  d0,d1
;  d6 = camera position
;
;  a0 = address in object placement list
;  a3 = respawn table
; ---------------------------------------------------------------------------

; Offset_0x11BF8: Load_Object_Pos:
ObjectsManager:
		moveq	#0,d0
		move.b	(Object_Pos_Routine).w,d0
		jmp	ObjectsManager_States(pc,d0.w)
; ===========================================================================
; Offset_0x11C02: Load_Object_Pos_Index:
ObjectsManager_States:
		bra.w	ObjectsManager_Init
		bra.w	ObjectsManager_Main
		rts
; ===========================================================================
; Offset_0x011C0C:
ObjectsManager_Init:
		addq.b	#4,(Object_Pos_Routine).w
		lea	(Object_Respawn_Table).w,a0
		moveq	#0,d0
		moveq	#$7F,d1

Offset_0x011C18:
		move.l	d0,(a0)+
		dbf	d1,Offset_0x011C18

		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(Objects_Layout).l,a0
		movea.l	(a0,d0.w),a0

		tst.w	(Two_Player_Flag).w
		beq.s	Offset_0x011C60
		addq.b	#4,(Object_Pos_Routine).w
		jsr	AllocateObject(pc)
		bne.s	Offset_0x011C5A
		lea	(Object_Respawn_Table).w,a3
		lea	(Object_List).l,a4
		move.w	#$800,d6

Offset_0x011C4E:
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011C5A				; if yes, branch
		jsr	ChkLoadObj(pc)				; load object
		addq.w	#1,a3					; respawn index of next object to the right
		beq.s	Offset_0x011C4E				; continue loading objects, if the SST isn't full

Offset_0x011C5A:
		clr.w	(Camera_X_Left).w
		rts
; ---------------------------------------------------------------------------

Offset_0x011C60:
		move.l	a0,(Object_Pos_Next).w
		move.l	a0,(Object_Pos_Previous).w
		lea	(Object_Respawn_Table).w,a3		; reset a3
		move.w	(Camera_X).w,d6
		subi.w	#$80,d6					; look one chunk to the left
		bcc.s	Offset_0x011C78				; if the result was negative,
		moveq	#0,d6					; cap at zero

Offset_0x011C78:
		andi.w	#$FF80,d6				; limit to increments of $80 (width of a chunk)
		move.l	(Object_Pos_Next).w,a0			; load address of object placement list

Offset_0x011C80:
		; at the beginning of a level this gives respawn table entries to any object that is one chunk
		; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011C8A				; if yes, branch
		addq.w	#6,a0					; next object
		addq.w	#1,a3					; respawn index of next object to the right
		bra.s	Offset_0x011C80
; ---------------------------------------------------------------------------

Offset_0x011C8A:
		move.l	a0,(Object_Pos_Next).w			; remember rightmost object that has been processed, so far (we still need to look forward)
		move.w	a3,(Object_Respaw_Next).w
		lea	(Object_Respawn_Table).w,a3
		move.l	(Object_Pos_Previous).w,a0		; reset a0
		subi.w	#$80,d6					; look even farther left (any object behind this is out of range)
		bcs.s	Offset_0x011CAA				; branch, if camera position would be behind level's left boundary

Offset_0x011CA0:
		; count how many objects are behind the screen that are not in range and need to remember their state
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011CAA				; if yes, branch
		addq.w	#6,a0					; next object
		addq.w	#1,a3					; respawn index of next object to the left
		bra.s	Offset_0x011CA0
; ---------------------------------------------------------------------------

Offset_0x011CAA:
		move.l	a0,(Object_Pos_Previous).w		; remember current object from the left
		move.w	a3,(Object_Respaw_Previous).w
		move.w	#-1,(Camera_X_Current).w		; make sure ObjectsManager_GoingForward is run
		move.w	#-1,(Camera_X_Current_P2).w

; Offset_0x011CBE:
ObjectsManager_Main:
		move.w	(Camera_X).w,d1
		subi.w	#$80,d1
		andi.w	#$FF80,d1
		move.w	d1,(Camera_X_Left).w

		lea     (Object_List).l,a4
		move.w  (Camera_X).w,d6
		andi.w  #$FF80,d6
		cmp.w   (Camera_X_Current).w,d6			; is the X range the same as last time?
		beq.w   ObjectsManager_SameXRange		; if yes, branch
		bge.s   ObjectsManager_GoingForward		; if new pos is greater than old pos, branch

; ObjectsManager_GoingBackward:
		; if the player is moving back
		move.w  d6,(Camera_X_Current).w			; remember current position for next time

		move.l  (Object_Pos_Previous).w,a0		; get current object from the left
		move.w  (Object_Respaw_Previous).w,a3
		subi.w  #$80,d6					; look one chunk to the left
		bcs.s   Offset_0x011D16				; branch, if camera position would be behind level's left boundary
		jsr     AllocateObject(pc)
		bne.s   Offset_0x011D16

Offset_0x011CFE:
		; load all objects left of the screen that are now in range
		cmp.w	-6(a0),d6				; is the previous object's X pos less than d6?
		bge.s	Offset_0x011D16				; if yes, branch
		subq.w	#6,a0					; get object's address
		subq.w	#1,a3					; respawn index of this object
		jsr	ChkLoadObj(pc)				; load object
		bne.s	Offset_0x011D12				; if the SST is full, branch
		subq.w	#6,a0
		bra.s	Offset_0x011CFE				; continue with previous object
; ---------------------------------------------------------------------------

Offset_0x011D12:
		; undo a few things, if the object couldn't load
		addq.w	#6,a0					; go back to last object
		addq.w	#1,a3					; since we didn't load the object, undo last change

Offset_0x011D16:
		move.l	a0,(Object_Pos_Previous).w		; remember current object from the left
		move.w	a3,(Object_Respaw_Previous).w

		move.l	(Object_Pos_Next).w,a0			; get next object from the right
		move.w	(Object_Respaw_Next).w,a3
		addi.w	#$300,d6				; look two chunks beyond the right edge of the screen

Offset_0x011D2A:
		; subtract number of objects that have been moved out of range (from the right side)
		cmp.w	-6(a0),d6				; is the previous object's X pos less than d6?
		bgt.s	Offset_0x011D36				; if yes, branch
		subq.w	#6,a0
		subq.w	#1,a3					; respawn index of next object to the right
		bra.s	Offset_0x011D2A				; continue with previous object
; ---------------------------------------------------------------------------

Offset_0x011D36:
		move.l	a0,(Object_Pos_Next).w			; remember next object from the right
		move.w	a3,(Object_Respaw_Next).w
		rts
; ---------------------------------------------------------------------------
; Offset_0x011D40:
ObjectsManager_GoingForward:
		move.w	d6,(Camera_X_Current).w

		move.l	(Object_Pos_Next).w,a0
		move.w	(Object_Respaw_Next).w,a3		; get next object from the right
		addi.w	#$280,d6				; look two chunks forward
		jsr	AllocateObject(pc)
		bne.s	Offset_0x011D62

Offset_0x011D56:
		; load all objects right of the screen that are now in range
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011D62				; if yes, branch
		jsr	ChkLoadObj(pc)				; load object (and get address of next object)
		addq.w	#1,a3					; respawn index of next object to the right
		beq.s	Offset_0x011D56				; continue loading objects, if the SST isn't full

Offset_0x011D62:
		move.l	a0,(Object_Pos_Next).w			; remember next object from the right
		move.w	a3,(Object_Respaw_Next).w

		move.l	(Object_Pos_Previous).w,a0		; get current object from the left
		move.w	(Object_Respaw_Previous).w,a3
		subi.w	#$300,d6				; look one chunk behind the left edge of the screen
		bcs.s	Offset_0x011D82				; branch, if camera position would be behind level's left boundary

Offset_0x011D78:
		; subtract number of objects that have been moved out of range (from the left)
		cmp.w	(a0),d6					; is object's x position >= d6?
		bls.s	Offset_0x011D82				; if yes, branch
		addq.w	#6,a0
		addq.w	#1,a3					; respawn index of next object to the left
		bra.s	Offset_0x011D78				; continue with previous object
; ---------------------------------------------------------------------------

Offset_0x011D82:
		move.l	a0,(Object_Pos_Previous).w		; remember current object from the left
		move.w	a3,(Object_Respaw_Previous).w
; Offset_0x011D8A:
ObjectsManager_SameXRange:
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to check if an object needs to be loaded.
;
; input variables:
;  a0 = address in object placement list
;  a3 = object respawn table
;
; writes:
;  d0,d1,d2
;  a1 = object
; ---------------------------------------------------------------------------
; Offset_0x011D8C:
ChkLoadObj:
		bset	#7,(a3)					; mark object as loaded
		beq.s	Offset_0x011D98				; branch if it was already loaded
		addq.w	#6,a0					; next object
		moveq	#0,d1					; let the objects manager know that it can keep going
		rts
; ---------------------------------------------------------------------------

Offset_0x011D98:
		move.w	(a0)+,Obj_X(a1)
		move.w	(a0)+,d1				; there are three things stored in this word
		move.w	d1,d2					; copy for later
		andi.w	#$FFF,d1				; get y-position
		move.w	d1,Obj_Y(a1)
		rol.w	#3,d2					; adjust bits
		andi.w	#3,d2					; get render flags
		move.b	d2,Obj_Flags(A1)
		move.b	d2,Obj_Status(A1)
		move.b	(a0)+,d2
		add.w	d2,d2
		add.w	d2,d2
		move.l	(a4,d2.w),(a1)
		move.b	(a0)+,Obj_Subtype(a1)
		move.w	a3,Obj_Respaw_Ref(a1)
; Offset_0x11DC8: SingleObjectLoad_A1_D0:
AllocateObject_Immediate:
		subq.w	#1,d0
		bmi.s	Offset_0x011DD6

Offset_0x011DCC:
		lea	Obj_Size(a1),a1
		tst.l	(a1)
		dbeq	d0,Offset_0x011DCC

Offset_0x011DD6:
		rts
; End of function ObjectsManager

; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011DD8: SingleObjectLoad:
AllocateObject:
		lea	(Obj_Dynamic_RAM).w,a1
		moveq	#Max_Dynamic_Objects,d0
		bra.s	Loop_Find_Free_Ram
; End of function AllocateObject

; ===========================================================================
; ---------------------------------------------------------------------------
; Single object loading subroutine
; Find an empty object array AFTER the current one in the table
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011DE0: SingleObjectLoad_A0:
AllocateObjectAfterCurrent:
		move.l	a0,a1
		move.w	#Obj_Dynamic_RAM_End,d0
		sub.w	a0,d0
		lsr.w	#6,d0					; divide by $40
		move.b	Sprite_LookupTable(pc,d0.w),d0		; load the right number of objects from table
		bmi.s	Exit_SingleObjectLoad			; if negative, we have failed!
; Offset_0x011DF0:
Loop_Find_Free_Ram:
		lea	Obj_Size(a1),a1				; load obj address
		tst.l	(a1)					; is object RAM slot empty?
		dbeq	d0,Loop_Find_Free_Ram			; if yes, branch
; Offset_0x011DFA:
Exit_SingleObjectLoad:
		rts
; End of function AllocateObjectAfterCurrent

; ===========================================================================
; What this does is setup the right loop counter for the SST, since it is
; $4A bytes in this game rather than $40, meaning that just using bit-shifting
; will not suffice for properly setting up the object table
; Offset_0x011DFC: Sprite_Table_2:
Sprite_LookupTable:
.a		set	Obj_Dynamic_RAM
.b		set	Obj_Dynamic_RAM_End
.c		set	.b					; begin from bottom of array and decrease backwards
		; this is bugged; it should actually round *up*; as a result,
		; the first object slot might not get an entry
		rept	(.b-.a)/$40				; repeat for all slots, minus exception
.c		set	.c-$40					; address for previous $40 (also skip last part)
		dc.b	(.b-.c-1)/Obj_Size-1			; write possible slots according to object_size division + hack + dbf hack
		endm
		even

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load level boundaries and start locations
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x011E64:
LevelSizeLoad:
		clr.b	(Rasters_Flag).w
		clr.b	(Tmp_EE08).w
		clr.b	(Sonic_Scroll_Lock_Flag).w
		clr.b	(Miles_Scroll_Lock_Flag).w
		clr.b	(Fast_Vertical_Scroll_Flag).w
		moveq	#0,d0
		move.b	d0,(Dynamic_Resize_Routine).w
		move.w	d0,(PalCycle_Done_Flag).w
		move.w	d0,(VBlank_Subroutine).w
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		lea	LevelSizes(pc,d0.w),a0
		move.l	(a0)+,d0
		move.l	d0,(Sonic_Level_Limits_Min_X).w
		move.l	d0,(Level_Limits_Min_X).w
		move.l	d0,(Miles_Level_Limits_Min_X).w
		move.l	(a0)+,d0
		move.l	d0,(Sonic_Level_Limits_Min_Y).w
		move.l	d0,(Level_Limits_Min_Y).w
		move.l	d0,(Miles_Level_Limits_Min_Y).w
		move.w	#$60,(Distance_From_Top).w
		move.w	#$60,(Distance_From_Top_P2).w
		move.w	#-1,(Screen_Wrap_X).w
		move.w	#-1,(Screen_Wrap_Y).w
		bra.w	LevelSize_CheckStarPost
; ---------------------------------------------------------------------------
; A lot of these entries use generic data, making it piss easy to break
; through the level boundaries with Debug Mode... oops!
; Offset_0x011ECA: Level_Size_Array:
LevelSizes:	dc.w	0,     $6000,      0,   $390	; AIZ1
		dc.w	0,     $4640,      0,   $4F0	; AIZ2
		dc.w	0,     $6000,      0,  $1000	; HCZ1
		dc.w	0,     $6000,      0,  $1000	; HCZ2
		dc.w	0,     $6000,  -$100,  $1000	; MGZ1
		dc.w	0,     $6000,      0,  $1000	; MGZ2
		dc.w	0,     $6000,      0,   $B20	; CNZ1
		dc.w	0,     $6000,      0,  $1000	; CNZ2
		dc.w	0,     $6000,      0,  $1000	; FBZ1
		dc.w	0,     $6000,      0,  $1000	; FBZ2
		dc.w	0,     $7000,  -$100,   $800	; ICZ1
		dc.w	0,     $7000,      0,   $B20	; ICZ2
		dc.w	0,     $6000,      0,  $1000	; LBZ1
		dc.w	0,     $6000,      0,  $1000	; LBZ2
		dc.w	0,     $6000,      0,  $1000	; MVZ1
		dc.w	0,     $6000,      0,  $1000	; MVZ2
		dc.w	0,     $6000,      0,  $1000	; SOZ1
		dc.w	0,     $6000,      0,  $1000	; SOZ2
		dc.w	0,     $6000,      0,  $1000	; LRZ1
		dc.w	0,     $6000,      0,  $1000	; LRZ2
		dc.w	0,     $6000,      0,  $1000	; SSZ1
		dc.w	0,     $6000,      0,  $1000	; SSZ2
		dc.w	0,     $6000,      0,  $1000	; DEZ1
		dc.w	0,     $6000,      0,  $1000	; DEZ2
		dc.w	0,     $6000,      0,  $1000	; TDZ1
		dc.w	0,     $6000,      0,  $1000	; TDZ2
		dc.w	0,     $6000,      0,  $1000	; 0D 00
		dc.w	0,     $6000,      0,  $1000	; 0D 01
		dc.w	0,     $12C0,   $100,   $190	; ALZ1
		dc.w	0,     $12C0,   $100,   $190	; ALZ2
		dc.w	0,     $12C0,   $200,   $390	; BPZ1
		dc.w	0,     $12C0,   $200,   $390	; BPZ2
		dc.w	0,     $12C0,   $100,   $190	; DPZ1
		dc.w	0,     $12C0,   $100,   $190	; DPZ2
		dc.w	0,     $12C0,  -$100,  $1000	; CGZ1
		dc.w	0,     $12C0,      0,    $90	; CGZ2
		dc.w	0,     $12C0,   $100,   $190	; EMZ1
		dc.w	0,     $12C0,   $100,   $190	; EMZ2
		dc.w	$60,     $60,      0,   $240	; Gumball Machine 1
		dc.w	$60,     $60,      0,   $240	; Gumball Machine 2
		dc.w	0,     $6000,      0,  $1000	; Glowing Spheres 1
		dc.w	0,     $6000,      0,  $1000	; Glowing Spheres 2
		dc.w	0,     $6000,      0,  $1000	; Slot Machine 1
		dc.w	0,     $6000,      0,  $1000	; Slot Machine 2
		dc.w	0,     $6000,      0,  $1000	; LRZ Boss
		dc.w	0,     $6000,      0,  $1000	; HPZ
		dc.w	0,     $6000,      0,  $1000	; DEZ Boss
		dc.w	0,     $6000,      0,  $1000	; HPZ Portal
; ===========================================================================
; Offset_0x01204A:
LevelSize_CheckStarPost:
		tst.b	(Saved_Level_Flag).w			; had we hit a checkpoint?
		beq.s	LevelSize_SpawnPlayer			; if not, branch
		jsr	(Star_Post_Load_Info).l
		move.w	(Obj_Player_One+Obj_X).w,d1
		move.w	(Obj_Player_One+Obj_Y).w,d0
		bra.s	Offset_0x012098
; ===========================================================================
; Offset_0x012060:
LevelSize_SpawnPlayer:
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	(Player_Start_Position_Array).l,a1
		lea	(a1,d0.w),a1
		moveq	#0,d1
		move.w	(a1)+,d1
		move.w	d1,(Obj_Player_One+Obj_X).w
		moveq	#0,d0
		move.w	(a1),d0
		move.w	d0,(Obj_Player_One+Obj_Y).w
		tst.w	(Auto_Control_Player_Flag).w		; is this the AIZ intro?
		beq.s	Offset_0x012098				; if not, branch
		move.w	#$40,d1
		move.w	d1,(Obj_Player_One+Obj_X).w
		move.w	#$420,d0
		move.w	d0,(Obj_Player_One+Obj_Y).w

Offset_0x012098:
		subi.w	#$A0,d1
		bcc.s	Offset_0x0120A0
		moveq	#0,d1

Offset_0x0120A0:
		tst.w	(Two_Player_Flag).w			; are we in Competition Mode?
		bne.s	Offset_0x0120B0				; if yes, branch
		move.w	(Sonic_Level_Limits_Max_X).w,d2
		cmp.w	d2,d1
		bcs.s	Offset_0x0120B0
		move.w	d2,d1

Offset_0x0120B0:
		move.w	d1,(Camera_X).w
		move.w	d1,(Camera_X_P2).w
		subi.w	#$60,d0
		bcc.s	Offset_0x0120C0
		moveq	#0,d0

Offset_0x0120C0:
		cmp.w	(Sonic_Level_Limits_Max_Y).w,d0
		blt.s	Offset_0x0120CA
		move.w	(Sonic_Level_Limits_Max_Y).w,d0

Offset_0x0120CA:
		move.w	d0,(Camera_Y).w
		move.w	d0,(Camera_Y_P2).w
		rts
; End of function LevelSizeLoad

; ---------------------------------------------------------------------------
; Subroutine to raster scroll the background based on character movement
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0120D4: Background_Scroll_Speed:
DeformBgLayer:
		tst.b	(Rasters_Flag).w
		beq.s	Offset_0x0120DC
		rts

Offset_0x0120DC:
		clr.w	(Camera_RAM).w
		clr.w	(Vertical_Scrolling).w
		clr.w	(Horizontal_Scrolling_P2).w
		clr.w	(Vertical_Scrolling_P2).w
		tst.w	(Two_Player_Flag).w
		bne.w	Offset_0x01214A
		tst.b	(Sonic_Scroll_Lock_Flag).w
		bne.s	Offset_0x012146
		lea	(Obj_Player_One).w,a0
		lea	(Camera_X).w,a1
		lea	(Sonic_Level_Limits_Min_X).w,a2
		lea	(Camera_RAM).w,a4
		lea	(Camera_X_Scroll_Delay).w,a5
		lea	(Position_Table_Data).w,a6
		cmpi.w	#2,(Player_Selected_Flag).w
		bne.s	Offset_0x012122
		lea	(Camera_X_Scroll_Delay_2P).w,a5
		lea	(Position_Table_Data_P2).w,a6

Offset_0x012122:
		bsr.w	Scroll_Horizontal
		lea	(Camera_Y).w,a1
		lea	(Sonic_Level_Limits_Min_X).w,a2
		lea	(Vertical_Scrolling).w,a4
		move.w	(Distance_From_Top).w,d3
		cmpi.w	#2,(Player_Selected_Flag).w
		bne.s	Offset_0x012142
		move.w	(Distance_From_Top_P2).w,d3

Offset_0x012142:
		bsr.w	Scroll_Vertical

Offset_0x012146:
		bra.w	RunDynamicLevelEvents
; ---------------------------------------------------------------------------

Offset_0x01214A:
		tst.b   (Sonic_Scroll_Lock_Flag).w
		bne.s   Offset_0x01219C
		lea     (Obj_Player_One).w,a0
		lea     (Camera_X).w,a1
		lea     (Sonic_Level_Limits_Min_X).w,a2
		lea     (Camera_RAM).w,a4
		lea     (Camera_X_Scroll_Delay).w,a5
		lea     (Position_Table_Data).w,a6
		cmpi.w  #2,(Player_Selected_Flag).w
		bne.s   Offset_0x012178
		lea     (Camera_X_Scroll_Delay_2P).w,a5
		lea     (Position_Table_Data_P2).w,a6

Offset_0x012178:
		bsr.w	Offset_0x012366
		lea	(Camera_Y).w,a1
		lea	(Sonic_Level_Limits_Min_X).w,a2
		lea	(Vertical_Scrolling).w,a4
		move.w	(Distance_From_Top).w,d3
		cmpi.w	#2,(Player_Selected_Flag).w
		bne.s	Offset_0x012198
		move.w	(Distance_From_Top_P2).w,d3

Offset_0x012198:
		bsr.w	Scroll_Vertical

Offset_0x01219C:
		tst.b	(Miles_Scroll_Lock_Flag).w
		bne.s	Offset_0x0121D2
		lea	(Obj_Player_Two).w,a0
		lea	(Camera_X_P2).w,a1
		lea	(Miles_Level_Limits_Min_X).w,a2
		lea	(Horizontal_Scrolling_P2).w,a4
		lea	(Camera_X_Scroll_Delay_2P).w,a5
		lea	(Position_Table_Data_P2).w,a6
		bsr.w	Offset_0x012366
		lea	(Camera_Y_P2).w,a1
		lea	(Miles_Level_Limits_Min_X).w,a2
		lea	(Vertical_Scrolling_P2).w,a4
		move.w	(Distance_From_Top_P2).w,d3
		bsr.w	Scroll_Vertical

Offset_0x0121D2:
		bra.w	RunDynamicLevelEvents
; End of function DeformBgLayer

;-------------------------------------------------------------------------------
Scroll_Horizontal:                                             ; Offset_0x0121D6
		move.w	(A1),d4
		tst.b	(S2_Teleport_Flag).w                         ; $FFFFF623
		bne.s	Offset_0x012214
		move.w	(A5),d1
		beq.s	Offset_0x012200
		subi.w	#$100,d1
		move.w	D1,(A5)
		moveq	#0,d1
		move.b	(A5),d1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	2(A5),d0
		sub.b	D1,d0
		move.w	(A6,d0),d0
		andi.w	#$7FFF,d0
		bra.s	Offset_0x012204
Offset_0x012200:
		move.w	$10(A0),d0
Offset_0x012204:
		sub.w	(A1),d0
		subi.w	#$90,d0
		blt.s	Offset_0x012216
		subi.w	#$10,d0
		bge.s	Offset_0x01222A
		clr.w	(A4)
Offset_0x012214:
		rts
;-------------------------------------------------------------------------------
Offset_0x012216:
		cmpi.w	#-$18,d0
		bgt.s	Offset_0x012220
		move.w	#-$18,d0
Offset_0x012220:
		add.w	(A1),d0
		cmp.w	(A2),d0
		bgt.s	Offset_0x012240
		move.w	(A2),d0
		bra.s	Offset_0x012240
;-------------------------------------------------------------------------------
Offset_0x01222A:
		cmpi.w	#$18,d0
		bcs.s	Offset_0x012234
		move.w	#$18,d0
Offset_0x012234:
		add.w	(A1),d0
		cmp.w	2(A2),d0
		blt.s	Offset_0x012240
		move.w	2(A2),d0
Offset_0x012240:
		move.w	D0,d1
		sub.w	(A1),d1
		asl.w	#8,d1
		move.w	D0,(A1)
		move.w	D1,(A4)
		rts
;-------------------------------------------------------------------------------
Scroll_Vertical:                                               ; Offset_0x01224C
		moveq	#0,d1
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	(A1),d0
		cmpi.w	#$FF00,(Sonic_Level_Limits_Min_Y).w         ; $FFFFEE18
		bne.s	Offset_0x012260
		and.w	(Screen_Wrap_Y).w,d0                        ; $FFFFEEAA
Offset_0x012260:
		btst	#2, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x01226A
		subq.w	#5,d0
Offset_0x01226A:
		move.w	D3,d1
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s	Offset_0x012274
		lsr.w	#1,d1
Offset_0x012274:
		btst	#1, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x012292
		addi.w	#$20,d0
		sub.w	D1,d0
		bcs.s	Offset_0x0122DE
		subi.w	#$40,d0
		bcc.s	Offset_0x0122DE
		tst.b	(Level_Limits_Y_Changing).w                  ; $FFFFEE32
		bne.s	Offset_0x0122F0
		bra.s	Offset_0x01229C
Offset_0x012292:
		sub.w	D1,d0
		bne.s	Offset_0x0122A0
		tst.b	(Level_Limits_Y_Changing).w                  ; $FFFFEE32
		bne.s	Offset_0x0122F0
Offset_0x01229C:
		clr.w	(A4)
		rts
Offset_0x0122A0:
		cmpi.w	#$60,d3
		bne.s	Offset_0x0122CC
		tst.b	(Fast_Vertical_Scroll_Flag).w                ; $FFFFEE39
		bne.s	Offset_0x0122DE
		move.w	Obj_Inertia(A0),d1                              ; $001C
		bpl.s	Offset_0x0122B4
		neg.w   D1
Offset_0x0122B4:
		cmpi.w	#$800,d1
		bcc.s	Offset_0x0122DE
		move.w	#$600,d1
		cmpi.w	#6,d0
		bgt.s	Offset_0x012328
		cmpi.w	#-6,d0
		blt.s	Offset_0x012306
		bra.s	Offset_0x0122F6
Offset_0x0122CC:
		move.w	#$200,d1
		cmpi.w	#2,d0
		bgt.s	Offset_0x012328
		cmpi.w	#-2,d0
		blt.s	Offset_0x012306
		bra.s	Offset_0x0122F6
Offset_0x0122DE:
		move.w	#$1800,d1
		cmpi.w	#$18,d0
		bgt.s	Offset_0x012328
		cmpi.w	#-$18,d0
		blt.s	Offset_0x012306
		bra.s	Offset_0x0122F6
Offset_0x0122F0:
		moveq	#0,d0
		move.b	D0,(Level_Limits_Y_Changing).w              ; $FFFFEE32
Offset_0x0122F6:
		moveq	#0,d1
		move.w	D0,d1
		add.w	(A1),d1
		tst.w	D0
		bpl.w	Offset_0x012330
		bra.w	Offset_0x012310
Offset_0x012306:
		neg.w   D1
		ext.l	D1
		asl.l	#8,d1
		add.l	(A1),d1
		swap	D1
Offset_0x012310:
		cmp.w	4(A2),d1
		bgt.s	Offset_0x012348
		cmpi.w	#$FF00,d1
		bgt.s	Offset_0x012322
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		bra.s	Offset_0x012348
Offset_0x012322:
		move.w	4(A2),d1
		bra.s	Offset_0x012348
Offset_0x012328:
		ext.l	D1
		asl.l	#8,d1
		add.l	(A1),d1
		swap	D1
Offset_0x012330:
		cmp.w	6(A2),d1
		blt.s	Offset_0x012348
		move.w	(Screen_Wrap_Y).w,d3                        ; $FFFFEEAA
		addq.w	#1,d3
		sub.w	D3,d1
		bcs.s	Offset_0x012344
		sub.w	D3,(A1)
		bra.s	Offset_0x012348
Offset_0x012344:
		move.w	6(A2),d1
Offset_0x012348:
		move.w	(A1),d4
		swap	D1
		move.l	D1,d3
		sub.l	(A1),d3
		ror.l	#8,d3
		move.w	D3,(A4)
		move.l	D1,(A1)
		tst.w	(Two_Player_Flag).w                          ; $FFFFFFD8
		beq.s	Offset_0x012364
		swap	D1
		and.w	(Screen_Wrap_Y).w,d1                        ; $FFFFEEAA
		move.w	D1,(A1)
Offset_0x012364:
		rts
Offset_0x012366:
		move.w	(A1),d4
		tst.b	(S2_Teleport_Flag).w                         ; $FFFFF623
		bne.s	Offset_0x0123AA
		move.w	(A5),d1
		beq.s	Offset_0x012390
		subi.w	#$100,d1
		move.w	D1,(A5)
		moveq	#0,d1
		move.b	(A5),d1
		lsl.b	#2,d1
		addq.b	#4,d1
		move.w	2(A5),d0
		sub.b	D1,d0
		move.w	(A6,d0),d0
		andi.w	#$7FFF,d0
		bra.s	Offset_0x012394
Offset_0x012390:
		move.w	$10(A0),d0
Offset_0x012394:
		move.w	(Screen_Wrap_X).w,d2                        ; $FFFFEEA8
		sub.w	(A1),d0
		and.w	D2,d0
		subi.w	#$90,d0
		blt.s	Offset_0x0123AC
		subi.w	#$10,d0
		bge.s	Offset_0x0123BA
		clr.w	(A4)
Offset_0x0123AA:
		rts
Offset_0x0123AC:
		cmpi.w	#-$10,d0
		bgt.s	Offset_0x0123B6
		move.w	#-$10,d0
Offset_0x0123B6:
		add.w	(A1),d0
		bra.s	Offset_0x0123C6
Offset_0x0123BA:
		cmpi.w	#$10,d0
		bcs.s	Offset_0x0123C4
		move.w	#$10,d0
Offset_0x0123C4:
		add.w	(A1),d0
Offset_0x0123C6:
		move.w	D0,d1
		sub.w	(A1),d1
		asl.w	#8,d1
		and.w	D2,d0
		addi.w	#$400,d0
		move.w	D0,(A1)
		move.w	D1,(A4)
		rts
;-------------------------------------------------------------------------------
; Rotina para rolar o tela durante o jogo tamb�m conhecido como rasteriza��o ou
; <<<-   rolagem por software
;-------------------------------------------------------------------------------

; Offset_0x123D8: Load_Tiles_From_Start_Ptr:
JmpTo_Setup_TileDrawing:
		jmp	(Setup_TileDrawing).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load level blocks, chunks,and palette into RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0123DE: Main_Level_Load_16_128_Blocks:
LoadZoneBlockMaps:
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		andi.w	#$1F8,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	(TilesMainTable).l,a2
		lea	(a2,d0.w),a2
		move.l	a2,-(sp)
		addq.w	#8,a2
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,d7
		move.l	d0,a0
		lea	(Blocks_Mem_Address).w,a1
		jsr	(KosinskiDec).l
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		cmp.l	d0,d7
		beq.s	Offset_0x012428
		move.l	d0,a0
		jsr	(KosinskiDec).l

Offset_0x012428:
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		move.l	d0,d7
		move.l	d0,a0
		lea	(RAM_Start).l,a1
		jsr	(KosinskiDec).l
		move.l	(a2)+,d0
		andi.l	#$FFFFFF,d0
		cmp.l	d0,d7
		beq.s	Offset_0x012454
		move.l	d0,a0
		jsr	(KosinskiDec).l

Offset_0x012454:
		bsr.w	LoadLevelLayout
		move.l	(sp)+,a2
		move.b	(a2),d1
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		beq.s	Load_Level_Palette
		cmp.b	d0,d1
		beq.s	Load_Level_Palette
		jsr	(LoadPLC).l
; Offset_0x01246E:
Load_Level_Palette:
		addq.w	#4,a2
		moveq	#0,d0
		move.b	(a2),d0
		jsr	(PalLoad_ForFade).l
		rts
; End of function LoadZoneBlockMaps

; ---------------------------------------------------------------------------
; Subroutine to load level layout into RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x01247C:
LoadLevelLayout:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		andi.w	#$FC,d0
		lea	(Level_Index).l,a0
		move.l	(a0,d0.w),a0
		lea	(Fg_Mem_Start_Address).w,a1
		move.w	#bytesToWcnt(Level_Layout_Buffer_End-Level_Layout_Buffer),d2

Offset_0x01249C:
		move.w	(a0)+,(a1)+
		dbf	d2,Offset_0x01249C
		rts
; End of function LoadLevelLayout

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to run level events including camera resizing and object spawning
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x0124A4: Dyn_Screen_Boss_Loader:
RunDynamicLevelEvents:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		; This clamps the level index to prevent levels from accessing random data, but does it
		; way too hard, meaning stages beyond Balloon Park are able to execute early-stage events.
		andi.w	#$3E,d0
		move.w	DynResize_Index(pc,d0.w),d0
		jsr	DynResize_Index(pc,d0.w)
		moveq	#2,d1
		move.w	(Level_Limits_Max_Y).w,d0
		sub.w	(Sonic_Level_Limits_Max_Y).w,d0
		beq.s	Offset_0x0124E8
		bcc.s	Offset_0x0124EA
		neg.w	d1
		move.w	(Camera_Y).w,d0
		cmp.w	(Level_Limits_Max_Y).w,d0
		bls.s	Offset_0x0124DE
		move.w	d0,(Sonic_Level_Limits_Max_Y).w
		andi.w	#$FFFE,(Sonic_Level_Limits_Max_Y).w

Offset_0x0124DE:
		add.w	d1,(Sonic_Level_Limits_Max_Y).w
		move.b	#1,(Level_Limits_Y_Changing).w

Offset_0x0124E8:
		rts
; ---------------------------------------------------------------------------

Offset_0x0124EA:
		move.w	(Camera_Y).w,d0
		addi.w	#8,d0
		cmp.w	(Sonic_Level_Limits_Max_Y).w,d0
		bcs.s	Offset_0x012504
		btst	#1,(Obj_Player_One+Obj_Status).w
		beq.s	Offset_0x012504
		add.w	d1,d1
		add.w	d1,d1

Offset_0x012504:
		add.w	d1,(Sonic_Level_Limits_Max_Y).w
		move.b	#1,(Level_Limits_Y_Changing).w
		rts
; End of function RunDynamicLevelEvents

; ===========================================================================
DynResize_Index:                                               ; Offset_0x012510
		dc.w	DynResize_AIz_1-DynResize_Index        ; Offset_0x012570
		dc.w	DynResize_AIz_2-DynResize_Index        ; Offset_0x012696
		dc.w	DynResize_Hz_1-DynResize_Index         ; Offset_0x012810
		dc.w	DynResize_Hz_2-DynResize_Index         ; Offset_0x012812
		dc.w	DynResize_MGz_1-DynResize_Index        ; Offset_0x012838
		dc.w	DynResize_MGz_2-DynResize_Index        ; Offset_0x012838
		dc.w	DynResize_CNz_1-DynResize_Index        ; Offset_0x0128E6
		dc.w	DynResize_CNz_2-DynResize_Index        ; Offset_0x0128E6
		dc.w	DynResize_FBz_1-DynResize_Index        ; Offset_0x0128E6
		dc.w	DynResize_FBz_2-DynResize_Index        ; Offset_0x0128E6
		dc.w	DynResize_Iz_1-DynResize_Index         ; Offset_0x0128E8
		dc.w	DynResize_Iz_2-DynResize_Index         ; Offset_0x01292A
		dc.w	DynResize_LBz_1-DynResize_Index        ; Offset_0x01292A
		dc.w	DynResize_LBz_2-DynResize_Index        ; Offset_0x01292C
		dc.w	DynResize_MVz_1-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_MVz_2-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_Sz_1-DynResize_Index         ; Offset_0x012986
		dc.w	DynResize_Sz_2-DynResize_Index         ; Offset_0x012986
		dc.w	DynResize_LRz_1-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_LRz_2-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_SSz_1-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_SSz_2-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_DEz_1-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_DEz_2-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_TDz_1-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_TDz_2-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_End_Seq_1-DynResize_Index    ; Offset_0x012986
		dc.w	DynResize_End_Seq_2-DynResize_Index    ; Offset_0x012986
		dc.w	DynResize_ALz_1-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_ALz_2-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_BPz_1-DynResize_Index        ; Offset_0x012986
		dc.w	DynResize_BPz_2-DynResize_Index        ; Offset_0x012986	; $3E
		dc.w	DynResize_DPz_1-DynResize_Index        ; Offset_0x012986	; triggers AIZ1
		dc.w	DynResize_DPz_2-DynResize_Index        ; Offset_0x012986	; triggers AIZ2
		dc.w	DynResize_CGz_1-DynResize_Index        ; Offset_0x012986	; triggers HCZ1
		dc.w	DynResize_CGz_2-DynResize_Index        ; Offset_0x012986	; triggers HCZ2
		dc.w	DynResize_EMz_1-DynResize_Index        ; Offset_0x012986	; triggers MGZ1
		dc.w	DynResize_EMz_2-DynResize_Index        ; Offset_0x012986	; triggers MGZ2
		dc.w	DynResize_BS_GM_1-DynResize_Index      ; Offset_0x012986	; triggers CNZ1
		dc.w	DynResize_BS_GM_2-DynResize_Index      ; Offset_0x012986	; triggers CNZ2
		dc.w	DynResize_BS_GS_1-DynResize_Index      ; Offset_0x012986	; triggers FBZ1
		dc.w	DynResize_BS_GS_2-DynResize_Index      ; Offset_0x012986	; triggers FBZ2
		dc.w	DynResize_BS_SM_1-DynResize_Index      ; Offset_0x012986	; triggers ICZ1
		dc.w	DynResize_BS_SM_2-DynResize_Index      ; Offset_0x012986	; triggers ICZ2
		dc.w	DynResize_LRz_Boss-DynResize_Index     ; Offset_0x012986	; triggers LBZ1
		dc.w	DynResize_HPz-DynResize_Index          ; Offset_0x012986	; triggers LBZ2
		dc.w	DynResize_DEz_Boss-DynResize_Index     ; Offset_0x012986	; triggers MVZ1
		dc.w	DynResize_HPz_Portal-DynResize_Index   ; Offset_0x012986 	; triggers MVZ2
;===============================================================================
DynResize_AIz_1:                                               ; Offset_0x012570
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0               ; $FFFFEE33
		move.w	Offset_0x01257E(pc,d0.w),d0
		jmp	Offset_0x01257E(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x01257E:
		dc.w	Offset_0x012588-Offset_0x01257E
		dc.w	Offset_0x0125DA-Offset_0x01257E
		dc.w	Offset_0x012614-Offset_0x01257E
		dc.w	Offset_0x01264E-Offset_0x01257E
		dc.w	Offset_0x01267C-Offset_0x01257E
;-------------------------------------------------------------------------------
Offset_0x012588:
		move.b	#0,(Palette_Cycle_Flag).w                 ; $FFFFF72E
		cmpi.w	#$1000,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0125D8
		move.b	#$01,(Palette_Cycle_Flag).w                 ; $FFFFF72E
		cmpi.w	#$1300,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0125D8
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x0125BE
		move.l	#Obj_Knuckles,(A1)                    ; Offset_0x018EA0
		move.w	#$1450, Obj_X(A1)                                ; $0010
		move.w	#$0419, Obj_Y(A1)                                ; $0014
Offset_0x0125BE:
		moveq	#$05,d0
		jsr	(PalLoad_Now).l                             ; Offset_0x002FBA
		move.w	#$1300,(Sonic_Level_Limits_Min_X).w         ; $FFFFEE14
		moveq	#$0B,d0
		jsr	(LoadPLC).l                              ; Offset_0x0014D0
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0125D8:
		rts
;-------------------------------------------------------------------------------
Offset_0x0125DA:
		cmpi.w	#$1400,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012612
		lea	(Angel_Island_1_Blocks_3),a1          ; Offset_0x13C680
		lea	(Blocks_Mem_Address+$0268).w,a2             ; $FFFF9268
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Angel_Island_1_Tiles_3),a1           ; Offset_0x141584
		move.w	#$1760,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		moveq	#$2A,d0
		jsr	(PalLoad_Now).l                             ; Offset_0x002FBA
		st	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012612:
		rts
;-------------------------------------------------------------------------------
Offset_0x012614:
		lea	(Offset_0x01267E).l,a1
		bsr.w	Resize_Max_Y_From_X                    ; Offset_0x012988
		move.w	#$020E,(Palette_Row_2_Offset+$1E).w         ; $FFFFED5E
		cmpi.w	#$2B00,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012632
		move.w	#$0004,(Palette_Row_2_Offset+$1E).w         ; $FFFFED5E
Offset_0x012632:
		cmpi.w	#$2D80,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x01264C
		move.w	#$0C02,(Palette_Row_2_Offset+$1E).w         ; $FFFFED5E
		moveq	#$5A,d0
		jsr	(LoadPLC).l                              ; Offset_0x0014D0
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x01264C:
		rts
;-------------------------------------------------------------------------------
Offset_0x01264E:
		lea	(Offset_0x01267E).l,a1
		bsr.w	Resize_Max_Y_From_X                    ; Offset_0x012988
		cmpi.w	#$2E00,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x01267A
		tst.b	(Kos_modules_left).w                    ; $FFFFFF60
		bne.s	Offset_0x01267A
		lea	(Angel_Island_1_Flames),a1            ; Offset_0x1476A6
		move.w	#$A000,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x01267A:
		rts
;-------------------------------------------------------------------------------
Offset_0x01267C:
		rts
;-------------------------------------------------------------------------------
Offset_0x01267E:
		dc.w	$8390, $1650
		dc.w	$83B0, $1B00
		dc.w	$8430, $2000
		dc.w	$84C0, $2B00
		dc.w	$83B0, $2D80
		dc.w	$82E0, $FFFF
;===============================================================================
DynResize_AIz_2:                                               ; Offset_0x012696
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0               ; $FFFFEE33
		move.w	Offset_0x0126A4(pc,d0.w),d0
		jmp	Offset_0x0126A4(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x0126A4:
		dc.w	Offset_0x0126B6-Offset_0x0126A4
		dc.w	Offset_0x0126D0-Offset_0x0126A4
		dc.w	Offset_0x012750-Offset_0x0126A4
		dc.w	Offset_0x01276A-Offset_0x0126A4
		dc.w	Offset_0x0127BA-Offset_0x0126A4
		dc.w	Offset_0x0127D4-Offset_0x0126A4
		dc.w	Offset_0x0127EE-Offset_0x0126A4
		dc.w	Offset_0x012800-Offset_0x0126A4
		dc.w	Offset_0x01280E-Offset_0x0126A4
;-------------------------------------------------------------------------------
Offset_0x0126B6:
		cmpi.w	#$0380,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0126CE
		move.w	#$04F0,d0
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0126CE:
		rts
;-------------------------------------------------------------------------------
Offset_0x0126D0:
		cmpi.w	#$0300,(Camera_Y).w                         ; $FFFFEE7C
		bcc.s	Offset_0x012724
		move.w	#$04F0,d0
		cmpi.w	#$0ED0,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0126E8
		move.w	#$02B8,d0
Offset_0x0126E8:
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		cmpi.w	#$0F50,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012722
		move.w	#$0F50,(Sonic_Level_Limits_Min_X).w         ; $FFFFEE14
		tst.w	(Debug_placement_mode).w                    ; $FFFFFE08
		bne.s	Offset_0x01271E
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x01271E
		move.l	#Obj_0xAC_AIz_Fire_Breath,(A1)        ; Offset_0x036AB4
		move.w	#$11F0, Obj_X(A1)                                ; $0010
		move.w	#$0289, Obj_Y(A1)                                ; $0014
Offset_0x01271E:
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012722:
		rts
Offset_0x012724:
		move.w	#$04F0,d0
		cmpi.w	#$0ED0,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012734
		move.w	#$0450,d0
Offset_0x012734:
		cmpi.w	#$11A0,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012746
		move.w	#$0820,d0
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		rts
Offset_0x012746:
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		rts
;-------------------------------------------------------------------------------
Offset_0x012750:
		cmpi.w	#$1500,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012768
		move.w	#$0630,(Sonic_Level_Limits_Max_Y).w         ; $FFFFEE1A
		move.w	#$0630,(Level_Limits_Max_Y).w               ; $FFFFEE12
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012768:
		rts
;-------------------------------------------------------------------------------
Offset_0x01276A:
		cmpi.w	#$3C00,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0127B8
		tst.b	(Kos_modules_left).w                    ; $FFFFFF60
		bne.s	Offset_0x0127B8
		lea	(Angel_Island_2_Blocks_3),a1          ; Offset_0x149448
		lea	(Blocks_Mem_Address+$0AA0).w,a2             ; $FFFF9AA0
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Angel_Island_2_Tiles_3),a1           ; Offset_0x14CA3C
		move.w	#$16A0,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		lea	(Angel_Island_2_Boss_Ship),a1         ; Offset_0x1397B0
		move.w	#$A000,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		moveq	#$30,d0
		jsr	(PalLoad_Now).l                             ; Offset_0x002FBA
		st	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0127B8:
		rts
;-------------------------------------------------------------------------------
Offset_0x0127BA:
		cmpi.w	#$3F00,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0127D2
		move.w	#$015A,d0
		move.w	D0,(Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
		move.w	D0,(Level_Limits_Min_Y).w                   ; $FFFFEE10
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0127D2:
		rts
;-------------------------------------------------------------------------------
Offset_0x0127D4:
		cmpi.w	#$4000,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0127EC
		move.w	#$015A,d0
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0127EC:
		rts
;-------------------------------------------------------------------------------
Offset_0x0127EE:
		cmpi.w	#$4160,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0127FE
		st	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0127FE:
		rts
;-------------------------------------------------------------------------------
Offset_0x012800:
		cmpi.w	#$4780,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x01280C
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x01280C:
		rts
;-------------------------------------------------------------------------------
Offset_0x01280E:
		rts
;===============================================================================
DynResize_Hz_1:                                                ; Offset_0x012810
		rts
;===============================================================================
DynResize_Hz_2:                                                ; Offset_0x012812
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0               ; $FFFFEE33
		move.w	Offset_0x012820(pc,d0.w),d0
		jmp	Offset_0x012820(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x012820:
		dc.w	Offset_0x012824-Offset_0x012820
		dc.w	Offset_0x012836-Offset_0x012820
;-------------------------------------------------------------------------------
Offset_0x012824:
		cmpi.w	#$0C00,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012834
		st	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012834:
		rts
;-------------------------------------------------------------------------------
Offset_0x012836:
		rts
;===============================================================================
DynResize_MGz_1:                                               ; Offset_0x012838
DynResize_MGz_2:                                               ; Offset_0x012838
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0               ; $FFFFEE33
		move.w	Offset_0x012846(pc,d0.w),d0
		jmp	Offset_0x012846(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x012846:
		dc.w	Offset_0x01284C-Offset_0x012846
		dc.w	Offset_0x01288A-Offset_0x012846
		dc.w	Offset_0x0128E4-Offset_0x012846
;-------------------------------------------------------------------------------
Offset_0x01284C:
		move.w	(Camera_Y).w,d0                             ; $FFFFEE7C
		cmpi.w	#$0600,d0
		bcs.s	Offset_0x012888
		cmpi.w	#$0700,d0
		bcc.s	Offset_0x012888
		cmpi.w	#$3A00,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012888
		move.w	#$06A0,d0
		move.w	D0,(Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
		move.w	D0,(Level_Limits_Min_Y).w                   ; $FFFFEE10
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		move.w	#$3C80,d0
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		move.w	D0,(Level_Limits_Max_X).w                   ; $FFFFEE0E
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012888:
		rts
;-------------------------------------------------------------------------------
Offset_0x01288A:
		cmpi.w	#$3A00,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x0128C4
		move.w	#$3C80,d0
		cmp.w	(Camera_X).w,d0                             ; $FFFFEE78
		bhi.s	Offset_0x0128E2
		move.w	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		move.w	D0,(Level_Limits_Min_X).w                   ; $FFFFEE0C
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x0128BE
		move.l	#Obj_0xB0_MGz_Drill_Mobile,(A1)       ; Offset_0x039C7E
		move.w	#$3D20, Obj_X(A1)                                ; $0010
		move.w	#$0668, Obj_Y(A1)                                ; $0014
Offset_0x0128BE:
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
		rts
Offset_0x0128C4:
		move.l	#$00001000,d0
		move.l	D0,(Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
		move.l	D0,(Level_Limits_Min_Y).w                   ; $FFFFEE10
		move.w	#$6000,d0
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		move.w	D0,(Level_Limits_Max_X).w                   ; $FFFFEE0E
		subq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x0128E2:
		rts
;-------------------------------------------------------------------------------
Offset_0x0128E4:
		rts
;===============================================================================
DynResize_CNz_1:                                               ; Offset_0x0128E6
DynResize_CNz_2:                                               ; Offset_0x0128E6
DynResize_FBz_1:                                               ; Offset_0x0128E6
DynResize_FBz_2:                                               ; Offset_0x0128E6
		rts
;===============================================================================
DynResize_Iz_1:                                                ; Offset_0x0128E8
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0               ; $FFFFEE33
		move.w	Offset_0x0128F6(pc,d0.w),d0
		jmp	Offset_0x0128F6(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x0128F6:
		dc.w	Offset_0x0128FC-Offset_0x0128F6
		dc.w	Offset_0x012916-Offset_0x0128F6
		dc.w	Offset_0x012928-Offset_0x0128F6
;-------------------------------------------------------------------------------
Offset_0x0128FC:
		cmpi.w	#$3700,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012914
		cmpi.w	#$068C,(Camera_Y).w                         ; $FFFFEE7C
		bcs.s	Offset_0x012914
		st	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012914:
		rts
;-------------------------------------------------------------------------------
Offset_0x012916:
		cmpi.w	#$3940,(Camera_X).w                         ; $FFFFEE78
		bcs.s	Offset_0x012926
		st	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		addq.b	#$02,(Dynamic_Resize_Routine).w             ; $FFFFEE33
Offset_0x012926:
		rts
;-------------------------------------------------------------------------------
Offset_0x012928:
		rts
;===============================================================================
DynResize_Iz_2:                                                ; Offset_0x01292A
DynResize_LBz_1:                                               ; Offset_0x01292A
		rts
; ===========================================================================
; Offset_0x01292C:
DynResize_LBz_2:
		moveq	#0,d0
		move.b	(Dynamic_Resize_Routine).w,d0
		move.w	DynResize_LBZ2_Index(pc,d0.w),d0
		jmp	DynResize_LBZ2_Index(pc,d0.w)
; ===========================================================================
; Offset_0x01293A:
DynResize_LBZ2_Index:
		dc.w Offset_0x01293E-DynResize_LBZ2_Index
		dc.w Offset_0x012984-DynResize_LBZ2_Index
; ===========================================================================

Offset_0x01293E:
		cmpi.w	#$3BC0,(Camera_X).w
		bcs.s	Offset_0x012982
		cmpi.w	#$500,(Camera_Y).w
		; ??? missing branch here, meaning that the Y camera check is pointless
		;bcs.s	Offset_0x012982
		addq.b	#2,(Dynamic_Resize_Routine).w
		lea	(Launch_Base_2_Blocks_3).l,a1
		lea	(Blocks_Mem_Address).w,a2
		jsr	(Queue_Kos).l
		lea	(Launch_Base_2_Chunks_3).l,a1
		lea	(RAM_Start).l,a2
		jsr	(Queue_Kos).l
		lea	(Launch_Base_2_Tiles_3).l,a1
		move.w	#0,d2
		jsr	(Queue_Kos_Module).l

Offset_0x012982:
		rts
; ---------------------------------------------------------------------------

Offset_0x012984:
		rts

;===============================================================================
DynResize_MVz_1:                                               ; Offset_0x012986
DynResize_MVz_2:                                               ; Offset_0x012986
DynResize_Sz_1:                                                ; Offset_0x012986
DynResize_Sz_2:                                                ; Offset_0x012986
DynResize_LRz_1:                                               ; Offset_0x012986
DynResize_LRz_2:                                               ; Offset_0x012986
DynResize_SSz_1:                                               ; Offset_0x012986
DynResize_SSz_2:                                               ; Offset_0x012986
DynResize_DEz_1:                                               ; Offset_0x012986
DynResize_DEz_2:                                               ; Offset_0x012986
DynResize_TDz_1:                                               ; Offset_0x012986
DynResize_TDz_2:                                               ; Offset_0x012986
DynResize_End_Seq_1:                                           ; Offset_0x012986
DynResize_End_Seq_2:                                           ; Offset_0x012986
DynResize_ALz_1:                                               ; Offset_0x012986
DynResize_ALz_2:                                               ; Offset_0x012986
DynResize_BPz_1:                                               ; Offset_0x012986
DynResize_BPz_2:                                               ; Offset_0x012986
DynResize_DPz_1:                                               ; Offset_0x012986
DynResize_DPz_2:                                               ; Offset_0x012986
DynResize_CGz_1:                                               ; Offset_0x012986
DynResize_CGz_2:                                               ; Offset_0x012986
DynResize_EMz_1:                                               ; Offset_0x012986
DynResize_EMz_2:                                               ; Offset_0x012986
DynResize_BS_GM_1:                                             ; Offset_0x012986
DynResize_BS_GM_2:                                             ; Offset_0x012986
DynResize_BS_GS_1:                                             ; Offset_0x012986
DynResize_BS_GS_2:                                             ; Offset_0x012986
DynResize_BS_SM_1:                                             ; Offset_0x012986
DynResize_BS_SM_2:                                             ; Offset_0x012986
DynResize_LRz_Boss:                                            ; Offset_0x012986
DynResize_HPz:                                                 ; Offset_0x012986
DynResize_DEz_Boss:                                            ; Offset_0x012986
DynResize_HPz_Portal:                                          ; Offset_0x012986
		rts
;===============================================================================
Resize_Max_Y_From_X:                                           ; Offset_0x012988
		move.w	(Camera_X).w,d0                             ; $FFFFEE78
Offset_0x01298C:
		move.l	(A1)+,d1
		cmp.w	D1,d0
		bhi.s	Offset_0x01298C
		swap	D1
		tst.w	D1
		bpl.s	Offset_0x0129A0
		andi.w	#$7FFF,d1
		move.w	D1,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
Offset_0x0129A0:
		move.w	D1,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		move.w	D1,(Miles_Level_Limits_Max_Y).w             ; $FFFFEE22
		rts
;-------------------------------------------------------------------------------
; Rotinas para redimensionamento autom�tico das fases e gerenciamento dos chefes
; <<<-  de fase
;-------------------------------------------------------------------------------

;===============================================================================
; Rotina para carregar o pocicionamento das pedras na Lava Reef
; ->>>
;===============================================================================
LRz_Load_Rock_Pos:                                             ; Offset_0x0129AA
		moveq	#0,d0
		move.b	(LRz_Rocks_Routine).w,d0                    ; $FFFFFEB0
		move.w	Offset_0x0129B8(pc,d0.w),d0
		jmp	Offset_0x0129B8(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x0129B8:
		dc.w	Offset_0x0129BC-Offset_0x0129B8
		dc.w	Offset_0x0129F2-Offset_0x0129B8
;-------------------------------------------------------------------------------
Offset_0x0129BC:
		addq.b	#$02,(LRz_Rocks_Routine).w                  ; $FFFFFEB0
		lea	(LRz_Rocks_Layout).l,a1                 ; Offset_0x1EA414
		move.w	(Camera_X).w,d4                             ; $FFFFEE78
		subq.w	#$08,d4
		bhi.s	Offset_0x0129D4
		moveq	#$01,d4
		bra.s	Offset_0x0129D4
Offset_0x0129D2:
		addq.l	#$06,a1
Offset_0x0129D4:
		cmp.w	$0002(A1),d4
		bhi.s	Offset_0x0129D2
		move.l	A1,(LRz_Rocks_Pos_Next).w                   ; $FFFFFEB2
		addi.w	#$0150,d4
		bra.s	Offset_0x0129E6
Offset_0x0129E4:
		addq.l	#$06,a1
Offset_0x0129E6:
		cmp.w	$0002(A1),d4
		bhi.s	Offset_0x0129E4
		move.l	A1,(LRz_Rocks_Pos_Previous).w               ; $FFFFFEB6
		rts
;-------------------------------------------------------------------------------
Offset_0x0129F2:
		move.l	(LRz_Rocks_Pos_Next).w,a1                   ; $FFFFFEB2
		move.w	(Camera_X).w,d4                             ; $FFFFEE78
		subq.w	#$08,d4
		bhi.s	Offset_0x012A04
		moveq	#$01,d4
		bra.s	Offset_0x012A04
Offset_0x012A02:
		addq.l	#$06,a1
Offset_0x012A04:
		cmp.w	$0002(A1),d4
		bhi.s	Offset_0x012A02
		bra.s	Offset_0x012A0E
Offset_0x012A0C:
		subq.l	#$06,a1
Offset_0x012A0E:
		cmp.w	-4(A1),d4
		bls.s	Offset_0x012A0C
		move.l	A1,(LRz_Rocks_Pos_Next).w                   ; $FFFFFEB2
		move.l	(LRz_Rocks_Pos_Previous).w,a2               ; $FFFFFEB6
		addi.w	#$0150,d4
		bra.s	Offset_0x012A24
Offset_0x012A22:
		addq.l	#$06,a2
Offset_0x012A24:
		cmp.w	$0002(A2),d4
		bhi.s	Offset_0x012A22
		bra.s	Offset_0x012A2E
Offset_0x012A2C:
		subq.l	#$06,a2
Offset_0x012A2E:
		cmp.w	-4(A2),d4
		bls.s	Offset_0x012A2C
		move.l	A2,(LRz_Rocks_Pos_Previous).w               ; $FFFFFEB6
		rts
;===============================================================================
; Rotina para carregar o pocicionamento das pedras na Lava Reef
; <<<-
;===============================================================================

Build_LRz_Rocks:                                               ; Offset_0x012A3A
		move.l	(LRz_Rocks_Pos_Next).w,a0                   ; $FFFFFEB2
		move.l	(LRz_Rocks_Pos_Previous).w,d2               ; $FFFFFEB6
		sub.l	A0,d2
		beq.s	Offset_0x012A8E
		lea	LRz_Rocks_Mappings(PC),a1             ; Offset_0x012A90
		move.w	#$0078,d3
		move.w	$0004(A3),d4
		move.w	#$00F0,d5
Offset_0x012A56:
		move.w	$0004(A0),d1
		sub.w	D4,d1
		addq.w	#$08,d1
		cmp.w	D5,d1
		bcc.s	Offset_0x012A88
		add.w	D3,d1
		move.w	$0002(A0),d0
		sub.w	(A3),d0
		addi.w	#$0080,d0
		move.w	(A0),d6
		lsl.w	#$03,d6
		lea	(A1,d6),a2
		add.w	(A2)+,d1
		move.w	D1,(A6)+
		move.w	(A2)+,d6
		move.b	D6,(A6)
		addq.w	#$02,a6
		move.w	(A2)+,(A6)+
		add.w	(A2)+,d0
		move.w	D0,(A6)+
		subq.w	#$01,d7
Offset_0x012A88:
		addq.l	#$06,a0
		subq.w	#$06,d2
		bne.s	Offset_0x012A56
Offset_0x012A8E:
		rts
;-------------------------------------------------------------------------------
LRz_Rocks_Mappings:                                            ; Offset_0x012A90
		dc.w	$FFF8, $0005, $C400, $FFF8
		dc.w	$FFF8, $0005, $CC00, $FFF8
		dc.w	$FFF8, $0005, $C404, $FFF8
		dc.w	$FFF8, $0005, $C408, $FFF8
		dc.w	$FFF8, $0005, $CC08, $FFF8
		dc.w	$FFF8, $0005, $CC04, $FFF8
		dc.w	$0000, $0004, $C40C, $FFF8
		dc.w	$0000, $0004, $C40E, $FFF8
		dc.w	$0000, $0004, $CC0E, $FFF8
		dc.w	$0000, $0004, $CC0C, $FFF8
		dc.w	$FFF8, $0005, $E410, $FFF8

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 02 - Pathswappers (or Collision Changers,according to Sonic 2 NA)
;
; Swaps what 'path' of collision the player is on; invisible unless
; using debug mode, which represents it as a line of rings
; ---------------------------------------------------------------------------
; Offset_0x012AE8: Obj_0x02_Layer_Switch:
Obj02_Pathswappers:
		move.l	#Layer_Switch_Mappings,Obj_Map(a0)
		move.w	#$26BC,Obj_Art_VRAM(a0)
		ori.b	#4,Obj_Flags(a0)
		move.b	#$40,Obj_Width(a0)
		move.b	#$40,Obj_Height(a0)
		move.w	#$280,Obj_Priority(a0)
		move.b	Obj_Subtype(a0),d0
		btst	#2,d0			; is this a horizontal type?
		beq.s	Pathswapper_CheckX	; if yes, branch
; Pathswapper_CheckY:
		andi.w	#7,d0
		move.b	d0,Obj_Map_Id(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	Pathswappers_Size(pc,d0.w),Obj_Control_Var_02(a0)
		move.w	Obj_Y(a0),d1
		lea	(Obj_Player_One).w,a1
		cmp.w	Obj_Y(a1),d1
		bcc.s	Offset_0x012B40
		move.b	#1,Obj_Control_Var_04(a0)

Offset_0x012B40:
		lea	(Obj_Player_Two).w,a1
		cmp.w	Obj_Y(a1),d1
		bcc.s	Offset_0x012B50
		move.b	#1,Obj_Control_Var_05(A0)

Offset_0x012B50:
		move.l	#Offset_0x012D2E,(a0)
		tst.w	(Two_Player_Flag).w
		beq.w	Offset_0x012D2E
		move.l	#Pathswappers_MainY,(a0)
		move.w	#$63D2,Obj_Art_VRAM(a0)
		bra.w	Pathswappers_MainY
; ===========================================================================
; Size of the pathswapper's collision (in pixels)
; Offset_0x012B6E: Layer_Switch_Conf_Sizes:
Pathswappers_Size:
		dc.w	32, 64, 128, 256
; ===========================================================================
; Offset_0x012B76:
Pathswapper_CheckX:
		andi.w	#3,d0
		move.b	d0,Obj_Map_Id(a0)
		add.w	d0,d0
		move.w	Pathswappers_Size(pc,d0.w),Obj_Control_Var_02(a0)
		move.w	Obj_X(a0),d1
		lea	(Obj_Player_One).w,a1
		cmp.w	Obj_X(a1),d1
		bcc.s	Offset_0x012B9A
		move.b	#1,Obj_Control_Var_04(a0)

Offset_0x012B9A:
		lea	(Obj_Player_Two).w,a1
		cmp.w	Obj_X(a1),d1
		bcc.s	Offset_0x012BAA
		move.b	#1,Obj_Control_Var_05(a0)

Offset_0x012BAA:
		move.l	#Offset_0x012BC4,(A0)
		tst.w	(Two_Player_Flag).w				; $FFFFFFD8
		beq.s	Offset_0x012BC4
		move.l	#Offset_0x012BEE,(A0)
		move.w	#$63D2, Obj_Art_VRAM(A0)				; $000A
		bra.s	Offset_0x012BEE
Offset_0x012BC4:
		tst.w	(Debug_placement_mode).w			; $FFFFFE08
		bne.w	Offset_0x012BE0
		move.w	Obj_X(A0),d1					; $0010
		lea	Obj_Control_Var_04(A0),a2				; $0034
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr.s	Offset_0x012C16
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr.s	Offset_0x012C16
Offset_0x012BE0:
		tst.w	(Debug_Mode_Active).w				; $FFFFFFFA
		beq.w	MarkObjGone_3				; Offset_0x011B3E
		jmp	(MarkObjGone)				; Offset_0x011AF2
Offset_0x012BEE:
		move.w	Obj_X(A0),d1					; $0010
		lea	Obj_Control_Var_04(A0),a2				; $0034
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr.s	Offset_0x012C16
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr.s	Offset_0x012C16
		lea	(Obj_Fixed_RAM).w,a1				; $FFFFCB2C
		tst.w	(Debug_Mode_Active).w				; $FFFFFFFA
		beq.w	Offset_0x012C16
		bsr.s	Offset_0x012C16
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x012C16:
		tst.b	(A2)+
		bne.w	Offset_0x012CA8
		cmp.w	Obj_X(A1),d1					; $0010
		bhi.w	Offset_0x012D2C
		move.b	#$01, -1(A2)
		move.w	Obj_Y(A0),d2					; $0014
		move.w	D2,d3
		move.w	Obj_Control_Var_02(A0),d4				; $0032
		sub.w	D4,d2
		add.w	D4,d3
		move.w	Obj_Y(A1),d4					; $0014
		cmp.w	D2,d4
		blt.w	Offset_0x012D2C
		cmp.w	D3,d4
		bge.w	Offset_0x012D2C
		move.b	Obj_Subtype(A0),d0					; $002C
		bpl.s	Offset_0x012C58
		btst	#$01, Obj_Status(A1)					; $002A
		bne.w	Offset_0x012D2C
Offset_0x012C58:
		move.w	Obj_X(A1),d2					; $0010
		sub.w	D1,d2
		bcc.s	Offset_0x012C62
		neg.w	D2
Offset_0x012C62:
		cmpi.w	#$0040,d2
		bcc.w	Offset_0x012D2C
		btst	#0, Obj_Flags(A0)					; $0004
		bne.s	Offset_0x012C90
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
		btst	#$03,d0
		beq.s	Offset_0x012C90
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x012C90:
		andi.w	#$7FFF, Obj_Art_VRAM(A1)				; $000A
		btst	#$05,d0
		beq.w	Offset_0x012D2C
		ori.w	#$8000, Obj_Art_VRAM(A1)				; $000A
		bra.w	Offset_0x012D2C
Offset_0x012CA8:
		cmp.w	Obj_X(A1),d1					; $0010
		bls.w	Offset_0x012D2C
		move.b	#0, -1(A2)
		move.w	Obj_Y(A0),d2					; $0014
		move.w	D2,d3
		move.w	Obj_Control_Var_02(A0),d4				; $0032
		sub.w	D4,d2
		add.w	D4,d3
		move.w	Obj_Y(A1),d4					; $0014
		cmp.w	D2,d4
		blt.w	Offset_0x012D2C
		cmp.w	D3,d4
		bge.w	Offset_0x012D2C
		move.b	Obj_Subtype(A0),d0					; $002C
		bpl.s	Offset_0x012CE4
		btst	#$01, Obj_Status(A1)					; $002A
		bne.w	Offset_0x012D2C
Offset_0x012CE4:
		move.w	Obj_X(A1),d2					; $0010
		sub.w	D1,d2
		bcc.s	Offset_0x012CEE
		neg.w	D2
Offset_0x012CEE:
		cmpi.w	#$0040,d2
		bcc.s	Offset_0x012D2C
		btst	#0, Obj_Flags(A0)					; $0004
		bne.s	Offset_0x012D1A
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
		btst	#$04,d0
		beq.s	Offset_0x012D1A
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x012D1A:
		andi.w	#$7FFF, Obj_Art_VRAM(A1)				; $000A
		btst	#$06,d0
		beq.s	Offset_0x012D2C
		ori.w	#$8000, Obj_Art_VRAM(A1)				; $000A
Offset_0x012D2C:
		rts
;-------------------------------------------------------------------------------
Offset_0x012D2E:
		tst.w	(Debug_placement_mode).w			; $FFFFFE08
		bne.w	Offset_0x012D4A
		move.w	Obj_Y(A0),d1					; $0014
		lea	Obj_Control_Var_04(A0),a2				; $0034
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr.s	Offset_0x012D80
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr.s	Offset_0x012D80
Offset_0x012D4A:
		tst.w	(Debug_Mode_Active).w				; $FFFFFFFA
		beq.w	MarkObjGone_3				; Offset_0x011B3E
		jmp	(MarkObjGone)				; Offset_0x011AF2

; ===========================================================================
; Offset_0x012D58:
Pathswappers_MainY:
		move.w	Obj_Y(a0),d1
		lea	Obj_Control_Var_04(a0),a2
		lea	(Obj_Player_One).w,a1
		bsr.s	Offset_0x012D80
		lea	(Obj_Player_Two).w,a1
		bsr.s	Offset_0x012D80
		lea	(Obj_Fixed_RAM).w,a1
		tst.w	(Debug_Mode_Active).w
		beq.w	Offset_0x012D80
		bsr.s	Offset_0x012D80
		jmp	(DisplaySprite).l
; ---------------------------------------------------------------------------

Offset_0x012D80:
		tst.b	(A2)+
		bne.w	Offset_0x012E12
		cmp.w	Obj_Y(A1),d1					; $0014
		bhi.w	Offset_0x012E96
		move.b	#$01, -1(A2)
		move.w	Obj_X(A0),d2					; $0010
		move.w	D2,d3
		move.w	Obj_Control_Var_02(A0),d4				; $0032
		sub.w	D4,d2
		add.w	D4,d3
		move.w	Obj_X(A1),d4					; $0010
		cmp.w	D2,d4
		blt.w	Offset_0x012E96
		cmp.w	D3,d4
		bge.w	Offset_0x012E96
		move.b	Obj_Subtype(A0),d0					; $002C
		bpl.s	Offset_0x012DC2
		btst	#$01, Obj_Status(A1)					; $002A
		bne.w	Offset_0x012E96
Offset_0x012DC2:
		move.w	Obj_Y(A1),d2					; $0014
		sub.w	D1,d2
		bcc.s	Offset_0x012DCC
		neg.w	D2
Offset_0x012DCC:
		cmpi.w	#$0040,d2
		bcc.w	Offset_0x012E96
		btst	#0, Obj_Flags(A0)					; $0004
		bne.s	Offset_0x012DFA
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
		btst	#$03,d0
		beq.s	Offset_0x012DFA
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x012DFA:
		andi.w	#$7FFF, Obj_Art_VRAM(A1)				; $000A
		btst	#$05,d0
		beq.w	Offset_0x012E96
		ori.w	#$8000, Obj_Art_VRAM(A1)				; $000A
		bra.w	Offset_0x012E96
Offset_0x012E12:
		cmp.w	Obj_Y(A1),d1					; $0014
		bls.w	Offset_0x012E96
		move.b	#0, -1(A2)
		move.w	Obj_X(A0),d2					; $0010
		move.w	D2,d3
		move.w	Obj_Control_Var_02(A0),d4				; $0032
		sub.w	D4,d2
		add.w	D4,d3
		move.w	Obj_X(A1),d4					; $0010
		cmp.w	D2,d4
		blt.w	Offset_0x012E96
		cmp.w	D3,d4
		bge.w	Offset_0x012E96
		move.b	Obj_Subtype(A0),d0					; $002C
		bpl.s	Offset_0x012E4E
		btst	#$01, Obj_Status(A1)					; $002A
		bne.w	Offset_0x012E96
Offset_0x012E4E:
		move.w	Obj_Y(A1),d2					; $0014
		sub.w	D1,d2
		bcc.s	Offset_0x012E58
		neg.w	D2
Offset_0x012E58:
		cmpi.w	#$0040,d2
		bcc.s	Offset_0x012E96
		btst	#0, Obj_Flags(A0)					; $0004
		bne.s	Offset_0x012E84
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
		btst	#$04,d0
		beq.s	Offset_0x012E84
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x012E84:
		andi.w	#$7FFF, Obj_Art_VRAM(A1)				; $000A
		btst	#$06,d0
		beq.s	Offset_0x012E96
		ori.w	#$8000, Obj_Art_VRAM(A1)				; $000A
Offset_0x012E96:
		rts
; ---------------------------------------------------------------------------
; Sprite Mappings - Pathswappers
; ---------------------------------------------------------------------------
; Offset_0x012E98:
Layer_Switch_Mappings:	include	"data/mappings/02 - Pathswappers.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 01 - Monitors
;
; The power-ups themselves are handled by the next object. This just does the
; monitor collision and graphics.
; ---------------------------------------------------------------------------
; Offset_0x012F44: Obj_0x01_Monitors:
Obj01_Monitors:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	Monitors_Index(pc,d0.w),d1
		jmp	Monitors_Index(pc,d1.w)
; ===========================================================================
; Offset_0x012F52:
Monitors_Index:	dc.w Monitors_Init-Monitors_Index
		dc.w Monitors_Main-Monitors_Index
		dc.w Monitors_Break-Monitors_Index
		dc.w Monitors_Animate-Monitors_Index
		dc.w Monitors_ChkDel-Monitors_Index
; ===========================================================================
; Offset_0x012F5C:
Monitors_Init:
		addq.b	#2,Obj_Routine(a0)
		move.b	#$F,Obj_Height_2(a0)
		move.b	#$F,Obj_Width_2(a0)
		move.l	#Monitors_Mappings,Obj_Map(a0)
		move.w	#$4C4,Obj_Art_VRAM(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$180,Obj_Priority(a0)
		move.b	#$E,Obj_Width(a0)
		move.b	#$10,Obj_Height(a0)
		move.w	Obj_Respaw_Ref(a0),a2
		bclr	#7,(a2)
		btst	#0,(a2)					; if this bit is set it means the monitor is already broken
		beq.s	Offset_0x012FAE
		move.b	#8,Obj_Routine(a0)			; set monitor to 'broken' state
		move.b	#$B,Obj_Map_Id(a0)
		rts
; ---------------------------------------------------------------------------

Offset_0x012FAE:
		move.b	#$46,Obj_Col_Flags(a0)
		move.b	Obj_Subtype(a0),Obj_Ani_Number(a0)	; subtype = icon to display
		tst.w	(Two_Player_Flag).w			; are we in two player mode?
		beq.s	Monitors_Main				; if not, branch
		move.b	#9,Obj_Ani_Number(a0)			; use '?' icon
; Offset_0x012FC6:
Monitors_Main:
		move.b	Obj_Control_Var_0C(a0),d0
		beq.s	SolidObject_Monitor
		; only when secondary routine isn't 0
		; make monitor fall
		bsr.w	ObjectFall
		tst.w	Obj_Speed_Y(a0)
		bmi.s	SolidObject_Monitor
		jsr	(ObjHitFloor).l
		tst.w	d1					; is the monitor on the ground?
		bpl.w	SolidObject_Monitor			; if not, branch
		add.w	d1,Obj_Y(a0)				; move monitor out of ground
		clr.w	Obj_Speed_Y(a0)
		clr.b	Obj_Control_Var_0C(a0)			; stop monitor from falling
; Offset_0x012FEE:
SolidObject_Monitor:
		move.w	#$19,d1
		move.w	#$10,d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	Obj_X(a0),d4
		lea	(Obj_Player_One).w,a1
		moveq	#3,d6
		movem.l	d1-d4,-(sp)
		bsr.w	SolidObject_Monitor_Sonic
		movem.l	(sp)+,d1-d4
		lea	(Obj_Player_Two).w,a1
		moveq	#4,d6
		bsr.w	SolidObject_Monitor_Tails
		jsr	(Add_SpriteToCollisionResponseList).l
; Offset_0x013020:
Monitors_Animate:
		lea	(Monitors_AnimateData).l,a1
		bsr.w	AnimateSprite
; Offset_0x01302A:
Monitors_ChkDel:
		bra.w	MarkObjGone
; ===========================================================================
; Offset_0x01302E:
SolidObject_Monitor_Sonic:
		btst	d6,Obj_Status(a0)			; is Sonic standing on the monitor?
		bne.s	Monitors_ChkOverEdge			; if yes, branch
		cmpi.b	#2,Obj_Ani_Number(a1)			; is Sonic spinning?
		bne.w	SolidObject_cont			; if not, branch
		rts
; ---------------------------------------------------------------------------
; Offset_0x013040:
SolidObject_Monitor_Tails:
		btst	d6,Obj_Status(a0)			; is Tails standing on the monitor?
		bne.s	Monitors_ChkOverEdge			; if yes, branch
		tst.w	(Two_Player_Flag).w			; is it two player mode?
		beq.w	SolidObject_cont			; if not, branch
		cmpi.b	#2,Obj_Ani_Number(a1)			; is Tails spinning?
		bne.w	SolidObject_cont			; if not, branch
		rts
; ---------------------------------------------------------------------------
; Offset_0x01305A:
Monitors_ChkOverEdge:
		move.w	d1,d2
		add.w	d2,d2
		btst	#1,Obj_Status(a1)			; is the character in the air?
		bne.s	.inAir					; if yes, branch
		; check, if character is standing on
		move.w	Obj_X(a1),d0
		sub.w	Obj_X(a0),d0
		add.w	d1,d0
		bmi.s	.inAir					; branch, if character is behind the left edge of the monitor
		cmp.w	d2,d0
		bcs.s	Monitors_CharStandOn			; branch, if character is behind the right edge of the monitor
; Offset_0x013076:
.inAir:
		bclr	#3,Obj_Status(a1)			; clear 'on object' bit
		bset	#1,Obj_Status(a1)			; set 'in air' bit
		bclr	d6,Obj_Status(a0)			; clear 'standing on' bit for the current character
		moveq	#0,d4
		rts
; ---------------------------------------------------------------------------
; Offset_0x01308A:
Monitors_CharStandOn:
		move.w	d4,d2
		bsr.w	Player_On_Platform
		moveq	#0,d4
		rts
; ===========================================================================
; Offset_0x013094:
Monitors_Break:
		move.b	Obj_Status(a0),d0
		andi.b	#$78,d0					; is someone touching the monitor?
		beq.s	Monitors_SpawnIcon			; if not, branch
		move.b	d0,d1
		andi.b	#$28,d1					; is it the main character?
		beq.s	.TailsBreakMonitor			; if not, branch
		andi.b	#$D7,(Obj_Player_One+Obj_Status).w
		ori.b	#2,(Obj_Player_One+Obj_Status).w	; prevent Sonic from walking in the air
; Offset_0x0130B2:
.TailsBreakMonitor:
		andi.b	#$50,d0					; is it the sidekick?
		beq.s	Monitors_SpawnIcon			; if not, branch
		andi.b	#$D7,(Obj_Player_Two+Obj_Status).w
		ori.b	#2,(Obj_Player_Two+Obj_Status).w	; prevent Tails from walking in the air
; Offset_0x0130C4:
Monitors_SpawnIcon:
		clr.b	Obj_Status(a0)
		addq.b	#2,Obj_Routine(a0)
		move.b	#0,Obj_Col_Flags(a0)
		bsr.w	AllocateObject
		bne.s	Monitors_SpawnSmoke
		move.l	#Obj_MonitorContents,(a1)		; load Obj_MonitorContents
		move.w	Obj_X(a0),Obj_X(a1)			; set icon's position
		move.w	Obj_Y(a0),Obj_Y(a1)
		move.b	Obj_Ani_Number(a0),Obj_Ani_Number(a1)
		move.w	Obj_Player_Last(a0),Obj_Player_Last(a1)	; parent gets item
; Offset_0x0130F6:
Monitors_SpawnSmoke:
		bsr.w	AllocateObject
		bne.s	Offset_0x013112
		move.l	#Obj_Explosion,(a1)			; load Obj_Explosion
		addq.b	#2,Obj_Routine(a1)
		move.w	Obj_X(a0),Obj_X(a1)
		move.w	Obj_Y(a0),Obj_Y(a1)

Offset_0x013112:
		move.w	Obj_Respaw_Ref(a0),a2
		bset	#0,(a2)					; mark monitor as destroyed
		move.b	#$A,Obj_Ani_Number(a0)
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Monitor contents (code for power-up behavior and rising image)
; ---------------------------------------------------------------------------
; Offset_0x13120: Monitors_Contents:
Obj_MonitorContents:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	MonitorContents_Index(pc,d0.w),d1
		jmp	MonitorContents_Index(pc,d1.w)
; ===========================================================================
; Offset_0x013132:
MonitorContents_Index:
		dc.w MonitorContents_Init-MonitorContents_Index
		dc.w MonitorContents_Raise-MonitorContents_Index
		dc.w MonitorContents_Delete-MonitorContents_Index
; ===========================================================================
; Offset_0x013138:
MonitorContents_Init:
		addq.b	#2,Obj_Routine(a0)
		move.w	#$84C4,Obj_Art_VRAM(a0)
		move.b	#$24,Obj_Flags(a0)
		move.w	#$180,Obj_Priority(a0)
		move.b	#8,Obj_Width(a0)
		move.w	#-$300,Obj_Speed_Y(a0)
		moveq	#0,d0
		move.b	Obj_Ani_Number(a0),d0
		; all of this up to MonitorContents_Icon are remnants from Sonic 2's multiplayer
		tst.w	(Two_Player_Flag).w			; is this two player mode?
		beq.s	MonitorContents_Icon			; if not, branch
		move.w	(Level_frame_counter).w,d0		; use the timer to determine which item
		andi.w	#7,d0					; and 7 means there are 8 different items
		addq.w	#1,d0					; add 1 to prevent getting the static monitor
		tst.w	(Two_Player_Items_Mode).w		; are monitors set to 'teleport only'?
		beq.s	.noTeleport				; if not, branch
		moveq	#8,d0					; force contents to be teleport
; Offset_0x013178:
.noTeleport:
		; keep teleport monitor from causing unwanted effects
		cmpi.w	#8,d0					; is it the teleport monitor?
		bne.s	Offset_0x01318E				; if not, branch
		move.b	(Update_HUD_timer).w,d1
		add.b	(HUD_Timer_Refresh_Flag_P2).w,d1
		cmpi.b	#2,d1					; is either player done with the act?
		beq.s	Offset_0x01318E				; if not, branch
		moveq	#7,d0					; give invincibility instead

Offset_0x01318E:
		move.b	d0,Obj_Ani_Number(a0)

; Offset_0x013192:
MonitorContents_Icon:
		; determine correct mappings offset
		addq.b	#1,d0
		move.b	d0,Obj_Map_Id(a0)
		move.l	#Monitors_Mappings,a1
		add.b	d0,d0
		adda.w	(a1,d0.w),a1
		addq.w	#2,a1
		move.l	a1,Obj_Map(a0)
; Offset_0x0131AA:
MonitorContents_Raise:
		bsr.s	MonitorContents_Move
		bra.w	DisplaySprite
; ===========================================================================
; Offset_0x0131B0:
MonitorContents_Move:
		tst.w	Obj_Speed_Y(a0)				; is the icon still floating up?
		bpl.w	MonitorContents_Main			; if not, branch
		bsr.w	SpeedToPos
		addi.w	#$18,Obj_Speed_Y(a0)
		rts
; ---------------------------------------------------------------------------
; Offset_0x0131C4:
MonitorContents_Main:
		addq.b	#2,Obj_Routine(a0)
		move.w	#$1D,Obj_Ani_Time(a0)
		move.w	Obj_Player_Last(a0),a1
		lea	(Monitors_Broken).w,a2
		cmpa.w	#Obj_Player_One,a1			; did Sonic break the monitor?
		beq.s	MonitorContents_CheckType		; if yes, branch
		lea	(Monitors_Broken_P2).w,a2
; Offset_0x0131E0:
MonitorContents_CheckType:
		moveq	#0,d0
		move.b	Obj_Ani_Number(a0),d0
		add.w	d0,d0
		move.w	MonitorContents_Type(pc,d0.w),d0
		jmp	MonitorContents_Type(pc,d0.w)
; ===========================================================================
; Offset_0x0131F0:
MonitorContents_Type:
		dc.w MonitorContents_Eggman-MonitorContents_Type
		dc.w MonitorContents_SonicLife-MonitorContents_Type
		dc.w MonitorContents_Eggman-MonitorContents_Type
		dc.w MonitorContents_Rings-MonitorContents_Type
		dc.w MonitorContents_SpeedShoes-MonitorContents_Type
		dc.w MonitorContents_FireShield-MonitorContents_Type
		dc.w MonitorContents_LightningShield-MonitorContents_Type
		dc.w MonitorContents_BubbleShield-MonitorContents_Type
		dc.w MonitorContents_Invincibility-MonitorContents_Type
		dc.w MonitorContents_SuperSonic-MonitorContents_Type
; ===========================================================================
; Offset_0x013204: Monitor_Static: Monitor_Robotnik: S2_Monitor_Miles_Life:
MonitorContents_Eggman:
		addq.w	#1,(a2)
		bra.w	Hurt_Player_A1
; ===========================================================================
; Offset_0x1320A: Monitor_Sonic_Life:
MonitorContents_SonicLife:
		addq.w	#1,(Monitors_Broken).w
		addq.b	#1,(Life_count).w
		addq.b	#1,(Update_HUD_lives).w
		moveq	#mus_ExtraLife,d0
		jmp	(PlaySound).l
; ===========================================================================
; Offset_0x01321E: Monitor_Rings:
MonitorContents_Rings:
		addq.w	#1,(a2)
		lea	(Ring_count).w,a2
		lea	(Update_HUD_rings).w,a3
		lea	(Extra_life_flags).w,a4
		lea	(Total_Ring_Count_Address).w,a5
		; another Sonic 2 leftover
		cmpa.w	#Obj_Player_One,a1
		beq.s	.notTails
		lea	(Ring_Count_Address_P2).w,a2
		lea	(HUD_Rings_Refresh_Flag_P2).w,a3
		lea	(Ring_Status_Flag_P2).w,a4
		lea	(Total_Ring_Count_Address_P2).w,a5
; Offset_0x013246:
.notTails:
		; these two functions cap ring collection at 999 rings
		addi.w	#10,(a5)
		cmpi.w	#999,(a5)
		bcs.s	.under999Rings
		move.w	#999,(a5)
; Offset_0x013254:
.under999Rings:
		addi.w	#10,(a2)
		cmpi.w	#999,(a2)
		bcs.s	.under999Rings2
		move.w	#999,(a2)
; Offset_0x013262:
.under999Rings2:
		ori.b	#1,(a3)
		cmpi.w	#100,(a2)
		bcs.s	.playSound
		bset	#1,(a4)
		beq.s	MonitorContents_SonicOrTails
		cmpi.w	#200,(a2)
		bcs.s	.playSound
		bset	#2,(a4)
		beq.s	MonitorContents_SonicOrTails
; Offset_0x01327E:
.playSound:
		moveq	#sfx_RingRight,d0
		jmp	(PlaySound).l
; ---------------------------------------------------------------------------
; Hilariously, this function is still used in the final, complete with the
; (now incorrect) jump to the Eggman monitor if the player is P2 Tails
; Offset_0x013286: Monitor_Add_Life_To_P1_Or_P2:
MonitorContents_SonicOrTails:
		cmpa.w	#Obj_Player_One,a1
		beq.w	MonitorContents_SonicLife
		bra.w	MonitorContents_Eggman
; ===========================================================================
; Offset_0x013292: Monitor_Shoes:
MonitorContents_SpeedShoes:
		addq.w	#1,(a2)
		bset	#Speed_Type, Obj_Player_Status(a1)
		move.b	#$96,Obj_P_Spd_Shoes_Time(a1)
		cmpa.w	#Obj_Player_One,a1
		bne.s	.notSonic
		cmpi.w	#2,(Player_Selected_Flag).w
		beq.s	.notSonic
		move.w	#$C00,(Sonic_Max_Speed).w
		move.w	#$18,(Sonic_Acceleration).w
		move.w	#$80,(Sonic_Deceleration).w
		bra.s	.playMusic
; Offset_0x0132C2:
.notSonic:
		move.w	#$C00,(Miles_Max_Speed).w
		move.w	#$18,(Miles_Acceleration).w
		move.w	#$80,(Miles_Deceleration).w
; Offset_0x0132D4:
.playMusic:
		moveq	#mus_Invincibility,d0
		jmp	(PlaySound).l
; ===========================================================================
; Offset_0x0132DC: Monitor_Fire_Shield:
MonitorContents_FireShield:
		addq.w	#1,(a2)
		bset	#Classic_Type,Obj_Player_Status(a1)
		bset	#Fire_Type,Obj_Player_Status(a1)
		moveq	#sfx_FireShield,d0
		jsr	(PlaySound).l
		tst.b	Obj_Player_One_Or_Two_2(a0)
		bne.s	.notSonic
		move.l	#Obj_FireShield,(Obj_P1_Shield).w
		move.w	a1,(Obj_P1_Shield+Obj_Player_Last).w
		rts
; Offset_0x013306:
.notSonic:
		move.l	#Obj_FireShield,(Obj_P2_Shield).w
		move.w	a1,(Obj_P2_Shield+Obj_Player_Last).w
		rts
; ===========================================================================
; Offset_0x013314: Monitor_Lightning_Shield:
MonitorContents_LightningShield:
		addq.w	#1,(a2)
		bset	#Classic_Type,Obj_Player_Status(a1)
		bset	#Lightning_Type,Obj_Player_Status(a1)
		moveq	#sfx_LightningShield,d0
		jsr	(PlaySound).l
		tst.b	Obj_Player_One_Or_Two_2(a0)
		bne.s	.notSonic
		move.l	#Obj_LightningShield,(Obj_P1_Shield).w
		move.w	a1,(Obj_P1_Shield+Obj_Player_Last).w
		rts
; Offset_0x01333E:
.notSonic:
		move.l	#Obj_LightningShield,(Obj_P2_Shield).w
		move.w	a1,(Obj_P2_Shield+Obj_Player_Last).w
		rts
; ===========================================================================
; Offset_0x01334C: Monitor_Water_Shield:
MonitorContents_BubbleShield:
		addq.w	#1,(a2)
		bset	#Classic_Type,Obj_Player_Status(a1)
		bset	#Water_Type,Obj_Player_Status(a1)
		moveq	#sfx_BubbleShield,d0
		jsr	(PlaySound).l
		tst.b	Obj_Player_One_Or_Two_2(a0)
		bne.s	.notSonic
		move.l	#Obj_BubbleShield,(Obj_P1_Shield).w
		move.w	a1,(Obj_P1_Shield+Obj_Player_Last).w
		rts
; Offset_0x013376:
.notSonic:
		move.l	#Obj_BubbleShield,(Obj_P2_Shield).w
		move.w	a1,(Obj_P2_Shield+Obj_Player_Last).w
		rts
; ===========================================================================
; Offset_0x013384: Monitor_Invincibility:
MonitorContents_Invincibility:
		addq.w	#1,(a2)
		tst.b	(Super_Sonic_flag).w
		bne.s	Offset_0x0133CE
		bset	#Invincibility_Type,Obj_Player_Status(a1)
		move.b	#$96,Obj_P_Invcbility_Time(a1)
		tst.b	(Boss_Flag).w
		bne.s	Offset_0x0133AE
		cmpi.b	#$C,Obj_Subtype(a1)
		bls.s	Offset_0x0133AE
		moveq	#mus_Invincibility,d0
		jsr	(PlaySound).l

Offset_0x0133AE:
		tst.b	Obj_Player_One_Or_Two_2(a0)
		bne.s	.notSonic
		move.l	#Obj_Invincibility,(Obj_P1_Invincibility).w
		move.w	a1,(Obj_P1_Invincibility+Obj_Player_Last).w
		rts
; Offset_0x0133C2:
.notSonic:
		move.l	#Obj_Invincibility,(Obj_P2_Invincibility).w
		move.w	a1,(Obj_P2_Invincibility+Obj_Player_Last).w

Offset_0x0133CE:
		rts
; ===========================================================================
; Offset_0x133D0: Monitor_Super_Sonic:
MonitorContents_SuperSonic:
		addq.w	#1,(a2)
		addi.w	#50,(Ring_count).w
		move.b	#1,(Super_Sonic_Palette_Status).w
		move.b	#$F,(Super_Sonic_Palette_Timer).w
		move.b	#1,(Super_Sonic_flag).w
		move.b	#$81,(Obj_Player_One+Obj_Timer).w
		move.b	#$1F,(Obj_Player_One+Obj_Ani_Number).w
		move.l	#Obj_Super_Sonic_Stars,(Obj_Super_Sonic_Stars_RAM).w
		move.w	#$A00,(Sonic_Max_Speed).w
		move.w	#$30,(Sonic_Acceleration).w
		move.w	#$100,(Sonic_Deceleration).w
		move.b	#0,(Obj_Player_One+Obj_P_Invcbility_Time).w
		bset	#Invincibility_Type,Obj_Player_Status(a1)
		moveq	#sfx_Whistle,d0
		jsr	(PlaySound).l
		moveq	#mus_Invincibility,d0
		jmp	(PlaySound).l
		; unused
		rts
; ===========================================================================
; Offset_0x01342E: Monitor_Delete_Object:
MonitorContents_Delete:
		subq.w	#1,Obj_Ani_Time(a0)
		bmi.w	DeleteObject
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Animation script for Monitors
; ---------------------------------------------------------------------------
; Offset_0x01343A:
Monitors_AnimateData:
		dc.w	MonAni_Static-Monitors_AnimateData
		dc.w	MonAni_Sonic-Monitors_AnimateData
		dc.w	MonAni_Eggman-Monitors_AnimateData
		dc.w	MonAni_Rings-Monitors_AnimateData
		dc.w	MonAni_SpeedShoes-Monitors_AnimateData
		dc.w	MonAni_FireShield-Monitors_AnimateData
		dc.w	MonAni_LightningShield-Monitors_AnimateData
		dc.w	MonAni_BubbleShield-Monitors_AnimateData
		dc.w	MonAni_Invincibility-Monitors_AnimateData
		dc.w	MonAni_SuperSonic-Monitors_AnimateData
		dc.w	MonAni_Broken-Monitors_AnimateData
MonAni_Static:		dc.b	  1,  0,  1,$FF
MonAni_Sonic:		dc.b	  1,  0,  2,  2,  1,  2,  2,$FF
MonAni_Eggman:		dc.b	  1,  0,  3,  3,  1,  3,  3,$FF
MonAni_Rings:		dc.b	  1,  0,  4,  4,  1,  4,  4,$FF
MonAni_SpeedShoes:	dc.b	  1,  0,  5,  5,  1,  5,  5,$FF
MonAni_FireShield:	dc.b	  1,  0,  6,  6,  1,  6,  6,$FF
MonAni_LightningShield:	dc.b	  1,  0,  7,  7,  1,  7,  7,$FF
MonAni_BubbleShield:	dc.b	  1,  0,  8,  8,  1,  8,  8,$FF
MonAni_Invincibility:	dc.b	  1,  0,  9,  9,  1,  9,  9,$FF
MonAni_SuperSonic:	dc.b	  1,  0, $A, $A,  1, $A, $A,$FF
MonAni_Broken:		dc.b	  2,  0,  1, $B,$FE,  1
		even
; ---------------------------------------------------------------------------
; Sprite mappings for Monitors and Monitor Contents
; ---------------------------------------------------------------------------
; Offset_0x0134A2:
Monitors_Mappings:	include	"data/mappings/01 - Monitors.asm"
;-------------------------------------------------------------------------------
; Rotina para tratar os espinhos e outros objetos como objeto s�lido
; ->>>
;-------------------------------------------------------------------------------
Solid_Object:                                                  ; Offset_0x013556
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Solid_Object_A1                        ; Offset_0x013574
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		tst.b	Obj_Flags(A1)                                    ; $0004
		bpl.w	Offset_0x0135B4
		addq.b	#$01,d6
Solid_Object_A1:                                               ; Offset_0x013574
		btst	D6, Obj_Status(A0)                               ; $002A
		beq.w	Offset_0x013888
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x013598
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x013598
		cmp.w	D2,d0
		bcs.s	Offset_0x0135AC
Offset_0x013598:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
		moveq	#0,d4
		rts
Offset_0x0135AC:
		move.w	D4,d2
		bsr.w	Player_On_Platform                     ; Offset_0x013A56
		moveq	#0,d4
Offset_0x0135B4:
		rts
;-------------------------------------------------------------------------------
Solid_Object_2:                                                ; Offset_0x0135B6
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Solid_Object_2_A1                      ; Offset_0x0135CC
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		addq.b	#$01,d6
Solid_Object_2_A1:                                             ; Offset_0x0135CC
		btst	D6, Obj_Status(A0)                               ; $002A
		beq.w	SolidObject_cont                  ; Offset_0x013890
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x0135F0
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x0135F0
		cmp.w	D2,d0
		bcs.s	Offset_0x013604
Offset_0x0135F0:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
		moveq	#0,d4
		rts
Offset_0x013604:
		move.w	D4,d2
		bsr.w	Player_On_Platform                     ; Offset_0x013A56
		moveq	#0,d4
		rts
;-------------------------------------------------------------------------------
Solid_Object_3:                                                ; Offset_0x01360E
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Offset_0x013624
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		addq.b	#$01,d6
Offset_0x013624:
		btst	D6, Obj_Status(A0)                               ; $002A
		beq.w	Offset_0x0137CE
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x013648
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x013648
		cmp.w	D2,d0
		bcs.s	Offset_0x01365C
Offset_0x013648:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
		moveq	#0,d4
		rts
Offset_0x01365C:
		move.w	D4,d2
		bsr.w	Solid_Object_Sloped_2                  ; Offset_0x013A90
		move.w	D6,d4
		addi.b	#$11,d4
		bset	D4,d6
		moveq	#0,d4
		rts
;-------------------------------------------------------------------------------
; S1_Platform_Object: ; Sonic 1 Left over                      ; Offset_0x01366E
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Offset_0x013684
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		addq.b	#$01,d6
Offset_0x013684:
		btst	D6, Obj_Status(A0)                               ; $002A
		beq.w	Offset_0x013828
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x0136A8
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x0136A8
		cmp.w	D2,d0
		bcs.s	Offset_0x0136BC
Offset_0x0136A8:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
		moveq	#0,d4
		rts
Offset_0x0136BC:
		move.w	D4,d2
		bsr.w	Solid_Object_Sloped_4                  ; Offset_0x013AD2
		moveq	#0,d4
		rts
;-------------------------------------------------------------------------------
Solid_Object_4:                                                ; Offset_0x0136C6
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Offset_0x0136DC
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		addq.b	#$01,d6
Offset_0x0136DC:
		btst	D6, Obj_Status(A0)                               ; $002A
		beq.w	Offset_0x0137CE
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x013700
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x013700
		cmp.w	D2,d0
		bcs.s	Offset_0x01370E
Offset_0x013700:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
		moveq	#0,d4
		rts
Offset_0x01370E:
		move.w	D4,d2
		bsr.w	Solid_Object_Sloped_2                  ; Offset_0x013A90
		move.w	D6,d4
		addi.b	#$11,d4
		bset	D4,d6
		moveq	#0,d4
		rts
;-------------------------------------------------------------------------------
; Rotina para tratar os espinhos e outros objetos como objeto s�lido
; <<<-
;-------------------------------------------------------------------------------
Solid_Object_Offset:                                           ; Offset_0x013720
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Offset_0x013736
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		addq.b	#$01,d6
Offset_0x013736:
		btst	D6, Obj_Status(A0)                               ; $002A
		beq.w	Offset_0x01378C
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x013758
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x013758
		add.w	D1,d1
		cmp.w	D1,d0
		bcs.s	Offset_0x01376C
Offset_0x013758:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
		moveq	#0,d4
		rts
Offset_0x01376C:
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	D2,d0
		add.w	D3,d0
		moveq	#0,d1
		move.b	Obj_Height_2(A1),d1                             ; $001E
		sub.w	D1,d0
		move.w	D0, Obj_Y(A1)                                    ; $0014
		sub.w	Obj_X(A0),d4                                    ; $0010
		sub.w	D4, Obj_X(A1)                                    ; $0010
		moveq	#0,d4
		rts
Offset_0x01378C:
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.w	Offset_0x013978
		move.w	D1,d4
		add.w	D4,d4
		cmp.w	D4,d0
		bhi.w	Offset_0x013978
		move.w	Obj_Y(A0),d5                                    ; $0014
		add.w	D3,d5
		move.b	Obj_Height_2(A1),d3                             ; $001E
		ext.w	D3
		add.w	D3,d2
		move.w	Obj_Y(A1),d3                                    ; $0014
		sub.w	D5,d3
		addq.w	#$04,d3
		add.w	D2,d3
		bmi.w	Offset_0x013978
		move.w	D2,d4
		add.w	D4,d4
		cmp.w	D4,d3
		bcc.w	Offset_0x013978
		bra.w	Offset_0x0138D4
Offset_0x0137CE:
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.w	Offset_0x013978
		move.w	D1,d3
		add.w	D3,d3
		cmp.w	D3,d0
		bhi.w	Offset_0x013978
		move.w	D0,d5
		btst	#0, Obj_Flags(A0)                              ; $0004
		beq.s	Offset_0x0137F4
		not.w   D5
		add.w	D3,d5
Offset_0x0137F4:
		lsr.w	#$01,d5
		move.b	(A2,d5),d3
		sub.b	(A2),d3
		ext.w	D3
		move.w	Obj_Y(A0),d5                                    ; $0014
		sub.w	D3,d5
		move.b	Obj_Height_2(A1),d3                             ; $001E
		ext.w	D3
		add.w	D3,d2
		move.w	Obj_Y(A1),d3                                    ; $0014
		sub.w	D5,d3
		addq.w	#$04,d3
		add.w	D2,d3
		bmi.w	Offset_0x013978
		move.w	D2,d4
		add.w	D4,d4
		cmp.w	D4,d3
		bcc.w	Offset_0x013978
		bra.w	Offset_0x0138D4
;-------------------------------------------------------------------------------
Offset_0x013828:
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.w	Offset_0x013978
		move.w	D1,d3
		add.w	D3,d3
		cmp.w	D3,d0
		bhi.w	Offset_0x013978
		move.w	D0,d5
		btst	#0, Obj_Flags(A0)                              ; $0004
		beq.s	Offset_0x01384E
		not.w   D5
		add.w	D3,d5
Offset_0x01384E:
		andi.w	#$FFFE,d5
		move.b	(A2,d5),d3
		move.b	$01(A2,d5),d2
		ext.w	D2
		ext.w	D3
		move.w	Obj_Y(A0),d5                                    ; $0014
		sub.w	D3,d5
		move.w	Obj_Y(A1),d3                                    ; $0014
		sub.w	D5,d3
		move.b	Obj_Height_2(A1),d5                             ; $001E
		ext.w	D5
		add.w	D5,d3
		addq.w	#$04,d3
		bmi.w	Offset_0x013978
		add.w	D5,d2
		move.w	D2,d4
		add.w	D5,d4
		cmp.w	D4,d3
		bcc.w	Offset_0x013978
		bra.w	Offset_0x0138D4
;-------------------------------------------------------------------------------
Offset_0x013888:
		tst.b	Obj_Flags(A0)                                    ; $0004
		bpl.w	Offset_0x013978
;-------------------------------------------------------------------------------
; Rotina para tratar os monitores como objeto s�lido
; ->>>
;-------------------------------------------------------------------------------
SolidObject_cont:                                         ; Offset_0x013890
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.w	Offset_0x013978
		move.w	D1,d3
		add.w	D3,d3
		cmp.w	D3,d0
		bhi.w	Offset_0x013978
		move.b	Obj_Height_3(A1),d4                             ; $0044
		ext.w	D4
		add.w	D2,d4
		move.b	Obj_Height_2(A1),d3                             ; $001E
		ext.w	D3
		add.w	D3,d2
		move.w	Obj_Y(A1),d3                                    ; $0014
		sub.w	Obj_Y(A0),d3                                    ; $0014
		addq.w	#$04,d3
		add.w	D2,d3
		bmi.w	Offset_0x013978
		andi.w	#$0FFF,d3
		add.w	D2,d4
		cmp.w	D4,d3
		bcc.w	Offset_0x013978
Offset_0x0138D4:
		tst.b	Obj_Player_Control(A1)                           ; $002E
		bmi.w	Offset_0x013978
		cmpi.b	#$06, Obj_Routine(A1)                            ; $0005
		bcc.w	Offset_0x01399E
		tst.w	(Debug_placement_mode).w                    ; $FFFFFE08
		bne.w	Offset_0x01399E
		move.w	D0,d5
		cmp.w	D0,d1
		bcc.s	Offset_0x0138FC
		add.w	D1,d1
		sub.w	D1,d0
		move.w	D0,d5
		neg.w   D5
Offset_0x0138FC:
		move.w	D3,d1
		cmp.w	D3,d2
		bcc.s	Offset_0x01390A
		subq.w	#$04,d3
		sub.w	D4,d3
		move.w	D3,d1
		neg.w   D1
Offset_0x01390A:
		cmp.w	D1,d5
		bhi.w	Offset_0x0139A2
Offset_0x013910:
		cmpi.w	#$0004,d1
		bls.w	Offset_0x0139A2
		tst.w	D0
		beq.s	Offset_0x013944
		bmi.s	Offset_0x013926
		tst.w	Obj_Speed_X(A1)                                  ; $0018
		bmi.s	Offset_0x013944
		bra.s	Offset_0x01392C
Offset_0x013926:
		tst.w	Obj_Speed_X(A1)                                  ; $0018
		bpl.s	Offset_0x013944
Offset_0x01392C:
		move.w	#$0000, Obj_Inertia(A1)                          ; $001C
		move.w	#$0000, Obj_Speed_X(A1)                          ; $0018
		tst.b	Obj_Player_Hit_Flag(A1)                          ; $0037
		bpl.s	Offset_0x013944
		bset	#$06, Obj_Player_Hit_Flag(A1)                    ; $0037
Offset_0x013944:
		sub.w	D0, Obj_X(A1)                                    ; $0010
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x01396A
		move.l	D6,d4
		addq.b	#$02,d4
		bset	D4, Obj_Status(A0)                               ; $002A
		bset	#$05, Obj_Status(A1)                             ; $002A
		move.w	D6,d4
		addi.b	#$0D,d4
		bset	D4,d6
		moveq	#$01,d4
		rts
Offset_0x01396A:
		bsr.s	Offset_0x013990
		move.w	D6,d4
		addi.b	#$0D,d4
		bset	D4,d6
		moveq	#$01,d4
		rts
Offset_0x013978:
		move.l	D6,d4
		addq.b	#$02,d4
		btst	D4, Obj_Status(A0)                               ; $002A
		beq.s	Offset_0x01399E
		cmpi.b	#$02, Obj_Ani_Number(A1)                         ; $0020
		beq.s	Offset_0x013990
		move.w	#$0001, Obj_Ani_Number(A1)                       ; $0020
Offset_0x013990:
		move.l	D6,d4
		addq.b	#$02,d4
		bclr	D4, Obj_Status(A0)                               ; $002A
		bclr	#$05, Obj_Status(A1)                             ; $002A
Offset_0x01399E:
		moveq	#0,d4
		rts
Offset_0x0139A2:
		tst.w	D3
		bmi.s	Offset_0x0139AE
		cmpi.w	#$0010,d3
		bcs.s	Offset_0x013A1A
		bra.s	Offset_0x013978
Offset_0x0139AE:
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x0139C4
		tst.w	Obj_Speed_Y(A1)                                  ; $001A
		beq.s	Offset_0x0139EC
		bpl.s	Offset_0x0139D4
		tst.w	D3
		bpl.s	Offset_0x0139D4
		bra.s	Offset_0x0139CA
Offset_0x0139C4:
		move.w	#$0000, Obj_Inertia(A1)                          ; $001C
Offset_0x0139CA:
		sub.w	D3, Obj_Y(A1)                                    ; $0014
		move.w	#$0000, Obj_Speed_Y(A1)                          ; $001A
Offset_0x0139D4:
		tst.b	Obj_Player_Hit_Flag(A1)                          ; $0037
		bpl.s	Offset_0x0139E0
		bset	#$05, Obj_Player_Hit_Flag(A1)                    ; $0037
Offset_0x0139E0:
		move.w	D6,d4
		addi.b	#$0F,d4
		bset	D4,d6
		moveq	#-$02,d4
		rts
Offset_0x0139EC:
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x0139D4
		move.w	D0,d4
		bpl.s	Offset_0x0139FA
		neg.w   D4
Offset_0x0139FA:
		cmpi.w	#$0010,d4
		bcs.w	Offset_0x013910
		move.l	A0, -(sp)
		move.l	A1,a0
		jsr	(Kill_Player)                          ; Offset_0x00A4A4
		move.l	(sp)+,a0
		move.w	D6,d4
		addi.b	#$0F,d4
		bset	D4,d6
		moveq	#-$02,d4
		rts
Offset_0x013A1A:
		subq.w	#$04,d3
		moveq	#0,d1
		move.b	Obj_Width(A0),d1                                ; $0007
		move.w	D1,d2
		add.w	D2,d2
		add.w	Obj_X(A1),d1                                    ; $0010
		sub.w	Obj_X(A0),d1                                    ; $0010
		bmi.s	Offset_0x013A52
		cmp.w	D2,d1
		bcc.s	Offset_0x013A52
		sub.w	D3, Obj_Y(A1)                                    ; $0014
		subq.w	#$01, Obj_Y(A1)                                  ; $0014
		tst.w	Obj_Speed_Y(A1)                                  ; $001A
		bmi.s	Offset_0x013A52
		bsr.w	Ride_Object_Set_Ride                   ; Offset_0x013C80
		move.w	D6,d4
		addi.b	#$11,d4
		bset	D4,d6
		moveq	#-$01,d4
		rts
Offset_0x013A52:
		moveq	#0,d4
		rts
;-------------------------------------------------------------------------------
; Rotina para tratar os monitores como objeto s�lido
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para tratar os monitores e outros objetos como plataformas
; ->>>
;-------------------------------------------------------------------------------
Player_On_Platform:                                            ; Offset_0x013A56
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	D3,d0
		bra.s	Offset_0x013A66
Offset_0x013A5E:
		move.w	Obj_Y(A0),d0                                    ; $0014
		subi.w	#$0009,d0
Offset_0x013A66:
		tst.b	Obj_Player_Control(A1)                           ; $002E
		bmi.s	Offset_0x013A8E
		cmpi.b	#$06, Obj_Routine(A1)                            ; $0005
		bcc.s	Offset_0x013A8E
		tst.w	(Debug_placement_mode).w                    ; $FFFFFE08
		bne.s	Offset_0x013A8E
		moveq	#0,d1
		move.b	Obj_Height_2(A1),d1                             ; $001E
		sub.w	D1,d0
		move.w	D0, Obj_Y(A1)                                    ; $0014
		sub.w	Obj_X(A0),d2                                    ; $0010
		sub.w	D2, Obj_X(A1)                                    ; $0010
Offset_0x013A8E:
		rts
;-------------------------------------------------------------------------------
; Rotina para tratar os monitores e outros objetos como plataformas
; <<<-
;-------------------------------------------------------------------------------
Solid_Object_Sloped_2:                                         ; Offset_0x013A90
		btst	#$03, Obj_Status(A1)                             ; $002A
		beq.s	Offset_0x013AD0
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		lsr.w	#$01,d0
		btst	#0, Obj_Flags(A0)                              ; $0004
		beq.s	Offset_0x013AB0
		not.w   D0
		add.w	D1,d0
Offset_0x013AB0:
		move.b	(A2,d0),d1
		ext.w	D1
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	D1,d0
		moveq	#0,d1
		move.b	Obj_Height_2(A1),d1                             ; $001E
		sub.w	D1,d0
		move.w	D0, Obj_Y(A1)                                    ; $0014
		sub.w	Obj_X(A0),d2                                    ; $0010
		sub.w	D2, Obj_X(A1)                                    ; $0010
Offset_0x013AD0:
		rts
;-------------------------------------------------------------------------------
Solid_Object_Sloped_4:                                         ; Offset_0x013AD2
		btst	#$03, Obj_Status(A1)                             ; $002A
		beq.s	Offset_0x013AD0
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		btst	#0, Obj_Flags(A0)                              ; $0004
		beq.s	Offset_0x013AF0
		not.w   D0
		add.w	D1,d0
Offset_0x013AF0:
		andi.w	#$FFFE,d0
		bra.s	Offset_0x013AB0
;-------------------------------------------------------------------------------
; Rotina usada pelas molas e outros objetos
; ->>>
;-------------------------------------------------------------------------------
Platform_Object:                                               ; Offset_0x013AF6
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Platform_Object_A1                     ; Offset_0x013B0C
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		addq.b	#$01,d6
Platform_Object_A1:                                            ; Offset_0x013B0C
		btst	D6, Obj_Status(A0)                               ; $002A
		beq.w	Offset_0x013C26
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x013B30
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x013B30
		cmp.w	D2,d0
		bcs.s	Offset_0x013B44
Offset_0x013B30:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
		moveq	#0,d4
		rts
Offset_0x013B44:
		move.w	D4,d2
		bsr.w	Player_On_Platform                     ; Offset_0x013A56
		moveq	#0,d4
		rts
;-------------------------------------------------------------------------------
Platform_Object_2:                                             ; Offset_0x013B4E
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Platform_Object_2_A1                   ; Offset_0x013B64
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		addq.b	#$01,d6
Platform_Object_2_A1:                                          ; Offset_0x013B64
		btst	D6, Obj_Status(A0)                               ; $002A
		beq.w	Solid_Object_Check_Sloped_2            ; Offset_0x013CE4
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x013B88
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x013B88
		cmp.w	D2,d0
		bcs.s	Offset_0x013B9C
Offset_0x013B88:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
		moveq	#0,d4
		rts
Offset_0x013B9C:
		move.w	D4,d2
		bsr.w	Solid_Object_Sloped_2                  ; Offset_0x013A90
		moveq	#0,d4
		rts
;-------------------------------------------------------------------------------
Solid_Object_Top_Sloped:                                       ; Offset_0x013BA6
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		moveq	#$03,d6
		movem.l	D1-D4, -(sp)
		bsr.s	Offset_0x013BBC
		movem.l	(sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		addq.b	#$01,d6
Offset_0x013BBC:
		btst	D6, Obj_Status(A0)                               ; $002A
		bne.s	Offset_0x013BCE
		btst	#$03, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x013BFA
		bra.w	Offset_0x013C26
Offset_0x013BCE:
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x013BEA
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x013BEA
		cmp.w	D2,d0
		bcs.s	Offset_0x013BFE
Offset_0x013BEA:
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	D6, Obj_Status(A0)                               ; $002A
Offset_0x013BFA:
		moveq	#0,d4
		rts
Offset_0x013BFE:
		move.w	D4,d2
		bsr.w	Player_On_Platform                     ; Offset_0x013A56
		moveq	#0,d4
		rts
;-------------------------------------------------------------------------------
; Rotina usada pelas molas e outros objetos
; <<<-
;-------------------------------------------------------------------------------
 Offset_0x013C08:
		tst.w	Obj_Speed_Y(A1)                                  ; $001A
		bmi.w	Offset_0x013CE2
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.w	Offset_0x013CE2
		cmp.w	D2,d0
		bcc.w	Offset_0x013CE2
		bra.s	Offset_0x013C44
;-------------------------------------------------------------------------------
Offset_0x013C26:
		tst.w	Obj_Speed_Y(A1)                                  ; $001A
		bmi.w	Offset_0x013CE2
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.w	Offset_0x013CE2
		add.w	D1,d1
		cmp.w	D1,d0
		bcc.w	Offset_0x013CE2
;-------------------------------------------------------------------------------
Offset_0x013C44:
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	D3,d0
;-------------------------------------------------------------------------------
Offset_0x013C4A:
		move.w	Obj_Y(A1),d2                                    ; $0014
		move.b	Obj_Height_2(A1),d1                             ; $001E
		ext.w	D1
		add.w	D2,d1
		addq.w	#$04,d1
		sub.w	D1,d0
		bhi.w	Offset_0x013CE2
		cmpi.w	#$FFF0,d0
		bcs.w	Offset_0x013CE2
		tst.b	Obj_Player_Control(A1)                           ; $002E
		bmi.w	Offset_0x013CE2
		cmpi.b	#$06, Obj_Routine(A1)                            ; $0005
		bcc.w	Offset_0x013CE2
		add.w	D0,d2
		addq.w	#$03,d2
		move.w	D2, Obj_Y(A1)                                    ; $0014
;-------------------------------------------------------------------------------
Ride_Object_Set_Ride:                                          ; Offset_0x013C80
		btst	#$03, Obj_Status(A1)                             ; $002A
		beq.s	Offset_0x013C90
		move.w	Obj_Player_Last(A1),a3                          ; $0042
		bclr	D6, Obj_Status(A3)                               ; $002A
Offset_0x013C90:
		move.w	A0, Obj_Player_Last(A1)                          ; $0042
		move.b	#0, Obj_Angle(A1)                              ; $0026
		move.w	#$0000, Obj_Speed_Y(A1)                          ; $001A
		move.w	Obj_Speed_X(A1), Obj_Inertia(A1)          ; $0018, $001C
		btst	#$01, Obj_Status(A1)                             ; $002A
		beq.s	Offset_0x013CD2
		move.l	A0, -(sp)
		move.l	A1,a0
		move.w	A0,d1
		subi.w	#Obj_Player_One,d1                              ; $B000
		bne.s	Offset_0x013CCA
		cmpi.w	#Miles_Alone,(Player_Selected_Flag).w ; $0002, $FFFFFF08
		beq.s	Offset_0x013CCA
		jsr	(Sonic_ResetOnFloor)                   ; Offset_0x00BF76
		bra.s	Offset_0x013CD0
Offset_0x013CCA:
		jsr	(Miles_ResetOnFloor)                   ; Offset_0x00E7EE
Offset_0x013CD0:
		move.l	(sp)+,a0
Offset_0x013CD2:
		bset	#$03, Obj_Status(A1)                             ; $002A
		bclr	#$01, Obj_Status(A1)                             ; $002A
		bset	D6, Obj_Status(A0)                               ; $002A
Offset_0x013CE2:
		rts
;-------------------------------------------------------------------------------
Solid_Object_Check_Sloped_2:                                   ; Offset_0x013CE4
		tst.w	Obj_Speed_Y(A1)                                  ; $001A
		bmi.w	Offset_0x013CE2
		move.w	Obj_X(A1),d0                                    ; $0010
		sub.w	Obj_X(A0),d0                                    ; $0010
		add.w	D1,d0
		bmi.s	Offset_0x013CE2
		add.w	D1,d1
		cmp.w	D1,d0
		bcc.s	Offset_0x013CE2
		btst	#0, Obj_Flags(A0)                              ; $0004
		beq.s	Offset_0x013D0A
		not.w   D0
		add.w	D1,d0
Offset_0x013D0A:
		lsr.w	#$01,d0
		move.b	(A2,d0),d3
		ext.w	D3
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	D3,d0
		bra.w	Offset_0x013C4A
;-------------------------------------------------------------------------------
; Check_Player_Release_From_Object:                            ; Offset_0x013D1C
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		btst	#$03, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x013D4A
		jsr	(Player_HitFloor_A1)                   ; Offset_0x009D36
		tst.w	D1
		beq.s	Offset_0x013D34
		bpl.s	Offset_0x013D4A
Offset_0x013D34:
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	#$03, Obj_Status(A0)                             ; $002A
Offset_0x013D4A:
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		btst	#$04, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x013D78
		jsr	(Player_HitFloor_A1)                   ; Offset_0x009D36
		tst.w	D1
		beq.s	Offset_0x013D62
		bpl.s	Offset_0x013D78
Offset_0x013D62:
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
		bclr	#$04, Obj_Status(A0)                             ; $002A
Offset_0x013D78:
		moveq	#0,d4
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Explosion from a monitor or enemy
; ---------------------------------------------------------------------------
; Offset_0x013D7C: Object_Hit:
Obj_Explosion:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	Explosion_Index(pc,d0.w),d1
		jmp	Explosion_Index(pc,d1.w)
; ===========================================================================
; Offset_0x013D8A:
Explosion_Index:
		dc.w Explosion_Init-Explosion_Index
		dc.w Explosion_Main-Explosion_Index
		dc.w Explosion_Display-Explosion_Index
; ===========================================================================
; Offset_0x013D90:
Explosion_Init:
		addq.b	#2,Obj_Routine(a0)
		jsr	(AllocateObject).l
		bne.s	Explosion_Main
		move.l	#Obj_Flickies,(a1)
		move.w	Obj_X(a0),Obj_X(a1)
		move.w	Obj_Y(a0),Obj_Y(a1)
		move.w	Obj_Control_Var_0E(a0),Obj_Control_Var_0E(a1)
; Offset_0x013DB4:
Explosion_Main:
		addq.b	#$02,Obj_Routine(a0)
		move.l	#Object_Hit_Mappings, Obj_Map(a0)
		move.w	Obj_Art_VRAM(a0),d0
		andi.w	#$8000,d0
		ori.w	#$5A0,d0
		move.w	d0,Obj_Art_VRAM(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$80,Obj_Priority(a0)
		move.b	#0,Obj_Col_Flags(a0)
		move.b	#$C,Obj_Width(a0)
		move.b	#$C,Obj_Height(a0)
		move.b	#3,Obj_Ani_Time(a0)
		move.b	#0,Obj_Map_Id(a0)
		moveq	#sfx_Break,d0
		jsr	(PlaySound).l
		move.l	#Explosion_Display,(a0)
; Offset_0x013E08:
Explosion_Display:
		subq.b	#1,Obj_Ani_Time(a0)
		bpl.s	Offset_0x013E22
		move.b	#7,Obj_Ani_Time(a0)
		addq.b	#1,Obj_Map_Id(a0)
		cmpi.b	#5,Obj_Map_Id(a0)
		beq.w	DeleteObject

Offset_0x013E22:
		jmp	(DisplaySprite).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Dissipation effect when the fire shield is submerged,as
; well as a smoke effect for CNZ cannons and LBZ tunnels
; ---------------------------------------------------------------------------
; Offset_0x013E28: Obj_Fire_Shield_Dissipate:
Obj_FireShield_Dissipate:
		move.l	#Object_Hit_Mappings,Obj_Map(a0)
		move.w	#$5A0,Obj_Art_VRAM(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$280,Obj_Priority(a0)
		move.b	#$C,Obj_Width(a0)
		move.b	#$C,Obj_Height(a0)
		move.b	#3,Obj_Ani_Time(a0)
		move.b	#1,Obj_Map_Id(a0)
		move.l	#FireShieldDissipate_Animate,(a0)
; Offset_0x013E60:
FireShieldDissipate_Animate:
		jsr	(SpeedToPos).l
		subq.b	#1,Obj_Ani_Time(a0)
		bpl.s	FireShieldDissipate_Display
		move.b	#3,Obj_Ani_Time(a0)
		addq.b	#1,Obj_Map_Id(a0)
		cmpi.b	#5,Obj_Map_Id(a0)
		beq.w	DeleteObject
; Offset_0x013E80:
FireShieldDissipate_Display:
		jmp	(DisplaySprite).l

;-------------------------------------------------------------------------------
Obj_Dissipate:                                                 ; Offset_0x013E86
		move.l	#Object_Hit_Mappings, Obj_Map(A0) ; Offset_0x013EF2, $000C
		move.w	#$85A0, Obj_Art_VRAM(A0)                         ; $000A
		move.b	#$04, Obj_Flags(A0)                              ; $0004
		move.w	#$0100, Obj_Priority(A0)                         ; $0008
		move.b	#$0C, Obj_Width(A0)                              ; $0007
		move.b	#$0C, Obj_Height(A0)                             ; $0006
		move.b	#0, Obj_Map_Id(A0)                             ; $0022
		move.l	#Offset_0x013EB8,(A0)
Offset_0x013EB8:
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bmi.s	Offset_0x013EC0
		rts
Offset_0x013EC0:
		move.b	#$03, Obj_Ani_Time(A0)                           ; $0024
		move.l	#Offset_0x013ECC,(A0)
Offset_0x013ECC:
		jsr	(SpeedToPos)                           ; Offset_0x01111E
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x013EEC
		move.b	#$07, Obj_Ani_Time(A0)                           ; $0024
		addq.b	#$01, Obj_Map_Id(A0)                             ; $0022
		cmpi.b	#$05, Obj_Map_Id(A0)                             ; $0022
		beq.w	DeleteObject                           ; Offset_0x011138
Offset_0x013EEC:
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Object_Hit_Mappings:                                           ; Offset_0x013EF2
		dc.w	Offset_0x013EFC-Object_Hit_Mappings
		dc.w	Offset_0x013F04-Object_Hit_Mappings
		dc.w	Offset_0x013F0C-Object_Hit_Mappings
		dc.w	Offset_0x013F14-Object_Hit_Mappings
		dc.w	Offset_0x013F1C-Object_Hit_Mappings
Offset_0x013EFC:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x013F04:
		dc.w	$0001
		dc.w	$F00F, $2004, $FFF0
Offset_0x013F0C:
		dc.w	$0001
		dc.w	$F00F, $2014, $FFF0
Offset_0x013F14:
		dc.w	$0001
		dc.w	$F00F, $2024, $FFF0
Offset_0x013F1C:
		dc.w	$0001
		dc.w	$F00F, $2034, $FFF0

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 09 - Tree in Angel Island (used in first cutscene to mask the
; Fire Breaths in the background)
; ---------------------------------------------------------------------------
; Offset_0x013F24: Obj_0x09_AIz_Tree:
Obj09_AIZTree:
		move.l	#AIZTree_Mappings,Obj_Map(a0)
		move.w	#$180,Obj_Priority(a0)
		move.b	#8,Obj_Width(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$4001,Obj_Art_VRAM(a0)
		move.l	#AIZTree_ChkDel,(a0)
; Offset_0x013F4A:
AIZTree_ChkDel:
		jmp	(MarkObjGone).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite Mappings - Tree in Angel Island
; ---------------------------------------------------------------------------
; Offset_0x013F50: AIz_Tree_Mappings:
AIZTree_Mappings:	include	"data/mappings/09 - AIZ Tree.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0A - Zipling Pegs in Angel Island
; ---------------------------------------------------------------------------
; Offset_0x013F66: Obj_0x0A_AIz_Zipline_Peg:
Obj0A_ZiplinePeg:
		move.l	#ZiplinePeg_Mappings,Obj_Map(a0)
		move.w	#$380,Obj_Priority(a0)
		move.b	#$20,Obj_Width(a0)
		move.b	#4,Obj_Flags(a0)
		move.w	#$4324,Obj_Art_VRAM(a0)
		move.l	#ZiplinePeg_ChkDel,(a0)
; Offset_0x013F8C:
ZiplinePeg_ChkDel:
		jmp	(MarkObjGone).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite Mappings - Zipling Pegs in Angel Island
; ---------------------------------------------------------------------------
; Offset_0x013F92 AIz_Zipline_Peg_Mappings:
ZiplinePeg_Mappings:	include	"data/mappings/0A - AIZ Zipline Peg.asm"

Obj_0x26_Auto_Spin:                                            ; Offset_0x013FA8
		include "data\objects\obj_0x26.asm"
; Obj_0x27_Lava_Attributes: ; Sonic 2 left over                ; Offset_0x0141F2
		include "data\objects\obj_0x27.asm"
Obj_0x28_Invisible_Block:                                      ; Offset_0x0142D4
		include "data\objects\obj_0x28.asm"
; Obj_0x36_Hz_Breakable_Bar:                                   ; Offset_0x0143B2
		include "data\objects\obj_0x36.asm"
Obj_Wave_Splash:                                               ; Offset_0x014926
		include "data\objects\wavespls.asm"
; Obj_0x40_Hz_Block:                                           ; Offset_0x014AB6
		include "data\objects\obj_0x40.asm"
Obj_0x6A_Hz_Horizontal_Spikes:                                 ; Offset_0x014B5A
		include "data\objects\obj_0x6A.asm"
Obj_0x6B_Hz_Vertical_Spikes:                                   ; Offset_0x014CE8
		include "data\objects\obj_0x6B.asm"
Obj_0x03_AIz_Hollow_Tree:                                      ; Offset_0x014E88
		include "data\objects\obj_0x03.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 05 - Rocks from Angel Island and Endless Mine
; ---------------------------------------------------------------------------
Offset_0x0150F4:
		dc.b	$18, $27, $18, $17, $18, $0F, $0E, $0F
; ---------------------------------------------------------------------------
; Offset_0x0150FC: Obj_0x05_Rock:
Obj05_Rock:
		moveq	#0,d0
		move.b	Obj_Subtype(a0),d0
		lsr.w	#4,d0
		move.b	d0,Obj_Map_Id(a0)
		add.w	d0,d0
		move.b	Offset_0x0150F4(pc,d0.w),Obj_Width(a0)
		move.b	Offset_0x0150F4+1(pc,d0.w),d1
		move.b	d1,Obj_Height(a0)
		move.b	d1,Obj_Height_2(a0)
		move.l	#Rock_Mappings,Obj_Map(a0)
		move.w	#$2333,Obj_Art_VRAM(a0)
		ori.b	#4,Obj_Flags(a0)
		move.w	#$200,Obj_Priority(a0)
		move.w	#$40,Obj_Control_Var_12(a0)
		cmpi.w	#AIz_Act_2,(Current_ZoneAndAct).w
		bne.s	Offset_0x015152
		move.l	#AIz_2_Rock_Mappings,Obj_Map(a0)
		move.w	#$42F0,Obj_Art_VRAM(a0)

Offset_0x015152:
		cmpi.w	#EMz_Act_1,(Current_ZoneAndAct).w
		bne.s	Offset_0x01516E
		move.l	#EMz_Rock_Mappings,Obj_Map(a0)
		move.w	#$E300,Obj_Art_VRAM(a0)
		move.b	#0,Obj_Map_Id(a0)

Offset_0x01516E:
		move.l	#Rock_SmallMedium,(a0)
		btst	#2,Obj_Subtype(a0)
		beq.s	Rock_SmallMedium
		move.l	#Rock_Large,(a0)
		bra.w	Rock_Large
; ===========================================================================
; Offset_0x015186:
Rock_SmallMedium:
		move.w	(Enemy_Hit_Chain_Count).w,Obj_Control_Var_08(a0)
		move.b	(Obj_Player_One+Obj_Ani_Number).w,Obj_Control_Var_02(a0)
		move.b	(Obj_Player_Two+Obj_Ani_Number).w,Obj_Control_Var_03(a0)
		move.b	(Obj_Player_One+Obj_Status).w,Obj_Control_Var_0A(a0)
		move.b	(Obj_Player_Two+Obj_Status).w,Obj_Control_Var_0B(a0)
		moveq	#0,d1
		move.b	Obj_Width(a0),d1
		addi.w	#$B,d1
		moveq	#0,d2
		move.b	Obj_Height(a0),d2
		move.w	d2,d3
		addq.w	#1,d3
		move.w	Obj_X(a0),d4
		jsr	(Solid_Object).l
		btst	#1,Obj_Subtype(a0)
		beq.s	Offset_0x0151CE
		bsr.w	Offset_0x015500

Offset_0x0151CE:
		btst	#0,Obj_Subtype(a0)
		beq.s	Offset_0x0151E0
		move.b	Obj_Status(a0),d0
		andi.b	#$18,d0
		bne.s	Offset_0x0151F2

Offset_0x0151E0:
		tst.w	(Two_Player_Flag).w
		bne.s	Offset_0x0151EC
		jmp	(MarkObjGone).l
; ---------------------------------------------------------------------------

Offset_0x0151EC:
		jmp	(DisplaySprite).l

Offset_0x0151F2:
		cmpi.b	#$18,d0
		bne.s	Offset_0x015220
		cmpi.b	#$02, Obj_Control_Var_02(A0)			; $0032
		beq.s	Offset_0x015208
		cmpi.b	#$02, Obj_Control_Var_03(A0)			; $0033
		bne.s	Offset_0x0151E0
Offset_0x015208:
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		move.b	Obj_Control_Var_02(A0),d0				; $0032
		bsr.s	Offset_0x015238
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		move.b	Obj_Control_Var_03(A0),d0				; $0033
		bsr.s	Offset_0x015238
		bra.w	Offset_0x015288
Offset_0x015220:
		move.b	D0,d1
		andi.b	#$08,d1
		beq.s	Offset_0x015270
		cmpi.b	#$02, Obj_Control_Var_02(A0)			; $0032
		bne.s	Offset_0x0151E0
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr.s	Offset_0x01523E
		bra.s	Offset_0x015288
Offset_0x015238:
		cmpi.b	#$02,d0
		bne.s	Offset_0x01525C
Offset_0x01523E:
		bset	#$02, Obj_Status(A1)					; $002A
		move.b	#$0E, Obj_Height_2(A1)				 ; $001E
		move.b	#$07, Obj_Width_2(A1)					; $001F
		move.b	#$02, Obj_Ani_Number(A1)				; $0020
		move.w	#$FD00, Obj_Speed_Y(A1)				; $001A
Offset_0x01525C:
		bset	#$01, Obj_Status(A1)					; $002A
		bclr	#$03, Obj_Status(A1)					; $002A
		move.b	#$02, Obj_Routine(A1)					; $0005
		rts
Offset_0x015270:
		andi.b	#$10,d0
		beq.w	Offset_0x0151E0
		cmpi.b	#$02, Obj_Control_Var_03(A0)			; $0033
		bne.w	Offset_0x0151E0
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr.s	Offset_0x01523E
Offset_0x015288:
		move.w	Obj_Control_Var_08(A0),(Enemy_Hit_Chain_Count).w ; $0038, $FFFFF7D0
		andi.b	#$E7, Obj_Status(A0)					; $002A
		tst.w	(Two_Player_Flag).w				; $FFFFFFD8
		bne.w	Offset_0x0152E4
		move.l	#Offset_0x0152A6,(A0)
		bsr.w	Offset_0x015564
;-------------------------------------------------------------------------------
Offset_0x0152A6:
		subq.b	#$01, Obj_Ani_Time(A0)				 ; $0024
		bpl.s	Offset_0x0152C4
		move.b	#$02, Obj_Ani_Time(A0)				 ; $0024
		move.b	Obj_Map_Id(A0),d0					; $0022
		addq.b	#$01,d0
		cmpi.b	#$07,d0
		bcs.s	Offset_0x0152C0
		moveq	#$03,d0
Offset_0x0152C0:
		move.b	D0, Obj_Map_Id(A0)					; $0022
Offset_0x0152C4:
		jsr	(SpeedToPos)				 ; Offset_0x01111E
		addi.w	#$0018, Obj_Speed_Y(A0)				; $001A
		tst.b	Obj_Flags(A0)					; $0004
		bpl.w	Offset_0x0152DE
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x0152DE:
		jmp	(DeleteObject)				; Offset_0x011138
Offset_0x0152E4:
		bsr.s	Offset_0x015310
		move.b	#$03, Obj_Map_Id(A0)					; $0022
		move.l	#Offset_0x0152F6,(A0)
		bsr.w	Offset_0x015564
;-------------------------------------------------------------------------------
Offset_0x0152F6:
		jsr	(SpeedToPos)				 ; Offset_0x01111E
		addi.w	#$0018, Obj_Speed_Y(A0)				; $001A
		tst.b	Obj_Flags(A0)					; $0004
		bpl.w	Offset_0x0152DE
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x015310:
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.w	Offset_0x015338
		moveq	#$48,d0
Offset_0x01531C:
		move.w	(A0,d0),(A1,d0)
		subq.w	#$02,d0
		bcc.s	Offset_0x01531C
		move.l	(A0), Obj_Height_3(A1)				 ; $0044
		move.l	#Offset_0x01533A,(A1)
		move.b	#$07, Obj_Map_Id(A1)					; $0022
		moveq	#0,d0
Offset_0x015338:
		rts
;-------------------------------------------------------------------------------
Offset_0x01533A:
		tst.b	Obj_Flags(A0)					; $0004
		bmi.s	Offset_0x01534A
		move.l	Obj_Height_3(A0),(A0)				 ; $0044
		move.b	#0, Obj_Map_Id(A0)					; $0022
Offset_0x01534A:
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
; Offset_0x015350:
Rock_Large:
		move.w	(Obj_Player_One+Obj_Speed_X).w, Obj_Control_Var_00(A0) ; $FFFFB018, $0030
		move.w	(Obj_Player_Two+Obj_Speed_X).w, Obj_Control_Var_06(A0) ; $FFFFB062, $0036
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	Obj_Height(A0),d2					; $0006
		move.w	D2,d3
		addq.w	#$01,d3
		move.w	Obj_X(A0),d4					; $0010
		bsr	Solid_Object				 ; Offset_0x013556
		move.b	Obj_Status(A0),d0					; $002A
		andi.b	#$60,d0
		bne.s	Offset_0x015394
Offset_0x015382:
		tst.w	(Two_Player_Flag).w				; $FFFFFFD8
		bne.s	Offset_0x01538E
		jmp	(MarkObjGone)				; Offset_0x011AF2
Offset_0x01538E:
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x015394:
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		move.w	Obj_Control_Var_00(A0),d1				; $0030
		btst	#$05, Obj_Status(A0)					; $002A
		beq.s	Offset_0x0153FE
		cmpi.b	#$02, Obj_Control_Var_08(A1)			; $0038
		beq.s	Offset_0x0153C0
		cmpi.b	#$02, Obj_Ani_Number(A1)				; $0020
		bne.s	Offset_0x0153FE
		move.w	D1,d0
		bpl.s	Offset_0x0153BA
		neg.w	D0
Offset_0x0153BA:
		cmpi.w	#$0480,d0
		bcs.s	Offset_0x0153FE
Offset_0x0153C0:
		bclr	#$05, Obj_Status(A0)					; $002A
		bsr.s	Offset_0x015436
		btst	#$06, Obj_Status(A0)					; $002A
		beq.s	Offset_0x015382
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		cmpi.b	#$02, Obj_Control_Var_08(A1)			; $0038
		beq.s	Offset_0x0153E4
		cmpi.b	#$02, Obj_Ani_Number(A1)				; $0020
		bne.s	Offset_0x015382
Offset_0x0153E4:
		move.w	Obj_Control_Var_06(A0), Obj_Speed_X(A1)	; $0036, $0018
		move.w	Obj_Speed_X(A1), Obj_Inertia(A1)		; $0018, $001C
		bclr	#$06, Obj_Status(A0)					; $002A
		bclr	#$05, Obj_Status(A1)					; $002A
		bra.s	Offset_0x015382
Offset_0x0153FE:
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		move.w	Obj_Control_Var_06(A0),d1				; $0036
		btst	#$06, Obj_Status(A0)					; $002A
		beq.w	Offset_0x015382
		cmpi.b	#$02, Obj_Control_Var_08(A1)			; $0038
		beq.s	Offset_0x015430
		cmpi.b	#$02, Obj_Ani_Number(A1)				; $0020
		bne.w	Offset_0x015382
		move.w	D1,d0
		bpl.s	Offset_0x015428
		neg.w	D0
Offset_0x015428:
		cmpi.w	#$0480,d0
		bcs	Offset_0x015382
Offset_0x015430:
		bclr	#$06, Obj_Status(A0)					; $002A
Offset_0x015436:
		bsr.w	Offset_0x0154D6
		tst.w	(Two_Player_Flag).w				; $FFFFFFD8
		bne.s	Offset_0x015486
		move.w	D1, Obj_Speed_X(A1)					; $0018
		addq.w	#$04, Obj_X(A1)					; $0010
		lea	(Offset_0x015642),a4
		move.w	Obj_X(A0),d0					; $0010
		cmp.w	Obj_X(A1),d0					; $0010
		bcs.s	Offset_0x015464
		subi.w	#$0008, Obj_X(A1)				; $0010
		lea	(Offset_0x015662),a4
Offset_0x015464:
		move.w	Obj_Speed_X(A1), Obj_Inertia(A1)		; $0018, $001C
		bclr	#$05, Obj_Status(A1)					; $002A
		move.l	#Offset_0x0152A6,(A0)
		moveq	#0,d0
		move.b	Obj_Map_Id(A0),d0					; $0022
		add.w	D0,d0
		bsr.w	Offset_0x015576
		bra.w	Offset_0x0152A6
Offset_0x015486:
		move.w	D1, Obj_Speed_X(A1)					; $0018
		addq.w	#$04, Obj_X(A1)					; $0010
		lea	(Offset_0x0156BE),a4
		move.w	Obj_X(A0),d0					; $0010
		cmp.w	Obj_X(A1),d0					; $0010
		bcs.s	Offset_0x0154AA
		subi.w	#$0008, Obj_X(A1)				; $0010
		lea	(Offset_0x0156D6),a4
Offset_0x0154AA:
		move.w	Obj_Speed_X(A1), Obj_Inertia(A1)		; $0018, $001C
		bclr	#$05, Obj_Status(A1)					; $002A
		bsr.w	Offset_0x015310
		move.l	#Offset_0x0152F6,(A0)
		move.b	#$03, Obj_Map_Id(A0)					; $0022
		moveq	#0,d0
		move.b	Obj_Map_Id(A0),d0					; $0022
		add.w	D0,d0
		bsr.w	Offset_0x015576
		bra.w	Offset_0x0152F6
Offset_0x0154D6:
		bclr	#$03, Obj_Status(A0)					; $002A
		beq.s	Offset_0x0154EA
		bset	#$01,(Obj_Player_One+Obj_Status).w		; $FFFFB02A
		bclr	#$03,(Obj_Player_One+Obj_Status).w		; $FFFFB02A
Offset_0x0154EA:
		bclr	#$04, Obj_Status(A0)					; $002A
		beq.s	Offset_0x0154FE
		bset	#$01,(Obj_Player_Two+Obj_Status).w		; $FFFFB074
		bclr	#$03,(Obj_Player_Two+Obj_Status).w		; $FFFFB074
Offset_0x0154FE:
		rts
;-------------------------------------------------------------------------------
Offset_0x015500:
		move.b	Obj_Status(A0),d3					; $002A
		andi.b	#$60,d3
		beq.w	Offset_0x015528
		move.w	Obj_X(A0),d2					; $0010
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		move.b	Obj_Control_Var_0A(A0),d0				; $003A
		moveq	#$05,d6
		bsr.s	Offset_0x01552A
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		move.b	Obj_Control_Var_0B(A0),d0				; $003B
		moveq	#$06,d6
		bsr.s	Offset_0x01552A
Offset_0x015528:
		rts
Offset_0x01552A:
		btst	D6,d3
		beq.s	Offset_0x015562
		cmp.w	Obj_X(A1),d2					; $0010
		bcc.s	Offset_0x015562
		btst	#$05,d0
		beq.s	Offset_0x015562
		subq.w	#$01, Obj_Control_Var_10(A0)			; $0040
		bpl.s	Offset_0x015562
		move.w	#$0010, Obj_Control_Var_10(A0)			; $0040
		tst.w	Obj_Control_Var_12(A0)				 ; $0042
		beq.s	Offset_0x015562
		subq.w	#$01, Obj_Control_Var_12(A0)			; $0042
		subq.w	#$01, Obj_X(A0)					; $0010
		subq.w	#$01, Obj_X(A1)					; $0010
		jsr	(ObjHitFloor)				; Offset_0x009D84
		add.w	D1, Obj_Y(A0)					; $0014
Offset_0x015562:
		rts
;-------------------------------------------------------------------------------
Offset_0x015564:
		moveq	#0,d0
		move.b	Obj_Map_Id(A0),d0					; $0022
		add.w	D0,d0
		lea	(Offset_0x01563A),a4
		adda.w	(A4,d0),a4
Offset_0x015576:
		lea	(Offset_0x0155FC),a3
		adda.w	(A3,d0),a3
		move.w	(A3)+,d1
		move.l	(A0),d4
		move.b	Obj_Flags(A0),d5				; $0004
		move.w	Obj_X(A0),d2					; $0010
		move.w	Obj_Y(A0),d3					; $0014
		moveq	#$03,d6
		move.l	A0,a1
		bra.s	Offset_0x01559C
;-------------------------------------------------------------------------------
Offset_0x015596:
		bsr	AllocateObjectAfterCurrent			; Offset_0x011DE0
		bne.s	Offset_0x0155F4
Offset_0x01559C:
		move.l	D4,(A1)
		move.l	Obj_Map(A0), Obj_Map(A1)			; $000C, $000C
		move.b	D5, Obj_Flags(A1)				; $0004
		move.b	(A3)+,d0
		ext.w	D0
		add.w	D2,d0
		move.w	D0, Obj_X(A1)					; $0010
		move.b	(A3)+,d0
		ext.w	D0
		add.w	D3,d0
		move.w	D0, Obj_Y(A1)					; $0014
		move.w	Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)		; $000A, $000A
		ori.w	#$8000, Obj_Art_VRAM(A1)				; $000A
		move.w	#$0080, Obj_Priority(A1)				; $0008
		move.b	#$18, Obj_Width(A1)					; $0007
		move.b	#$18, Obj_Width(A1)					; $0007
		move.w	(A4)+, Obj_Speed_X(A1)				 ; $0018
		move.w	(A4)+, Obj_Speed_Y(A1)				 ; $001A
		move.b	D6, Obj_Map_Id(A1)					; $0022
		addq.b	#$01,d6
		cmpi.b	#$07,d6
		bcs.s	Offset_0x0155F0
		moveq	#$03,d6
Offset_0x0155F0:
		dbra	D1, Offset_0x015596
Offset_0x0155F4:
		moveq	#sfx_Collapse,d0					; $62
		jmp	(PlaySound).l				 ; Offset_0x001176
;-------------------------------------------------------------------------------
Offset_0x0155FC:
		dc.w	Offset_0x015604-Offset_0x0155FC
		dc.w	Offset_0x015616-Offset_0x0155FC
		dc.w	Offset_0x015622-Offset_0x0155FC
		dc.w	Offset_0x01562C-Offset_0x0155FC
Offset_0x015604:
		dc.b	$00, $07, $F8, $E8, $0B, $E4, $FC, $F4
		dc.b	$0C, $FC, $F4, $04, $04, $0C, $F4, $1C
		dc.b	$0C, $1C
Offset_0x015616:
		dc.b	$00, $04, $FC, $F4, $0B, $F4, $FC, $FC
		dc.b	$F4, $0C, $0C, $0C
Offset_0x015622:
		dc.b	$00, $03, $FC, $FC, $0C, $FC, $F4, $04
		dc.b	$0C, $04
Offset_0x01562C:
		dc.b	$00, $05, $F8, $F8, $08, $F8, $F8, $00
		dc.b	$08, $00, $F8, $08, $08, $08
;-------------------------------------------------------------------------------
Offset_0x01563A:
		dc.w	$0008, $0048, $005C, $006C
;-------------------------------------------------------------------------------
Offset_0x015642:
		dc.w	$FD00, $FD00, $FD40, $FD80, $FD40, $FD80, $FD80, $FE00
		dc.w	$FD80, $FE80, $FDC0, $FE80, $FDC0, $FF00, $FE00, $FF00
;-------------------------------------------------------------------------------
Offset_0x015662:
		dc.w	$0300, $FD00, $02C0, $FD80, $02C0, $FD80, $0280, $FE00
		dc.w	$0280, $FE80, $0240, $FE80, $0240, $FF00, $0200, $FF00
		dc.w	$FE00, $FE00, $0200, $FE00, $FF00, $FE20, $FE50, $FE40
		dc.w	$01C0, $FE40, $FF00, $FE00, $0100, $FE20, $FE50, $FE40
		dc.w	$01C0, $FE40, $FF50, $FE20, $00B0, $FE30, $FF80, $FE00
		dc.w	$0080, $FE20, $FF28, $FE40, $00E0, $FE40
;-------------------------------------------------------------------------------
Offset_0x0156BE:
		dc.w	$FD40, $FD80, $FD80, $FE00, $FD80, $FE80, $FDC0, $FE80
		dc.w	$FDC0, $FF00, $FE00, $FF00
;-------------------------------------------------------------------------------
Offset_0x0156D6:
		dc.w	$02C0, $FD80, $0280, $FE00, $0280, $FE80, $0240, $FE80
		dc.w	$0240, $FF00, $0200, $FF00
;-------------------------------------------------------------------------------
; Offset_0x0156EE:
Rock_Mappings:		include	"data/mappings/05 - AIZ1 Rock.asm"
; Offset_0x015776:
AIz_2_Rock_Mappings:	include	"data/mappings/05 - AIZ2 Rock.asm"
; Offset_0x0157FE:
EMz_Rock_Mappings:	include	"data/mappings/05 - EMZ Rock.asm"

;===============================================================================
; Objeto 0x04 - Plataformas que desmoronam ao serem tocadas
; ->>>
;===============================================================================
; Offset_0x01582E:
Obj_0x04_Collapsing_Platform:
		move.l	#Collapsing_Platform_Mappings, Obj_Map(A0) ; Offset_0x016014, $000C
		move.w	#$4001, Obj_Art_VRAM(A0)				; $000A
		cmpi.w	#AIz_Act_2,(Current_ZoneAndAct).w			; $0001, $FFFFFE10
		bne.s	Offset_0x015852
		move.l	#AIz_2_Collapsing_Platform_Mappings, Obj_Map(A0) ; Offset_0x0160F8, $000C
		move.w	#$4001, Obj_Art_VRAM(A0)				; $000A
Offset_0x015852:
		move.l	#Offset_0x015DE8, Obj_Control_Var_00(A0)		; $0030
		move.l	#Offset_0x015FA4, Obj_Control_Var_0C(A0)		; $003C
		move.b	#$3C, Obj_Width(A0)					; $0007
		move.b	#$20, Obj_Height(A0)					; $0006
		cmpi.b	#Iz_Id,(Current_Zone).w			; $05, $FFFFFE10
		bne.s	Offset_0x0158A0
		move.l	#Iz_Collapsing_Platform_Mappings, Obj_Map(A0) ; Offset_0x016D00, $000C
		move.w	#$4001, Obj_Art_VRAM(A0)				; $000A
		move.l	#Offset_0x015E06, Obj_Control_Var_00(A0)		; $0030
		move.l	#Offset_0x015FE4, Obj_Control_Var_0C(A0)		; $003C
		move.b	#$30, Obj_Width(A0)					; $0007
		move.b	#$30, Obj_Height(A0)					; $0006
Offset_0x0158A0:
		ori.b	#$04, Obj_Flags(A0)					; $0004
		move.w	#$0200, Obj_Priority(A0)				; $0008
		move.b	#$07, Obj_Control_Var_08(A0)			; $0038
		move.b	Obj_Subtype(A0), Obj_Map_Id(A0)		; $002C, $0022
		ori.b	#$80, Obj_Status(A0)					; $002A
		move.l	#Offset_0x0158C4,(A0)
Offset_0x0158C4:
		tst.b	Obj_Control_Var_0A(A0)				; $003A
		beq.s	Offset_0x0158D6
		tst.b	Obj_Control_Var_08(A0)				; $0038
		beq.w	Offset_0x015D6A
		subq.b	#$01, Obj_Control_Var_08(A0)			; $0038
Offset_0x0158D6:
		move.b	Obj_Status(A0),d0					; $002A
		andi.b	#$18,d0
		beq.s	Offset_0x0158E6
		move.b	#$01, Obj_Control_Var_0A(A0)			; $003A
Offset_0x0158E6:
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		move.l	Obj_Control_Var_0C(A0),a2				; $003C
		move.w	Obj_X(A0),d4					; $0010
		jsr	(Platform_Object_2)			; Offset_0x013B4E
		bra	MarkObjGone					; Offset_0x011AF2
;-------------------------------------------------------------------------------
Offset_0x0158FE: ; Referência do objeto 0x0F que é referência deste objeto (0x04)
		tst.b	Obj_Control_Var_08(A0)				; $0038
		beq.s	Offset_0x01594E
		tst.b	Obj_Control_Var_0A(A0)				; $003A
		bne.s	Offset_0x015912
		subq.b	#$01, Obj_Control_Var_08(A0)			; $0038
		bra	DisplaySprite				; Offset_0x011148
Offset_0x015912:
		bsr.w	Offset_0x0158E6
		subq.b	#$01, Obj_Control_Var_08(A0)			; $0038
		bne.s	Offset_0x01594C
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		bsr.s	Offset_0x01592A
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
Offset_0x01592A:
		btst	D6, Obj_Status(A0)					; $002A
		beq.s	Offset_0x01594C
		bclr	D6, Obj_Status(A0)					; $002A
		bclr	#$03, Obj_Status(A1)					; $002A
		bclr	#$05, Obj_Status(A1)					; $002A
		bset	#$01, Obj_Status(A1)					; $002A
		move.b	#$01, Obj_Ani_Flag(A1)				; $0021
Offset_0x01594C:
		rts
Offset_0x01594E:
		bsr	ObjectFall					; Offset_0x0110FE
		tst.b	Obj_Flags(A0)					; $0004
		bpl	DeleteObject				; Offset_0x011138
		bra	DisplaySprite				; Offset_0x011148

;===============================================================================
; Objeto 0x0F - Plataformas que desmoronam ao serem tocadas
; ->>>
;===============================================================================
; Offset_0x01595E:
Obj_0x0F_Collapsing_Platform:
		move.l	#Offset_0x015B62,(A0)
		ori.b	#$04, Obj_Flags(A0)					; $0004
		move.w	#$0200, Obj_Priority(A0)				; $0008
		cmpi.b	#LBz_Id,(Current_Zone).w			; $06, $FFFFFE10
		bne.s	Offset_0x0159E6
		move.b	Obj_Subtype(A0),d0					; $002C
		andi.w	#$003F,d0
		add.w	D0,d0
		add.w	D0,d0
		addq.w	#$08,d0
		bcc.s	Offset_0x01598C
		move.b	#$FF,d0
Offset_0x01598C:
		move.b	D0, Obj_Control_Var_08(A0)				; $0038
		btst	#$06, Obj_Subtype(A0)					; $002C
		bne.s	Offset_0x0159C4
		move.l	#LBz_Collapsing_Platforms_Mappings, Obj_Map(A0) ; Offset_0x0161E2, $000C
		move.w	#$4001, Obj_Art_VRAM(A0)				; $000A
		move.b	#$40, Obj_Width(A0)					; $0007
		move.b	#$10, Obj_Height(A0)					; $0006
		move.l	#Offset_0x015E26, Obj_Control_Var_00(A0)		; $0030
		move.l	#Offset_0x015E36, Obj_Control_Var_04(A0)		; $0034
		bra.s	Offset_0x0159E6
Offset_0x0159C4:
		move.l	#LBz_Collapsing_Platforms_Mappings_2, Obj_Map(A0) ; Offset_0x0162DE, $000C
		move.w	#$4001, Obj_Art_VRAM(A0)				; $000A
		move.b	#$20, Obj_Width(A0)					; $0007
		move.b	#$30, Obj_Height(A0)					; $0006
		move.l	#Offset_0x015E46, Obj_Control_Var_00(A0)		; $0030
Offset_0x0159E6:
		cmpi.b	#Hz_Id,(Current_Zone).w			; $01, $FFFFFE10
		bne.w	Offset_0x015A80
		move.l	#Hz_Collapsing_Platform_Mappings, Obj_Map(A0) ; Offset_0x016366, $000C
		move.w	#$C001, Obj_Art_VRAM(A0)				; $000A
		move.b	Obj_Subtype(A0),d0					; $002C
		bpl.s	Offset_0x015A18
		move.b	D0,d1
		andi.b	#$0F,d1
		move.b	D1, Obj_Control_Var_10(A0)				; $0040
		move.l	#Offset_0x015C44,(A0)
		andi.b	#$70,d0
Offset_0x015A18:
		move.b	D0,d1
		andi.w	#$000F,d0
		lsl.w	#$04,d0
		addq.w	#$08,d0
		move.b	D0, Obj_Control_Var_08(A0)				; $0038
		andi.w	#$00F0,d1
		lsr.w	#$02,d1
		lea	Offset_0x015A50(pc,d1.w),a1
		move.b	(A1)+, Obj_Width(A0)					; $0007
		move.b	(A1)+, Obj_Height(A0)					; $0006
		move.b	(A1)+, Obj_Map_Id(A0)					; $0022
		move.b	(A1)+, Obj_Subtype(A0)				; $002C
		add.w	D1,d1
		lea	Offset_0x015A60(pc,d1.w),a1
		move.l	(A1)+, Obj_Control_Var_00(A0)			; $0030
		move.l	(A1)+, Obj_Control_Var_04(A0)			; $0034
		bra.s	Offset_0x015A80
;-------------------------------------------------------------------------------
Offset_0x015A50:
		dc.b	$40, $10, $00, $80, $50, $10, $03, $80
		dc.b	$40, $10, $06, $00, $50, $20, $09, $80
;-------------------------------------------------------------------------------
Offset_0x015A60:
		dc.l	Offset_0x015E54
		dc.l	Offset_0x015E64
		dc.l	Offset_0x015E74
		dc.l	Offset_0x015E88
		dc.l	Offset_0x015E9C
		dc.l	Offset_0x015E9C
		dc.l	Offset_0x015EAB
		dc.l	Offset_0x015EC3
;-------------------------------------------------------------------------------
Offset_0x015A80:
		cmpi.b	#MGz_Id,(Current_Zone).w			; $02, $FFFFFE10
		bne.s	Offset_0x015B02
		move.l	#MGz_Collapsing_Platform_Mappings, Obj_Map(A0) ; Offset_0x0167B4, $000C
		move.w	#$4001, Obj_Art_VRAM(A0)				; $000A
		move.b	Obj_Subtype(A0),d0					; $002C
		move.b	D0,d1
		andi.w	#$000F,d0
		lsl.w	#$04,d0
		addq.w	#$08,d0
		move.b	D0, Obj_Control_Var_08(A0)				; $0038
		andi.w	#$00F0,d1
		lsr.w	#$02,d1
		lea	Offset_0x015ADE(pc,d1.w),a1
		move.b	(A1)+, Obj_Width(A0)					; $0007
		move.b	(A1)+, Obj_Height(A0)					; $0006
		move.b	(A1)+, Obj_Map_Id(A0)					; $0022
		move.b	(A1)+, Obj_Subtype(A0)				; $002C
		add.w	D1,d1
		lea	Offset_0x015AEA(pc,d1.w),a1
		move.l	(A1)+, Obj_Control_Var_00(A0)			; $0030
		move.l	(A1)+, Obj_Control_Var_04(A0)			; $0034
		cmpi.w	#$0010,d1
		bne.s	Offset_0x015B02
		move.l	#Offset_0x015BD4,(A0)
		rts
;-------------------------------------------------------------------------------
Offset_0x015ADE:
		dc.b	$40, $20, $00, $80, $30, $20, $03, $80
		dc.b	$40, $20, $06, $80
;-------------------------------------------------------------------------------
Offset_0x015AEA:
		dc.l	Offset_0x015EDB
		dc.l	Offset_0x015EFB
		dc.l	Offset_0x015F1B
		dc.l	Offset_0x015F33
		dc.l	Offset_0x015EDB
		dc.l	Offset_0x015EFB
;-------------------------------------------------------------------------------
Offset_0x015B02:
		cmpi.b	#Iz_Id,(Current_Zone).w			; $05, $FFFFFE10
		bne.s	Offset_0x015B62
		move.b	Obj_Subtype(A0),d0					; $002C
		bpl.s	Offset_0x015B24
		move.b	D0,d1
		andi.b	#$0F,d1
		move.b	D1, Obj_Control_Var_10(A0)				; $0040
		move.l	#Offset_0x015C44,(A0)
		andi.b	#$70,d0
Offset_0x015B24:
		move.b	D0,d1
		andi.w	#$000F,d0
		lsl.w	#$04,d0
		addq.w	#$08,d0
		move.b	D0, Obj_Control_Var_08(A0)				; $0038
		move.l	#Iz_Collapsing_Platform_Mappings, Obj_Map(A0) ; Offset_0x016D00, $000C
		move.w	#$4001, Obj_Art_VRAM(A0)				; $000A
		move.b	#$50, Obj_Width(A0)					; $0007
		move.b	#$38, Obj_Height(A0)					; $0006
		move.l	#Offset_0x015F4B, Obj_Control_Var_00(A0)			; $0030
		move.l	#Offset_0x015F77, Obj_Control_Var_04(A0)			; $0034
		move.b	#$03, Obj_Map_Id(A0)					; $0022
Offset_0x015B62:
		tst.b	Obj_Control_Var_0A(A0)				; $003A
		beq.s	Offset_0x015BAC
		tst.b	Obj_Control_Var_08(A0)				; $0038
		bne.s	Offset_0x015BA8
		move.l	Obj_Control_Var_00(A0),a4				; $0030
		tst.b	Obj_Subtype(A0)					; $002C
		bpl.s	Offset_0x015BA4
		move.b	Obj_Status(A0),d0					; $002A
		andi.b	#$18,d0
		beq.s	Offset_0x015BA4
		move.w	(Obj_Player_One+Obj_X).w,d1		; $FFFFB010
		andi.b	#$08,d0
		bne.s	Offset_0x015B90
		move.w	(Obj_Player_Two+Obj_X).w,d1		; $FFFFB05A
Offset_0x015B90:
		cmp.w	Obj_X(A0),d1					; $0010
		bcc.s	Offset_0x015BA4
		move.l	Obj_Control_Var_04(A0),a4				; $0034
		bchg	#00, Obj_Status(A0)					; $002A
		addq.b	#$01, Obj_Map_Id(A0)					; $0022
Offset_0x015BA4:
		bra	Offset_0x015D5E
Offset_0x015BA8:
		subq.b	#$01, Obj_Control_Var_08(A0)			; $0038
Offset_0x015BAC:
		move.b	Obj_Status(A0),d0					; $002A
		andi.b	#$18,d0
		beq.s	Offset_0x015BBC
		move.b	#$01, Obj_Control_Var_0A(A0)			; $003A
Offset_0x015BBC:
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		move.w	#$0010,d3
		move.w	Obj_X(A0),d4					; $0010
		jsr	(Platform_Object)			; Offset_0x013AF6
		bra	MarkObjGone					; Offset_0x011AF2
;-------------------------------------------------------------------------------
Offset_0x015BD4:
		tst.b	Obj_Control_Var_0A(A0)				; $003A
		beq.s	Offset_0x015C1E
		tst.b	Obj_Control_Var_08(A0)				; $0038
		bne.s	Offset_0x015C1A
		move.l	Obj_Control_Var_00(A0),a4				; $0030
		tst.b	Obj_Subtype(A0)					; $002C
		bpl.s	Offset_0x015C16
		move.b	Obj_Status(A0),d0					; $002A
		andi.b	#$18,d0
		beq.s	Offset_0x015C16
		move.w	(Obj_Player_One+Obj_X).w,d1		; $FFFFB010
		andi.b	#$08,d0
		bne.s	Offset_0x015C02
		move.w	(Obj_Player_Two+Obj_X).w,d1		; $FFFFB05A
Offset_0x015C02:
		cmp.w	Obj_X(A0),d1					; $0010
		bcc.s	Offset_0x015C16
		move.l	Obj_Control_Var_04(A0),a4				; $0034
		bchg	#00, Obj_Status(A0)					; $002A
		addq.b	#$01, Obj_Map_Id(A0)					; $0022
Offset_0x015C16:
		bra	Offset_0x015D5E
Offset_0x015C1A:
		subq.b	#$01, Obj_Control_Var_08(A0)			; $0038
Offset_0x015C1E:
		move.b	Obj_Status(A0),d0					; $002A
		andi.b	#$18,d0
		beq.s	Offset_0x015C40
		move.b	(Obj_Player_One+Obj_Player_Hit_Flag).w,d1	; $FFFFB037
		andi.b	#$08,d0
		bne.s	Offset_0x015C36
		move.b	(Obj_Player_Two+Obj_Player_Hit_Flag).w,d1	; $FFFFB081
Offset_0x015C36:
		tst.b	D1
		bpl.s	Offset_0x015C40
		move.b	#$01, Obj_Control_Var_0A(A0)			; $003A
Offset_0x015C40:
		bra	Offset_0x015BBC
;-------------------------------------------------------------------------------
Offset_0x015C44:
		tst.b	Obj_Control_Var_0A(A0)				; $003A
		beq.s	Offset_0x015C8E
		tst.b	Obj_Control_Var_08(A0)				; $0038
		bne.s	Offset_0x015C8A
		move.l	Obj_Control_Var_00(A0),a4				; $0030
		tst.b	Obj_Subtype(A0)					; $002C
		bpl.s	Offset_0x015C86
		move.b	Obj_Status(A0),d0					; $002A
		andi.b	#$18,d0
		beq.s	Offset_0x015C86
		move.w	(Obj_Player_One+Obj_X).w,d1		; $FFFFB010
		andi.b	#$08,d0
		bne.s	Offset_0x015C72
		move.w	(Obj_Player_Two+Obj_X).w,d1		; $FFFFB05A
Offset_0x015C72:
		cmp.w	Obj_X(A0),d1					; $0010
		bcc.s	Offset_0x015C86
		move.l	Obj_Control_Var_04(A0),a4				; $0034
		bchg	#0, Obj_Status(A0)					; $002A
		addq.b	#1, Obj_Map_Id(A0)					; $0022
Offset_0x015C86:
		bra	Offset_0x015D5E
Offset_0x015C8A:
		subq.b	#$01, Obj_Control_Var_08(A0)			; $0038
Offset_0x015C8E:
		move.b	Obj_Control_Var_10(A0),d0				; $0040
		andi.w	#$000F,d0
		lea	(Level_Trigger_Array).w,a3			; $FFFFF7E0
		lea	(A3,d0),a3
		tst.b	(A3)
		beq.s	Offset_0x015CAC
		move.b	#$01, Obj_Control_Var_0A(A0)			; $003A
		clr.w	Obj_Respaw_Ref(A0)					; $0048
Offset_0x015CAC:
		bra	Offset_0x015BBC
;-------------------------------------------------------------------------------
Offset_0x015CB0:
		tst.b	Obj_Control_Var_08(A0)				; $0038
		beq.w	Offset_0x015CC8
		tst.b	Obj_Control_Var_0A(A0)				; $003A
		bne.s	Offset_0x015CE0
		subq.b	#$01, Obj_Control_Var_08(A0)			; $0038
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x015CC8:
		jsr	(ObjectFall)				; Offset_0x0110FE
		tst.b	Obj_Flags(A0)					; $0004
		bpl.s	Offset_0x015CDA
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x015CDA:
		jmp	(DeleteObject)				; Offset_0x011138
Offset_0x015CE0:
		subq.b	#$01, Obj_Control_Var_08(A0)			; $0038
		move.b	Obj_Control_Var_08(A0),d3				; $0038
		move.l	Obj_Control_Var_00(A0),a2				; $0030
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		bsr.s	Offset_0x015D06
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr.s	Offset_0x015D06
		bra	MarkObjGone					; Offset_0x011AF2
Offset_0x015D06:
		btst	D6, Obj_Status(A0)					; $002A
		beq.s	Offset_0x015D5C
		move.w	D1,d2
		add.w	D2,d2
		btst	#$01, Obj_Status(A1)					; $002A
		bne.s	Offset_0x015D40
		move.w	Obj_X(A1),d0					; $0010
		sub.w	Obj_X(A0),d0					; $0010
		add.w	D1,d0
		bmi.s	Offset_0x015D40
		cmp.w	D2,d0
		bcc.s	Offset_0x015D40
		btst	#0, Obj_Status(A0)					; $002A
		beq.s	Offset_0x015D34
		neg.w	D0
		add.w	D2,d0
Offset_0x015D34:
		lsr.w	#$04,d0
		move.b	(A2),d2
		sub.b	(A2,d0),d2
		cmp.b	D2,d3
		bhi.s	Offset_0x015D5C
Offset_0x015D40:
		bclr	D6, Obj_Status(A0)					; $002A
		bclr	#$03, Obj_Status(A1)					; $002A
		bclr	#$05, Obj_Status(A1)					; $002A
		bset	#$01, Obj_Status(A1)					; $002A
		move.b	#$01, Obj_Ani_Flag(A1)				; $0021
Offset_0x015D5C:
		rts
;-------------------------------------------------------------------------------
Offset_0x015D5E:
		move.l	#Offset_0x015CB0,(A0)
		addq.b	#$01, Obj_Map_Id(A0)					; $0022
		bra.s	Offset_0x015D78
;-------------------------------------------------------------------------------
Offset_0x015D6A: ; Usado pelo objeto 0x04
		move.l	#Offset_0x0158FE,(A0)
		addq.b	#$02, Obj_Map_Id(A0)					; $0022
		move.l	Obj_Control_Var_00(A0),a4				; $0030
;-------------------------------------------------------------------------------
Offset_0x015D78:
		moveq	#0,d0
		move.b	Obj_Map_Id(A0),d0					; $0022
		add.w	D0,d0
		move.l	Obj_Map(A0),a3					; $000C
		adda.w	(A3,d0),a3
		move.w	(A3)+,d1
		subq.w	#$01,d1
		bset	#$05, Obj_Flags(A0)					; $0004
		move.l	(A0),d4
		move.b	Obj_Flags(A0),d5				; $0004
		move.l	A0,a1
		bra.s	Offset_0x015DA4
;-------------------------------------------------------------------------------
Offset_0x015D9C:
		bsr	AllocateObjectAfterCurrent			; Offset_0x011DE0
		bne.s	Offset_0x015DDA
		addq.w	#$06,a3
;-------------------------------------------------------------------------------
Offset_0x015DA4:
		move.l	D4,(A1)
		move.l	A3, Obj_Map(A1)					; $000C
		move.b	D5, Obj_Flags(A1)				; $0004
		move.w	Obj_X(A0), Obj_X(A1)			; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)			; $0014, $0014
		move.w	Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)		; $000A, $000A
		move.w	Obj_Priority(A0), Obj_Priority(A1)		; $0008, $0008
		move.b	Obj_Width(A0), Obj_Width(A1)			; $0007, $0007
		move.b	Obj_Height(A0), Obj_Height(A1)			; $0006, $0006
		move.b	(A4)+, Obj_Control_Var_08(A1)			; $0038
		dbra	D1, Offset_0x015D9C
Offset_0x015DDA:
		jsr	(DisplaySprite)				; Offset_0x011148
		moveq	#sfx_Collapse,d0					; $62
		jmp	(PlaySound).l				; Offset_0x001176
;-------------------------------------------------------------------------------
Offset_0x015DE8:
		dc.b	$30, $2C, $28, $24, $20, $1C, $2E, $2A
		dc.b	$26, $22, $1E, $1A, $2C, $28, $24, $20
		dc.b	$1C, $18, $2A, $26, $22, $1E, $1A, $16
		dc.b	$28, $24, $20, $1C, $18, $14
;-------------------------------------------------------------------------------
Offset_0x015E06:
		dc.b	$30, $2C, $28, $24, $20, $1C, $2E, $2A
		dc.b	$26, $22, $1E, $1A, $2C, $28, $24, $20
		dc.b	$1C, $18, $2A, $26, $22, $1E, $1A, $16
		dc.b	$28, $24, $20, $1C, $18, $14, $12, $10
;-------------------------------------------------------------------------------
Offset_0x015E26:
		dc.b	$20, $1C, $18, $14, $10, $0C, $08, $04
		dc.b	$1E, $1A, $16, $12, $0E, $0A, $06, $02
;-------------------------------------------------------------------------------
Offset_0x015E36
		dc.b	$20, $04, $08, $0C, $10, $14, $18, $1C
		dc.b	$02, $06, $0A, $0E, $12, $16, $1A, $1E
;-------------------------------------------------------------------------------
Offset_0x015E46:
		dc.b	$20, $18, $10, $08, $1E, $16, $0E, $06
		dc.b	$1C, $14, $0C, $04, $1A, $12
;-------------------------------------------------------------------------------
Offset_0x015E54:
		dc.b	$20, $1C, $18, $14, $10, $0C, $08, $04
		dc.b	$1E, $1A, $16, $12, $0E, $0A, $06, $02
;-------------------------------------------------------------------------------
Offset_0x015E64:
		dc.b	$20, $04, $08, $0C, $10, $14, $18, $1C
		dc.b	$02, $06, $0A, $0E, $12, $16, $1A, $1E
;-------------------------------------------------------------------------------
Offset_0x015E74:
		dc.b	$28, $24, $20, $1C, $18, $14, $10, $0C
		dc.b	$08, $04, $26, $22, $1E, $1A, $16, $12
		dc.b	$0E, $0A, $06, $02
;-------------------------------------------------------------------------------
Offset_0x015E88:
		dc.b	$28, $04, $08, $0C, $10, $14, $18, $1C
		dc.b	$20, $24, $02, $06, $0A, $0E, $12, $16
		dc.b	$1A, $1E, $22, $26
;-------------------------------------------------------------------------------
Offset_0x015E9C:
		dc.b	$1C, $04, $08, $0C, $10, $14, $18, $02
		dc.b	$06, $0A, $0E, $12, $16, $1A, $1E
;-------------------------------------------------------------------------------
Offset_0x015EAB:
		dc.b	$30, $2A, $24, $1E, $18, $12, $0C, $06
		dc.b	$2E, $28, $22, $1C, $16, $10, $0A, $04
		dc.b	$2C, $26, $20, $1A, $14, $0E, $08, $02
;-------------------------------------------------------------------------------
Offset_0x015EC3:
		dc.b	$30, $06, $0C, $12, $18, $1E, $24, $2A
		dc.b	$04, $0A, $10, $16, $1C, $22, $28, $2E
		dc.b	$02, $08, $0E, $14, $1A, $20, $26, $2C
;-------------------------------------------------------------------------------
Offset_0x015EDB:
		dc.b	$40, $38, $30, $28, $20, $18, $10, $08
		dc.b	$3E, $36, $2E, $26, $1E, $16, $0E, $06
		dc.b	$3C, $34, $2C, $24, $1C, $14, $0C, $04
		dc.b	$3A, $32, $2A, $22, $1A, $12, $0A, $02
;-------------------------------------------------------------------------------
Offset_0x015EFB:
		dc.b	$40, $08, $10, $18, $20, $28, $30, $38
		dc.b	$06, $0E, $16, $1E, $26, $2E, $36, $3E
		dc.b	$04, $0C, $14, $1C, $24, $2C, $34, $3C
		dc.b	$02, $0A, $12, $1A, $22, $2A, $32, $3A
;-------------------------------------------------------------------------------
Offset_0x015F1B:
		dc.b	$30, $28, $20, $18, $10, $08, $2E, $26
		dc.b	$1E, $16, $0E, $06, $2C, $24, $1C, $14
		dc.b	$0C, $04, $2A, $22, $1A, $12, $0A, $02
;-------------------------------------------------------------------------------
Offset_0x015F33:
		dc.b	$30, $08, $10, $18, $20, $28, $06, $0E
		dc.b	$16, $1E, $26, $2E, $04, $0C, $14, $1C
		dc.b	$24, $2C, $02, $0A, $12, $1A, $22, $2A
;-------------------------------------------------------------------------------
Offset_0x015F4B:
		dc.b	$28, $24, $20, $1C, $18, $14, $10, $0C
		dc.b	$08, $04, $27, $23, $1F, $1B, $17, $13
		dc.b	$0F, $0B, $07, $03, $26, $22, $1E, $1A
		dc.b	$16, $12, $0E, $0A, $06, $02, $25, $21
		dc.b	$1D, $19, $15, $11, $0D, $09, $05, $01
		dc.b	$04, $03, $02, $01
;-------------------------------------------------------------------------------
Offset_0x015F77:
		dc.b	$28, $04, $08, $0C, $10, $14, $18, $1C
		dc.b	$20, $24, $03, $07, $0B, $0F, $13, $17
		dc.b	$1B, $1F, $23, $27, $02, $06, $0A, $0E
		dc.b	$12, $16, $1A, $1E, $22, $26, $01, $05
		dc.b	$09, $0D, $11, $15, $19, $1D, $21, $25
		dc.b	$01, $02, $03, $04, $00
;-------------------------------------------------------------------------------
Offset_0x015FA4:
		dc.b	$1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F
		dc.b	$1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F
		dc.b	$1F, $1F, $1F, $1F, $1F, $1F, $1E, $1E
		dc.b	$1D, $1D, $1C, $1C, $1B, $1B, $1A, $1A
		dc.b	$19, $19, $18, $18, $17, $17, $16, $16
		dc.b	$15, $15, $14, $14, $13, $13, $12, $12
		dc.b	$11, $11, $10, $10, $0F, $0F, $0E, $0E
		dc.b	$0E, $0E, $0E, $0E, $0E, $0E, $0E, $0E
;-------------------------------------------------------------------------------
Offset_0x015FE4:
		dc.b	$30, $30, $30, $30, $30, $30, $30, $30
		dc.b	$30, $30, $30, $30, $2F, $2F, $2F, $2F
		dc.b	$2F, $2F, $2F, $2F, $2F, $2F, $2F, $2F
		dc.b	$2E, $2E, $2E, $2E, $2E, $2E, $2E, $2E
		dc.b	$2D, $2D, $2D, $2D, $2D, $2D, $2D, $2D
		dc.b	$2D, $2D, $2D, $2D, $2D, $2C, $2B, $2A
;-------------------------------------------------------------------------------
; Offset_0x016014:
Collapsing_Platform_Mappings:		include	"data/mappings/04 - AIZ1 Collapsing Platform.asm"
; Offset_0x0160F8:
AIz_2_Collapsing_Platform_Mappings:	include	"data/mappings/04 - AIZ2 Collapsing Platform.asm"

;-------------------------------------------------------------------------------
LBz_Collapsing_Platforms_Mappings:					; Offset_0x0161E2
		dc.w	Offset_0x0161E8-LBz_Collapsing_Platforms_Mappings
		dc.w	Offset_0x01621A-LBz_Collapsing_Platforms_Mappings
		dc.w	Offset_0x01627C-LBz_Collapsing_Platforms_Mappings
Offset_0x0161E8:
		dc.w	$0008
		dc.w	$F00D, $0000, $FFC0
		dc.w	$F00D, $0000, $FFE0
		dc.w	$F00D, $0000, $0000
		dc.w	$F00D, $0000, $0020
		dc.w	$000D, $0008, $FFC0
		dc.w	$000D, $0008, $FFE0
		dc.w	$000D, $0008, $0000
		dc.w	$000D, $0008, $0020
Offset_0x01621A:
		dc.w	$0010
		dc.w	$F005, $0000, $FFC0
		dc.w	$F005, $0000, $FFD0
		dc.w	$F005, $0000, $FFE0
		dc.w	$F005, $0000, $FFF0
		dc.w	$F005, $0000, $0000
		dc.w	$F005, $0000, $0010
		dc.w	$F005, $0000, $0020
		dc.w	$F005, $0000, $0030
		dc.w	$0005, $0008, $FFC0
		dc.w	$0005, $0808, $FFD0
		dc.w	$0005, $0008, $FFE0
		dc.w	$0005, $0808, $FFF0
		dc.w	$0005, $0008, $0000
		dc.w	$0005, $0808, $0010
		dc.w	$0005, $0008, $0020
		dc.w	$0005, $0808, $0030
Offset_0x01627C:
		dc.w	$0010
		dc.w	$F005, $0000, $0030
		dc.w	$F005, $0000, $FFC0
		dc.w	$F005, $0000, $FFD0
		dc.w	$F005, $0000, $FFE0
		dc.w	$F005, $0000, $FFF0
		dc.w	$F005, $0000, $0000
		dc.w	$F005, $0000, $0010
		dc.w	$F005, $0000, $0020
		dc.w	$0005, $0008, $FFC0
		dc.w	$0005, $0808, $FFD0
		dc.w	$0005, $0008, $FFE0
		dc.w	$0005, $0808, $FFF0
		dc.w	$0005, $0008, $0000
		dc.w	$0005, $0808, $0010
		dc.w	$0005, $0008, $0020
		dc.w	$0005, $0808, $0030
;-------------------------------------------------------------------------------
LBz_Collapsing_Platforms_Mappings_2:				; Offset_0x0162DE
		dc.w	Offset_0x0162E4-LBz_Collapsing_Platforms_Mappings_2
		dc.w	Offset_0x016310-LBz_Collapsing_Platforms_Mappings_2
		dc.w	Offset_0x016310-LBz_Collapsing_Platforms_Mappings_2
Offset_0x0162E4:
		dc.w	$0007
		dc.w	$F00D, $0000, $FFE0
		dc.w	$F00D, $0010, $0000
		dc.w	$000D, $0018, $FFE0
		dc.w	$000D, $0020, $0000
		dc.w	$100D, $0028, $FFE0
		dc.w	$100D, $0030, $0000
		dc.w	$200D, $0030, $FFE0
Offset_0x016310:
		dc.w	$000E
		dc.w	$F005, $0000, $FFE0
		dc.w	$F005, $0000, $FFF0
		dc.w	$F005, $0000, $0000
		dc.w	$F005, $0014, $0010
		dc.w	$0005, $0018, $FFE0
		dc.w	$0005, $001C, $FFF0
		dc.w	$0005, $0020, $0000
		dc.w	$0005, $0024, $0010
		dc.w	$1005, $0028, $FFE0
		dc.w	$1005, $002C, $FFF0
		dc.w	$1005, $0030, $0000
		dc.w	$1005, $0034, $0010
		dc.w	$2005, $0030, $FFE0
		dc.w	$2005, $0034, $FFF0
;-------------------------------------------------------------------------------
Hz_Collapsing_Platform_Mappings:					; Offset_0x016366
		dc.w	Offset_0x01637E-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x0163B6-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016418-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x01647A-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x0164BE-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016538-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x0165B2-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x0165EA-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x0165EA-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016646-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016690-Hz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016722-Hz_Collapsing_Platform_Mappings
Offset_0x01637E:
		dc.w	$0009
		dc.w	$F00D, $0000, $FFC0
		dc.w	$F00D, $0000, $FFE0
		dc.w	$F00D, $0000, $0000
		dc.w	$F00D, $0000, $0020
		dc.w	$0005, $0008, $FFC0
		dc.w	$000D, $000C, $FFD0
		dc.w	$000D, $000C, $FFF0
		dc.w	$000D, $000C, $0010
		dc.w	$0005, $000C, $0030
Offset_0x0163B6:
		dc.w	$0010
		dc.w	$F005, $0000, $FFC0
		dc.w	$F005, $0004, $FFD0
		dc.w	$F005, $0000, $FFE0
		dc.w	$F005, $0004, $FFF0
		dc.w	$F005, $0000, $0000
		dc.w	$F005, $0004, $0010
		dc.w	$F005, $0000, $0020
		dc.w	$F005, $0004, $0030
		dc.w	$0005, $0008, $FFC0
		dc.w	$0005, $000C, $FFD0
		dc.w	$0005, $0010, $FFE0
		dc.w	$0005, $000C, $FFF0
		dc.w	$0005, $0010, $0000
		dc.w	$0005, $000C, $0010
		dc.w	$0005, $0010, $0020
		dc.w	$0005, $000C, $0030
Offset_0x016418:
		dc.w	$0010
		dc.w	$F005, $0004, $0030
		dc.w	$F005, $0000, $FFC0
		dc.w	$F005, $0004, $FFD0
		dc.w	$F005, $0000, $FFE0
		dc.w	$F005, $0004, $FFF0
		dc.w	$F005, $0000, $0000
		dc.w	$F005, $0004, $0010
		dc.w	$F005, $0000, $0020
		dc.w	$0005, $0008, $FFC0
		dc.w	$0005, $000C, $FFD0
		dc.w	$0005, $0010, $FFE0
		dc.w	$0005, $000C, $FFF0
		dc.w	$0005, $0010, $0000
		dc.w	$0005, $000C, $0010
		dc.w	$0005, $0010, $0020
		dc.w	$0005, $000C, $0030
Offset_0x01647A:
		dc.w	$000B
		dc.w	$F00D, $0000, $FFB0
		dc.w	$F00D, $0000, $FFD0
		dc.w	$F00D, $0000, $FFF0
		dc.w	$F00D, $0000, $0010
		dc.w	$F00D, $0000, $0030
		dc.w	$0005, $0008, $FFB0
		dc.w	$000D, $000C, $FFC0
		dc.w	$000D, $000C, $FFE0
		dc.w	$000D, $000C, $0000
		dc.w	$000D, $000C, $0020
		dc.w	$0005, $000C, $0040
Offset_0x0164BE:
		dc.w	$0014
		dc.w	$F005, $0000, $FFB0
		dc.w	$F005, $0004, $FFC0
		dc.w	$F005, $0000, $FFD0
		dc.w	$F005, $0004, $FFE0
		dc.w	$F005, $0000, $FFF0
		dc.w	$F005, $0004, $0000
		dc.w	$F005, $0000, $0010
		dc.w	$F005, $0004, $0020
		dc.w	$F005, $0000, $0030
		dc.w	$F005, $0004, $0040
		dc.w	$0005, $0008, $FFB0
		dc.w	$0005, $000C, $FFC0
		dc.w	$0005, $0010, $FFD0
		dc.w	$0005, $000C, $FFE0
		dc.w	$0005, $0010, $FFF0
		dc.w	$0005, $000C, $0000
		dc.w	$0005, $0010, $0010
		dc.w	$0005, $000C, $0020
		dc.w	$0005, $0010, $0030
		dc.w	$0005, $000C, $0040
Offset_0x016538:
		dc.w	$0014
		dc.w	$F005, $0004, $0040
		dc.w	$F005, $0000, $FFB0
		dc.w	$F005, $0004, $FFC0
		dc.w	$F005, $0000, $FFD0
		dc.w	$F005, $0004, $FFE0
		dc.w	$F005, $0000, $FFF0
		dc.w	$F005, $0004, $0000
		dc.w	$F005, $0000, $0010
		dc.w	$F005, $0004, $0020
		dc.w	$F005, $0000, $0030
		dc.w	$0005, $0008, $FFB0
		dc.w	$0005, $000C, $FFC0
		dc.w	$0005, $0010, $FFD0
		dc.w	$0005, $000C, $FFE0
		dc.w	$0005, $0010, $FFF0
		dc.w	$0005, $000C, $0000
		dc.w	$0005, $0010, $0010
		dc.w	$0005, $000C, $0020
		dc.w	$0005, $0010, $0030
		dc.w	$0005, $000C, $0040
Offset_0x0165B2:
		dc.w	$0009
		dc.w	$F005, $0014, $FFC0
		dc.w	$F00D, $0000, $FFD0
		dc.w	$F00D, $0000, $FFF0
		dc.w	$F00D, $0000, $0010
		dc.w	$0005, $0018, $FFC0
		dc.w	$0005, $0010, $FFD0
		dc.w	$000D, $000C, $FFE0
		dc.w	$000D, $000C, $0000
		dc.w	$000D, $001C, $0020
Offset_0x0165EA:
		dc.w	$000F
		dc.w	$F005, $0004, $0020
		dc.w	$F005, $0014, $FFC0
		dc.w	$F005, $0000, $FFD0
		dc.w	$F005, $0004, $FFE0
		dc.w	$F005, $0000, $FFF0
		dc.w	$F005, $0004, $0000
		dc.w	$F005, $0000, $0010
		dc.w	$0005, $0018, $FFC0
		dc.w	$0005, $0010, $FFD0
		dc.w	$0005, $000C, $FFE0
		dc.w	$0005, $0010, $FFF0
		dc.w	$0005, $000C, $0000
		dc.w	$0005, $0010, $0010
		dc.w	$0005, $001C, $0020
		dc.w	$0005, $0020, $0030
Offset_0x016646:
		dc.w	$000C
		dc.w	$F00D, $0024, $FFC0
		dc.w	$F00D, $0024, $FFE0
		dc.w	$F00D, $0024, $0000
		dc.w	$F00D, $0024, $0020
		dc.w	$000D, $002C, $FFC0
		dc.w	$000D, $0034, $FFE0
		dc.w	$000D, $002C, $0000
		dc.w	$000D, $0034, $0020
		dc.w	$100E, $003C, $FFC0
		dc.w	$100D, $0048, $FFE0
		dc.w	$100E, $003C, $0000
		dc.w	$100D, $0048, $0020
Offset_0x016690:
		dc.w	$0018
		dc.w	$F005, $0024, $FFC0
		dc.w	$F005, $0028, $FFD0
		dc.w	$F005, $0024, $FFE0
		dc.w	$F005, $0028, $FFF0
		dc.w	$F005, $0024, $0000
		dc.w	$F005, $0028, $0010
		dc.w	$F005, $0024, $0020
		dc.w	$F005, $0028, $0030
		dc.w	$0005, $002C, $FFC0
		dc.w	$0005, $0030, $FFD0
		dc.w	$0005, $0034, $FFE0
		dc.w	$0005, $0038, $FFF0
		dc.w	$0005, $002C, $0000
		dc.w	$0005, $0030, $0010
		dc.w	$0005, $0034, $0020
		dc.w	$0005, $0038, $0030
		dc.w	$1006, $003C, $FFC0
		dc.w	$1006, $0042, $FFD0
		dc.w	$1005, $0048, $FFE0
		dc.w	$1005, $004C, $FFF0
		dc.w	$1006, $003C, $0000
		dc.w	$1006, $0042, $0010
		dc.w	$1005, $0048, $0020
		dc.w	$1005, $004C, $0030
Offset_0x016722:
		dc.w	$0018
		dc.w	$F005, $0028, $0030
		dc.w	$F005, $0024, $FFC0
		dc.w	$F005, $0028, $FFD0
		dc.w	$F005, $0024, $FFE0
		dc.w	$F005, $0028, $FFF0
		dc.w	$F005, $0024, $0000
		dc.w	$F005, $0028, $0010
		dc.w	$F005, $0024, $0020
		dc.w	$0005, $002C, $FFC0
		dc.w	$0005, $0030, $FFD0
		dc.w	$0005, $0034, $FFE0
		dc.w	$0005, $0038, $FFF0
		dc.w	$0005, $002C, $0000
		dc.w	$0005, $0030, $0010
		dc.w	$0005, $0034, $0020
		dc.w	$0005, $0038, $0030
		dc.w	$1006, $003C, $FFC0
		dc.w	$1006, $0042, $FFD0
		dc.w	$1005, $0048, $FFE0
		dc.w	$1005, $004C, $FFF0
		dc.w	$1006, $003C, $0000
		dc.w	$1006, $0042, $0010
		dc.w	$1005, $0048, $0020
		dc.w	$1005, $004C, $0030
;-------------------------------------------------------------------------------
MGz_Collapsing_Platform_Mappings:					; Offset_0x0167B4
		dc.w	Offset_0x0167C6-MGz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016828-MGz_Collapsing_Platform_Mappings
		dc.w	Offset_0x0168EA-MGz_Collapsing_Platform_Mappings
		dc.w	Offset_0x0169AC-MGz_Collapsing_Platform_Mappings
		dc.w	Offset_0x0169F6-MGz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016A88-MGz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016B1A-MGz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016B7C-MGz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016C3E-MGz_Collapsing_Platform_Mappings
Offset_0x0167C6:
		dc.w	$0010
		dc.w	$EC0D, $0018, $FFC0
		dc.w	$EC0D, $0018, $FFE0
		dc.w	$EC0D, $0018, $0000
		dc.w	$EC0D, $0018, $0020
		dc.w	$FC0D, $0020, $FFC0
		dc.w	$FC0D, $0020, $FFE0
		dc.w	$FC0D, $0020, $0000
		dc.w	$FC0D, $0020, $0020
		dc.w	$0C0D, $0028, $FFC0
		dc.w	$0C0D, $0030, $FFE0
		dc.w	$0C0D, $0030, $0000
		dc.w	$0C0D, $0028, $0020
		dc.w	$1C0D, $0010, $FFC0
		dc.w	$1C0D, $0028, $FFE0
		dc.w	$1C0D, $0028, $0000
		dc.w	$1C0D, $0810, $0020
Offset_0x016828:
		dc.w	$0020
		dc.w	$EC05, $0018, $FFC0
		dc.w	$EC05, $001C, $FFD0
		dc.w	$EC05, $0018, $FFE0
		dc.w	$EC05, $001C, $FFF0
		dc.w	$EC05, $0018, $0000
		dc.w	$EC05, $001C, $0010
		dc.w	$EC05, $0018, $0020
		dc.w	$EC05, $001C, $0030
		dc.w	$FC05, $0020, $FFC0
		dc.w	$FC05, $0024, $FFD0
		dc.w	$FC05, $0020, $FFE0
		dc.w	$FC05, $0024, $FFF0
		dc.w	$FC05, $0020, $0000
		dc.w	$FC05, $0024, $0010
		dc.w	$FC05, $0020, $0020
		dc.w	$FC05, $0024, $0030
		dc.w	$0C05, $000C, $FFC0
		dc.w	$0C05, $080C, $FFD0
		dc.w	$0C05, $0030, $FFE0
		dc.w	$0C05, $0034, $FFF0
		dc.w	$0C05, $0030, $0000
		dc.w	$0C05, $0034, $0010
		dc.w	$0C05, $000C, $0020
		dc.w	$0C05, $080C, $0030
		dc.w	$1C05, $0010, $FFC0
		dc.w	$1C05, $0014, $FFD0
		dc.w	$1C05, $000C, $FFE0
		dc.w	$1C05, $080C, $FFF0
		dc.w	$1C05, $000C, $0000
		dc.w	$1C05, $080C, $0010
		dc.w	$1C05, $0814, $0020
		dc.w	$1C05, $0010, $0030
Offset_0x0168EA:
		dc.w	$0020
		dc.w	$EC05, $001C, $0030
		dc.w	$EC05, $0018, $FFC0
		dc.w	$EC05, $001C, $FFD0
		dc.w	$EC05, $0018, $FFE0
		dc.w	$EC05, $001C, $FFF0
		dc.w	$EC05, $0018, $0000
		dc.w	$EC05, $001C, $0010
		dc.w	$EC05, $0018, $0020
		dc.w	$FC05, $0020, $FFC0
		dc.w	$FC05, $0024, $FFD0
		dc.w	$FC05, $0020, $FFE0
		dc.w	$FC05, $0024, $FFF0
		dc.w	$FC05, $0020, $0000
		dc.w	$FC05, $0024, $0010
		dc.w	$FC05, $0020, $0020
		dc.w	$FC05, $0024, $0030
		dc.w	$0C05, $000C, $FFC0
		dc.w	$0C05, $080C, $FFD0
		dc.w	$0C05, $0030, $FFE0
		dc.w	$0C05, $0034, $FFF0
		dc.w	$0C05, $0030, $0000
		dc.w	$0C05, $0034, $0010
		dc.w	$0C05, $000C, $0020
		dc.w	$0C05, $080C, $0030
		dc.w	$1C05, $0010, $FFC0
		dc.w	$1C05, $0014, $FFD0
		dc.w	$1C05, $000C, $FFE0
		dc.w	$1C05, $080C, $FFF0
		dc.w	$1C05, $000C, $0000
		dc.w	$1C05, $080C, $0010
		dc.w	$1C05, $0814, $0020
		dc.w	$1C05, $0010, $0030
Offset_0x0169AC:
		dc.w	$000C
		dc.w	$EC0D, $0018, $FFD0
		dc.w	$EC0D, $0018, $FFF0
		dc.w	$EC0D, $0018, $0010
		dc.w	$FC0D, $0020, $FFD0
		dc.w	$FC0D, $0020, $FFF0
		dc.w	$FC0D, $0020, $0010
		dc.w	$0C0D, $0028, $FFD0
		dc.w	$0C0D, $0030, $FFF0
		dc.w	$0C0D, $0028, $0010
		dc.w	$1C0D, $0010, $FFD0
		dc.w	$1C0D, $0028, $FFF0
		dc.w	$1C0D, $0810, $0010
Offset_0x0169F6:
		dc.w	$0018
		dc.w	$EC05, $0018, $FFD0
		dc.w	$EC05, $001C, $FFE0
		dc.w	$EC05, $0018, $FFF0
		dc.w	$EC05, $001C, $0000
		dc.w	$EC05, $0018, $0010
		dc.w	$EC05, $001C, $0020
		dc.w	$FC05, $0020, $FFD0
		dc.w	$FC05, $0024, $FFE0
		dc.w	$FC05, $0020, $FFF0
		dc.w	$FC05, $0024, $0000
		dc.w	$FC05, $0020, $0010
		dc.w	$FC05, $0024, $0020
		dc.w	$0C05, $000C, $FFD0
		dc.w	$0C05, $080C, $FFE0
		dc.w	$0C05, $0030, $FFF0
		dc.w	$0C05, $0034, $0000
		dc.w	$0C05, $000C, $0010
		dc.w	$0C05, $080C, $0020
		dc.w	$1C05, $0010, $FFD0
		dc.w	$1C05, $0014, $FFE0
		dc.w	$1C05, $000C, $FFF0
		dc.w	$1C05, $080C, $0000
		dc.w	$1C05, $0814, $0010
		dc.w	$1C05, $0010, $0020
Offset_0x016A88:
		dc.w	$0018
		dc.w	$EC05, $001C, $0020
		dc.w	$EC05, $0018, $FFD0
		dc.w	$EC05, $001C, $FFE0
		dc.w	$EC05, $0018, $FFF0
		dc.w	$EC05, $001C, $0000
		dc.w	$EC05, $0018, $0010
		dc.w	$FC05, $0020, $FFD0
		dc.w	$FC05, $0024, $FFE0
		dc.w	$FC05, $0020, $FFF0
		dc.w	$FC05, $0024, $0000
		dc.w	$FC05, $0020, $0010
		dc.w	$FC05, $0024, $0020
		dc.w	$0C05, $000C, $FFD0
		dc.w	$0C05, $080C, $FFE0
		dc.w	$0C05, $0030, $FFF0
		dc.w	$0C05, $0034, $0000
		dc.w	$0C05, $000C, $0010
		dc.w	$0C05, $080C, $0020
		dc.w	$1C05, $0010, $FFD0
		dc.w	$1C05, $0014, $FFE0
		dc.w	$1C05, $000C, $FFF0
		dc.w	$1C05, $080C, $0000
		dc.w	$1C05, $0814, $0010
		dc.w	$1C05, $0010, $0020
Offset_0x016B1A:
		dc.w	$0010
		dc.w	$EC0D, $0018, $FFC0
		dc.w	$EC0D, $0018, $FFE0
		dc.w	$EC0D, $0018, $0000
		dc.w	$EC0D, $0018, $0020
		dc.w	$FC0D, $004E, $FFC0
		dc.w	$FC0D, $004E, $FFE0
		dc.w	$FC0D, $004E, $0000
		dc.w	$FC0D, $004E, $0020
		dc.w	$0C0D, $0056, $FFC0
		dc.w	$0C0D, $0056, $FFE0
		dc.w	$0C0D, $0056, $0000
		dc.w	$0C0D, $0056, $0020
		dc.w	$1C0D, $005E, $FFC0
		dc.w	$1C0D, $005E, $FFE0
		dc.w	$1C0D, $005E, $0000
		dc.w	$1C0D, $005E, $0020
Offset_0x016B7C:
		dc.w	$0020
		dc.w	$EC05, $0018, $FFC0
		dc.w	$EC05, $001C, $FFD0
		dc.w	$EC05, $0018, $FFE0
		dc.w	$EC05, $001C, $FFF0
		dc.w	$EC05, $0018, $0000
		dc.w	$EC05, $001C, $0010
		dc.w	$EC05, $0018, $0020
		dc.w	$EC05, $001C, $0030
		dc.w	$FC05, $004E, $FFC0
		dc.w	$FC05, $0052, $FFD0
		dc.w	$FC05, $004E, $FFE0
		dc.w	$FC05, $0052, $FFF0
		dc.w	$FC05, $004E, $0000
		dc.w	$FC05, $0052, $0010
		dc.w	$FC05, $004E, $0020
		dc.w	$FC05, $0052, $0030
		dc.w	$0C05, $0056, $FFC0
		dc.w	$0C05, $005A, $FFD0
		dc.w	$0C05, $0056, $FFE0
		dc.w	$0C05, $005A, $FFF0
		dc.w	$0C05, $0056, $0000
		dc.w	$0C05, $005A, $0010
		dc.w	$0C05, $0056, $0020
		dc.w	$0C05, $005A, $0030
		dc.w	$1C05, $005A, $FFC0
		dc.w	$1C05, $0056, $FFD0
		dc.w	$1C05, $005A, $FFE0
		dc.w	$1C05, $0056, $FFF0
		dc.w	$1C05, $005A, $0000
		dc.w	$1C05, $0056, $0010
		dc.w	$1C05, $005A, $0020
		dc.w	$1C05, $0056, $0030
Offset_0x016C3E:
		dc.w	$0020
		dc.w	$EC05, $001C, $0030
		dc.w	$EC05, $0018, $FFC0
		dc.w	$EC05, $001C, $FFD0
		dc.w	$EC05, $0018, $FFE0
		dc.w	$EC05, $001C, $FFF0
		dc.w	$EC05, $0018, $0000
		dc.w	$EC05, $001C, $0010
		dc.w	$EC05, $0018, $0020
		dc.w	$FC05, $004E, $FFC0
		dc.w	$FC05, $0052, $FFD0
		dc.w	$FC05, $004E, $FFE0
		dc.w	$FC05, $0052, $FFF0
		dc.w	$FC05, $004E, $0000
		dc.w	$FC05, $0052, $0010
		dc.w	$FC05, $004E, $0020
		dc.w	$FC05, $0052, $0030
		dc.w	$0C05, $0056, $FFC0
		dc.w	$0C05, $005A, $FFD0
		dc.w	$0C05, $0056, $FFE0
		dc.w	$0C05, $005A, $FFF0
		dc.w	$0C05, $0056, $0000
		dc.w	$0C05, $005A, $0010
		dc.w	$0C05, $0056, $0020
		dc.w	$0C05, $005A, $0030
		dc.w	$1C05, $005A, $FFC0
		dc.w	$1C05, $0056, $FFD0
		dc.w	$1C05, $005A, $FFE0
		dc.w	$1C05, $0056, $FFF0
		dc.w	$1C05, $005A, $0000
		dc.w	$1C05, $0056, $0010
		dc.w	$1C05, $005A, $0020
		dc.w	$1C05, $0056, $0030
;-------------------------------------------------------------------------------
Iz_Collapsing_Platform_Mappings:					; Offset_0x016D00
		dc.w	Offset_0x016D0C-Iz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016D6E-Iz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016D6E-Iz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016E30-Iz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016EB6-Iz_Collapsing_Platform_Mappings
		dc.w	Offset_0x016FC0-Iz_Collapsing_Platform_Mappings
Offset_0x016D0C:
		dc.w	$0010
		dc.w	$D00D, $0000, $FFD0
		dc.w	$D00D, $0008, $FFF0
		dc.w	$D00D, $0010, $0010
		dc.w	$E00D, $0018, $FFD0
		dc.w	$E00D, $0018, $FFF0
		dc.w	$E00D, $0020, $0010
		dc.w	$F00D, $0028, $FFD0
		dc.w	$F00D, $1828, $FFF0
		dc.w	$F00D, $0030, $0010
		dc.w	$000D, $0828, $FFD0
		dc.w	$000D, $0028, $FFF0
		dc.w	$000D, $0030, $0010
		dc.w	$100D, $0038, $FFD0
		dc.w	$100D, $0040, $FFF0
		dc.w	$100C, $0048, $0010
		dc.w	$200C, $0048, $FFD0
Offset_0x016D6E:
		dc.w	$0020
		dc.w	$D005, $0000, $FFD0
		dc.w	$D005, $0004, $FFE0
		dc.w	$D005, $0008, $FFF0
		dc.w	$D005, $000C, $0000
		dc.w	$D005, $0010, $0010
		dc.w	$D005, $0014, $0020
		dc.w	$E005, $0018, $FFD0
		dc.w	$E005, $001C, $FFE0
		dc.w	$E005, $0018, $FFF0
		dc.w	$E005, $001C, $0000
		dc.w	$E005, $0020, $0010
		dc.w	$E005, $0024, $0020
		dc.w	$F005, $0028, $FFD0
		dc.w	$F005, $002C, $FFE0
		dc.w	$F005, $182C, $FFF0
		dc.w	$F005, $1828, $0000
		dc.w	$F005, $0030, $0010
		dc.w	$F005, $0034, $0020
		dc.w	$0005, $082C, $FFD0
		dc.w	$0005, $0828, $FFE0
		dc.w	$0005, $0028, $FFF0
		dc.w	$0005, $002C, $0000
		dc.w	$0005, $0030, $0010
		dc.w	$0005, $0034, $0020
		dc.w	$1005, $0038, $FFD0
		dc.w	$1005, $003C, $FFE0
		dc.w	$1005, $0040, $FFF0
		dc.w	$1005, $0044, $0000
		dc.w	$1004, $0048, $0010
		dc.w	$1004, $004A, $0020
		dc.w	$2004, $0048, $FFD0
		dc.w	$2004, $004A, $FFE0
Offset_0x016E30:
		dc.w	$0016
		dc.w	$EF0D, $0000, $FFB0
		dc.w	$EF0D, $0008, $FFD0
		dc.w	$EF0D, $0808, $FFF0
		dc.w	$EF0D, $0800, $0010
		dc.w	$EF0D, $0000, $0030
		dc.w	$FF0D, $0018, $FFB0
		dc.w	$FF0D, $0018, $FFD0
		dc.w	$FF0D, $0018, $FFF0
		dc.w	$FF0D, $0018, $0010
		dc.w	$FF0D, $0818, $0030
		dc.w	$0F0D, $0028, $FFB0
		dc.w	$0F0D, $0028, $FFD0
		dc.w	$0F0D, $0828, $FFF0
		dc.w	$0F0D, $0828, $0010
		dc.w	$0F0D, $0028, $0030
		dc.w	$1F0D, $0840, $FFB0
		dc.w	$1F0D, $0838, $FFD0
		dc.w	$1F0D, $0038, $FFF0
		dc.w	$1F0D, $0040, $0010
		dc.w	$1F0D, $0840, $0030
		dc.w	$2F0C, $0848, $FFD0
		dc.w	$2F0C, $0048, $FFF0
Offset_0x016EB6:
		dc.w	$002C
		dc.w	$EF05, $0000, $FFB0
		dc.w	$EF05, $0004, $FFC0
		dc.w	$EF05, $0008, $FFD0
		dc.w	$EF05, $000C, $FFE0
		dc.w	$EF05, $080C, $FFF0
		dc.w	$EF05, $0808, $0000
		dc.w	$EF05, $0804, $0010
		dc.w	$EF05, $0800, $0020
		dc.w	$EF05, $0000, $0030
		dc.w	$EF05, $0004, $0040
		dc.w	$FF05, $0018, $FFB0
		dc.w	$FF05, $001C, $FFC0
		dc.w	$FF05, $0018, $FFD0
		dc.w	$FF05, $001C, $FFE0
		dc.w	$FF05, $0018, $FFF0
		dc.w	$FF05, $001C, $0000
		dc.w	$FF05, $0018, $0010
		dc.w	$FF05, $001C, $0020
		dc.w	$FF05, $081C, $0030
		dc.w	$FF05, $0818, $0040
		dc.w	$0F05, $0028, $FFB0
		dc.w	$0F05, $002C, $FFC0
		dc.w	$0F05, $0028, $FFD0
		dc.w	$0F05, $002C, $FFE0
		dc.w	$0F05, $082C, $FFF0
		dc.w	$0F05, $0828, $0000
		dc.w	$0F05, $082C, $0010
		dc.w	$0F05, $0828, $0020
		dc.w	$0F05, $0028, $0030
		dc.w	$0F05, $002C, $0040
		dc.w	$1F05, $0844, $FFB0
		dc.w	$1F05, $0840, $FFC0
		dc.w	$1F05, $083C, $FFD0
		dc.w	$1F05, $0838, $FFE0
		dc.w	$1F05, $0038, $FFF0
		dc.w	$1F05, $003C, $0000
		dc.w	$1F05, $0040, $0010
		dc.w	$1F05, $0044, $0020
		dc.w	$1F05, $0844, $0030
		dc.w	$1F05, $0840, $0040
		dc.w	$2F04, $084A, $FFD0
		dc.w	$2F04, $0848, $FFE0
		dc.w	$2F04, $0048, $FFF0
		dc.w	$2F04, $004A, $0000
Offset_0x016FC0:
		dc.w	$002C
		dc.w	$EF05, $0004, $0040
		dc.w	$EF05, $0000, $FFB0
		dc.w	$EF05, $0004, $FFC0
		dc.w	$EF05, $0008, $FFD0
		dc.w	$EF05, $000C, $FFE0
		dc.w	$EF05, $080C, $FFF0
		dc.w	$EF05, $0808, $0000
		dc.w	$EF05, $0804, $0010
		dc.w	$EF05, $0800, $0020
		dc.w	$EF05, $0000, $0030
		dc.w	$FF05, $0018, $FFB0
		dc.w	$FF05, $001C, $FFC0
		dc.w	$FF05, $0018, $FFD0
		dc.w	$FF05, $001C, $FFE0
		dc.w	$FF05, $0018, $FFF0
		dc.w	$FF05, $001C, $0000
		dc.w	$FF05, $0018, $0010
		dc.w	$FF05, $001C, $0020
		dc.w	$FF05, $081C, $0030
		dc.w	$FF05, $0818, $0040
		dc.w	$0F05, $0028, $FFB0
		dc.w	$0F05, $002C, $FFC0
		dc.w	$0F05, $0028, $FFD0
		dc.w	$0F05, $002C, $FFE0
		dc.w	$0F05, $082C, $FFF0
		dc.w	$0F05, $0828, $0000
		dc.w	$0F05, $082C, $0010
		dc.w	$0F05, $0828, $0020
		dc.w	$0F05, $0028, $0030
		dc.w	$0F05, $002C, $0040
		dc.w	$1F05, $0844, $FFB0
		dc.w	$1F05, $0840, $FFC0
		dc.w	$1F05, $083C, $FFD0
		dc.w	$1F05, $0838, $FFE0
		dc.w	$1F05, $0038, $FFF0
		dc.w	$1F05, $003C, $0000
		dc.w	$1F05, $0040, $0010
		dc.w	$1F05, $0044, $0020
		dc.w	$1F05, $0844, $0030
		dc.w	$1F05, $0840, $0040
		dc.w	$2F04, $084A, $FFD0
		dc.w	$2F04, $0848, $FFE0
		dc.w	$2F04, $0048, $FFF0
		dc.w	$2F04, $004A, $0000

Obj_0x0D_Breakable_Wall:                                       ; Offset_0x0170CA
		include "data\objects\obj_0x0D.asm"
Obj_0x06_Ride_Vine:                                            ; Offset_0x017A8E
		include "data\objects\obj_0x06.asm"

;===============================================================================
; Objeto 0x0C - Raiz em que o Sonic segura temporariamente e é lançado para
; ->>>		esquerda ou para direita
;===============================================================================
; Offset_0x0180FE:
Obj_0x0C_Swing_Ride_Vine:
		move.l	A0,a1
		move.l	#Offset_0x0181C2,(A1)
		bsr	Offset_0x01819A
		move.b	#$21, Obj_Map_Id(A1)					; $0022
		move.w	Obj_X(A0),d2					; $0010
		move.w	Obj_Y(A0),d3					; $0014
		move.b	Obj_Subtype(A0),d1					; $002C
		andi.w	#$000F,d1
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.w	Offset_0x018198
		move.w	#$FE50, Obj_Height_3(A1)				; $0044
		move.w	#$0800, Obj_Control_Var_08(A1)			; $0038
		move.w	A1, Obj_Control_Var_0E(A0)				; $003E
		move.l	#Offset_0x0181FE,(A1)
		move.w	A0, Obj_Control_Var_0C(A1)				; $003C
		move.b	Obj_Subtype(A0),d0					; $002C
		andi.b	#$F0,d0
		move.b	D0, Obj_Control_Var_12(A1)				; $0042
		bra.s	Offset_0x01816A
;-------------------------------------------------------------------------------
Offset_0x018152:
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.w	Offset_0x018198
		move.l	#Offset_0x018292,(A1)
		move.w	A2, Obj_Control_Var_0C(A1)				; $003C
		move.w	A1, Obj_Control_Var_0E(A2)				; $003E
Offset_0x01816A:
		move.l	A1,a2
		bsr.s	Offset_0x01819A
		move.w	D2, Obj_X(A1)					; $0010
		move.w	D3, Obj_Y(A1)					; $0014
		addi.w	#$0010,d3
		addq.w	#$01, Obj_Control_Var_06(A0)			; $0036
		move.w	Obj_Control_Var_06(A0), Obj_Control_Var_06(A1) ; $0036, $0036
		dbra	D1, Offset_0x018152
		move.l	#Offset_0x0182F2,(A1)
		move.b	#$20, Obj_Map_Id(A1)					; $0022
		move.w	A1, Obj_Control_Var_10(A0)				; $0040
Offset_0x018198:
		bra.s	Offset_0x0181C2
Offset_0x01819A:
		move.b	#$04, Obj_Flags(A1)					; $0004
		move.b	#$08, Obj_Width(A1)					; $0007
		move.b	#$08, Obj_Height(A1)					; $0006
		move.w	#$0200, Obj_Priority(A1)				; $0008
		move.l	#Ride_Vine_Mappings, Obj_Map(A1) ; Offset_0x018482, $000C
		move.w	#$0422, Obj_Art_VRAM(A1)				; $000A
		rts
Offset_0x0181C2:
		move.w	Obj_X(A0),d0					; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0				; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Offset_0x0181DC
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x0181DC:
		move.w	Obj_Control_Var_06(A0),d2				; $0036
		subq.w	#$01,d2
		bcs.s	Offset_0x0181F8
		move.w	Obj_Control_Var_0E(A0),a2				; $003E
Offset_0x0181E8:
		move.l	A2,a1
		move.w	Obj_Control_Var_0E(A1),a2				; $003E
		jsr	(Delete_A1_Object)			; Offset_0x01113A
		dbra	D2, Offset_0x0181E8
Offset_0x0181F8:
		jmp	(DeleteObject)				; Offset_0x011138
;-------------------------------------------------------------------------------
Offset_0x0181FE:
		tst.b	(A0)
		bne.s	Offset_0x018230
		move.b	(Object_Frame_Angle).w,d0			; $FFFFFEAA
		add.b	Obj_Control_Var_12(A0),d0				; $0042
		jsr	(CalcSine).l					; Offset_0x001B20
		muls.w	#$002C,d0
		move.w	D0, Obj_Angle(A0)				; $0026
		asr.w	#$03,d0
		move.w	D0, Obj_Control_Var_0A(A0)				; $003A
		move.b	Obj_Angle(A0),d0				; $0026
		addq.b	#$04,d0
		lsr.b	#$03,d0
		move.b	D0, Obj_Map_Id(A0)					; $0022
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x018230:
		moveq	#0,d2
		move.b	Obj_Control_Var_08(A0),d2				; $0038
		move.w	Obj_Height_3(A0),d0					; $0044
		move.w	#$0000,d1
		tst.w	Obj_Timer(A0)					; $002E
		bne.s	Offset_0x01825C
		add.w	D2,d0
		move.w	D0, Obj_Height_3(A0)					; $0044
		add.w	D0, Obj_Control_Var_12(A0)				; $0042
		cmp.b	Obj_Control_Var_12(A0),d1				; $0042
		bgt.s	Offset_0x018272
		move.w	#$0001, Obj_Timer(A0)					; $002E
		bra.s	Offset_0x018272
Offset_0x01825C:
		sub.w	D2,d0
		move.w	D0, Obj_Height_3(A0)					; $0044
		add.w	D0, Obj_Control_Var_12(A0)				; $0042
		cmp.b	Obj_Control_Var_12(A0),d1				; $0042
		ble.s	Offset_0x018272
		move.w	#$0000, Obj_Timer(A0)					; $002E
Offset_0x018272:
		move.w	Obj_Control_Var_12(A0),d0				; $0042
		move.w	D0, Obj_Angle(A0)				; $0026
		asr.w	#$03,d0
		move.w	D0, Obj_Control_Var_0A(A0)				; $003A
		move.b	Obj_Angle(A0),d0				; $0026
		addq.b	#$04,d0
		lsr.b	#$03,d0
		move.b	D0, Obj_Map_Id(A0)					; $0022
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x018292:
		move.w	Obj_Control_Var_0C(A0),a1				; $003C
		move.w	Obj_Control_Var_0A(A1), Obj_Control_Var_0A(A0) ; $003A, $003A
		move.w	Obj_Angle(A1),d0				; $0026
		add.w	Obj_Control_Var_0A(A0),d0				; $003A
		move.w	D0, Obj_Angle(A0)				; $0026
		move.b	Obj_Angle(A0),d0				; $0026
		addq.b	#$04,d0
		lsr.b	#$03,d0
		move.b	D0, Obj_Map_Id(A0)					; $0022
		bsr.w	Offset_0x0182BE
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x0182BE:
		move.w	Obj_Control_Var_0C(A0),a1				; $003C
		move.b	Obj_Angle(A1),d0				; $0026
		addq.b	#$04,d0
		andi.b	#$F8,d0
		jsr	(CalcSine).l					; Offset_0x001B20
		neg.w	D0
		addi.w	#$0008,d0
		addi.w	#$0008,d1
		asr.w	#$04,d0
		asr.w	#$04,d1
		add.w	Obj_X(A1),d0					; $0010
		move.w	D0, Obj_X(A0)					; $0010
		add.w	Obj_Y(A1),d1					; $0014
		move.w	D1, Obj_Y(A0)					; $0014
		rts
;-------------------------------------------------------------------------------
Offset_0x0182F2:
		move.w	Obj_X(A0),d4					; $0010
		move.w	Obj_Y(A0),d5					; $0014
		bsr.w	Offset_0x0182BE
		cmp.w	Obj_X(A0),d4					; $0010
		beq.s	Offset_0x018308
		move.w	D4, Obj_Control_Var_12(A0)				; $0042
Offset_0x018308:
		cmp.w	Obj_Y(A0),d5					; $0014
		beq.s	Offset_0x018312
		move.w	D5, Obj_Height_3(A0)					; $0044
Offset_0x018312:
		lea	Obj_Control_Var_02(A0),a2				; $0032
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		move.w	(Control_Ports_Buffer_Data).w,d0			; $FFFFF604
		bsr	Offset_0x017ECA
		tst.w	Obj_Control_Var_02(A0)				; $0032
		beq.s	Offset_0x01832E
		tst.w	Obj_Control_Var_00(A0)				; $0030
		bne.s	Offset_0x018334
Offset_0x01832E:
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x018334:
		rts
;-------------------------------------------------------------------------------
; Offset_0x018336:
		tst.b	(A2)
		beq.w	Offset_0x01840C
		tst.b	Obj_Flags(A1)					; $0004
		bpl.w	Offset_0x0183AC
		cmpi.b	#$04, Obj_Routine(A1)					; $0005
		bcc.s	Offset_0x0183AC
		andi.b	#$70,d0
		beq.w	Offset_0x0183BA
		clr.b	Obj_Timer(A1)					; $002E
		clr.b	(A2)
		move.w	Obj_X(A0),d1					; $0010
		sub.w	D4,d1
		asl.w	#$07,d1
		move.w	D1, Obj_Speed_X(A1)					; $0018
		move.w	Obj_Y(A0),d1					; $0014
		sub.w	D5,d1
		asl.w	#$07,d1
		move.w	D1, Obj_Speed_Y(A1)					; $001A
		move.b	#$12, $0002(A2)
		andi.w	#$0F00,d0
		beq.w	Offset_0x018386
		move.b	#$3C, $0002(A2)
Offset_0x018386:
		btst	#$0A,d0
		beq.s	Offset_0x018392
		move.w	#$FE00, Obj_Speed_X(A1)				; $0018
Offset_0x018392:
		btst	#$0B,d0
		beq.s	Offset_0x01839E
		move.w	#$0200, Obj_Speed_X(A1)				; $0018
Offset_0x01839E:
		addi.w	#$FC80, Obj_Speed_Y(A1)				; $001A
		bset	#$01, Obj_Status(A1)					; $002A
		rts
Offset_0x0183AC:
		clr.b	Obj_Timer(A1)					; $002E
		clr.b	(A2)
		move.b	#$3C, $0002(A2)
		rts
Offset_0x0183BA:
		move.w	Obj_X(A0), Obj_X(A1)			; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)			; $0014, $0014
		addi.w	#$0014, Obj_Y(A1)				; $0014
		move.w	Obj_Control_Var_0C(A0),a3				; $003C
		moveq	#0,d0
		move.b	Obj_Angle(A3),d0				; $0026
		btst	#0, Obj_Status(A1)					; $002A
		beq.s	Offset_0x0183E0
		neg.b	D0
Offset_0x0183E0:
		addq.b	#$08,d0
		lsr.w	#$04,d0
		move.b	Offset_0x0183FC(pc,d0.w), Obj_Map_Id(A1)		; $0022
		moveq	#0,d0
		move.b	Obj_Map_Id(A1),d0					; $0022
		move.l	A2, -(sp)
		jsr	(Load_Sonic_Dynamic_PLC_D0)			; Offset_0x00C7F0
		move.l	(sp)+,a2
		rts
;-------------------------------------------------------------------------------
Offset_0x0183FC:
		dc.b	$EF, $EE, $ED, $ED, $ED, $ED, $ED, $EE
		dc.b	$EF, $F0, $F1, $F1, $F1, $F1, $F1, $F0
;-------------------------------------------------------------------------------
Offset_0x01840C:
		tst.b	$0002(A2)
		beq.s	Offset_0x01841A
		subq.b	#$01, $0002(A2)
		bne.w	Offset_0x018480
Offset_0x01841A:
		move.w	Obj_X(A1),d0					; $0010
		sub.w	Obj_X(A0),d0					; $0010
		addi.w	#$0010,d0
		cmpi.w	#$0020,d0
		bcc.w	Offset_0x018480
		move.w	Obj_Y(A1),d1					; $0014
		sub.w	Obj_Y(A0),d1					; $0014
		cmpi.w	#$0018,d1
		bcc.w	Offset_0x018480
		tst.b	Obj_Timer(A1)					; $002E
		bmi.s	Offset_0x018480
		cmpi.b	#$04, Obj_Routine(A1)					; $0005
		bcc.s	Offset_0x018480
		tst.w	(Debug_placement_mode).w			; $FFFFFE08
		bne.s	Offset_0x018480
		clr.w	Obj_Speed_X(A1)					; $0018
		clr.w	Obj_Speed_Y(A1)					; $001A
		clr.w	Obj_Inertia(A1)					; $001C
		move.w	Obj_X(A0), Obj_X(A1)			; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)			; $0014, $0014
		addi.w	#$0014, Obj_Y(A1)				; $0014
		move.b	#$23, Obj_Ani_Number(A1)				; $0020
		move.b	#$03, Obj_Timer(A1)					; $002E
		move.b	#$01,(A2)
Offset_0x018480:
		rts
;-------------------------------------------------------------------------------
; Offset_0x018482:
Ride_Vine_Mappings:	include	"data/mappings/06 - Rideable Vine.asm"
Obj_AIz_Intro_Surfboard:                                       ; Offset_0x0185D6
		include "data\objects\aizsurfb.asm"
Obj_Knuckles:                                                  ; Offset_0x018EA0
		include "data\objects\knuckles.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 07 - Springs
;
; Horizontal, vertical,and diagonal types
; ---------------------------------------------------------------------------
; Offset_0x01921A: Obj_0x07_Springs:
Obj07_Springs:
		move.l	#Springs_Mappings,Obj_Map(a0)
		move.w	#$4A4,Obj_Art_VRAM(a0)
		ori.b	#4,Obj_Flags(a0)
		move.b	#$10,Obj_Width(a0)
		move.b	#$10,Obj_Height(a0)
		move.w	#$200,Obj_Priority(a0)
		move.w	Obj_X(a0),Obj_Control_Var_02(a0)
		move.w	Obj_Y(a0),Obj_Control_Var_04(a0)
		move.b	Obj_Subtype(a0),d0
		lsr.w	#3,d0
		andi.w	#$E,d0
		move.w	Offset_0x01925E(pc,d0.w),d0
		jmp	Offset_0x01925E(pc,d0.w)
; ===========================================================================

Offset_0x01925E:
		dc.w	Offset_0x01938A-Offset_0x01925E
		dc.w	Offset_0x0192C4-Offset_0x01925E
		dc.w	Offset_0x019302-Offset_0x01925E
		dc.w	Offset_0x019334-Offset_0x01925E
		dc.w	Offset_0x01935C-Offset_0x01925E
; ===========================================================================

Obj_0x07_Springs_2P:							; Offset_0x019268
		move.l	#Springs_Mappings, Obj_Map(A0)	; Offset_0x019C1A, $000C
		move.w	#$04A4, Obj_Art_VRAM(A0)				; $000A
		ori.b	#$04, Obj_Flags(A0)						; $0004
		move.b	#$10, Obj_Width(A0)						; $0007
		move.b	#$10, Obj_Height(A0)					; $0006
		move.w	#$0200, Obj_Priority(A0)				; $0008
		move.w	Obj_X(A0), Obj_Control_Var_02(A0)		; $0010, $0032
		move.w	Obj_Y(A0), Obj_Control_Var_04(A0)		; $0014, $0034
		move.b	Obj_Subtype(A0),d0						; $002C
		lsr.w	#$03,d0
		andi.w	#$000E,d0
		move.w	Offset_0x0192B4(pc,d0.w),d0
		jsr	Offset_0x0192B4(pc,d0.w)
		move.w	#$F800, Obj_Control_Var_00(A0)			; $0030
		rts
;-------------------------------------------------------------------------------
Offset_0x0192B4:
		dc.w	Offset_0x01938A-Offset_0x0192B4
		dc.w	Offset_0x0192C4-Offset_0x0192B4
		dc.w	Offset_0x019302-Offset_0x0192B4
		dc.w	Offset_0x0192C4-Offset_0x0192B4
		dc.w	Offset_0x01938A-Offset_0x0192B4
		dc.w	Offset_0x019302-Offset_0x0192B4
		dc.w	Offset_0x01938A-Offset_0x0192B4
		dc.w	Offset_0x019302-Offset_0x0192B4
;-------------------------------------------------------------------------------
Offset_0x0192C4:
		move.b	#$02, Obj_Ani_Number(A0)				; $0020
		move.b	#$03, Obj_Map_Id(A0)					; $0022
		move.w	#$04B4, Obj_Art_VRAM(A0)				; $000A
		move.b	#$08, Obj_Width(A0)						; $0007
		move.l	#Offset_0x019534,(A0)
		tst.w	(Two_Player_Flag).w					; $FFFFFFD8
		beq.w	Offset_0x0193B8
		move.l	#Springs_Mappings_2P, Obj_Map(A0) ; Offset_0x019DC2, $000C
		move.w	#$03AD, Obj_Art_VRAM(A0)				; $000A
		move.l	#Offset_0x0195C2,(A0)
		bra	Offset_0x0193B8
;-------------------------------------------------------------------------------
Offset_0x019302:
		move.b	#$06, Obj_Map_Id(A0)					; $0022
		bset	#$01, Obj_Status(A0)					; $002A
		move.l	#Offset_0x019804,(A0)
		tst.w	(Two_Player_Flag).w					; $FFFFFFD8
		beq.w	Offset_0x0193B8
		move.l	#Offset_0x019852,(A0)
		move.l	#Springs_Mappings_2P, Obj_Map(A0) ; Offset_0x019DC2, $000C
		move.w	#$0391, Obj_Art_VRAM(A0)				; $000A
		bra	Offset_0x0193B8
;-------------------------------------------------------------------------------
Offset_0x019334:
		move.b	#$04, Obj_Ani_Number(A0)				; $0020
		move.b	#$07, Obj_Map_Id(A0)					; $0022
		move.w	#$043A, Obj_Art_VRAM(A0)				; $000A
		cmpi.b	#$02,(Current_Zone).w					; $FFFFFE10
		bne.s	Offset_0x019354
		move.w	#$0478, Obj_Art_VRAM(A0)				; $000A
Offset_0x019354:
		move.l	#Offset_0x01994E,(A0)
		bra.s	Offset_0x0193B8
;-------------------------------------------------------------------------------
Offset_0x01935C:
		move.b	#$04, Obj_Ani_Number(A0)				; $0020
		move.b	#$0A, Obj_Map_Id(A0)					; $0022
		move.w	#$043A, Obj_Art_VRAM(A0)				; $000A
		cmpi.b	#$02,(Current_Zone).w					; $FFFFFE10
		bne.s	Offset_0x01937C
		move.w	#$0478, Obj_Art_VRAM(A0)				; $000A
Offset_0x01937C:
		bset	#$01, Obj_Status(A0)					; $002A
		move.l	#Offset_0x019A90,(A0)
		bra.s	Offset_0x0193B8
;-------------------------------------------------------------------------------
Offset_0x01938A:
		move.l	#Offset_0x0193E8,(A0)
		tst.w	(Two_Player_Flag).w					; $FFFFFFD8
		beq.s	Offset_0x0193B8
		move.l	#Offset_0x01943A,(A0)
		move.l	#Springs_Mappings_2P, Obj_Map(A0) ; Offset_0x019DC2, $000C
		move.w	#$0391, Obj_Art_VRAM(A0)				; $000A
		cmpi.b	#$12,(Current_Zone).w					; $FFFFFE10
		bne.s	Offset_0x0193B8
		ori.w	#$8000, Obj_Art_VRAM(A0)				; $000A
Offset_0x0193B8:
		move.b	Obj_Subtype(A0),d0						; $002C
		andi.w	#$0002,d0
		move.w	Offset_0x0193E4(pc,d0.w), Obj_Control_Var_00(A0)	; $0030
		btst	#$01,d0
		beq.s	Offset_0x0193E2
		move.l	#Springs_Mappings_01, Obj_Map(A0) ; Offset_0x019C30, $000C
		tst.w	(Two_Player_Flag).w					; $FFFFFFD8
		beq.s	Offset_0x0193E2
		move.l	#Springs_Mappings_01_2P, Obj_Map(A0) ; Offset_0x019DD0, $000C
Offset_0x0193E2:
		rts
;-------------------------------------------------------------------------------
Offset_0x0193E4:
		dc.w	$F000, $F600
;-------------------------------------------------------------------------------
Offset_0x0193E8:
		move.w	#$001B,d1
		move.w	#$0008,d2
		move.w	#$0010,d3
		move.w	Obj_X(A0),d4					; $0010
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		movem.l D1-D4, -(sp)
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		btst	#$03, Obj_Status(A0)					; $002A
		beq.s	Offset_0x019410
		bsr.s	Offset_0x01948C
Offset_0x019410:
		movem.l (sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		btst	#$04, Obj_Status(A0)					; $002A
		beq.s	Offset_0x019428
		bsr.s	Offset_0x01948C
Offset_0x019428:
		lea	(Springs_Animate_Data).l,a1			; Offset_0x019BE0
		jsr	(AnimateSprite)				; Offset_0x01115E
		jmp	(MarkObjGone)					; Offset_0x011AF2
;-------------------------------------------------------------------------------
Offset_0x01943A:
		move.w	#$0013,d1
		move.w	#$0008,d2
		move.w	#$0010,d3
		move.w	Obj_X(A0),d4					; $0010
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		movem.l D1-D4, -(sp)
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		btst	#$03, Obj_Status(A0)					; $002A
		beq.s	Offset_0x019462
		bsr.s	Offset_0x01948C
Offset_0x019462:
		movem.l (sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		btst	#$04, Obj_Status(A0)					; $002A
		beq.s	Offset_0x01947A
		bsr.s	Offset_0x01948C
Offset_0x01947A:
		lea	(Springs_Animate_Data).l,a1			; Offset_0x019BE0
		jsr	(AnimateSprite)				; Offset_0x01115E
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x01948C:
		move.w	#$0100, Obj_Ani_Number(A0)				; $0020
		addq.w	#$08, Obj_Y(A1)					; $0014
		move.w	Obj_P_Flips_Remaining(A0), Obj_Speed_Y(A1) ; $0030, $001A
		bset	#$01, Obj_Status(A1)					; $002A
		bclr	#$03, Obj_Status(A1)					; $002A
		clr.b	Obj_Player_Jump(A1)						; $0040
		move.b	#$10, Obj_Ani_Number(A1)				; $0020
		move.b	#$02, Obj_Routine(A1)					; $0005
		move.b	Obj_Subtype(A0),d0						; $002C
		bpl.s	Offset_0x0194C4
		move.w	#$0000, Obj_Speed_X(A1)					; $0018
Offset_0x0194C4:
		btst	#0,d0
		beq.s	Offset_0x019504
		move.w	#$0001, Obj_Inertia(A1)					; $001C
		move.b	#$01, Obj_Flip_Angle(A1)				; $0027
		move.b	#0, Obj_Ani_Number(A1)				; $0020
		move.b	#0, Obj_P_Flips_Remaining(A1)			; $0030
		move.b	#$04, Obj_Player_Flip_Speed(A1)			; $0031
		btst	#$01,d0
		bne.s	Offset_0x0194F4
		move.b	#$01, Obj_P_Flips_Remaining(A1)			; $0030
Offset_0x0194F4:
		btst	#0, Obj_Status(A1)					; $002A
		beq.s	Offset_0x019504
		neg.b	Obj_Flip_Angle(A1)						; $0027
		neg.w	Obj_Inertia(A1)					; $001C
Offset_0x019504:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	Offset_0x01951A
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x01951A:
		cmpi.b	#$08,d0
		bne.s	Offset_0x01952C
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x01952C:
		moveq	#signextendB(sfx_Spring),d0					; $D2
		jmp	(PlaySound).l					; Offset_0x001176
;-------------------------------------------------------------------------------
Offset_0x019534:
		move.w	#$0013,d1
		move.w	#$000E,d2
		move.w	#$000F,d3
		move.w	Obj_X(A0),d4					; $0010
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		movem.l D1-D4, -(sp)
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		swap	D6
		andi.w	#$0001,d6
		beq.s	Offset_0x019576
		move.b	Obj_Status(A0),d1						; $002A
		move.w	Obj_X(A0),d0					; $0010
		sub.w	Obj_X(A1),d0					; $0010
		bcs.s	Offset_0x01956C
		eori.b	#$01,d1
Offset_0x01956C:
		andi.b	#$01,d1
		bne.s	Offset_0x019576
		bsr	Offset_0x019674
Offset_0x019576:
		movem.l (sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		swap	D6
		andi.w	#$0002,d6
		beq.s	Offset_0x0195A8
		move.b	Obj_Status(A0),d1						; $002A
		move.w	Obj_X(A0),d0					; $0010
		sub.w	Obj_X(A1),d0					; $0010
		bcs.s	Offset_0x01959E
		eori.b	#$01,d1
Offset_0x01959E:
		andi.b	#$01,d1
		bne.s	Offset_0x0195A8
		bsr	Offset_0x019674
Offset_0x0195A8:
		bsr	Offset_0x01974A
		lea	(Springs_Animate_Data).l,a1			; Offset_0x019BE0
		jsr	(AnimateSprite)				; Offset_0x01115E
		move.w	Obj_Control_Var_02(A0),d0				; $0032
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x0195C2:
		move.w	#$000F,d1
		move.w	#$000C,d2
		move.w	#$000D,d3
		move.w	Obj_X(A0),d4					; $0010
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		movem.l D1-D4, -(sp)
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		swap	D6
		andi.w	#$0001,d6
		beq.s	Offset_0x019602
		move.b	Obj_Status(A0),d1						; $002A
		move.w	Obj_X(A0),d0					; $0010
		sub.w	Obj_X(A1),d0					; $0010
		bcs.s	Offset_0x0195FA
		eori.b	#$01,d1
Offset_0x0195FA:
		andi.b	#$01,d1
		bne.s	Offset_0x019602
		bsr.s	Offset_0x019644
Offset_0x019602:
		movem.l (sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		swap	D6
		andi.w	#$0002,d6
		beq.s	Offset_0x019632
		move.b	Obj_Status(A0),d1						; $002A
		move.w	Obj_X(A0),d0					; $0010
		sub.w	Obj_X(A1),d0					; $0010
		bcs.s	Offset_0x01962A
		eori.b	#$01,d1
Offset_0x01962A:
		andi.b	#$01,d1
		bne.s	Offset_0x019632
		bsr.s	Offset_0x019644
Offset_0x019632:
		lea	(Springs_Animate_Data).l,a1			; Offset_0x019BE0
		jsr	(AnimateSprite)				; Offset_0x01115E
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x019644:
		move.w	#$0300, Obj_Ani_Number(A0)				; $0020
		move.w	Obj_Control_Var_00(A0), Obj_Speed_X(A1)	; $0030, $0018
		addq.w	#$04, Obj_X(A1)					; $0010
		bset	#0, Obj_Status(A1)					; $002A
		btst	#0, Obj_Status(A0)					; $002A
		bne.s	Offset_0x019672
		bclr	#0, Obj_Status(A1)					; $002A
		subi.w	#$0008, Obj_X(A1)				; $0010
		neg.w	Obj_Speed_X(A1)					; $0018
Offset_0x019672:
		bra.s	Offset_0x0196A2
;-------------------------------------------------------------------------------
Offset_0x019674:
		move.w	#$0300, Obj_Ani_Number(A0)				; $0020
		move.w	Obj_Control_Var_00(A0), Obj_Speed_X(A1)	; $0030, $0018
		addq.w	#$08, Obj_X(A1)					; $0010
		bset	#0, Obj_Status(A1)					; $002A
		btst	#0, Obj_Status(A0)					; $002A
		bne.s	Offset_0x0196A2
		bclr	#0, Obj_Status(A1)					; $002A
		subi.w	#$0010, Obj_X(A1)				; $0010
		neg.w	Obj_Speed_X(A1)					; $0018
Offset_0x0196A2:
		move.w	#$000F, Obj_P_Horiz_Ctrl_Lock(A1)		; $0032
		move.w	Obj_Speed_X(A1), Obj_Inertia(A1)			; $0018, $001C
		btst	#$02, Obj_Status(A1)					; $002A
		bne.s	Offset_0x0196BC
		move.b	#0, Obj_Ani_Number(A1)				; $0020
Offset_0x0196BC:
		move.b	Obj_Subtype(A0),d0						; $002C
		bpl.s	Offset_0x0196C8
		move.w	#$0000, Obj_Speed_Y(A1)					; $001A
Offset_0x0196C8:
		btst	#0,d0
		beq.s	Offset_0x019708
		move.w	#$0001, Obj_Inertia(A1)					; $001C
		move.b	#$01, Obj_Flip_Angle(A1)				; $0027
		move.b	#0, Obj_Ani_Number(A1)				; $0020
		move.b	#$01, Obj_P_Flips_Remaining(A1)			; $0030
		move.b	#$08, Obj_Player_Flip_Speed(A1)			; $0031
		btst	#$01,d0
		bne.s	Offset_0x0196F8
		move.b	#$03, Obj_P_Flips_Remaining(A1)			; $0030
Offset_0x0196F8:
		btst	#0, Obj_Status(A1)					; $002A
		beq.s	Offset_0x019708
		neg.b	Obj_Flip_Angle(A1)						; $0027
		neg.w	Obj_Inertia(A1)					; $001C
Offset_0x019708:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	Offset_0x01971E
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x01971E:
		cmpi.b	#$08,d0
		bne.s	Offset_0x019730
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x019730:
		bclr	#$05, Obj_Status(A0)					; $002A
		bclr	#$06, Obj_Status(A0)					; $002A
		bclr	#$05, Obj_Status(A1)					; $002A
		moveq	#signextendB(sfx_Spring),d0					; $D2
		jmp	(PlaySound).l					; Offset_0x001176
;-------------------------------------------------------------------------------
Offset_0x01974A:
		cmpi.b	#$03, Obj_Ani_Number(A0)				; $0020
		beq.w	Offset_0x019802
		move.w	Obj_X(A0),d0					; $0010
		move.w	D0,d1
		addi.w	#$0028,d1
		btst	#0, Obj_Status(A0)					; $002A
		beq.s	Offset_0x01976C
		move.w	D0,d1
		subi.w	#$0028,d0
Offset_0x01976C:
		move.w	Obj_Y(A0),d2					; $0014
		move.w	D2,d3
		subi.w	#$0018,d2
		addi.w	#$0018,d3
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		btst	#$01, Obj_Status(A1)					; $002A
		bne.s	Offset_0x0197C0
		move.w	Obj_Inertia(A1),d4						; $001C
		btst	#0, Obj_Status(A0)					; $002A
		beq.s	Offset_0x019794
		neg.w	D4
Offset_0x019794:
		tst.w	D4
		bmi.s	Offset_0x0197C0
		move.w	Obj_X(A1),d4					; $0010
		cmp.w	D0,d4
		bcs.w	Offset_0x0197C0
		cmp.w	D1,d4
		bcc.w	Offset_0x0197C0
		move.w	Obj_Y(A1),d4					; $0014
		cmp.w	D2,d4
		bcs.w	Offset_0x0197C0
		cmp.w	D3,d4
		bcc.w	Offset_0x0197C0
		move.w	D0, -(sp)
		bsr.w	Offset_0x019674
		move.w	(sp)+,d0
Offset_0x0197C0:
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		btst	#$01, Obj_Status(A1)					; $002A
		bne.s	Offset_0x019802
		move.w	Obj_Inertia(A1),d4						; $001C
		btst	#0, Obj_Status(A0)					; $002A
		beq.s	Offset_0x0197DA
		neg.w	D4
Offset_0x0197DA:
		tst.w	D4
		bmi.s	Offset_0x019802
		move.w	Obj_X(A1),d4					; $0010
		cmp.w	D0,d4
		bcs.w	Offset_0x019802
		cmp.w	D1,d4
		bcc.w	Offset_0x019802
		move.w	Obj_Y(A1),d4					; $0014
		cmp.w	D2,d4
		bcs.w	Offset_0x019802
		cmp.w	D3,d4
		bcc.w	Offset_0x019802
		bsr.w	Offset_0x019674
Offset_0x019802:
		rts
;-------------------------------------------------------------------------------
Offset_0x019804:
		move.w	#$001B,d1
		move.w	#$0008,d2
		move.w	#$0009,d3
		move.w	Obj_X(A0),d4					; $0010
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		movem.l D1-D4, -(sp)
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		cmpi.w	#$FFFE,d4
		bne.s	Offset_0x01982A
		bsr.s	Offset_0x0198A8
Offset_0x01982A:
		movem.l (sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		cmpi.w	#$FFFE,d4
		bne.s	Offset_0x019840
		bsr.s	Offset_0x0198A8
Offset_0x019840:
		lea	(Springs_Animate_Data).l,a1			; Offset_0x019BE0
		jsr	(AnimateSprite)				; Offset_0x01115E
		jmp	(MarkObjGone)					; Offset_0x011AF2
;-------------------------------------------------------------------------------
Offset_0x019852:
		move.w	#$0013,d1
		move.w	#$0008,d2
		move.w	#$0009,d3
		move.w	Obj_X(A0),d4					; $0010
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		movem.l D1-D4, -(sp)
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		cmpi.w	#$FFFE,d4
		bne.s	Offset_0x01987C
		subq.w	#$04, Obj_Y(A1)					; $0014
		bsr.s	Offset_0x0198AC
Offset_0x01987C:
		movem.l (sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr	Solid_Object_2_A1				; Offset_0x0135CC
		cmpi.w	#$FFFE,d4
		bne.s	Offset_0x019896
		subq.w	#$04, Obj_Y(A1)					; $0014
		bsr.s	Offset_0x0198AC
Offset_0x019896:
		lea	(Springs_Animate_Data).l,a1			; Offset_0x019BE0
		jsr	(AnimateSprite)				; Offset_0x01115E
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x0198A8:
		subq.w	#$08, Obj_Y(A1)					; $0014
Offset_0x0198AC:
		move.w	#$0100, Obj_Ani_Number(A0)				; $0020
		move.w	Obj_P_Flips_Remaining(A0), Obj_Speed_Y(A1) ; $0030, $001A
		neg.w	Obj_Speed_Y(A1)					; $001A
		move.b	Obj_Subtype(A0),d0						; $002C
		bpl.s	Offset_0x0198C8
		move.w	#$0000, Obj_Speed_X(A1)					; $0018
Offset_0x0198C8:
		btst	#0,d0
		beq.s	Offset_0x019908
		move.w	#$0001, Obj_Inertia(A1)					; $001C
		move.b	#$01, Obj_Flip_Angle(A1)				; $0027
		move.b	#0, Obj_Ani_Number(A1)				; $0020
		move.b	#0, Obj_P_Flips_Remaining(A1)			; $0030
		move.b	#$04, Obj_Player_Flip_Speed(A1)			; $0031
		btst	#$01,d0
		bne.s	Offset_0x0198F8
		move.b	#$01, Obj_P_Flips_Remaining(A1)			; $0030
Offset_0x0198F8:
		btst	#0, Obj_Status(A1)					; $002A
		beq.s	Offset_0x019908
		neg.b	Obj_Flip_Angle(A1)						; $0027
		neg.w	Obj_Inertia(A1)					; $001C
Offset_0x019908:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	Offset_0x01991E
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x01991E:
		cmpi.b	#$08,d0
		bne.s	Offset_0x019930
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x019930:
		bset	#$01, Obj_Status(A1)					; $002A
		bclr	#$03, Obj_Status(A1)					; $002A
		clr.b	Obj_Player_Jump(A1)						; $0040
		move.b	#$02, Obj_Routine(A1)					; $0005
		moveq	#signextendB(sfx_Spring),d0					; $D2
		jmp	(PlaySound).l					; Offset_0x001176
;-------------------------------------------------------------------------------
Offset_0x01994E:
		move.w	#$001B,d1
		move.w	#$0010,d2
		move.w	Obj_X(A0),d4					; $0010
		lea	Offset_0x019BA8(PC),a2
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		movem.l D1-D4, -(sp)
		bsr	Offset_0x013624
		btst	#$03, Obj_Status(A0)					; $002A
		beq.s	Offset_0x019976
		bsr.s	Offset_0x0199A4
Offset_0x019976:
		movem.l (sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr	Offset_0x013624
		btst	#$04, Obj_Status(A0)					; $002A
		beq.s	Offset_0x01998E
		bsr.s	Offset_0x0199A4
Offset_0x01998E:
		lea	(Springs_Animate_Data).l,a1			; Offset_0x019BE0
		jsr	(AnimateSprite)				; Offset_0x01115E
		move.w	Obj_P_Horiz_Ctrl_Lock(A0),d0			; $0032
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
Offset_0x0199A4:
		btst	#0, Obj_Status(A0)					; $002A
		bne.s	Offset_0x0199BA
		move.w	Obj_X(A0),d0					; $0010
		subq.w	#$04,d0
		cmp.w	Obj_X(A1),d0					; $0010
		bcs.s	Offset_0x0199C8
		rts
Offset_0x0199BA:
		move.w	Obj_X(A0),d0					; $0010
		addq.w	#$04,d0
		cmp.w	Obj_X(A1),d0					; $0010
		bcc.s	Offset_0x0199C8
		rts
Offset_0x0199C8:
		move.w	#$0500, Obj_Ani_Number(A0)				; $0020
		move.w	Obj_P_Flips_Remaining(A0), Obj_Speed_Y(A1) ; $0030, $001A
		move.w	Obj_P_Flips_Remaining(A0), Obj_Speed_X(A1) ; $0030, $0018
		addq.w	#$06, Obj_Y(A1)					; $0014
		addq.w	#$06, Obj_X(A1)					; $0010
		bset	#0, Obj_Status(A1)					; $002A
		btst	#0, Obj_Status(A0)					; $002A
		bne.s	Offset_0x019A00
		bclr	#0, Obj_Status(A1)					; $002A
		subi.w	#$000C, Obj_X(A1)				; $0010
		neg.w	Obj_Speed_X(A1)					; $0018
Offset_0x019A00:
		bset	#$01, Obj_Status(A1)					; $002A
		bclr	#$03, Obj_Status(A1)					; $002A
		clr.b	Obj_Player_Jump(A1)						; $0040
		move.b	#$10, Obj_Ani_Number(A1)				; $0020
		move.b	#$02, Obj_Routine(A1)					; $0005
		move.b	Obj_Subtype(A0),d0						; $002C
		btst	#0,d0
		beq.s	Offset_0x019A60
		move.w	#$0001, Obj_Inertia(A1)					; $001C
		move.b	#$01, Obj_Flip_Angle(A1)				; $0027
		move.b	#0, Obj_Ani_Number(A1)				; $0020
		move.b	#$01, Obj_P_Flips_Remaining(A1)			; $0030
		move.b	#$08, Obj_Player_Flip_Speed(A1)			; $0031
		btst	#$01,d0
		bne.s	Offset_0x019A50
		move.b	#$03, Obj_P_Flips_Remaining(A1)			; $0030
Offset_0x019A50:
		btst	#0, Obj_Status(A1)					; $002A
		beq.s	Offset_0x019A60
		neg.b	Obj_Flip_Angle(A1)						; $0027
		neg.w	Obj_Inertia(A1)					; $001C
Offset_0x019A60:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	Offset_0x019A76
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x019A76:
		cmpi.b	#$08,d0
		bne.s	Offset_0x019A88
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x019A88:
		moveq	#signextendB(sfx_Spring),d0					; $D2
		jmp	(PlaySound).l					; Offset_0x001176
;-------------------------------------------------------------------------------
Offset_0x019A90:
		move.w	#$001B,d1
		move.w	#$0010,d2
		move.w	Obj_X(A0),d4					; $0010
		lea	Offset_0x019BC4(PC),a2
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	#$03,d6
		movem.l D1-D4, -(sp)
		bsr	Offset_0x013624
		cmpi.w	#$FFFE,d4
		bne.s	Offset_0x019AB6
		bsr.s	Offset_0x019AE2
Offset_0x019AB6:
		movem.l (sp)+,d1-D4
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	#$04,d6
		bsr	Offset_0x013624
		cmpi.w	#$FFFE,d4
		bne.s	Offset_0x019ACC
		bsr.s	Offset_0x019AE2
Offset_0x019ACC:
		lea	(Springs_Animate_Data).l,a1			; Offset_0x019BE0
		jsr	(AnimateSprite)				; Offset_0x01115E
		move.w	Obj_Control_Var_02(A0),d0				; $0032
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
Offset_0x019AE2:
		move.w	#$0500, Obj_Ani_Number(A0)				; $0020
		move.w	Obj_P_Flips_Remaining(A0), Obj_Speed_Y(A1) ; $0030, $001A
		neg.w	Obj_Speed_Y(A1)					; $001A
		move.w	Obj_P_Flips_Remaining(A0), Obj_Speed_X(A1) ; $0030, $0018
		subq.w	#$06, Obj_Y(A1)					; $0014
		addq.w	#$06, Obj_X(A1)					; $0010
		bset	#0, Obj_Status(A1)					; $002A
		btst	#0, Obj_Status(A0)					; $002A
		bne.s	Offset_0x019B1E
		bclr	#0, Obj_Status(A1)					; $002A
		subi.w	#$000C, Obj_X(A1)				; $0010
		neg.w	Obj_Speed_X(A1)					; $0018
Offset_0x019B1E:
		bset	#$01, Obj_Status(A1)					; $002A
		bclr	#$03, Obj_Status(A1)					; $002A
		clr.b	Obj_Player_Jump(A1)						; $0040
		move.b	#$02, Obj_Routine(A1)					; $0005
		move.b	Obj_Subtype(A0),d0						; $002C
		btst	#0,d0
		beq.s	Offset_0x019B78
		move.w	#$0001, Obj_Inertia(A1)					; $001C
		move.b	#$01, Obj_Flip_Angle(A1)				; $0027
		move.b	#0, Obj_Ani_Number(A1)				; $0020
		move.b	#$01, Obj_P_Flips_Remaining(A1)			; $0030
		move.b	#$08, Obj_Player_Flip_Speed(A1)			; $0031
		btst	#$01,d0
		bne.s	Offset_0x019B68
		move.b	#$03, Obj_P_Flips_Remaining(A1)			; $0030
Offset_0x019B68:
		btst	#0, Obj_Status(A1)					; $002A
		beq.s	Offset_0x019B78
		neg.b	Obj_Flip_Angle(A1)						; $0027
		neg.w	Obj_Inertia(A1)					; $001C
Offset_0x019B78:
		andi.b	#$0C,d0
		cmpi.b	#$04,d0
		bne.s	Offset_0x019B8E
		move.b	#$0C, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0D, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x019B8E:
		cmpi.b	#$08,d0
		bne.s	Offset_0x019BA0
		move.b	#$0E, Obj_Player_Top_Solid(A1)			; $0046
		move.b	#$0F, Obj_Player_LRB_Solid(A1)			; $0047
Offset_0x019BA0:
		moveq	#signextendB(sfx_Spring),d0					; $D2
		jmp	(PlaySound).l					; Offset_0x001176
;-------------------------------------------------------------------------------
Offset_0x019BA8:
		dc.b	$10, $10, $10, $10, $10, $10, $10, $10
		dc.b	$10, $10, $10, $10, $0E, $0C, $0A, $08
		dc.b	$06, $04, $02, $00, $FE, $FC, $FC, $FC
		dc.b	$FC, $FC, $FC, $FC
;-------------------------------------------------------------------------------
Offset_0x019BC4:
		dc.b	$F4, $F0, $F0, $F0, $F0, $F0, $F0, $F0
		dc.b	$F0, $F0, $F0, $F0, $F2, $F4, $F6, $F8
		dc.b	$FA, $FC, $FE, $00, $02, $04, $04, $04
		dc.b	$04, $04, $04, $04
;-------------------------------------------------------------------------------
Springs_Animate_Data:							; Offset_0x019BE0
		dc.w	Offset_0x019BEC-Springs_Animate_Data
		dc.w	Offset_0x019BEF-Springs_Animate_Data
		dc.w	Offset_0x019BFB-Springs_Animate_Data
		dc.w	Offset_0x019BFE-Springs_Animate_Data
		dc.w	Offset_0x019C0A-Springs_Animate_Data
		dc.w	Offset_0x019C0D-Springs_Animate_Data
Offset_0x019BEC:
		dc.b	$0F, $00, $FF
Offset_0x019BEF:
		dc.b	$00, $01, $00, $00, $02, $02, $02, $02
		dc.b	$02, $02, $FD, $00
Offset_0x019BFB:
		dc.b	$0F, $03, $FF
Offset_0x019BFE:
		dc.b	$00, $04, $03, $03, $05, $05, $05, $05
		dc.b	$05, $05, $FD, $02
Offset_0x019C0A:
		dc.b	$0F, $07, $FF
Offset_0x019C0D:
		dc.b	$00, $08, $07, $07, $09, $09, $09, $09
		dc.b	$09, $09, $FD, $04
		even
;-------------------------------------------------------------------------------
; Offset_0x019C1A:
Springs_Mappings:	include	"data/mappings/07 - Springs.asm"	; also has Springs_Mappings_01

;-------------------------------------------------------------------------------
Springs_Mappings_2P:							; Offset_0x019DC2
		dc.w	Offset_0x019DDE-Springs_Mappings_2P
		dc.w	Offset_0x019DEC-Springs_Mappings_2P
		dc.w	Offset_0x019DF4-Springs_Mappings_2P
		dc.w	Offset_0x019E08-Springs_Mappings_2P
		dc.w	Offset_0x019E16-Springs_Mappings_2P
		dc.w	Offset_0x019E1E-Springs_Mappings_2P
		dc.w	Offset_0x019E32-Springs_Mappings_2P
;-------------------------------------------------------------------------------
Springs_Mappings_01_2P:						; Offset_0x019DD0
		dc.w	Offset_0x019E40-Springs_Mappings_01_2P
		dc.w	Offset_0x019E4E-Springs_Mappings_01_2P
		dc.w	Offset_0x019E56-Springs_Mappings_01_2P
		dc.w	Offset_0x019E6A-Springs_Mappings_01_2P
		dc.w	Offset_0x019E78-Springs_Mappings_01_2P
		dc.w	Offset_0x019E80-Springs_Mappings_01_2P
		dc.w	Offset_0x019E94-Springs_Mappings_01_2P
Offset_0x019DDE:
		dc.w	$0002
		dc.w	$F608, $0000, $FFF4
		dc.w	$FB08, $0006, $FFF4
Offset_0x019DEC:
		dc.w	$0001
		dc.w	$FB08, $0000, $FFF4
Offset_0x019DF4:
		dc.w	$0003
		dc.w	$F108, $0000, $FFF4
		dc.w	$F300, $0009, $FFFC
		dc.w	$FB08, $000A, $FFF4
Offset_0x019E08:
		dc.w	$0002
		dc.w	$F402, $0800, $0002
		dc.w	$F402, $0806, $FFFD
Offset_0x019E16:
		dc.w	$0001
		dc.w	$F402, $0800, $FFFD
Offset_0x019E1E:
		dc.w	$0003
		dc.w	$F402, $0800, $0007
		dc.w	$FC00, $0809, $0005
		dc.w	$F402, $080A, $FFFD
Offset_0x019E32:
		dc.w	$0002
		dc.w	$0208, $1000, $FFF4
		dc.w	$FD08, $1006, $FFF4
Offset_0x019E40:
		dc.w	$0002
		dc.w	$F608, $0003, $FFF4
		dc.w	$FB08, $0006, $FFF4
Offset_0x019E4E:
		dc.w	$0001
		dc.w	$FB08, $0003, $FFF4
Offset_0x019E56:
		dc.w	$0003
		dc.w	$F108, $0003, $FFF4
		dc.w	$F300, $0009, $FFFC
		dc.w	$FB08, $000A, $FFF4
Offset_0x019E6A:
		dc.w	$0002
		dc.w	$F402, $0803, $0002
		dc.w	$F402, $0806, $FFFD
Offset_0x019E78:
		dc.w	$0001
		dc.w	$F402, $0803, $FFFD
Offset_0x019E80:
		dc.w	$0003
		dc.w	$F402, $0803, $0007
		dc.w	$FC00, $0809, $0005
		dc.w	$F402, $080A, $FFFD
Offset_0x019E94:
		dc.w	$0002
		dc.w	$0208, $1003, $FFF4
		dc.w	$FD08, $1006, $FFF4

Obj_0x3D_Retracting_Spring:                                    ; Offset_0x019EA2
		include "data\objects\obj_0x3D.asm"
; Obj_0x5F_Retracting_Spring:                                  ; Offset_0x019FF6
		include "data\objects\obj_0x5F.asm"

Spikes_Conf:							; Offset_0x01A432
		dc.b	$10, $10	; Largura / Altura do espinho
		dc.b	$20, $10
		dc.b	$30, $10
		dc.b	$40, $10
		dc.b	$10, $10
		dc.b	$10, $20
		dc.b	$10, $30
		dc.b	$10, $40
;-------------------------------------------------------------------------------
; Offset_0x01A442:
Obj_0x08_Spikes:
		ori.b	#$04, Obj_Flags(A0)					; $0004
		move.w	#$0200, Obj_Priority(A0)				; $0008
		move.b	Obj_Subtype(A0),d0					; $002C
		andi.w	#$00F0,d0
		lsr.w	#$03,d0
		tst.w	(Two_Player_Flag).w				; $FFFFFFD8
		bne.s	Obj_0x08_Spikes_2P			; Offset_0x01A4D0
		lea	Spikes_Conf(pc,d0.w),a1		; Offset_0x01A432
		move.b	(A1)+, Obj_Width(A0)					; $0007
		move.b	(A1)+, Obj_Height(A0)					; $0006
		move.l	#Offset_0x01A52C,(A0)
		move.l	#Spikes_Mappings, Obj_Map(A0)	; Offset_0x01A88C, $000C
		move.w	#$049C, Obj_Art_VRAM(A0)				; $000A
		lsr.w	#$01,d0
		move.b	D0, Obj_Map_Id(A0)					; $0022
		cmpi.b	#$04,d0
		bcs.s	Offset_0x01A496
		move.l	#Offset_0x01A57E,(A0)
		move.w	#$0494, Obj_Art_VRAM(A0)				; $000A
Offset_0x01A496:
		btst	#$01, Obj_Status(A0)					; $002A
		beq.s	Offset_0x01A4A4
		move.l	#Offset_0x01A5DA,(A0)
Offset_0x01A4A4:
		move.w	Obj_X(A0), Obj_Control_Var_00(A0)		; $0010, $0030
		move.w	Obj_Y(A0), Obj_Control_Var_02(A0)		; $0014, $0032
		move.b	Obj_Subtype(A0),d0					; $002C
		andi.b	#$0F,d0
		add.b	D0,d0
		move.b	D0, Obj_Subtype(A0)					; $002C
		rts
;-------------------------------------------------------------------------------
Spikes_Conf_2P:						; Offset_0x01A4C0
		dc.b	$0C, $0C	; Largura / Altura do espinho
		dc.b	$18, $0C
		dc.b	$24, $0C
		dc.b	$30, $0C
		dc.b	$0C, $0C
		dc.b	$0C, $18
		dc.b	$0C, $24
		dc.b	$0C, $30
;-------------------------------------------------------------------------------
Obj_0x08_Spikes_2P:							; Offset_0x01A4D0
		lea	Spikes_Conf_2P(pc,d0.w),a1			; Offset_0x01A4C0
		move.b	(A1)+, Obj_Width(A0)					; $0007
		move.b	(A1)+, Obj_Height(A0)					; $0006
		move.l	#Offset_0x01A62A,(A0)
		move.l	#Spikes_Mappings_2P, Obj_Map(A0) ; Offset_0x01A99C, $000C
		move.w	#$0391, Obj_Art_VRAM(A0)				; $000A
		lsr.w	#$01,d0
		move.b	D0, Obj_Map_Id(A0)					; $0022
		cmpi.b	#$04,d0
		bcs.s	Offset_0x01A502
		move.l	#Offset_0x01A678,(A0)
Offset_0x01A502:
		btst	#$01, Obj_Status(A0)					; $002A
		beq.s	Offset_0x01A510
		move.l	#Offset_0x01A6D0,(A0)
Offset_0x01A510:
		move.w	Obj_X(A0), Obj_Control_Var_00(A0)		; $0010, $0030
		move.w	Obj_Y(A0), Obj_Control_Var_02(A0)		; $0014, $0032
		move.b	Obj_Subtype(A0),d0					; $002C
		andi.b	#$0F,d0
		add.b	D0,d0
		move.b	D0, Obj_Subtype(A0)					; $002C
		rts
;-------------------------------------------------------------------------------
Offset_0x01A52C:
		bsr	Offset_0x01A752
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	Obj_Height(A0),d2					; $0006
		move.w	D2,d3
		addq.w	#$01,d3
		move.w	Obj_X(A0),d4					; $0010
		bsr	Solid_Object				 ; Offset_0x013556
		move.b	Obj_Status(A0),d6					; $002A
		andi.b	#$18,d6
		beq.s	Offset_0x01A574
		move.b	D6,d0
		andi.b	#$08,d0
		beq.s	Offset_0x01A566
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr	Hurt_Player_A1				; Offset_0x01A71C
Offset_0x01A566:
		andi.b	#$10,d6
		beq.s	Offset_0x01A574
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr	Hurt_Player_A1				; Offset_0x01A71C
Offset_0x01A574:
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x01A57E:
		bsr	Offset_0x01A752
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	Obj_Height(A0),d2					; $0006
		move.w	D2,d3
		addq.w	#$01,d3
		move.w	Obj_X(A0),d4					; $0010
		bsr	Solid_Object				 ; Offset_0x013556
		swap	D6
		andi.w	#$0003,d6
		beq.s	Offset_0x01A5D0
		move.b	D6,d0
		andi.b	#$01,d0
		beq.s	Offset_0x01A5BC
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr	Hurt_Player_A1				; Offset_0x01A71C
		bclr	#$05, Obj_Status(A0)					; $002A
Offset_0x01A5BC:
		andi.b	#$02,d6
		beq.s	Offset_0x01A5D0
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr	Hurt_Player_A1				; Offset_0x01A71C
		bclr	#$06, Obj_Status(A0)					; $002A
Offset_0x01A5D0:
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x01A5DA:
		bsr	Offset_0x01A752
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		addi.w	#$000B,d1
		moveq	#0,d2
		move.b	Obj_Height(A0),d2					; $0006
		move.w	D2,d3
		addq.w	#$01,d3
		move.w	Obj_X(A0),d4					; $0010
		bsr	Solid_Object				 ; Offset_0x013556
		swap	D6
		andi.w	#$000C,d6
		beq.s	Offset_0x01A620
		move.b	D6,d0
		andi.b	#$04,d0
		beq.s	Offset_0x01A612
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr	Hurt_Player_A1				; Offset_0x01A71C
Offset_0x01A612:
		andi.b	#$08,d6
		beq.s	Offset_0x01A620
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr	Hurt_Player_A1				; Offset_0x01A71C
Offset_0x01A620:
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x01A62A:
		bsr	Offset_0x01A7F0
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		addi.w	#$0007,d1
		moveq	#0,d2
		move.b	Obj_Height(A0),d2					; $0006
		move.w	D2,d3
		addq.w	#$01,d3
		move.w	Obj_X(A0),d4					; $0010
		bsr	Solid_Object				 ; Offset_0x013556
		move.b	Obj_Status(A0),d6					; $002A
		andi.b	#$18,d6
		beq.s	Offset_0x01A672
		move.b	D6,d0
		andi.b	#$08,d0
		beq.s	Offset_0x01A664
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr	Hurt_Player_A1				; Offset_0x01A71C
Offset_0x01A664:
		andi.b	#$10,d6
		beq.s	Offset_0x01A672
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr	Hurt_Player_A1				; Offset_0x01A71C
Offset_0x01A672:
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x01A678:
		bsr	Offset_0x01A7F0
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		addi.w	#$0007,d1
		moveq	#0,d2
		move.b	Obj_Height(A0),d2					; $0006
		move.w	D2,d3
		addq.w	#$01,d3
		move.w	Obj_X(A0),d4					; $0010
		bsr	Solid_Object				 ; Offset_0x013556
		swap	D6
		andi.w	#$0003,d6
		beq.s	Offset_0x01A6CA
		move.b	D6,d0
		andi.b	#$01,d0
		beq.s	Offset_0x01A6B6
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr.w	Hurt_Player_A1				; Offset_0x01A71C
		bclr	#$05, Obj_Status(A0)					; $002A
Offset_0x01A6B6:
		andi.b	#$02,d6
		beq.s	Offset_0x01A6CA
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr.w	Hurt_Player_A1				; Offset_0x01A71C
		bclr	#$06, Obj_Status(A0)					; $002A
Offset_0x01A6CA:
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x01A6D0:
		bsr	Offset_0x01A7F0
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		addi.w	#$0007,d1
		moveq	#0,d2
		move.b	Obj_Height(A0),d2					; $0006
		move.w	D2,d3
		addq.w	#$01,d3
		move.w	Obj_X(A0),d4					; $0010
		bsr	Solid_Object				 ; Offset_0x013556
		swap	D6
		andi.w	#$000C,d6
		beq.s	Offset_0x01A716
		move.b	D6,d0
		andi.b	#$04,d0
		beq.s	Offset_0x01A708
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr.w	Hurt_Player_A1				; Offset_0x01A71C
Offset_0x01A708:
		andi.b	#$08,d6
		beq.s	Offset_0x01A716
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		bsr.w	Hurt_Player_A1				; Offset_0x01A71C
Offset_0x01A716:
		jmp	(DisplaySprite)				; Offset_0x011148
;===============================================================================
; Rotina para causar danos ao Sonic / Miles
; ->>>
;===============================================================================
Hurt_Player_A1:						; Offset_0x01A71C
		btst	#Invincibility_Type, Obj_Player_Status(A1)	; $01, $002F
		bne.s	Offset_0x01A750
		tst.b	Obj_P_Invunerblt_Time(A1)				; $0034
		bne.s	Offset_0x01A750
		cmpi.b	#$04, Obj_Routine(A1)					; $0005
		bcc.s	Offset_0x01A750
		move.l	Obj_Y(A1),d3					; $0014
		move.w	Obj_Speed_Y(A1),d0					; $001A
		ext.l	D0
		asl.l	#$08,d0
		sub.l	D0,d3
		move.l	D3, Obj_Y(A1)					; $0014
		move.l	A0,a2
		move.l	A1,a0
		jsr	(Hurt_Player)				; Offset_0x00A3FA
		move.l	A2,a0
Offset_0x01A750:
		rts
;===============================================================================
; Rotina para causar danos ao Sonic / Miles
; <<<-
;===============================================================================
Offset_0x01A752:
		moveq	#0,d0
		move.b	Obj_Subtype(A0),d0					; $002C
		move.w	Offset_0x01A760(pc,d0.w),d1
		jmp	Offset_0x01A760(pc,d1.w)
;-------------------------------------------------------------------------------
Offset_0x01A760:
		dc.w	Offset_0x01A766-Offset_0x01A760
		dc.w	Offset_0x01A768-Offset_0x01A760
		dc.w	Offset_0x01A77C-Offset_0x01A760
;-------------------------------------------------------------------------------
Offset_0x01A766:
		rts
;-------------------------------------------------------------------------------
Offset_0x01A768:
		bsr.w	Offset_0x01A790
		moveq	#0,d0
		move.b	Obj_Control_Var_04(A0),d0				; $0034
		add.w	Obj_Control_Var_02(A0),d0				; $0032
		move.w	D0, Obj_Y(A0)					; $0014
		rts
;-------------------------------------------------------------------------------
Offset_0x01A77C:
		bsr.w	Offset_0x01A790
		moveq	#0,d0
		move.b	Obj_Control_Var_04(A0),d0				; $0034
		add.w	Obj_Control_Var_00(A0),d0				; $0030
		move.w	D0, Obj_X(A0)					; $0010
		rts
Offset_0x01A790:
		tst.w	Obj_Control_Var_08(A0)				 ; $0038
		beq.s	Offset_0x01A7AC
		subq.w	#$01, Obj_Control_Var_08(A0)			; $0038
		bne.s	Offset_0x01A7EE
		tst.b	Obj_Flags(A0)					; $0004
		bpl.s	Offset_0x01A7EE
		moveq	#sfx_SpikeMove,d0				; $58
		jsr	(PlaySound).l				 ; Offset_0x001176
		bra.s	Offset_0x01A7EE
Offset_0x01A7AC:
		tst.w	Obj_Control_Var_06(A0)				 ; $0036
		beq.s	Offset_0x01A7CE
		subi.w	#$0800, Obj_Control_Var_04(A0)			; $0034
		bcc.s	Offset_0x01A7EE
		move.w	#$0000, Obj_Control_Var_04(A0)			; $0034
		move.w	#$0000, Obj_Control_Var_06(A0)			; $0036
		move.w	#$003C, Obj_Control_Var_08(A0)			; $0038
		bra.s	Offset_0x01A7EE
Offset_0x01A7CE:
		addi.w	#$0800, Obj_Control_Var_04(A0)			; $0034
		cmpi.w	#$2000, Obj_Control_Var_04(A0)			; $0034
		bcs.s	Offset_0x01A7EE
		move.w	#$2000, Obj_Control_Var_04(A0)			; $0034
		move.w	#$0001, Obj_Control_Var_06(A0)			; $0036
		move.w	#$003C, Obj_Control_Var_08(A0)			; $0038
Offset_0x01A7EE:
		rts
;-------------------------------------------------------------------------------
Offset_0x01A7F0:
		moveq	#0,d0
		move.b	Obj_Subtype(A0),d0					; $002C
		move.w	Offset_0x01A7FE(pc,d0.w),d1
		jmp	Offset_0x01A7FE(pc,d1.w)
;-------------------------------------------------------------------------------
Offset_0x01A7FE:
		dc.w	Offset_0x01A766-Offset_0x01A7FE
		dc.w	Offset_0x01A804-Offset_0x01A7FE
		dc.w	Offset_0x01A818-Offset_0x01A7FE
;-------------------------------------------------------------------------------
Offset_0x01A804:
		bsr.w	Offset_0x01A82C
		moveq	#0,d0
		move.b	Obj_Control_Var_04(A0),d0				; $0034
		add.w	Obj_Control_Var_02(A0),d0				; $0032
		move.w	D0, Obj_Y(A0)					; $0014
		rts
;-------------------------------------------------------------------------------
Offset_0x01A818:
		bsr.w	Offset_0x01A82C
		moveq	#0,d0
		move.b	Obj_Control_Var_04(A0),d0				; $0034
		add.w	Obj_Control_Var_00(A0),d0				; $0030
		move.w	D0, Obj_X(A0)					; $0010
		rts
Offset_0x01A82C:
		tst.w	Obj_Control_Var_08(A0)				 ; $0038
		beq.s	Offset_0x01A848
		subq.w	#$01, Obj_Control_Var_08(A0)			; $0038
		bne.s	Offset_0x01A88A
		tst.b	Obj_Flags(A0)					; $0004
		bpl.s	Offset_0x01A88A
		moveq	#sfx_SpikeMove,d0				; $58
		jsr	(PlaySound).l				 ; Offset_0x001176
		bra.s	Offset_0x01A88A
Offset_0x01A848:
		tst.w	Obj_Control_Var_06(A0)				 ; $0036
		beq.s	Offset_0x01A86A
		subi.w	#$0800, Obj_Control_Var_04(A0)			; $0034
		bcc.s	Offset_0x01A88A
		move.w	#$0000, Obj_Control_Var_04(A0)			; $0034
		move.w	#$0000, Obj_Control_Var_06(A0)			; $0036
		move.w	#$003C, Obj_Control_Var_08(A0)			; $0038
		bra.s	Offset_0x01A88A
Offset_0x01A86A:
		addi.w	#$0800, Obj_Control_Var_04(A0)			; $0034
		cmpi.w	#$1800, Obj_Control_Var_04(A0)			; $0034
		bcs.s	Offset_0x01A88A
		move.w	#$1800, Obj_Control_Var_04(A0)			; $0034
		move.w	#$0001, Obj_Control_Var_06(A0)			; $0036
		move.w	#$003C, Obj_Control_Var_08(A0)			; $0038
Offset_0x01A88A:
		rts
;-------------------------------------------------------------------------------
; Offset_0x01A88C:
Spikes_Mappings:	include	"data/mappings/08 - Spikes.asm"

;-------------------------------------------------------------------------------
Spikes_Mappings_2P:							; Offset_0x01A99C
		dc.w	Offset_0x01A9AC-Spikes_Mappings_2P
		dc.w	Offset_0x01A9B4-Spikes_Mappings_2P
		dc.w	Offset_0x01A9C2-Spikes_Mappings_2P
		dc.w	Offset_0x01A9D6-Spikes_Mappings_2P
		dc.w	Offset_0x01A9F0-Spikes_Mappings_2P
		dc.w	Offset_0x01A9F8-Spikes_Mappings_2P
		dc.w	Offset_0x01AA06-Spikes_Mappings_2P
		dc.w	Offset_0x01AA1A-Spikes_Mappings_2P
Offset_0x01A9AC:
		dc.w	$0001
		dc.w	$F40A, $0013, $FFF4
Offset_0x01A9B4:
		dc.w	$0002
		dc.w	$F40A, $0013, $FFE8
		dc.w	$F40A, $0013, $0000
Offset_0x01A9C2:
		dc.w	$0003
		dc.w	$F40A, $0013, $FFDC
		dc.w	$F40A, $0013, $FFF4
		dc.w	$F40A, $0013, $000C
Offset_0x01A9D6:
		dc.w	$0004
		dc.w	$F40A, $0013, $FFD0
		dc.w	$F40A, $0013, $FFE8
		dc.w	$F40A, $0013, $0000
		dc.w	$F40A, $0013, $0018
Offset_0x01A9F0:
		dc.w	$0001
		dc.w	$F40A, $0013, $FFF4
Offset_0x01A9F8:
		dc.w	$0002
		dc.w	$E80A, $0013, $FFF4
		dc.w	$000A, $0013, $FFF4
Offset_0x01AA06:
		dc.w	$0003
		dc.w	$DC0A, $0013, $FFF4
		dc.w	$F40A, $0013, $FFF4
		dc.w	$0C0A, $0013, $FFF4
Offset_0x01AA1A:
		dc.w	$0004
		dc.w	$D00A, $0013, $FFF4
		dc.w	$E80A, $0013, $FFF4
		dc.w	$000A, $0013, $FFF4
		dc.w	$180A, $0013, $FFF4

Obj_Art_Scaling:                                               ; Offset_0x01AA34
		include "data\objects\scaling.asm"
Obj_0x0B_Sphere_Test:                                          ; Offset_0x01B338
		include "data\objects\obj_0x0B.asm"
Obj_0x0E_Spiral_Ramp_Attributes:                               ; Offset_0x01BC3A
		include "data\objects\obj_0x0E.asm"
; Obj_0x11_LBz_Platform:                                       ; Offset_0x01BCFC
		include "data\objects\obj_0x11.asm"
Obj_0x1D_LBz_Platform:                                         ; Offset_0x01C228
		include "data\objects\obj_0x1D.asm"
; Obj_0x51_Floating_Platform:                                  ; Offset_0x01C3C2
		include "data\objects\obj_0x51.asm"
Obj_0x67_Hz_Snake_Platform:                                    ; Offset_0x01C532
		include "data\objects\obj_0x67.asm"
; Obj_0x12_LBz_Elevator:                                       ; Offset_0x01C6A0
		include "data\objects\obj_0x12.asm"
Obj_0x13_LBz_Exploding_Trigger:                                ; Offset_0x01C890
		include "data\objects\obj_0x13.asm"
Obj_0x59_MGz_Dash_Trigger:                                     ; Offset_0x01C930
		include "data\objects\obj_0x59.asm"
; Obj_0x14_LBz_Trigger_Bridge:                                 ; Offset_0x01CBA2
		include "data\objects\obj_0x14.asm"
; Obj_0x15_LBz_Player_Launcher:                                ; Offset_0x01D050
		include "data\objects\obj_0x15.asm"
; Obj_0x16_LBz_Flame_Thrower:                                  ; Offset_0x01D312
		include "data\objects\obj_0x16.asm"
; Obj_0x17_LBz_Hooked_Ride:                                    ; Offset_0x01D4FC
		include "data\objects\obj_0x17.asm"
Obj_0x18_LBz_Cup_Elevator:                                     ; Offset_0x01D916
		include "data\objects\obj_0x18.asm"
Obj_0x19_LBz_Cup_Elevator_Pole:                                ; Offset_0x01DF10
		include "data\objects\obj_0x19.asm"
Obj_0x1A_Unknow_Controled_By_P2:                               ; Offset_0x01DFCE
		include "data\objects\obj_0x1A.asm"
Obj_0x1B_LBz_Pipe_Plug:                                        ; Offset_0x01E2C6
		include "data\objects\obj_0x1B.asm"
Obj_0x1C_LBz_Unknow:                                           ; Offset_0x01E6C6
		include "data\objects\obj_0x1C.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to dynamically reload animated stage tiles in VRAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x01E85A: DynamicArtCues:
AnimateStageTiles:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		andi.w	#$FC,d0
		move.w	Dynamic_Art_Idx+2(pc,d0.w),d1
		lea	Dynamic_Art_Idx(pc,d1.w),a2
		move.w	Dynamic_Art_Idx(pc,d0.w),d0
		jmp	Dynamic_Art_Idx(pc,d0.w)
		rts
; End of function AnimateStageTiles

; ===========================================================================

Dynamic_Art_Idx:                                               ; Offset_0x01E87A
		dc.w	Dynamic_AIz_1-Dynamic_Art_Idx          ; Offset_0x01E93C
		dc.w	AIz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F346
		dc.w	Dynamic_AIz_2-Dynamic_Art_Idx          ; Offset_0x01E94C
		dc.w	AIz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F392
		dc.w	Dynamic_Hz_1-Dynamic_Art_Idx           ; Offset_0x01E982
		dc.w	Hz_1_Animate-Dynamic_Art_Idx           ; Offset_0x01F3EA
		dc.w	Dynamic_Hz_2-Dynamic_Art_Idx           ; Offset_0x01EAFA
		dc.w	Hz_2_Animate-Dynamic_Art_Idx           ; Offset_0x01F3FA
		dc.w	Dynamic_MGz_1-Dynamic_Art_Idx          ; Offset_0x01ECCE
		dc.w	MGz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F408
		dc.w	Dynamic_MGz_2-Dynamic_Art_Idx          ; Offset_0x01ECCE
		dc.w	MGz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F408
		dc.w	Dynamic_CNz_1-Dynamic_Art_Idx          ; Offset_0x01ECD8
		dc.w	CNz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F428
		dc.w	Dynamic_CNz_2-Dynamic_Art_Idx          ; Offset_0x01ECD8
		dc.w	CNz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F428
		dc.w	Dynamic_FBz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	FBz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F4AC
		dc.w	Dynamic_FBz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	FBz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F4AC
		dc.w	Dynamic_Iz_1-Dynamic_Art_Idx           ; Offset_0x01ED6E
		dc.w	Iz_1_Animate-Dynamic_Art_Idx           ; Offset_0x01F4AC
		dc.w	Dynamic_Iz_2-Dynamic_Art_Idx           ; Offset_0x01ED6E
		dc.w	Iz_2_Animate-Dynamic_Art_Idx           ; Offset_0x01F4AC
		dc.w	Dynamic_LBz_1-Dynamic_Art_Idx          ; Offset_0x01EE70
		dc.w	LBz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F4BE
		dc.w	Dynamic_LBz_2-Dynamic_Art_Idx          ; Offset_0x01EF60
		dc.w	LBz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F4E8
		dc.w	Dynamic_MVz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	MVz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_MVz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	MVz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_Sz_1-Dynamic_Art_Idx           ; Offset_0x01E93A
		dc.w	Sz_1_Animate-Dynamic_Art_Idx           ; Offset_0x01F504
		dc.w	Dynamic_Sz_2-Dynamic_Art_Idx           ; Offset_0x01E93A
		dc.w	Sz_2_Animate-Dynamic_Art_Idx           ; Offset_0x01F504
		dc.w	Dynamic_LRz_1-Dynamic_Art_Idx          ; Offset_0x01F0FA
		dc.w	LRz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_LRz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	LRz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_SSz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	SSz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_SSz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	SSz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_DEz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	DEz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_DEz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	DEz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_TDz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	TDz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_TDz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	TDz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_End_Seq_1-Dynamic_Art_Idx      ; Offset_0x01E93A
		dc.w	End_Seq_1_Animate-Dynamic_Art_Idx      ; Offset_0x01F504
		dc.w	Dynamic_End_Seq_2-Dynamic_Art_Idx      ; Offset_0x01E93A
		dc.w	End_Seq_2_Animate-Dynamic_Art_Idx      ; Offset_0x01F504
		dc.w	Dynamic_ALz_1-Dynamic_Art_Idx          ; Offset_0x01F2DE
		dc.w	ALz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_ALz_2-Dynamic_Art_Idx          ; Offset_0x01F2DE
		dc.w	ALz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F504
		dc.w	Dynamic_BPz_1-Dynamic_Art_Idx          ; Offset_0x01F2DE
		dc.w	BPz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F512
		dc.w	Dynamic_BPz_2-Dynamic_Art_Idx          ; Offset_0x01F2DE
		dc.w	BPz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F512
		dc.w	Dynamic_DPz_1-Dynamic_Art_Idx          ; Offset_0x01F1F8
		dc.w	DPz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F548
		dc.w	Dynamic_DPz_2-Dynamic_Art_Idx          ; Offset_0x01F1F8
		dc.w	DPz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F548
		dc.w	Dynamic_CGz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	CGz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F558
		dc.w	Dynamic_CGz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	CGz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F558
		dc.w	Dynamic_EMz_1-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	EMz_1_Animate-Dynamic_Art_Idx          ; Offset_0x01F558
		dc.w	Dynamic_EMz_2-Dynamic_Art_Idx          ; Offset_0x01E93A
		dc.w	EMz_2_Animate-Dynamic_Art_Idx          ; Offset_0x01F558
		dc.w	Dynamic_GM_BS_1-Dynamic_Art_Idx        ; Offset_0x01E93A
		dc.w	GM_BS_1_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
		dc.w	Dynamic_GM_BS_2-Dynamic_Art_Idx        ; Offset_0x01E93A
		dc.w	GM_BS_2_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
		dc.w	Dynamic_GS_BS_1-Dynamic_Art_Idx        ; Offset_0x01E93A
		dc.w	GS_BS_1_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
		dc.w	Dynamic_GS_BS_2-Dynamic_Art_Idx        ; Offset_0x01E93A
		dc.w	GS_BS_2_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
		dc.w	Dynamic_SM_BS_1-Dynamic_Art_Idx        ; Offset_0x01E93A
		dc.w	SM_BS_1_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
		dc.w	Dynamic_SM_BS_2-Dynamic_Art_Idx        ; Offset_0x01E93A
		dc.w	SM_BS_2_Animate-Dynamic_Art_Idx        ; Offset_0x01F558
		dc.w	Dynamic_LRz_2_Boss-Dynamic_Art_Idx     ; Offset_0x01E93A
		dc.w	LRz_2_Boss_Animate-Dynamic_Art_Idx     ; Offset_0x01F558
		dc.w	Dynamic_HPz-Dynamic_Art_Idx            ; Offset_0x01E93A
		dc.w	HPz_Animate-Dynamic_Art_Idx            ; Offset_0x01F558
		dc.w	Dynamic_DEz_Final_Boss-Dynamic_Art_Idx ; Offset_0x01E93A
		dc.w	DEz_Final_Boss_Animate-Dynamic_Art_Idx ; Offset_0x01F558
		dc.w	Dynamic_HPz_Portal-Dynamic_Art_Idx     ; Offset_0x01E93A
		dc.w	HPz_Portal_Animate-Dynamic_Art_Idx     ; Offset_0x01F558
;-------------------------------------------------------------------------------
Dynamic_FBz_1:                                                 ; Offset_0x01E93A
Dynamic_FBz_2:                                                 ; Offset_0x01E93A
Dynamic_MVz_1:                                                 ; Offset_0x01E93A
Dynamic_MVz_2:                                                 ; Offset_0x01E93A
Dynamic_Sz_1:                                                  ; Offset_0x01E93A
Dynamic_Sz_2:                                                  ; Offset_0x01E93A
Dynamic_LRz_2:                                                 ; Offset_0x01E93A
Dynamic_SSz_1:                                                 ; Offset_0x01E93A
Dynamic_SSz_2:                                                 ; Offset_0x01E93A
Dynamic_DEz_1:                                                 ; Offset_0x01E93A
Dynamic_DEz_2:                                                 ; Offset_0x01E93A
Dynamic_TDz_1:                                                 ; Offset_0x01E93A
Dynamic_TDz_2:                                                 ; Offset_0x01E93A
Dynamic_End_Seq_1:                                             ; Offset_0x01E93A
Dynamic_End_Seq_2:                                             ; Offset_0x01E93A
Dynamic_CGz_1:                                                 ; Offset_0x01E93A
Dynamic_CGz_2:                                                 ; Offset_0x01E93A
Dynamic_EMz_1:                                                 ; Offset_0x01E93A
Dynamic_EMz_2:                                                 ; Offset_0x01E93A
Dynamic_GM_BS_1:                                               ; Offset_0x01E93A
Dynamic_GM_BS_2:                                               ; Offset_0x01E93A
Dynamic_GS_BS_1:                                               ; Offset_0x01E93A
Dynamic_GS_BS_2:                                               ; Offset_0x01E93A
Dynamic_SM_BS_1:                                               ; Offset_0x01E93A
Dynamic_SM_BS_2:                                               ; Offset_0x01E93A
Dynamic_LRz_2_Boss:                                            ; Offset_0x01E93A
Dynamic_HPz:                                                   ; Offset_0x01E93A
Dynamic_DEz_Final_Boss:                                        ; Offset_0x01E93A
Dynamic_HPz_Portal:                                            ; Offset_0x01E93A
		rts
;-------------------------------------------------------------------------------
Dynamic_AIz_1:                                                 ; Offset_0x01E93C
		tst.b	(Boss_Flag).w                                ; $FFFFF7AA
		bne.s	Exit_Dynamic_AIz_1                     ; Offset_0x01E94A
		tst.b	(Dynamic_Resize_Routine).w                   ; $FFFFEE33
		bne.w	Dynamic_Normal                         ; Offset_0x01F2DE
Exit_Dynamic_AIz_1:                                            ; Offset_0x01E94A
		rts
;-------------------------------------------------------------------------------
Dynamic_AIz_2:                                                 ; Offset_0x01E94C
		tst.b	(Boss_Flag).w                                ; $FFFFF7AA
		bne.s	Exit_Dynamic_AIz_2                     ; Offset_0x01E980
		cmpi.w	#$01C0,(Camera_X).w                         ; $FFFFEE78
		bcc.w	Dynamic_Normal                         ; Offset_0x01F2DE
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		addq.w	#$02,a2
		moveq	#0,d6
		bsr.w	Offset_0x01F2E4
		clr.l	(A3)
		clr.l	(A3)
		move.l	#Art_Angel_Island_Leaves,d1           ; Offset_0x089400
		move.w	#$1940,d2
		move.w	#$0230,d3
		jmp	(QueueDMATransfer).l                        ; Offset_0x0012FC
Exit_Dynamic_AIz_2:                                            ; Offset_0x01E980
		rts
;-------------------------------------------------------------------------------
Dynamic_Hz_1:                                                  ; Offset_0x01E982
		lea	(Animate_Counters+$02).w,a3                 ; $FFFFF7F2
Dynamic_Hz_1_A3:                                               ; Offset_0x01E986
		moveq	#0,d1
		move.w	(Background_Events+$10).w,d1                ; $FFFFEEE2
		cmp.w	(A3),d1
		beq.w	Offset_0x01EAA8
		move.w	D1,(A3)
		tst.w	D1
		beq.w	Offset_0x01EAAC
		bpl.w	Offset_0x01EA26
		addi.w	#$0080,d1
		bcc.w	 Offset_0x01EAA8
		lsl.w	#$05,d1
		andi.w	#$FFC0,d1
		lea	(RAM_Start+$7C00),a4                   ; $FFFF7C00
		lea	(Water_Surface_Scroll_Data),a5        ; Offset_0x1C8000
		adda.w	D1,a5
		move.w	#$003F,d1
Offset_0x01E9BE:
		moveq	#0,d0
		move.b	(A5)+,d0
		add.w	D0,d0
		add.w	D0,d0
		add.w	D0,d0
		lea	(Art_Hydrocity_Water_Surface),a0      ; Offset_0x08A5E0
		adda.w	D0,a0
		move.l	(A0),(A4)
		lea	$0200(A0),a0
		lea	$0200(A4),a4
		move.l	(A0),(A4)
		lea	-$1FC(A4),a4
		addq.w	#$04,d0
		lea	(Art_Hydrocity_Water_Surface),a0      ; Offset_0x08A5E0
		adda.w	D0,a0
		move.l	(A0),(A4)
		lea	$0200(A0),a0
		lea	$0200(A4),a4
		move.l	(A0),(A4)
		lea	-$1FC(A4),a4
		dbf	D1, Offset_0x01E9BE
		move.l	#RAM_Start+$7C00,d1                    ; $FFFF7C00
		move.w	#$5100,d2
		move.w	#$0200,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		tst.w	$0002(A3)
		bmi.s	Offset_0x01EA22
		move.w	#$FFFF, $0002(A3)
		bsr.w	Offset_0x01EAC8
Offset_0x01EA22:
		bra.w	Offset_0x01EAA8
Offset_0x01EA26:
		neg.w   D1
		addi.w	#$0080,d1
		bcc.s	Offset_0x01EAA8
		lsl.w	#$05,d1
		andi.w	#$FFC0,d1
		lea	(RAM_Start+$7C00),a4                   ; $FFFF7C00
		lea	(Water_Surface_Scroll_Data),a5        ; Offset_0x1C8000
		adda.w	D1,a5
		move.w	#$003F,d1
Offset_0x01EA46:
		moveq	#0,d0
		move.b	(A5)+,d0
		add.w	D0,d0
		add.w	D0,d0
		add.w	D0,d0
		lea	(Art_Hydrocity_Water_Surface_2),a0    ; Offset_0x08ADE0
		adda.w	D0,a0
		move.l	(A0),(A4)
		lea	$0200(A0),a0
		lea	$0200(A4),a4
		move.l	(A0),(A4)
		lea	-$1FC(A4),a4
		addq.w	#$04,d0
		lea	(Art_Hydrocity_Water_Surface_2),a0    ; Offset_0x08ADE0
		adda.w	D0,a0
		move.l	(A0),(A4)
		lea	$0200(A0),a0
		lea	$0200(A4),a4
		move.l	(A0),(A4)
		lea	-$1FC(A4),a4
		dbf	D1, Offset_0x01EA46
		move.l	#(RAM_Start+$7C00),d1                  ; $FFFF7C00
		move.w	#$4D00,d2
		move.w	#$0200,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		tst.w	$0002(A3)
		beq.s	Offset_0x01EAA8
		move.w	#$0000, $0002(A3)
		bsr.s	Offset_0x01EAB4
Offset_0x01EAA8:
		bra.w	Dynamic_Normal                         ; Offset_0x01F2DE
Offset_0x01EAAC:
		move.w	#$0001, $0002(A3)
		bsr.s	Offset_0x01EAC8
Offset_0x01EAB4:
		move.l	#Art_Hydrocity_Background,d1          ; Offset_0x08A9E0
		move.w	#$5100,d2
		move.w	#$0200,d3
		jmp	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EAC8:
		move.l	#Art_Hydrocity_Background_2,d1        ; Offset_0x08B1E0
		move.w	#$4D00,d2
		move.w	#$0200,d3
		jmp	(QueueDMATransfer).l                        ; Offset_0x0012FC
;-------------------------------------------------------------------------------
Offset_0x01EADC:
		lea	(MGz_1_Animate),a2                    ; Offset_0x01F408
		lea	(Animate_Counters+$02).w,a3                 ; $FFFFF7F2
		move.w	(Background_Events+$10).w,d1                ; $FFFFEEE2
		beq.s	Offset_0x01EAAC
		bpl.s	Offset_0x01EAF4
		bsr.s	Offset_0x01EAC8
		bra.w	Dynamic_Hz_1_A3                        ; Offset_0x01E986
Offset_0x01EAF4:
		bsr.s	Offset_0x01EAB4
		bra.w	Dynamic_Hz_1_A3                        ; Offset_0x01E986
;-------------------------------------------------------------------------------
Dynamic_Hz_2:                                                  ; Offset_0x01EAFA
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		moveq	#0,d1
		move.w	(Background_Events+$10).w,d1                ; $FFFFEEE2
		andi.w	#$001F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01EB56
		move.b	D1, $0001(A3)
		move.w	D1,d2
		andi.w	#$0007,d1
		lsl.w	#$07,d1
		move.l	D1,d5
		andi.w	#$0018,d2
		move.w	D2,d0
		lsl.w	#$02,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01EB5A(pc,d0.w),a4
		lea	(Art_Hydrocity_Background_3),a0       ; Offset_0x08C060
		move.w	#$5900,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01EB56
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EB56:
		addq.w	#$02,a3
		bra.s	Offset_0x01EB6A
;-------------------------------------------------------------------------------
Offset_0x01EB5A:
		dc.w	$0040, $0000, $0030, $0010, $0020, $0020, $0010, $0030
;-------------------------------------------------------------------------------
Offset_0x01EB6A:
		moveq	#0,d1
		move.w	(Background_Events+$12).w,d1                ; $FFFFEEE4
		andi.w	#$001F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01EBC2
		move.b	D1, $0001(A3)
		move.w	D1,d2
		andi.w	#$0007,d1
		lsl.w	#$08,d1
		move.l	D1,d5
		andi.w	#$0018,d2
		move.w	D2,d0
		lsl.w	#$03,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01EBC6(pc,d0.w),a4
		lea	(Art_Hydrocity_Background_4),a0       ; Offset_0x08C460
		move.w	#$5980,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01EBC2
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EBC2:
		addq.w	#$02,a3
		bra.s	Offset_0x01EBD6
;-------------------------------------------------------------------------------
Offset_0x01EBC6:
		dc.w	$0080, $0000, $0060, $0020, $0040, $0040, $0020, $0060
;-------------------------------------------------------------------------------
Offset_0x01EBD6:
		moveq	#0,d1
		move.w	(Background_Events+$14).w,d1                ; $FFFFEEE6
		andi.w	#$001F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01EC2E
		move.b	D1, $0001(A3)
		move.w	D1,d2
		andi.w	#$0007,d1
		ror.w	#$07,d1
		move.l	D1,d5
		andi.w	#$0018,d2
		move.w	D2,d0
		lsl.w	#$04,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01EC32(pc,d0.w),a4
		lea	(Art_Hydrocity_Background_5),a0       ; Offset_0x08CC60
		move.w	#$5A80,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01EC2E
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EC2E:
		addq.w	#$02,a3
		bra.s	Offset_0x01EC42
;-------------------------------------------------------------------------------
Offset_0x01EC32:
		dc.w	$0100, $0000, $00C0, $0040, $0080, $0080, $0040, $00C0
;-------------------------------------------------------------------------------
Offset_0x01EC42:
		moveq	#0,d1
		move.w	(Background_Events+$14).w,d1                ; $FFFFEEE6
		andi.w	#$003F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01ECA8
		move.b	D1, $0001(A3)
		neg.w   D1
		move.w	D1,d2
		andi.w	#$0007,d1
		ror.w	#$07,d1
		move.w	D1,d0
		add.w	D0,d0
		add.w	D0,d1
		move.l	D1,d5
		not.w   D2
		andi.w	#$0038,d2
		move.w	D2,d0
		lsl.w	#$03,d2
		add.w	D2,d1
		add.w	D2,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01ECAE(pc,d0.w),a4
		lea	(Art_Hydrocity_Background_6),a0       ; Offset_0x08DC60
		move.w	#$5C80,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01ECA8
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01ECA8:
		addq.w	#$02,a3
		bra.w	Dynamic_Normal_A3                      ; Offset_0x01F2E2
;-------------------------------------------------------------------------------
Offset_0x01ECAE:
		dc.w	$0300, $0000, $02A0, $0060, $0240, $00C0, $01E0, $0120
		dc.w	$0180, $0180, $0120, $01E0, $00C0, $0240, $0060, $02A0
;-------------------------------------------------------------------------------
Dynamic_MGz_1:                                                 ; Offset_0x01ECCE
Dynamic_MGz_2:                                                 ; Offset_0x01ECCE
		tst.b	(Boss_Flag).w                                ; $FFFFF7AA
		beq.w	Dynamic_Normal                         ; Offset_0x01F2DE
		rts
;-------------------------------------------------------------------------------
Dynamic_CNz_1:                                                 ; Offset_0x01ECD8
Dynamic_CNz_2:                                                 ; Offset_0x01ECD8
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		moveq	#0,d1
		move.w	(Background_Events+$10).w,d1                ; $FFFFEEE2
		sub.w	(Screen_Pos_Buffer_X_2).w,d1                ; $FFFFEE8C
		andi.w	#$003F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01ED38
		move.b	D1, $0001(A3)
		move.w	D1,d2
		andi.w	#$0007,d1
		ror.w	#$06,d1
		move.l	D1,d5
		andi.w	#$0038,d2
		move.w	D2,d0
		lsl.w	#$04,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01ED3E(pc,d0.w),a4
		lea	(Art_Carnival_Night_Background),a0    ; Offset_0x099440
		move.w	#$6100,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01ED38
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01ED38:
		addq.w	#$02,a3
		bra.w	Dynamic_Normal_A3                      ; Offset_0x01F2E2
;-------------------------------------------------------------------------------
Offset_0x01ED3E:
		dc.w	$0200, $0000, $01C0, $0040, $0180, $0080, $0140, $00C0
		dc.w	$0100, $0100, $00C0, $0140, $0080, $0180, $0040, $01C0
;-------------------------------------------------------------------------------
Offset_0x01ED5E:
		dc.w	$0100, $0000, $00C0, $0040, $0080, $0080, $0040, $00C0
;-------------------------------------------------------------------------------
Dynamic_Iz_1:                                                  ; Offset_0x01ED6E
Dynamic_Iz_2:                                                  ; Offset_0x01ED6E
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		moveq	#0,d0
		move.w	(Background_Events+$10).w,d0                ; $FFFFEEE2
		sub.w	(Screen_Pos_Buffer_X_2).w,d0                ; $FFFFEE8C
		andi.w	#$001F,d0
		cmp.b	$0001(A3),d0
		beq.s	Offset_0x01EDD4
		move.b	D0, $0001(A3)
		move.l	D0,d1
		move.w	D0,d2
		andi.w	#$0007,d1
		ror.w	#$07,d1
		move.l	D1,d5
		andi.w	#$0018,d2
		move.w	D2,d0
		lsl.w	#$04,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01ED5E(pc,d0.w),a4
		lea	(Art_Iz_Background),a0                ; Offset_0x09BE40
		move.w	#$2160,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01EDD4
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EDD4:
		addq.w	#$02,a3
		tst.b	(Current_Act).w                                   ; $FFFFFE11
		bne.w	Offset_0x01EE68
		moveq	#0,d1
		move.w	(Background_Events+$12).w,d1                ; $FFFFEEE4
		andi.w	#$003F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01EE68
		move.b	D1, $0001(A3)
		add.w	D1,d1
		add.w	D1,d1
		addi.l	#Art_Iz_Background_2,d1               ; Offset_0x09CE40
		move.w	#$23E0,d2
		move.w	#$0100,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		moveq	#0,d1
		move.b	$0001(A3),d1
		andi.w	#$003E,d1
		add.w	D1,d1
		addi.l	#Art_Iz_Background_3,d1               ; Offset_0x09D040
		move.w	#$24E0,d2
		move.w	#$0080,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		moveq	#0,d1
		move.b	$0001(A3),d1
		andi.w	#$003C,d1
		addi.l	#Art_Iz_Background_4,d1               ; Offset_0x09D140
		move.w	#$2560,d2
		move.w	#$0040,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		moveq	#0,d1
		move.b	$0001(A3),d1
		andi.w	#$0038,d1
		lsr.w	#$01,d1
		addi.l	#Art_Iz_Background_5,d1               ; Offset_0x09D1C0
		move.w	#$25A0,d2
		move.w	#$0020,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EE68:
		addq.w	#$02,a3
		bra.w	Dynamic_Normal_A3                      ; Offset_0x01F2E2
;-------------------------------------------------------------------------------
		rts
;-------------------------------------------------------------------------------
Dynamic_LBz_1:                                                 ; Offset_0x01EE70
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		subq.b	#$01,(A3)
		bcc.s	Offset_0x01EEA4
		move.b	#$03,(A3)
		moveq	#0,d0
		move.b	$0001(A3),d0
		addq.b	#$01, $0001(A3)
		andi.b	#$0F, $0001(A3)
		ror.w	#$07,d0
		move.l	#Art_LBz_Foreground_Cylinder,d1       ; Offset_0x09FC00
		add.l	D0,d1
		move.w	#$6E80,d2
		move.w	#$0100,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EEA4:
		addq.w	#$02,a3
		moveq	#0,d0
		move.w	(Background_Events+$10).w,d0                ; $FFFFEEE2
		sub.w	(Screen_Pos_Buffer_X_2).w,d0                ; $FFFFEE8C
		andi.w	#$001F,d0
		cmp.b	$0001(A3),d0
		beq.s	Offset_0x01EF2C
		move.b	D0, $0001(A3)
		moveq	#0,d1
		move.w	D0,d2
		andi.w	#$0007,d0
		move.l	D0,d6
		lsl.w	#$07,d0
		move.w	D0,d1
		lsl.w	#$02,d0
		add.w	D0,d1
		move.l	D1,d5
		andi.w	#$0018,d2
		move.w	D2,d0
		lsl.w	#$02,d2
		add.w	D2,d1
		lsl.w	#$02,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01EF50(pc,d0.w),a4
		lea	(Art_LBz_Background_Mountains),a0     ; Offset_0x09DB00
		move.w	#$6AE0,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01EF14
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EF14:
		move.l	D6,d1
		lsl.w	#$05,d1
		lea	(Art_LBz_Ocean),a0                    ; Offset_0x09EF00
		add.l	A0,d1
		move.w	D4,d2
		move.w	#$0010,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EF2C:
		addq.w	#$02,a3
		tst.w	(A3)+
		bne.s	Offset_0x01EF3E
		cmpi.b	#$01, $0001(A3)
		beq.s	Offset_0x01EF42
		move.w	#$0000,(A3)
Offset_0x01EF3E:
		bsr.w	Dynamic_Normal_A3                      ; Offset_0x01F2E2
Offset_0x01EF42:
		lea	(Sprite_Table_Buffer-$04).w,a3              ; $FFFFF7FC
		lea	(LBz_1_Animate_2).l,a2                  ; Offset_0x01F4CC
		bra.w	Dynamic_Normal_A3                      ; Offset_0x01F2E2
;-------------------------------------------------------------------------------
Offset_0x01EF50:
		dc.w	$0140, $0000, $00F0, $0050, $00A0, $00A0, $0050, $00F0
;-------------------------------------------------------------------------------
Dynamic_LBz_2:                                                 ; Offset_0x01EF60
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		subq.b	#$01,(A3)
		bcc.s	Offset_0x01EF94
		move.b	#$03,(A3)
		moveq	#0,d0
		move.b	$0001(A3),d0
		addq.b	#$01, $0001(A3)
		andi.b	#$0F, $0001(A3)
		ror.w	#$07,d0
		move.l	#Art_LBz_Foreground_Cylinder,d1       ; Offset_0x09FC00
		add.l	D0,d1
		move.w	#$55E0,d2
		move.w	#$0100,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EF94:
		addq.w	#$02,a3
		moveq	#0,d1
		move.w	(Background_Events+$12).w,d1                ; $FFFFEEE4
		sub.w	(Screen_Pos_Buffer_X_2).w,d1                ; $FFFFEE8C
		andi.w	#$000F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01EFC4
		move.b	D1, $0001(A3)
		lsl.w	#$06,d1
		addi.l	#Art_LBz_Background_Bricks,d1         ; Offset_0x09F000
		move.w	#$5D00,d2
		move.w	#$0020,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01EFC4:
		bsr.s	Offset_0x01EFCC
		addq.w	#$02,a3
		bra.w	Dynamic_Normal_A3                      ; Offset_0x01F2E2
Offset_0x01EFCC:
		addq.w	#$02,a3
		moveq	#0,d1
		move.w	(Background_Events+$10).w,d1                ; $FFFFEEE2
		cmp.w	(A3),d1
		beq.w	Offset_0x01F0B0
		move.w	D1,(A3)
		tst.w	D1
		beq.w	Offset_0x01F0B2
		bpl.w	Offset_0x01F04C
		addi.w	#$0040,d1
		bcc.w	 Offset_0x01F0B0
		lsl.w	#$06,d1
		lea	(RAM_Start+$7E00),a4                   ; $FFFF7E00
		lea	(Water_Surface_Scroll_Data),a5        ; Offset_0x1C8000
		adda.w	D1,a5
		move.w	#$003F,d1
Offset_0x01F002:
		moveq	#0,d0
		move.b	(A5)+,d0
		add.w	D0,d0
		add.w	D0,d0
		lea	(Art_LBz_Water_Surface),a0            ; Offset_0x09F400
		adda.w	D0,a0
		move.l	(A0),(A4)
		lea	$0100(A0),a0
		lea	$0100(A4),a4
		move.l	(A0),(A4)
		lea	-$FC(A4),a4
		dbf	D1, Offset_0x01F002
		move.l	#(RAM_Start+$7E00),d1                  ; $FFFF7E00
		move.w	#$5900,d2
		move.w	#$0100,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		tst.w	$0002(A3)
		bmi.s	Offset_0x01F04A
		move.w	#$FFFF, $0002(A3)
		bsr.w	Offset_0x01F0CE
Offset_0x01F04A:
		rts
Offset_0x01F04C:
		neg.w   D1
		addi.w	#$0040,d1
		bcc.s	Offset_0x01F0B0
		lsl.w	#$06,d1
		lea	(RAM_Start+$7E00),a4                   ; $FFFF7E00
		lea	(Water_Surface_Scroll_Data),a5        ; Offset_0x1C8000
		adda.w	D1,a5
		move.w	#$003F,d1
Offset_0x01F068:
		moveq	#0,d0
		move.b	(A5)+,d0
		add.w	D0,d0
		add.w	D0,d0
		lea	(Art_LBz_Water_Surface_Above),a0      ; Offset_0x09F800
		adda.w	D0,a0
		move.l	(A0),(A4)
		lea	$0100(A0),a0
		lea	$0100(A4),a4
		move.l	(A0),(A4)
		lea	-$FC(A4),a4
		dbf	D1, Offset_0x01F068
		move.l	#(RAM_Start+$7E00),d1                  ; $FFFF7E00
		move.w	#$5B00,d2
		move.w	#$0100,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		tst.w	$0002(A3)
		beq.s	Offset_0x01F0AE
		move.w	#$0000, $0002(A3)
		bsr.s	Offset_0x01F0BA
Offset_0x01F0AE:
		rts
Offset_0x01F0B0:
		rts
Offset_0x01F0B2:
		move.w	#$0001, $0002(A3)
		bsr.s	Offset_0x01F0CE
Offset_0x01F0BA:
		move.l	#Art_LBz_Background_Above_Water,d1    ; Offset_0x09F600
		move.w	#$5900,d2
		move.w	#$0100,d3
		jmp	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01F0CE:
		move.l	#Art_LBz_Background_Under_Water,d1    ; Offset_0x09FA00
		move.w	#$5B00,d2
		move.w	#$0100,d3
		jmp	(QueueDMATransfer).l                        ; Offset_0x0012FC
;-------------------------------------------------------------------------------
Offset_0x01F0E2:
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		move.w	(Background_Events+$10).w,d1                ; $FFFFEEE2
		beq.s	Offset_0x01F0B2
		bpl.s	Offset_0x01F0F4
		bsr.s	Offset_0x01F0CE
		bra.w	Offset_0x01EFCC
Offset_0x01F0F4:
		bsr.s	Offset_0x01F0BA
		bra.w	Offset_0x01EFCC
;-------------------------------------------------------------------------------
Dynamic_LRz_1:                                                 ; Offset_0x01F0FA
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		moveq	#0,d0
		move.w	(Background_Events+$12).w,d0                ; $FFFFEEE4
		sub.w	(Screen_Pos_Buffer_X_2).w,d0                ; $FFFFEE8C
		divu.w	#$0030,d0
		swap	D0
		cmp.b	$0001(A3),d0
		beq.s	Offset_0x01F168
		move.b	D0, $0001(A3)
		moveq	#0,d1
		move.w	D0,d2
		andi.w	#$0007,d0
		lsl.w	#$07,d0
		move.w	D0,d1
		lsl.w	#$03,d0
		add.w	D0,d1
		move.l	D1,d5
		andi.w	#$0038,d2
		move.w	D2,d0
		lsl.w	#$03,d2
		add.w	D2,d1
		add.w	D2,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01F16E(pc,d0.w),a4
		lea	(Art_LRz_Background),a0               ; Offset_0x0A2180
		move.w	#$6020,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01F168
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01F168:
		addq.w	#$02,a3
		bra.w	Offset_0x01F186
;-------------------------------------------------------------------------------
Offset_0x01F16E:
		dc.w	$0240, $0000, $01E0, $0060, $0180, $00C0, $0120, $0120
		dc.w	$00C0, $0180, $0060, $01E0
;-------------------------------------------------------------------------------
Offset_0x01F186:
		moveq	#0,d0
		move.w	(Background_Events+$10).w,d0                ; $FFFFEEE2
		sub.w	(Screen_Pos_Buffer_X_2).w,d0                ; $FFFFEE8C
		andi.w	#$001F,d0
		cmp.b	$0001(A3),d0
		beq.s	Offset_0x01F1E6
		move.b	D0, $0001(A3)
		moveq	#0,d1
		move.w	D0,d2
		andi.w	#$0007,d0
		lsl.w	#$08,d0
		move.w	D0,d1
		move.l	D1,d5
		andi.w	#$0018,d2
		move.w	D2,d0
		lsl.w	#$03,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01F1E8(pc,d0.w),a4
		lea	(Art_LRz_Background_Lava),a0          ; Offset_0x0A4580
		move.w	#$64A0,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01F1E6
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01F1E6:
		rts
;-------------------------------------------------------------------------------
Offset_0x01F1E8:
		dc.w	$0080, $0000, $0060, $0020, $0040, $0040, $0020, $0060
;-------------------------------------------------------------------------------
Dynamic_DPz_1:                                                 ; Offset_0x01F1F8
Dynamic_DPz_2:                                                 ; Offset_0x01F1F8
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
		moveq	#0,d1
		move.w	(Background_Events+$10).w,d1                ; $FFFFEEE2
		sub.w	(Screen_Pos_Buffer_X_2).w,d1                ; $FFFFEE8C
		andi.w	#$003F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01F258
		move.b	D1, $0001(A3)
		move.w	D1,d2
		andi.w	#$0007,d1
		ror.w	#$06,d1
		move.l	D1,d5
		andi.w	#$0038,d2
		move.w	D2,d0
		lsl.w	#$04,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01F25C(pc,d0.w),a4
		lea	(Art_DPz_Background_Sand_Dunes),a0    ; Offset_0x0A6640
		move.w	#$2A60,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01F258
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01F258:
		addq.w	#$02,a3
		bra.s	Offset_0x01F27C
;-------------------------------------------------------------------------------
Offset_0x01F25C:
		dc.w	$0200, $0000, $01C0, $0040, $0180, $0080, $0140, $00C0
		dc.w	$0100, $0100, $00C0, $0140, $0080, $0180, $0040, $01C0
;-------------------------------------------------------------------------------
Offset_0x01F27C:
		moveq	#0,d1
		move.w	(Background_Events+$12).w,d1                ; $FFFFEEE4
		sub.w	(Screen_Pos_Buffer_X_P2_2).w,d1             ; $FFFFEE70
		andi.w	#$003F,d1
		cmp.b	$0001(A3),d1
		beq.s	Offset_0x01F2D8
		move.b	D1, $0001(A3)
		move.w	D1,d2
		andi.w	#$0007,d1
		ror.w	#$06,d1
		move.l	D1,d5
		andi.w	#$0038,d2
		move.w	D2,d0
		lsl.w	#$04,d2
		add.w	D2,d1
		lsr.w	#$01,d0
		lea	Offset_0x01F25C(pc,d0.w),a4
		lea	(Art_DPz_Background_Sand_Dunes),a0    ; Offset_0x0A6640
		move.w	#$2E60,d4
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		add.w	D3,d4
		add.w	D3,d4
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
		move.l	D5,d1
		add.l	A0,d1
		move.w	D4,d2
		move.w	(A4)+,d3
		beq.s	Offset_0x01F2D8
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01F2D8:
		addq.w	#$02,a3
		bra.w	Dynamic_Normal_A3                      ; Offset_0x01F2E2
;-------------------------------------------------------------------------------
Dynamic_ALz_1:                                                 ; Offset_0x01F2DE
Dynamic_ALz_2:                                                 ; Offset_0x01F2DE
Dynamic_BPz_1:                                                 ; Offset_0x01F2DE
Dynamic_BPz_2:                                                 ; Offset_0x01F2DE
;-------------------------------------------------------------------------------
Dynamic_Normal:                                                ; Offset_0x01F2DE
		lea	(Animate_Counters).w,a3                     ; $FFFFF7F0
Dynamic_Normal_A3:                                             ; Offset_0x01F2E2
		move.w	(A2)+,d6
Offset_0x01F2E4:
		subq.b	#$01,(A3)
		bcc.s	Offset_0x01F32A
		moveq	#0,d0
		move.b	$0001(A3),d0
		cmp.b	$0006(A2),d0
		bcs.s	Offset_0x01F2FA
		moveq	#0,d0
		move.b	D0, $0001(A3)
Offset_0x01F2FA:
		addq.b	#$01, $0001(A3)
		move.b	(A2),(A3)
		bpl.s	Offset_0x01F308
		add.w	D0,d0
		move.b	$09(A2,d0),(A3)
Offset_0x01F308:
		move.b	$08(A2,d0),d0
		lsl.w	#$05,d0
		move.w	$0004(A2),d2
		move.l	(A2),d1
		andi.l	#$00FFFFFF,d1
		add.l	D0,d1
		moveq	#0,d3
		move.b	$0007(A2),d3
		lsl.w	#$04,d3
		jsr	(QueueDMATransfer).l                        ; Offset_0x0012FC
Offset_0x01F32A:
		move.b	$0006(A2),d0
		tst.b	(A2)
		bpl.s	Offset_0x01F334
		add.b	D0,d0
Offset_0x01F334:
		addq.b	#$01,d0
		andi.w	#$00FE,d0
		lea	$08(A2,d0),a2
		addq.w	#$02,a3
		dbf	D6, Offset_0x01F2E4
		rts
;-------------------------------------------------------------------------------
; Script de anima��o das sprites para a Angel Island
; ->>>
;-------------------------------------------------------------------------------
AIz_1_Animate:                                                 ; Offset_0x01F346
		dc.w	$0002                               ; Total de Anima��es
		dc.l	($FF<<$18)|Art_Angel_Island_Stalk      ; Offset_0x0864C0
		dc.w	$5CC0                               ; VRAM
		dc.b	$09, $0C                            ; Quadros / Tiles
		dc.b	$3C, $4F, $30, $05, $18, $05        ; Quadro / Tempo
		dc.b	$0C, $05, $00, $4F, $0C, $03        ; Quadro / Tempo
		dc.b	$18, $03, $24, $01, $30, $01        ; Quadro / Tempo
		dc.l	($FF<<$18)|Art_Angel_Island_Stalk      ; Offset_0x0864C0
		dc.w	$5E40                               ; VRAM
		dc.b	$08, $0C                            ; Quadros / Tiles
		dc.b	$18, $05, $24, $05, $30, $05        ; Quadro / Tempo
		dc.b	$3C, $27, $00, $05, $0C, $05        ; Quadro / Tempo
		dc.b	$18, $05, $24, $05                  ; Quadro / Tempo
		dc.l	($FF<<$18)|Art_Angel_Island_Stalk_with_Fruits ; Offset_0x086DC0
		dc.w	$5FC0                               ; VRAM
		dc.b	$08, $06                            ; Quadros / Tiles
		dc.b	$00, $07, $06, $03, $0C, $03        ; Quadro / Tempo
		dc.b	$12, $03, $18, $07, $12, $03        ; Quadro / Tempo
		dc.b	$0C, $03, $06, $03                  ; Quadro / Tempo
;-------------------------------------------------------------------------------
AIz_2_Animate:                                                 ; Offset_0x01F392
		dc.w	$0004                               ; Total de Anima��es
		dc.l	($03<<$18)|Art_Angel_Island_Leaves_Burning ; Offset_0x087A80
		dc.w	$1660                               ; VRAM
		dc.b	$04, $17                            ; Quadros / Tiles
		dc.b	$00, $17, $2E, $45                  ; Quadro / Tempo
		dc.l	($FF<<$18)|Art_Angel_Island_Stalk_2    ; Offset_0x087180
		dc.w	$1940                               ; VRAM
		dc.b	$09, $0C                            ; Quadros / Tiles
		dc.b	$3C, $4F, $30, $05, $18, $05        ; Quadro / Tempo
		dc.b	$0C, $05, $00, $4F, $0C, $03        ; Quadro / Tempo
		dc.b	$18, $03, $24, $01, $30, $01
		dc.l	($FF<<$18)|Art_Angel_Island_Stalk_2    ; Offset_0x087180
		dc.w	$1AC0                               ; VRAM
		dc.b	$08, $0C                            ; Quadros / Tiles
		dc.b	$18, $05, $24, $05, $30, $05        ; Quadro / Tempo
		dc.b	$3C, $27, $00, $05, $0C, $05        ; Quadro / Tempo
		dc.b	$18, $05, $24, $05                  ; Quadro / Tempo
		dc.l	($03<<$18)|Art_Angel_Island_Leaves_Burning_Background ; Offset_0x089200
		dc.w	$1C40                               ; VRAM
		dc.b	$04, $04                            ; Quadros / Tiles
		dc.b	$00, $04, $08, $0C                  ; Quadro / Tempo
		dc.l	($03<<$18)|Art_Angel_Island_Burning_Background ; Offset_0x088600
		dc.w	$1CC0                               ; VRAM
		dc.b	$04, $18                            ; Quadros / Tiles
		dc.b	$00, $18, $30, $48                  ; Quadro / Tempo
;-------------------------------------------------------------------------------
; Script de anima��o das sprites para a Angel Island
; <<<-
;-------------------------------------------------------------------------------
Hz_1_Animate:                                                  ; Offset_0x01F3EA
		dc.w	$0000                               ; Total de Anima��es
		dc.l	($FF<<$18)|Art_Hydrocity_Conveyor_Belt ; Offset_0x089860
		dc.w	$2640                               ; VRAM
		dc.b	$03, $24                            ; Quadros / Tiles
		dc.b	$00, $02, $24, $01, $48, $02        ; Quadro / Tempo
;-------------------------------------------------------------------------------
Hz_2_Animate:                                                  ; Offset_0x01F3FA
		dc.w	$0000                               ; Total de Anima��es
		dc.l	($03<<$18)|Art_Hydrocity_Waterfall     ; Offset_0x08B5E0
		dc.w	$4A80                               ; VRAM
		dc.b	$04, $15                            ; Quadros / Tiles
		dc.b	$00, $15, $2A, $3F                  ; Quadro / Tempo
;-------------------------------------------------------------------------------
MGz_1_Animate:                                                 ; Offset_0x01F408
MGz_2_Animate:                                                 ; Offset_0x01F408
		dc.w	$0001                               ; Total de Anima��es
		dc.l	($09<<$18)|Art_Marble_Garden_Mud       ; Offset_0x090C60
		dc.w	$44C0                               ; VRAM
		dc.b	$06, $30                            ; Quadros / Tiles
		dc.b	$00, $30, $60, $90, $C0, $F0        ; Quadro / Tempo
		dc.l	($FF<<$18)|Art_Marble_Garden_Fruits    ; Offset_0x093060
		dc.w	$4AC0                               ; VRAM
		dc.b	$04, $01                            ; Quadros / Tiles
		dc.b	$00, $07, $01, $0E, $02, $07        ; Quadro / Tempo
		dc.b	$01, $0E                            ; Quadro / Tempo
;-------------------------------------------------------------------------------
CNz_1_Animate:                                                 ; Offset_0x01F428
CNz_2_Animate:                                                 ; Offset_0x01F428
		dc.w	$0006                               ; Total de Anima��es
		dc.l	($03<<$18)|Art_Carnival_Night_Diagonal_Barber_Pole ; Offset_0x0930C0
		dc.w	$5640                               ; VRAM
		dc.b	$10, $09                            ; Quadros / Tiles
		dc.b	$00, $12, $24, $36, $48, $5A        ; Quadro / Tempo
		dc.b	$6C, $7E, $09, $1B, $2D, $3F        ; Quadro / Tempo
		dc.b	$51, $63, $75, $87                  ; Quadro / Tempo
		dc.l	($03<<$18)|Art_Carnival_Night_Diagonal_Barber_Pole ; Offset_0x0930C0
		dc.w	$5760                               ; VRAM
		dc.b	$10, $09                            ; Quadros / Tiles
		dc.b	$09, $1B, $2D, $3F, $51, $63        ; Quadro / Tempo
		dc.b	$75, $87, $00, $12, $24, $36        ; Quadro / Tempo
		dc.b	$48, $5A, $6C, $7E                  ; Quadro / Tempo
		dc.l	($03<<$18)|Art_Carnival_Night_Diagonal_Barber_Pole_2 ; Offset_0x0942C0
		dc.w	$5880                               ; VRAM
		dc.b	$10, $10                            ; Quadros / Tiles
		dc.b	$00, $10, $20, $30, $40, $50        ; Quadro / Tempo
		dc.b	$60, $70, $80, $90, $A0, $B0        ; Quadro / Tempo
		dc.b	$C0, $D0, $E0, $F0                  ; Quadro / Tempo
		dc.l	($03<<$18)|Art_Carnival_Night_Vacuum_Tubes ; Offset_0x0962C0
		dc.w	$5A80                               ; VRAM
		dc.b	$08, $20                            ; Quadros / Tiles
		dc.b	$00, $20, $40, $60, $80, $A0        ; Quadro / Tempo
		dc.b	$C0, $E0                            ; Quadro / Tempo
		dc.l	($03<<$18)|Art_Carnival_Night_Rotating_Mesh ; Offset_0x0982C0
		dc.w	$5E80                               ; VRAM
		dc.b	$08, $10                            ; Quadros / Tiles
		dc.b	$00, $10, $20, $30, $40, $50        ; Quadro / Tempo
		dc.b	$60, $70                            ; Quadro / Tempo
		dc.l	($03<<$18)|Art_Carnival_Night_Fan_Lights ; Offset_0x0992C0
		dc.w	$6080                               ; VRAM
		dc.b	$06, $04                            ; Quadros / Tiles
		dc.b	$00, $04, $08, $00, $04, $08        ; Quadro / Tempo
		dc.l	($01<<$18)|Art_Carnival_Night_Wheel    ; Offset_0x09B440
		dc.w	$6500                               ; VRAM
		dc.b	$04, $14                            ; Quadros / Tiles
		dc.b	$00, $14, $28, $3C                  ; Quadro / Tempo
;-------------------------------------------------------------------------------
FBz_1_Animate:                                                 ; Offset_0x01F4AC
FBz_2_Animate:                                                 ; Offset_0x01F4AC
;-------------------------------------------------------------------------------
Iz_1_Animate:                                                  ; Offset_0x01F4AC
Iz_2_Animate:                                                  ; Offset_0x01F4AC
		dc.w	$0000                               ; Total de Anima��es
		dc.l	($03<<$18)|Art_Iz_Crystal              ; Offset_0x09D200
		dc.w	$2360                               ; VRAM
		dc.b	$08, $04                            ; Quadros / Tiles
		dc.b	$00, $04, $08, $0C, $10, $14        ; Quadro / Tempo
		dc.b	$18, $1C                            ; Quadro / Tempo
;-------------------------------------------------------------------------------
LBz_1_Animate:                                                 ; Offset_0x01F4BE
		dc.w	$0000                               ; Total de Anima��es
		dc.l	($02<<$18)|Art_LBz_Foreground_Buzzer   ; Offset_0x09D600
		dc.w	$6D80                               ; VRAM
		dc.b	$04, $08                            ; Quadros / Tiles
		dc.b	$00, $08, $10, $18                  ; Quadro / Tempo
;-------------------------------------------------------------------------------
LBz_1_Animate_2:                                               ; Offset_0x01F4CC
		dc.w	$0001                               ; Total de Anima��es
		dc.l	($07<<$18)|Art_LBz_Foreground_Lights   ; Offset_0x0A1C00
		dc.w	$7080                               ; VRAM
		dc.b	$04, $05                            ; Quadros / Tiles
		dc.b	$00, $05, $0A, $0F                  ; Quadro / Tempo
		dc.l	($07<<$18)|Art_LBz_Foreground_Pistons  ; Offset_0x0A1E80
		dc.w	$7120                               ; VRAM
		dc.b	$06, $04                            ; Quadros / Tiles
		dc.b	$00, $04, $08, $0C, $10, $14        ; Quadro / Tempo
;-------------------------------------------------------------------------------
LBz_2_Animate:                                                 ; Offset_0x01F4E8
		dc.w	$0001                               ; Total de Anima��es
		dc.l	($07<<$18)|Art_LBz_Foreground_Lights   ; Offset_0x0A1C00
		dc.w	$57E0                               ; VRAM
		dc.b	$04, $05                            ; Quadros / Tiles
		dc.b	$00, $05, $0A, $0F                  ; Quadro / Tempo
		dc.l	($07<<$18)|Art_LBz_Foreground_Pistons  ; Offset_0x0A1E80
		dc.w	$5880                               ; VRAM
		dc.b	$06, $04                            ; Quadros / Tiles
		dc.b	$00, $04, $08, $0C, $10, $14        ; Quadro / Tempo
;-------------------------------------------------------------------------------
MVz_1_Animate:                                                 ; Offset_0x01F504
MVz_2_Animate:                                                 ; Offset_0x01F504
Sz_1_Animate:                                                  ; Offset_0x01F504
Sz_2_Animate:                                                  ; Offset_0x01F504
LRz_1_Animate:                                                 ; Offset_0x01F504
LRz_2_Animate:                                                 ; Offset_0x01F504
SSz_1_Animate:                                                 ; Offset_0x01F504
SSz_2_Animate:                                                 ; Offset_0x01F504
DEz_1_Animate:                                                 ; Offset_0x01F504
DEz_2_Animate:                                                 ; Offset_0x01F504
TDz_1_Animate:                                                 ; Offset_0x01F504
TDz_2_Animate:                                                 ; Offset_0x01F504
End_Seq_1_Animate:                                             ; Offset_0x01F504
End_Seq_2_Animate:                                             ; Offset_0x01F504
ALz_1_Animate:                                                 ; Offset_0x01F504
ALz_2_Animate:                                                 ; Offset_0x01F504
		dc.w	$0000                               ; Total de Anima��es
		dc.l	($09<<$18)|Art_ALz_Quicksand           ; Offset_0x0A4D80
		dc.w	$4700                               ; VRAM
		dc.b	$03, $10                            ; Quadros / Tiles
		dc.b	$00, $10, $20, $00                  ; Quadro / Tempo
;-------------------------------------------------------------------------------
BPz_1_Animate:                                                 ; Offset_0x01F512
BPz_2_Animate:                                                 ; Offset_0x01F512
		dc.w	$0003                               ; Total de Anima��es
		dc.l	($07<<$18)|Art_BPz_Foreground_Flags    ; Offset_0x0A5380
		dc.w	$2300                               ; VRAM
		dc.b	$06, $07                            ; Quadros / Tiles
		dc.b	$00, $07, $0E, $15, $1C, $23        ; Quadro / Tempo
		dc.l	($05<<$18)|Art_BPz_Cylinder         ; Offset_0x0A58C0
		dc.w	$23E0                               ; VRAM
		dc.b	$0A, $08                            ; Quadros / Tiles
		dc.b	$00, $08, $10, $18, $20, $00        ; Quadro / Tempo
		dc.b	$08, $10, $18, $20                  ; Quadro / Tempo
		dc.l	($02<<$18)|Art_BPz_Background_People   ; Offset_0x0A5DC0
		dc.w	$24E0                               ; VRAM
		dc.b	$02, $03                            ; Quadros / Tiles
		dc.b	$00, $03                            ; Quadro / Tempo
		dc.l	($04<<$18)|Art_BPz_Background_Flags    ; Offset_0x0A5E80
		dc.w	$2540                               ; VRAM
		dc.b	$02, $01                            ; Quadros / Tiles
		dc.b	$00, $01                            ; Quadro / Tempo
;-------------------------------------------------------------------------------
DPz_1_Animate:                                                 ; Offset_0x01F548
DPz_2_Animate:                                                 ; Offset_0x01F548
		dc.w	$0000                               ; Total de Anima��es
		dc.l	($0B<<$18)|Art_DPz_Quicksand           ; Offset_0x0A5EC0
		dc.w	$28E0                               ; VRAM
		dc.b	$05, $0C                            ; Quadros / Tiles
		dc.b	$00, $0C, $18, $24, $30, $00        ; Quadro / Tempo
;-------------------------------------------------------------------------------
CGz_1_Animate:                                                 ; Offset_0x01F558
CGz_2_Animate:                                                 ; Offset_0x01F558
EMz_1_Animate:                                                 ; Offset_0x01F558
EMz_2_Animate:                                                 ; Offset_0x01F558
GM_BS_1_Animate:                                               ; Offset_0x01F558
GM_BS_2_Animate:                                               ; Offset_0x01F558
GS_BS_1_Animate:                                               ; Offset_0x01F558
GS_BS_2_Animate:                                               ; Offset_0x01F558
SM_BS_1_Animate:                                               ; Offset_0x01F558
SM_BS_2_Animate:                                               ; Offset_0x01F558
LRz_2_Boss_Animate:                                            ; Offset_0x01F558
HPz_Animate:                                                   ; Offset_0x01F558
DEz_Final_Boss_Animate:                                        ; Offset_0x01F558
HPz_Portal_Animate:                                            ; Offset_0x01F558
		rts
;===============================================================================
; Rotina para carregar os sprites dinamicamente para a VRAM
; <<<-     Ex: Flores na Emerald Hill, �leo na Oil Ocean, etc ....
;===============================================================================

;===============================================================================
; Rotina para inicializar os contadores das anima��es
; ->>>
;===============================================================================
Animate_Counters_Init:                                         ; Offset_0x01F55A
		cmpi.w	#Hz_Act_1,(Current_ZoneAndAct).w               ; $0100, $FFFFFE10
		bne.s	Offset_0x01F566
		bsr.w	Offset_0x01EADC
Offset_0x01F566:
		cmpi.w	#Hz_Act_2,(Current_ZoneAndAct).w               ; $0101, $FFFFFE10
		bne.s	Offset_0x01F57A
		move.b	#$20,(Animate_Counters+$01).w               ; $FFFFF7F1
		move.b	#$40,(Animate_Counters+$03).w               ; $FFFFF7F3
Offset_0x01F57A:
		cmpi.b	#CNz_Id,(Current_Zone).w                   ; $03, $FFFFFE10
		bne.s	Offset_0x01F5B2
		move.b	#$40,(Animate_Counters+$01).w               ; $FFFFF7F1
		move.b	#0,(Animate_Counters+$02).w               ; $FFFFF7F2
		move.b	#0,(Animate_Counters+$04).w               ; $FFFFF7F4
		move.b	#0,(Animate_Counters+$06).w               ; $FFFFF7F6
		move.b	#$02,(Animate_Counters+$08).w               ; $FFFFF7F8
		move.b	#$02,(Animate_Counters+$0A).w               ; $FFFFF7FA
		move.b	#$02,(Animate_Counters+$0C).w               ; $FFFFF7FC
		move.b	#$01,(Animate_Counters+$0E).w               ; $FFFFF7FE
Offset_0x01F5B2:
		cmpi.w	#LBz_Act_1,(Current_ZoneAndAct).w              ; $0600, $FFFFFE10
		bne.s	Offset_0x01F5C0
		move.b	#$20,(Animate_Counters+$03).w               ; $FFFFF7F3
Offset_0x01F5C0:
		cmpi.w	#LBz_Act_2,(Current_ZoneAndAct).w              ; $0601, $FFFFFE10
		bne.s	Offset_0x01F5D2
		bsr.w	Offset_0x01F0E2
		move.b	#$10,(Animate_Counters+$01).w               ; $FFFFF7F1
Offset_0x01F5D2:
		cmpi.w	#LRz_Act_1,(Current_ZoneAndAct).w              ; $0900, $FFFFFE10
		bne.s	Offset_0x01F5E6
		move.b	#$FF,(Animate_Counters+$01).w               ; $FFFFF7F1
		move.b	#$FF,(Animate_Counters+$03).w               ; $FFFFF7F3
Offset_0x01F5E6:
		cmpi.w	#DPz_Act_1,(Current_ZoneAndAct).w              ; $1000, $FFFFFE10
		bne.s	Offset_0x01F5FA
		move.b	#$40,(Animate_Counters+$01).w               ; $FFFFF7F1
		move.b	#$40,(Animate_Counters+$03).w               ; $FFFFF7F3
Offset_0x01F5FA:
		rts
;===============================================================================
; Rotina para inicializar os contadores das anima��es
; <<<-
;===============================================================================
Obj_0x1E_LBz_Spin_Launcher:                                    ; Offset_0x01F5FC
		include "data\objects\obj_0x1E.asm"
Obj_0x1F_LBz_Hook:                                             ; Offset_0x01F892
		include "data\objects\obj_0x1F.asm"
Obj_0x20_Smashing_Pillar_Spikes:                               ; Offset_0x01FDB6
		include "data\objects\obj_0x20.asm"
Obj_0x21_LBz_Gate_Laser:                                       ; Offset_0x01FF28
		include "data\objects\obj_0x21.asm"
Obj_0x22_LBz_Buzzer:                                           ; Offset_0x02005A
		include "data\objects\obj_0x22.asm"
Obj_0x23:                                                      ; Offset_0x02010E
		include "data\objects\obj_0x23.asm"
; Obj_0x24_Automatic_Tunnel:                                   ; Offset_0x0201C6
		include "data\objects\obj_0x24.asm"
Obj_0x10_LBz_Tube_Elevator:                                    ; Offset_0x020856
		include "data\objects\obj_0x10.asm"
; Obj_0x29_AIz_Disappearing_Platform:                          ; Offset_0x020EE0
		include "data\objects\obj_0x29.asm"
Obj_0x2A_Breakable_Floor:                                      ; Offset_0x0211D6
		include "data\objects\obj_0x2A.asm"
Obj_0x2B_AIz_Flipping_Bridge:                                  ; Offset_0x021B1C
		include "data\objects\obj_0x2B.asm"

;===============================================================================
; Objeto 0x2C - Ponte que desmorona na Angel Island
; ->>>
;===============================================================================
; Offset_0x021F0C:
Obj_0x2C_AIz_Collapsing_Bridge:
		move.b	Obj_Subtype(A0),d0					; $002C
		bmi	Offset_0x021FD8
		move.b	D0, Obj_Control_Var_06(A0)				; $0036
		addi.b	#$30,d0
		move.b	D0, Obj_Control_Var_05(A0)				; $0035
		move.b	#$08, Obj_Control_Var_07(A0)			; $0037
		move.l	#Collapsing_Bridge_Mappings, Obj_Map(A0) ; Offset_0x0222A2, $000C
		move.w	#$42F0, Obj_Art_VRAM(A0)				; $000A
		move.b	#$5A, Obj_Width(A0)					; $0007
		move.b	#$08, Obj_Height(A0)					 ; $0006
		move.b	#$04, Obj_Flags(A0)					; $0004
		move.w	#$0200, Obj_Priority(A0)				; $0008
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.w	Offset_0x021FCE
		move.l	#Offset_0x0220E4,(A1)
		move.l	#Collapsing_Bridge_Mappings, Obj_Map(A1) ; Offset_0x0222A2, $000C
		move.w	#$42F0, Obj_Art_VRAM(A1)				; $000A
		ori.b	 #$04, Obj_Flags(A1)					; $0004
		move.b	#$5A, Obj_Width(A1)					; $0007
		move.b	#$08, Obj_Height(A1)					 ; $0006
		move.w	#$0200, Obj_Priority(A1)				; $0008
		move.w	Obj_X(A0), Obj_X(A1)			 ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)			 ; $0014, $0014
		bset	#$06, Obj_Flags(A1)					; $0004
		move.w	#$0006, Obj_Sub_Y(A1)					; $0016
		move.w	Obj_Y(A0),d2					; $0014
		move.w	Obj_X(A0),d3					; $0010
		subi.w	#$004B,d3
		lea	Obj_Speed_X(A1),a2					; $0018
		move.w	Obj_Sub_Y(A1),d6				; $0016
		subq.w	#$01,d6
		move.w	#$0001, Obj_Flags(A2)					; $0004
Offset_0x021FB6:
		move.w	D3,(A2)+
		move.w	D2,(A2)+
		addq.w	#$02,a2
		addi.w	#$001E,d3
		dbra	D6, Offset_0x021FB6
		move.w	#$0002, -2(A2)
		move.w	A1, Obj_Control_Var_0C(A0)				; $003C
Offset_0x021FCE:
		move.l	#Offset_0x0220A0,(A0)
		bra.w	Offset_0x0220A0
Offset_0x021FD8:
		andi.b	#$7F,d0
		move.b	D0, Obj_Control_Var_06(A0)				; $0036
		addi.b	#$30,d0
		move.b	D0, Obj_Control_Var_05(A0)				; $0035
		move.b	#$08, Obj_Control_Var_07(A0)			; $0037
		move.l	#Collapsing_Bridge_Mappings_2, Obj_Map(A0) ; Offset_0x0222C4, $000C
		move.w	#$C2F0, Obj_Art_VRAM(A0)				; $000A
		move.b	#$60, Obj_Width(A0)					; $0007
		move.b	#$08, Obj_Height(A0)					 ; $0006
		move.b	#$04, Obj_Flags(A0)					; $0004
		move.w	#$0200, Obj_Priority(A0)				; $0008
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.w	Offset_0x022096
		move.l	#Offset_0x0220E4,(A1)
		move.l	#Collapsing_Bridge_Mappings_2, Obj_Map(A1) ; Offset_0x0222C4, $000C
		move.w	#$C2F0, Obj_Art_VRAM(A1)				; $000A
		ori.b	 #$04, Obj_Flags(A1)					; $0004
		move.b	#$60, Obj_Width(A1)					; $0007
		move.b	#$08, Obj_Height(A1)					 ; $0006
		move.w	#$0200, Obj_Priority(A1)				; $0008
		move.w	Obj_X(A0), Obj_X(A1)			 ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)			 ; $0014, $0014
		bset	#$06, Obj_Flags(A1)					; $0004
		move.w	#$0006, Obj_Sub_Y(A1)					; $0016
		move.w	Obj_Y(A0),d2					; $0014
		move.w	Obj_X(A0),d3					; $0010
		subi.w	#$0050,d3
		lea	Obj_Speed_X(A1),a2					; $0018
		move.w	Obj_Sub_Y(A1),d6				; $0016
		subq.w	#$01,d6
		move.w	#$0001, Obj_Flags(A2)					; $0004
Offset_0x02207E:
		move.w	D3,(A2)+
		move.w	D2,(A2)+
		addq.w	#$02,a2
		addi.w	#$0020,d3
		dbra	D6, Offset_0x02207E
		move.w	#$0002, -2(A2)
		move.w	A1, Obj_Control_Var_0C(A0)				; $003C
Offset_0x022096:
		move.l	#Offset_0x022112,(A0)
		bra.w	Offset_0x022112
Offset_0x0220A0:
		move.b	Obj_Status(A0),d0					; $002A
		andi.b	#$18,d0
		beq.s	 Offset_0x0220C8
		move.b	Obj_Control_Var_05(A0), Obj_Control_Var_04(A0) ; $0035, $0034
		move.b	Obj_Control_Var_06(A0),d2				; $0036
		move.b	Obj_Control_Var_07(A0),d3				; $0037
		move.l	#Offset_0x0221A0,(A0)
		move.l	#Offset_0x0220EA,d4
		bsr	Offset_0x02222E
Offset_0x0220C8:
		moveq	 #0,d1
		move.b	Obj_Width(A0),d1				; $0007
		moveq	 #0,d3
		move.b	Obj_Height(A0),d3					; $0006
		move.w	Obj_X(A0),d4					; $0010
		jsr	(Platform_Object)			 ; Offset_0x013AF6
		jmp	(MarkObjGone_3)				 ; Offset_0x011B3E
;-------------------------------------------------------------------------------
Offset_0x0220E4:
		jmp	(MarkObjGone)				; Offset_0x011AF2
;-------------------------------------------------------------------------------
Offset_0x0220EA:
		tst.b	 Obj_Control_Var_04(A0)				 ; $0034
		beq.s	 Offset_0x0220FA
		subq.b	#$01, Obj_Control_Var_04(A0)			; $0034
		jmp	(DisplaySprite)				 ; Offset_0x011148
Offset_0x0220FA:
		jsr	(ObjectFall)				 ; Offset_0x0110FE
		tst.b	 Obj_Flags(A0)					; $0004
		bpl.s	 Offset_0x02210C
		jmp	(DisplaySprite)				 ; Offset_0x011148
Offset_0x02210C:
		jmp	(DeleteObject)				; Offset_0x011138
Offset_0x022112:
		tst.b	 (Boss_Attack_Started).w			 ; $FFFFFAA2
		beq.s	 Offset_0x022136
		move.b	Obj_Control_Var_05(A0), Obj_Control_Var_04(A0) ; $0035, $0034
		move.b	Obj_Control_Var_06(A0),d2				; $0036
		move.b	Obj_Control_Var_07(A0),d3				; $0037
		move.l	#Offset_0x0221A0,(A0)
		move.l	#Offset_0x022152,d4
		bsr	Offset_0x02222E
Offset_0x022136:
		moveq	 #0,d1
		move.b	Obj_Width(A0),d1				; $0007
		moveq	 #0,d3
		move.b	Obj_Height(A0),d3					; $0006
		move.w	Obj_X(A0),d4					; $0010
		jsr	(Platform_Object)			 ; Offset_0x013AF6
		jmp	(MarkObjGone_3)				 ; Offset_0x011B3E
;-------------------------------------------------------------------------------
Offset_0x022152:
		tst.b	 Obj_Control_Var_04(A0)				 ; $0034
		beq.s	 Offset_0x02216A
		subq.b	#$01, Obj_Control_Var_04(A0)			; $0034
		bne.s	 Offset_0x022164
		move.b	#$03, Obj_Map_Id(A0)					 ; $0022
Offset_0x022164:
		jmp	(DisplaySprite)				 ; Offset_0x011148
Offset_0x02216A:
		subq.b	#$01, Obj_Ani_Time(A0)				 ; $0024
		bpl.s	 Offset_0x022188
		move.b	#$03, Obj_Ani_Time(A0)				 ; $0024
		addq.b	#$01, Obj_Map_Id(A0)					 ; $0022
		cmpi.b	#$08, Obj_Map_Id(A0)					 ; $0022
		bcs.s	 Offset_0x022188
		move.b	#$03, Obj_Map_Id(A0)					 ; $0022
Offset_0x022188:
		jsr	(ObjectFall)				 ; Offset_0x0110FE
		tst.b	 Obj_Flags(A0)					; $0004
		bpl.s	 Offset_0x02219A
		jmp	(DisplaySprite)				 ; Offset_0x011148
Offset_0x02219A:
		jmp	(DeleteObject)				; Offset_0x011138
;-------------------------------------------------------------------------------
Offset_0x0221A0:
		subq.b	#$01, Obj_Control_Var_04(A0)			; $0034
		bne.s	 Offset_0x0221AC
		move.l	#Offset_0x022684,(A0)
Offset_0x0221AC:
		move.b	Obj_Control_Var_04(A0),d3				; $0034
		moveq	 #0,d1
		move.b	Obj_Width(A0),d1				; $0007
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		moveq	 #$03,d6
		bsr.s	 Offset_0x0221CC
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
		moveq	 #$04,d6
		bsr.s	 Offset_0x0221CC
		jmp	(MarkObjGone_3)				 ; Offset_0x011B3E
Offset_0x0221CC:
		btst	D6, Obj_Status(A0)					; $002A
		beq.s	 Offset_0x02222C
		move.w	D1,d2
		add.w	 D2,d2
		btst	#$01, Obj_Status(A1)					 ; $002A
		bne.s	 Offset_0x022210
		move.w	Obj_X(A1),d0					; $0010
		sub.w	 Obj_X(A0),d0					; $0010
		add.w	 D1,d0
		bmi.s	 Offset_0x022210
		cmp.w	 D2,d0
		bcc.s	 Offset_0x022210
		btst	#0, Obj_Status(A0)					 ; $002A
		beq.s	 Offset_0x0221FA
		neg.w	 D0
		add.w	 D2,d0
Offset_0x0221FA:
		lsr.w	 #$05,d0
		add.w	 D0,d0
		add.w	 D0,d0
		add.w	 D0,d0
		add.b	 Obj_Control_Var_06(A0),d0				; $0036
		move.b	Obj_Control_Var_05(A0),d2				; $0035
		sub.b	 D0,d2
		cmp.b	 D2,d3
		bhi.s	 Offset_0x02222C
Offset_0x022210:
		bclr	D6, Obj_Status(A0)					; $002A
		bclr	#$03, Obj_Status(A1)					 ; $002A
		bclr	#$05, Obj_Status(A1)					 ; $002A
		bset	#$01, Obj_Status(A1)					 ; $002A
		move.b	#$01, Obj_Ani_Flag(A1)				 ; $0021
Offset_0x02222C:
		rts
Offset_0x02222E:
		move.w	Obj_Control_Var_0C(A0),a3				; $003C
		lea	$0018(A3),a2
		move.w	Obj_Sub_Y(A3),d6				; $0016
		subq.w	#$01,d6
		bclr	#$06, Obj_Flags(A3)					; $0004
		move.l	A3,a1
		bra.s	 Offset_0x02224E
;-------------------------------------------------------------------------------
Offset_0x022246:
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.s	 Offset_0x02228C
Offset_0x02224E:
		move.l	D4,(A1)
		move.l	Obj_Map(A3), Obj_Map(A1)			; $000C, $000C
		move.b	Obj_Flags(A3), Obj_Flags(A1)			; $0004, $0004
		move.w	Obj_Art_VRAM(A3), Obj_Art_VRAM(A1)		 ; $000A, $000A
		move.w	Obj_Priority(A3), Obj_Priority(A1)		 ; $0008, $0008
		move.b	Obj_Width(A3), Obj_Width(A1)			; $0007, $0007
		move.b	Obj_Height(A3), Obj_Height(A1)			; $0006, $0006
		move.w	(A2)+, Obj_X(A1)				 ; $0010
		move.w	(A2)+, Obj_Y(A1)				 ; $0014
		move.w	(A2)+,d0
		move.b	D0, Obj_Map_Id(A1)					; $0022
		move.b	D2, Obj_Control_Var_04(A1)				; $0034
		add.b	 D3,d2
		dbra	D6, Offset_0x022246
Offset_0x02228C:
		move.w	#$0000, Obj_Speed_X(A3)				; $0018
		move.w	#$0000, Obj_Speed_Y(A3)				; $001A
		move.w	#sfx_S2Smash,d0				; $00B9
		jmp	(PlaySound).l				 ; Offset_0x001176
;-------------------------------------------------------------------------------
; Offset_0x0222A2:
Collapsing_Bridge_Mappings:	include	"data/mappings/2C - AIZ Collapsing Bridge.asm"
; Offset_0x0222C4:
Collapsing_Bridge_Mappings_2:	include	"data/mappings/2C - AIZ Collapsing Bridge 2.asm"

Obj_0x32_AIz_Draw_Bridge:                                      ; Offset_0x02235C
		include "data\objects\obj_0x32.asm"

;===============================================================================
; Objeto 0x2D - Troncos que descem nas cachoeiras da Angel Island
; ->>>
;===============================================================================
Offset_0x02278C:
		dc.w	$0001, $0003, $0007, $000F, $001F, $003F, $007F, $00FF
		dc.w	$01FF, $03FF, $07FF, $0FFF, $1FFF, $3FFF, $7FFF, $FFFF
;-------------------------------------------------------------------------------
; Offset_0x0227AC:
Obj_0x2D_AIz_Falling_Log:
		cmpi.w	#$26B0, Obj_X(A0)				; $0010
		beq.s	Offset_0x0227BC
		cmpi.w	#$2700, Obj_X(A0)				; $0010
		bne.s	Offset_0x0227C8
Offset_0x0227BC:
		tst.b	(Level_Trigger_Array).w			 ; $FFFFF7E0
		beq.s	Offset_0x0227C8
		jmp	(DeleteObject)				; Offset_0x011138
Offset_0x0227C8:
		move.b	Obj_Subtype(A0),d0					; $002C
		move.b	D0,d1
		andi.w	#$000F,d0
		move.w	D0,d2
		add.w	D0,d0
		move.w	Offset_0x02278C(pc,d0.w), Obj_Control_Var_02(A0)	; $0032
		subq.w	#$03,d2
		bcc.s	Offset_0x0227E2
		moveq	#0,d2
Offset_0x0227E2:
		lsr.w	#$04,d1
		andi.w	#$000F,d1
		lsl.w	D2,d1
		move.w	D1, Obj_Control_Var_04(A0)				; $0034
		move.b	#$04, Obj_Flags(A0)					; $0004
		move.l	#Offset_0x0227FA,(A0)
Offset_0x0227FA:
		move.w	(Level_frame_counter).w,d0			; $FFFFFE04
		add.w	Obj_Control_Var_04(A0),d0				; $0034
		and.w	Obj_Control_Var_02(A0),d0				; $0032
		bne.w	Offset_0x0228C0
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.w	Offset_0x0228C0
		move.l	#Offset_0x0228C6,(A1)
		move.w	Obj_X(A0), Obj_X(A1)			 ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)			 ; $0014, $0014
		move.l	#AIz_2_Falling_Log_Mappings, Obj_Map(A1) ; Offset_0x02297E, $000C
		move.w	#$42F0, Obj_Art_VRAM(A1)				; $000A
		tst.b	(Current_Act).w					; $FFFFFE11
		bne.s	Offset_0x022848
		move.l	#AIz_Falling_Log_Mappings, Obj_Map(A1) ; Offset_0x02298E, $000C
		move.w	#$43CF, Obj_Art_VRAM(A1)				; $000A
Offset_0x022848:
		move.b	#$18, Obj_Width(A1)					; $0007
		move.b	#$08, Obj_Height(A1)					; $0006
		move.b	#$04, Obj_Flags(A1)					; $0004
		move.w	#$0280, Obj_Priority(A1)				; $0008
		move.l	A1,a2
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.w	Offset_0x0228C0
		move.l	#Offset_0x022952,(A1)
		move.w	Obj_X(A0), Obj_X(A1)			 ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)			 ; $0014, $0014
		move.l	#AIz_2_Falling_Log_Mappings_2, Obj_Map(A1) ; Offset_0x02299E, $000C
		move.w	#$62F0, Obj_Art_VRAM(A1)				; $000A
		tst.b	(Current_Act).w					; $FFFFFE11
		bne.s	Offset_0x0228A0
		move.l	#AIz_Falling_Log_Mappings_2, Obj_Map(A1) ; Offset_0x022A0E, $000C
		move.w	#$43CF, Obj_Art_VRAM(A1)				; $000A
Offset_0x0228A0:
		move.b	#$20, Obj_Width(A1)					; $0007
		move.b	#$10, Obj_Height(A1)					; $0006
		move.b	#$04, Obj_Flags(A1)					; $0004
		move.w	#$0200, Obj_Priority(A1)				; $0008
		move.w	A2, Obj_Control_Var_0C(A1)				; $003C
		move.w	A1, Obj_Control_Var_0C(A2)				; $003C
Offset_0x0228C0:
		jmp	(MarkObjGone_3)				; Offset_0x011B3E
;-------------------------------------------------------------------------------
Offset_0x0228C6:
		addq.w	#$01, Obj_Y(A0)					; $0014
		move.w	Obj_Y(A0),d0					; $0014
		cmp.w	(Water_Level_Move).w,d0			; $FFFFF646
		bcs.s	Offset_0x0228E0
		move.l	#Offset_0x0228E2,(A0)
		move.b	#$3B, Obj_Ani_Time(A0)				 ; $0024
Offset_0x0228E0:
		bra.s	Offset_0x0228FE
;-------------------------------------------------------------------------------
Offset_0x0228E2:
		subq.b	#$01, Obj_Ani_Time(A0)				 ; $0024
		bpl.s	Offset_0x0228EE
		move.w	#$7FF0, Obj_X(A0)				; $0010
Offset_0x0228EE:
		move.b	Obj_Ani_Time(A0),d0					; $0024
		andi.b	#$03,d0
		bne.s	Offset_0x0228FE
		bchg	#00, Obj_Control_Var_06(A0)			 ; $0036
Offset_0x0228FE:
		moveq	#0,d1
		move.b	Obj_Width(A0),d1				; $0007
		moveq	#$08,d3
		move.w	Obj_X(A0),d4					; $0010
		jsr	(Platform_Object)			 ; Offset_0x013AF6
		move.w	Obj_X(A0),d0					; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0				; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Offset_0x022932
		tst.b	Obj_Control_Var_06(A0)				 ; $0036
		bne.s	Offset_0x022930
		jmp	(DisplaySprite)				; Offset_0x011148
Offset_0x022930:
		rts
Offset_0x022932:
		move.w	Obj_Control_Var_0C(A0),d0				; $003C
		beq.s	Offset_0x022940
		move.w	D0,a1
		jsr	(Delete_A1_Object)			; Offset_0x01113A
Offset_0x022940:
		move.w	Obj_Respaw_Ref(A0),d0				 ; $0048
		beq.s	Offset_0x02294C
		move.w	D0,a2
		bclr	#$07,(A2)
Offset_0x02294C:
		jmp	(DeleteObject)				; Offset_0x011138
;-------------------------------------------------------------------------------
Offset_0x022952:
		move.w	Obj_Control_Var_0C(A0),a1				; $003C
		move.w	Obj_X(A1), Obj_X(A0)			 ; $0010, $0010
		move.w	Obj_Y(A1), Obj_Y(A0)			 ; $0014, $0014
		subq.b	#$01, Obj_Ani_Time(A0)				 ; $0024
		bpl.s	Offset_0x022978
		move.b	#$03, Obj_Ani_Time(A0)				 ; $0024
		addq.b	#$01, Obj_Map_Id(A0)					; $0022
		andi.b	#$03, Obj_Map_Id(A0)					; $0022
Offset_0x022978:
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
; Offset_0x02297E:
AIz_2_Falling_Log_Mappings:	include	"data/mappings/2D - AIZ2 Falling Log.asm"
; Offset_0x2298E:
AIz_Falling_Log_Mappings:	include	"data/mappings/2D - AIZ1 Falling Log.asm"
; Offset_0x02299E:
AIz_2_Falling_Log_Mappings_2:	include	"data/mappings/2D - AIZ2 Falling Log Splash.asm"
; Offset_0x022A0E:
AIz_Falling_Log_Mappings_2:	include	"data/mappings/2D - AIZ1 Falling Log Splash.asm"


Obj_0x2E_AIz_Spiked_Rotating_Log:                              ; Offset_0x022A7E
		include "data\objects\obj_0x2E.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 2F - Static decorations
; ---------------------------------------------------------------------------
; Offset_0x022E38: Obj_0x2F_Still_Sprite:
Obj2F_StaticDecoration:
		move.l	#Still_Sprite_Mappings,Obj_Map(a0)
		ori.b	#4,Obj_Flags(a0)
		moveq	#0,d0
		move.b	Obj_Subtype(a0),d0
		move.b	d0,Obj_Map_Id(a0)
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	StaticDecoration_ObjData(pc,d0.w),a1
		move.w	(a1)+,Obj_Art_VRAM(a0)
		move.w	(a1)+,Obj_Priority(a0)
		move.b	(a1)+,Obj_Width(a0)
		move.b	(a1)+,Obj_Height(a0)
		move.l	#StaticDecoration_Display,(a0)
; Offset_0x022E72:
StaticDecoration_Display:
		jmp	(MarkObjGone).l
; ===========================================================================
; Offset_0x022E78:
StaticDecoration_ObjData:
		; priority, width, height,and VRAM
		objdatasimple $300, $C, $C, $42F0
		objdatasimple $300,$10,  8, $42F0
		objdatasimple $300,  8,  4, $42F0
		objdatasimple $300,  8,  8, $4001
		objdatasimple $300,  8,$20, $6001
		objdatasimple $300, $C, $C, $C2F0
		objdatasimple    0,$40,$40, $C001
		objdatasimple    0,$40,$20, $C001
		objdatasimple $300,$40,$10, $4001
		objdatasimple    0,$40,$40, $C001
		objdatasimple    0,$40,$60, $C001
		objdatasimple $300,$10,$18, $4451
		objdatasimple $300,$10,$18, $4451
		objdatasimple $300,$10,$18, $4451
		objdatasimple $300,$10,$18, $4451
		objdatasimple    0,  8,$30, $C368
		objdatasimple    0,$30,$18, $C379
		objdatasimple    0, $C,$10, $C399
		objdatasimple    0,$20,$34, $C3A4
		objdatasimple $300,  4,$10, $4038
		objdatasimple $300,  8,  8, $440D
		objdatasimple $300,$10,$40, $2433
		objdatasimple $300,$10,$80, $2433
; ---------------------------------------------------------------------------
; Sprite Mappings - Static Decorations
; ---------------------------------------------------------------------------
; Offset_0x022F02:
Still_Sprite_Mappings:		include	"data/mappings/2F - Static Decorations.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 30 - Animated decorations
; ---------------------------------------------------------------------------
; Offet_0x0231C0: Obj_0x30_Animated_Still_Sprite:
Obj30_AnimatedDecoration:
		move.l	#Animated_Still_Sprite_Mappings,Obj_Map(a0)
		ori.b	#4,Obj_Flags(a0)
		moveq	#0,d0
		move.b	Obj_Subtype(a0),d0
		move.b	d0,Obj_Ani_Number(a0)
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	AniDecoration_ObjData(pc,d0.w),a1
		move.w	(a1)+,Obj_Art_VRAM(a0)
		move.w	(a1)+,Obj_Priority(a0)
		move.b	(a1)+,Obj_Width(a0)
		move.b	(a1)+,Obj_Height(a0)
		move.l	#AniDecoration_Display,(a0)
; Offset_0x0231FA:
AniDecoration_Display:
		lea	(Decoration2_AnimateData).l,a1
		jsr	(AnimateSprite).l
		jmp	(MarkObjGone).l
; ===========================================================================
; Offset_0x02320C:
AniDecoration_ObjData:
		; priority, width, height,and VRAM
		objdatasimple $300, 8, $C, $62F0
		objdatasimple $300, 8, $C, $62F0

; ===========================================================================
; ---------------------------------------------------------------------------
; Animation script for Animated Decorations
; ---------------------------------------------------------------------------
; Offset_0x023218: Animated_Still_Sprite_Animate_Data:
Decoration2_AnimateData:
		dc.w	Offset_0x02321C-Decoration2_AnimateData
		dc.w	Offset_0x023223-Decoration2_AnimateData
Offset_0x02321C:
		dc.b	$03, $00, $01, $02, $03, $04, $FF
Offset_0x023223:
		dc.b	$03, $05, $06, $07, $08, $FF
		even
; ---------------------------------------------------------------------------
; Sprite Mappings - Animated Decorations
; ---------------------------------------------------------------------------
; Offset_0x02322A:
Animated_Still_Sprite_Mappings:	include	"data/mappings/30 - Animated Decorations.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 35 - Plants from Angel Island
; ---------------------------------------------------------------------------
; Offset_0x023284: Obj_0x35_AIz_Plants:
Obj35_AIZPlants:
		move.l	#Plants_Mappings,Obj_Map(a0)
		ori.b	#4,Obj_Flags(a0)
		move.w	Obj_X(a0),Obj_Control_Var_00(a0)
		move.w	Obj_Y(a0),Obj_Control_Var_02(a0)
		move.b	Obj_Subtype(a0),d0
		andi.w	#$F,d0
		move.b	d0,Obj_Map_Id(a0)
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0
		lea	AIZPlants_ObjData(pc,d0.w),a1
		move.w	(a1)+,Obj_Art_VRAM(a0)
		move.w	(a1)+,Obj_Priority(a0)
		move.b	(a1)+,Obj_Width(a0)
		move.b	(a1)+,Obj_Height(a0)
		move.b	Obj_Subtype(a0),d0
		lsr.w	#2,d0
		andi.w	#$3C,d0
		move.l	Offset_0x0232E2(pc,d0.w),(a0)
		rts
; ===========================================================================
; Offset_0x0232D6:
AIZPlants_ObjData:
		; priority, width, height,and VRAM
		objdatasimple 0, $20, $30, $C333
		objdatasimple 0, $20, $3C, $C333
; ===========================================================================

Offset_0x0232E2:
		dc.l	Offset_0x0232FE
		dc.l	Offset_0x023304
		dc.l	Offset_0x02333A
		dc.l	Offset_0x023370
		dc.l	Offset_0x0233A6
		dc.l	Offset_0x0233DC
		dc.l	Offset_0x02340E
; ===========================================================================

Offset_0x0232FE:
		jmp	(MarkObjGone).l
; ===========================================================================

Offset_0x023304:
		move.w	Obj_Control_Var_00(A0),d1				; $0030
		move.w	D1,d2
		subi.w	#$00A0,d1
		sub.w	(Camera_X).w,d1					; $FFFFEE78
		asr.w	#$04,d1
		add.w	D2,d1
		move.w	D1, Obj_X(A0)					; $0010
		move.w	Obj_Control_Var_02(A0),d1				; $0032
		move.w	D1,d2
		subi.w	#$0070,d1
		sub.w	(Camera_Y).w,d1					; $FFFFEE7C
		asr.w	#$04,d1
		add.w	D2,d1
		move.w	D1, Obj_Y(A0)					; $0014
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x02333A:
		move.w	Obj_Control_Var_00(A0),d1				; $0030
		move.w	D1,d2
		subi.w	#$00A0,d1
		sub.w	(Camera_X).w,d1					; $FFFFEE78
		asr.w	#$03,d1
		add.w	D2,d1
		move.w	D1, Obj_X(A0)					; $0010
		move.w	Obj_Control_Var_02(A0),d1				; $0032
		move.w	D1,d2
		subi.w	#$0070,d1
		sub.w	(Camera_Y).w,d1					; $FFFFEE7C
		asr.w	#$03,d1
		add.w	D2,d1
		move.w	D1, Obj_Y(A0)					; $0014
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x023370:
		move.w	Obj_Control_Var_00(A0),d1				; $0030
		move.w	D1,d2
		subi.w	#$00A0,d1
		sub.w	(Camera_X).w,d1					; $FFFFEE78
		asr.w	#$02,d1
		add.w	D2,d1
		move.w	D1, Obj_X(A0)					; $0010
		move.w	Obj_Control_Var_02(A0),d1				; $0032
		move.w	D1,d2
		subi.w	#$0070,d1
		sub.w	(Camera_Y).w,d1					; $FFFFEE7C
		asr.w	#$02,d1
		add.w	D2,d1
		move.w	D1, Obj_Y(A0)					; $0014
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x0233A6:
		move.w	Obj_Control_Var_00(A0),d1				; $0030
		move.w	D1,d2
		subi.w	#$00A0,d1
		sub.w	(Camera_X).w,d1					; $FFFFEE78
		asr.w	#$01,d1
		add.w	D2,d1
		move.w	D1, Obj_X(A0)					; $0010
		move.w	Obj_Control_Var_02(A0),d1				; $0032
		move.w	D1,d2
		subi.w	#$0070,d1
		sub.w	(Camera_Y).w,d1					; $FFFFEE7C
		asr.w	#$01,d1
		add.w	D2,d1
		move.w	D1, Obj_Y(A0)					; $0014
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x0233DC:
		move.w	Obj_Control_Var_00(A0),d1				; $0030
		move.w	D1,d2
		subi.w	#$00A0,d1
		sub.w	(Camera_X).w,d1					; $FFFFEE78
		add.w	D2,d1
		move.w	D1, Obj_X(A0)					; $0010
		move.w	Obj_Control_Var_02(A0),d1				; $0032
		move.w	D1,d2
		subi.w	#$0070,d1
		sub.w	(Camera_Y).w,d1					; $FFFFEE7C
		add.w	D2,d1
		move.w	D1, Obj_Y(A0)					; $0014
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A
;-------------------------------------------------------------------------------
Offset_0x02340E:
		move.w	Obj_Control_Var_00(A0),d1				; $0030
		move.w	D1,d2
		subi.w	#$00A0,d1
		sub.w	(Camera_X).w,d1					; $FFFFEE78
		add.w	D1,d1
		add.w	D2,d1
		move.w	D1, Obj_X(A0)					; $0010
		move.w	Obj_Control_Var_02(A0),d1				; $0032
		move.w	D1,d2
		subi.w	#$0070,d1
		sub.w	(Camera_Y).w,d1					; $FFFFEE7C
		add.w	D2,d1
		move.w	D1, Obj_Y(A0)					; $0014
		move.w	Obj_Control_Var_00(A0),d0				; $0030
		jmp	(MarkObjGone_2)				; Offset_0x011B1A

; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite Mappings - Plants from Angel Island
; ---------------------------------------------------------------------------
; Offset_0x023442:
Plants_Mappings:	include	"data/mappings/35 - AIZ Plants.asm"

Obj_AIz_Tree:                                                  ; Offset_0x0234AA
		include "data\objects\aiz_tree.asm"
Obj_0x31_LBz_Rotating_Cylinders:                               ; Offset_0x02350C
		include "data\objects\obj_0x31.asm"
Obj_0x33_Switch:                                               ; Offset_0x023662
		include "data\objects\obj_0x33.asm"
Obj_Flickies:                                                  ; Offset_0x0238DA
		include "data\objects\flickies.asm"
Obj_Enemy_Points:                                              ; Offset_0x023E42
		include "data\objects\enemypts.asm"
;===============================================================================
Flickies_Mappings:                                             ; Offset_0x023E88
		dc.w	Offset_0x023E96-Flickies_Mappings
		dc.w	Offset_0x023E9E-Flickies_Mappings
		dc.w	Offset_0x023E8E-Flickies_Mappings
Offset_0x023E8E:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x023E96:
		dc.w	$0001
		dc.w	$F805, $0006, $FFF8
Offset_0x023E9E:
		dc.w	$0001
		dc.w	$F805, $000A, $FFF8
;-------------------------------------------------------------------------------
Flickies_Mappings_01:                                          ; Offset_0x023EA6
		dc.w	Offset_0x023EB4-Flickies_Mappings_01
		dc.w	Offset_0x023EBC-Flickies_Mappings_01
		dc.w	Offset_0x023EAC-Flickies_Mappings_01
Offset_0x023EAC:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x023EB4:
		dc.w	$0001
		dc.w	$F809, $0006, $FFF4
Offset_0x023EBC:
		dc.w	$0001
		dc.w	$F809, $000C, $FFF4
;-------------------------------------------------------------------------------
Flickies_Mappings_02:                                          ; Offset_0x023EC4
		dc.w	Offset_0x023ED2-Flickies_Mappings_02
		dc.w	Offset_0x023EDA-Flickies_Mappings_02
		dc.w	Offset_0x023ECA-Flickies_Mappings_02
Offset_0x023ECA:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x023ED2:
		dc.w	$0001
		dc.w	$F809, $0006, $FFF4
Offset_0x023EDA:
		dc.w	$0001
		dc.w	$F809, $000C, $FFF4
;-------------------------------------------------------------------------------
Flickies_Mappings_03:                                          ; Offset_0x023EE2
		dc.w	Offset_0x023EF0-Flickies_Mappings_03
		dc.w	Offset_0x023EF8-Flickies_Mappings_03
		dc.w	Offset_0x023EE8-Flickies_Mappings_03
Offset_0x023EE8:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x023EF0:
		dc.w	$0001
		dc.w	$F805, $0006, $FFF8
Offset_0x023EF8:
		dc.w	$0001
		dc.w	$F805, $000A, $FFF8
;-------------------------------------------------------------------------------
Flickies_Mappings_04:                                          ; Offset_0x023F00
		dc.w	Offset_0x023F0E-Flickies_Mappings_04
		dc.w	Offset_0x023F16-Flickies_Mappings_04
		dc.w	Offset_0x023F06-Flickies_Mappings_04
Offset_0x023F06:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x023F0E:
		dc.w	$0001
		dc.w	$F406, $0006, $FFF8
Offset_0x023F16:
		dc.w	$0001
		dc.w	$F406, $000C, $FFF8
;-------------------------------------------------------------------------------
Enemy_Points_Mappings:                                         ; Offset_0x023F1E
		dc.w	Map_100_Points-Enemy_Points_Mappings   ; Offset_0x023F2C
		dc.w	Map_200_Points-Enemy_Points_Mappings   ; Offset_0x023F34
		dc.w	Map_500_Points-Enemy_Points_Mappings   ; Offset_0x023F3C
		dc.w	Map_1000_Points-Enemy_Points_Mappings  ; Offset_0x023F44
		dc.w	Map_10_Points-Enemy_Points_Mappings    ; Offset_0x023F52
		dc.w	Map_10000_Points-Enemy_Points_Mappings ; Offset_0x023F5A
		dc.w	Map_50000_Points-Enemy_Points_Mappings ; Offset_0x023F68
Map_100_Points:                                                ; Offset_0x023F2C
		dc.w	$0001
		dc.w	$FC04, $0000, $FFFA
Map_200_Points:                                                ; Offset_0x023F34
		dc.w	$0001
		dc.w	$FC04, $0002, $FFF8
Map_500_Points:                                                ; Offset_0x023F3C
		dc.w	$0001
		dc.w	$FC04, $0004, $FFF8
Map_1000_Points:                                               ; Offset_0x023F44
		dc.w	$0002
		dc.w	$FC00, $0000, $FFF8
		dc.w	$FC04, $0006, $0000
Map_10_Points:                                                 ; Offset_0x023F52
		dc.w	$0001
		dc.w	$FC00, $0000, $FFFC
Map_10000_Points:                                              ; Offset_0x023F5A
		dc.w	$0002
		dc.w	$FC04, $0000, $FFF8
		dc.w	$FC04, $0006, $0005
Map_50000_Points:                                              ; Offset_0x023F68
		dc.w	$0002
		dc.w	$FC04, $0004, $FFF8
		dc.w	$FC04, $0006, $0007

;===============================================================================
; Objeto 0x34 - Poste de reinício, utilizado para salvar sua posição na fase
; ->>>
;===============================================================================
; Offset_0x023F76:
Obj_0x34_Star_Post:
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0					; $0005
		move.w	Offset_0x023F84(pc,d0.w),d1
		jmp	Offset_0x023F84(pc,d1.w)
;-------------------------------------------------------------------------------
Offset_0x023F84:
		dc.w	Offset_0x023F8E-Offset_0x023F84
		dc.w	Offset_0x023FE4-Offset_0x023F84
		dc.w	Offset_0x0240E4-Offset_0x023F84
		dc.w	Offset_0x0240F6-Offset_0x023F84
		dc.w	Offset_0x024372-Offset_0x023F84
;-------------------------------------------------------------------------------
Offset_0x023F8E:
		addq.b	#$02, Obj_Routine(A0)					; $0005
		move.l	#Star_Post_Mappings, Obj_Map(A0) ; Offset_0x024282, $000C
		move.w	#$05EC, Obj_Art_VRAM(A0)				; $000A
		move.b	#$04, Obj_Flags(A0)					; $0004
		move.b	#$08, Obj_Width(A0)					; $0007
		move.b	#$28, Obj_Height(A0)					; $0006
		move.w	#$0280, Obj_Priority(A0)				; $0008
		move.w	Obj_Respaw_Ref(A0),a2				 ; $0048
		bclr	#$07,(A2)
		btst	#0,(A2)
		bne.s	Offset_0x023FDA
		move.b	(Saved_Level_Flag).w,d1			; $FFFFFE30
		andi.b	#$7F,d1
		move.b	Obj_Subtype(A0),d2					; $002C
		andi.b	#$7F,d2
		cmp.b	D2,d1
		bcs.s	Offset_0x023FE4
Offset_0x023FDA:
		bset	#0,(A2)
		move.b	#$02, Obj_Ani_Number(A0)				; $0020
;-------------------------------------------------------------------------------
Offset_0x023FE4:
		tst.w	(Debug_placement_mode).w			; $FFFFFE08
		bne.w	Offset_0x0240E4
		lea	(Obj_Player_One).w,a3				; $FFFFB000
		move.b	(Saved_Level_Flag).w,d1			; $FFFFFE30
		bsr.s	Offset_0x02400C
		tst.w	(Two_Player_Flag).w				; $FFFFFFD8
		beq.w	Offset_0x0240E4
		lea	(Obj_Player_Two).w,a3				; $FFFFB04A
		move.b	(Saved_Level_Flag_P2).w,d1			; $FFFFFEE0
		bsr.s	Offset_0x02400C
		bra.w	Offset_0x0240E4
Offset_0x02400C:
		andi.b	#$7F,d1
		move.b	Obj_Subtype(A0),d2					; $002C
		andi.b	#$7F,d2
		cmp.b	D2,d1
		bcc	Offset_0x0240D6
		move.w	Obj_X(A3),d0					; $0010
		sub.w	Obj_X(A0),d0					; $0010
		addi.w	#$0008,d0
		cmpi.w	#$0010,d0
		bcc	Offset_0x0240D4
		move.w	Obj_Y(A3),d0					; $0014
		sub.w	Obj_Y(A0),d0					; $0014
		addi.w	#$0040,d0
		cmpi.w	#$0068,d0
		bcc	Offset_0x0240D4
		moveq	#signextendB(sfx_Starpost2),d0					; $CE
		jsr	(PlaySound).l				 ; Offset_0x001176
		jsr	(AllocateObject)			; Offset_0x011DD8
		bne.s	Offset_0x0240C2
		move.l	#Obj_0x34_Star_Post,(A1)			; Offset_0x023F76
		move.b	#$06, Obj_Routine(A1)					; $0005
		move.w	Obj_X(A0), Obj_Control_Var_00(A1)		; $0010, $0030
		move.w	Obj_Y(A0), Obj_Control_Var_02(A1)		; $0014, $0032
		subi.w	#$0014, Obj_Control_Var_02(A1)			; $0032
		move.l	Obj_Map(A0), Obj_Map(A1)			; $000C, $000C
		move.w	Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)		; $000A, $000A
		move.b	#$04, Obj_Flags(A1)					; $0004
		move.b	#$08, Obj_Width(A1)					; $0007
		move.b	#$08, Obj_Height(A1)					; $0006
		move.w	#$0200, Obj_Priority(A1)				; $0008
		move.b	#$02, Obj_Map_Id(A1)					; $0022
		move.w	#$0020, Obj_Control_Var_06(A1)			; $0036
		move.w	A0, Obj_Control_Var_0E(A1)				; $003E
		tst.w	(Two_Player_Flag).w				; $FFFFFFD8
		bne.s	Offset_0x0240C2
		cmpi.b	#$07,(Emeralds_Count).w			; $FFFFFFB1
		beq.s	Offset_0x0240C2
		cmpi.w	#50,(Ring_count).w			; $FFFFFE20
		bcs.s	Offset_0x0240C2
		bsr	Load_Star_Post_Stars			; Offset_0x024302
Offset_0x0240C2:
		move.b	#$01, Obj_Ani_Number(A0)				; $0020
		bsr	Star_Post_Save_Info			; Offset_0x024150
		move.w	Obj_Respaw_Ref(A0),a2				 ; $0048
		bset	#0,(A2)
Offset_0x0240D4:
		rts
Offset_0x0240D6:
		tst.b	Obj_Ani_Number(A0)					; $0020
		bne.s	Offset_0x0240E2
		move.b	#$02, Obj_Ani_Number(A0)				; $0020
Offset_0x0240E2:
		rts
;-------------------------------------------------------------------------------
Offset_0x0240E4:
		lea	(Star_Post_Animate_Data).l,a1		 ; Offset_0x024272
		jsr	(AnimateSprite)				; Offset_0x01115E
		jmp	(MarkObjGone)				; Offset_0x011AF2
;-------------------------------------------------------------------------------
Offset_0x0240F6:
		subq.w	#$01, Obj_Control_Var_06(A0)			; $0036
		bpl.s	Offset_0x02411A
		move.w	Obj_Control_Var_0E(A0),a1				; $003E
		cmpi.l	#Obj_0x34_Star_Post,(A1)			; Offset_0x023F76
		bne.s	Offset_0x024114
		move.b	#$02, Obj_Ani_Number(A1)				; $0020
		move.b	#0, Obj_Map_Id(A1)					; $0022
Offset_0x024114:
		jmp	(DeleteObject)				; Offset_0x011138
Offset_0x02411A:
		move.b	Obj_Angle(A0),d0				; $0026
		subi.b	#$10, Obj_Angle(A0)					; $0026
		subi.b	#$40,d0
		jsr	(CalcSine).l					; Offset_0x001B20
		muls.w	#$0C00,d1
		swap	D1
		add.w	Obj_Control_Var_00(A0),d1				; $0030
		move.w	D1, Obj_X(A0)					; $0010
		muls.w	#$0C00,d0
		swap	D0
		add.w	Obj_Control_Var_02(A0),d0				; $0032
		move.w	D0, Obj_Y(A0)					; $0014
		jmp	(MarkObjGone)				; Offset_0x011AF2
;-------------------------------------------------------------------------------
; Rotina para salvar localização atual do jogador.
; ->>>
;-------------------------------------------------------------------------------
Star_Post_Save_Info:						 ; Offset_0x024150
		cmpa.w	#Obj_Player_One,a3					; $B000
		bne.w	Star_Post_Save_Info_P2		 ; Offset_0x0241B4
		move.b	Obj_Subtype(A0),(Saved_Level_Flag).w ; $002C, $FFFFFE30
		move.b	(Saved_Level_Flag).w,(Saved_Last_Start_Post_Hit).w ; $FFFFFE30, $FFFFFE31
		move.w	Obj_X(A0),(Saved_Obj_X_P1).w		; $0010, $FFFFFE32
		move.w	Obj_Y(A0),(Saved_Obj_Y_P1).w		; $0014, $FFFFFE34
		move.w	(Obj_Player_One+Obj_Art_VRAM).w,(Saved_Obj_Art_VRAM_P1).w ; $FFFFB00A, $FFFFFE3C
		move.w	(Obj_Player_One+Obj_Player_Top_Solid).w,(Saved_Top_Solid_P1).w ; $FFFFB046, $FFFFFE3E
		move.w	(Ring_count).w,(Saved_Ring_Count_Address).w ; $FFFFFE20, $FFFFFE36
		move.b	(Extra_life_flags).w,(Saved_Ring_Status_Flag).w ; $FFFFFE1B, $FFFFFE54
		move.l	(Timer).w,(Saved_Time).w ; $FFFFFE22, $FFFFFE38
		move.b	(Dynamic_Resize_Routine).w,(Saved_Dynamic_Resize_Routine).w ; $FFFFEE33, $FFFFFE58
		move.w	(Sonic_Level_Limits_Max_Y).w,(Saved_Sonic_Level_Limits_Max_Y).w ; $FFFFEE1A, $FFFFFE56
		move.w	(Camera_X).w,(Saved_Camera_X).w	; $FFFFEE78, $FFFFFE40
		move.w	(Camera_Y).w,(Saved_Camera_Y).w	; $FFFFEE7C, $FFFFFE42
		move.w	(Current_Water_Level).w,(Saved_Current_Water_Level).w ; $FFFFF648, $FFFFFE50
		move.b	(Underwater_Flag).w,(Saved_Underwater_Flag).w ; $FFFFF64E, $FFFFFE53
		rts
;-------------------------------------------------------------------------------
Star_Post_Save_Info_P2:						; Offset_0x0241B4
		move.b	Obj_Subtype(A0),(Saved_Level_Flag_P2).w ; $002C, $FFFFFEE0
		move.b	(Saved_Level_Flag_P2).w,(Saved_Last_Start_Post_Hit_P2).w ; $FFFFFEE0, $FFFFFEE1
		move.w	Obj_X(A0),(Saved_Obj_X_P2).w		; $0010, $FFFFFEE2
		move.w	Obj_Y(A0),(Saved_Obj_Y_P2).w		; $0014, $FFFFFEE4
		move.w	(Obj_Player_Two+Obj_Art_VRAM).w,(Saved_Obj_Art_VRAM_P2).w ; $FFFFB054, $FFFFFEEC
		move.w	(Obj_Player_Two+Obj_Player_Top_Solid).w,(Saved_Top_Solid_P2).w ; $FFFFB090, $FFFFFEEE
		move.w	(Ring_Count_Address_P2).w,(Saved_Ring_Count_Address_P2).w ; $FFFFFED0, $FFFFFEE6
		move.b	(Ring_Status_Flag_P2).w,(Saved_Ring_Status_Flag_P2).w ; $FFFFFEC7, $FFFFFE55
		move.l	(Time_Count_Address_P2).w,(Saved_Time_Count_Address_P2).w ; $FFFFFED2, $FFFFFEE8
		rts
;-------------------------------------------------------------------------------
; Rotina para salvar localização atual do jogador.
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para carregar a última localização salva do jogador.
; ->>>	Referência externa.
;-------------------------------------------------------------------------------
Star_Post_Load_Info:						 ; Offset_0x0241EC
		move.b	(Saved_Last_Start_Post_Hit).w,(Saved_Level_Flag).w ; $FFFFFE31, $FFFFFE30
		move.w	(Saved_Obj_X_P1).w,(Obj_Player_One+Obj_X).w ; $FFFFFE32, $FFFFB010
		move.w	(Saved_Obj_Y_P1).w,(Obj_Player_One+Obj_Y).w ; $FFFFFE34, $FFFFB014
		move.w	(Saved_Ring_Count_Address).w,(Ring_count).w ; $FFFFFE36, $FFFFFE20
		move.b	(Saved_Ring_Status_Flag).w,(Extra_life_flags).w ; $FFFFFE54, $FFFFFE1B
		clr.w	(Ring_count).w				; $FFFFFE20
		clr.b	(Extra_life_flags).w				; $FFFFFE1B
		move.l	(Saved_Time).w,(Timer).w ; $FFFFFE38, $FFFFFE22
		move.b	#$3B,(Timer_frame).w	; $FFFFFE25
		subq.b	#$01,(Timer_second).w		; $FFFFFE24
		move.w	(Saved_Obj_Art_VRAM_P1).w,(Obj_Player_One+Obj_Art_VRAM).w ; $FFFFFE3C, $FFFFB00A
		move.w	(Saved_Top_Solid_P1).w,(Obj_Player_One+Obj_Player_Top_Solid).w ; $FFFFFE3E, $FFFFB046
		move.b	(Saved_Dynamic_Resize_Routine).w,(Dynamic_Resize_Routine).w ; $FFFFFE58, $FFFFEE33
		move.w	(Saved_Sonic_Level_Limits_Max_Y).w,(Sonic_Level_Limits_Max_Y).w ; $FFFFFE56, $FFFFEE1A
		move.w	(Saved_Sonic_Level_Limits_Max_Y).w,(Level_Limits_Max_Y).w ; $FFFFFE56, $FFFFEE12
		move.w	(Saved_Camera_X).w,(Camera_X).w	; $FFFFFE40, $FFFFEE78
		move.w	(Saved_Camera_Y).w,(Camera_Y).w	; $FFFFFE42, $FFFFEE7C
		tst.b	(Water_Level_Flag).w				; $FFFFF730
		beq.s	Offset_0x02425E
		move.w	(Saved_Current_Water_Level).w,(Current_Water_Level).w ; $FFFFFE50, $FFFFF648
		move.b	(Saved_Underwater_Flag).w,(Underwater_Flag).w ; $FFFFFE53, $FFFFF64E
Offset_0x02425E:
		tst.b	(Saved_Level_Flag).w				; $FFFFFE30
		bpl.s	Offset_0x024270
		move.w	(Saved_Obj_X_P1).w,d0				; $FFFFFE32
		subi.w	#$00A0,d0
		move.w	D0,(Sonic_Level_Limits_Min_X).w			; $FFFFEE14
Offset_0x024270:
		rts
;-------------------------------------------------------------------------------
; Rotina para carregar a última localização salva do jogador.
; <<<-	Referência externa.
;-------------------------------------------------------------------------------
Star_Post_Animate_Data:						; Offset_0x024272
		dc.w	Offset_0x024278-Star_Post_Animate_Data
		dc.w	Offset_0x02427B-Star_Post_Animate_Data
		dc.w	Offset_0x02427E-Star_Post_Animate_Data
Offset_0x024278:
		dc.b	$0F, $00, $FF
Offset_0x02427B:
		dc.b	$0F, $01, $FF
Offset_0x02427E:
		dc.b	$03, $00, $04, $FF
;-------------------------------------------------------------------------------
; Offset_0x024282:
Star_Post_Mappings:		include	"data/mappings/34 - Starpost Pole.asm"
; Offset_0x0242E4:
Star_Post_Stars_Mappings:	include	"data/mappings/34 - Starpost Stars.asm"
;-------------------------------------------------------------------------------
Load_Star_Post_Stars:						; Offset_0x024302
		moveq	#$03,d1
		moveq	#0,d2
Offset_0x024306:
		jsr	(AllocateObjectAfterCurrent)			; Offset_0x011DE0
		bne.s	Offset_0x024370
		move.l	(A0),(A1)
		move.l	#Star_Post_Stars_Mappings, Obj_Map(A1) ; Offset_0x0242E4, $000C
		move.w	#$05EC, Obj_Art_VRAM(A1)				; $000A
		move.b	#$04, Obj_Flags(A1)					; $0004
		move.b	#$08, Obj_Routine(A1)					; $0005
		move.w	Obj_X(A0),d0					; $0010
		move.w	D0, Obj_X(A1)					; $0010
		move.w	D0, Obj_Control_Var_00(A1)				; $0030
		move.w	Obj_Y(A0),d0					; $0014
		subi.w	#$0030,d0
		move.w	D0, Obj_Y(A1)					; $0014
		move.w	D0, Obj_Control_Var_02(A1)				; $0032
		move.w	Obj_Priority(A0), Obj_Priority(A1)		; $0008, $0008
		move.b	#$08, Obj_Width(A1)					; $0007
		move.b	#$01, Obj_Map_Id(A1)					; $0022
		move.w	#$FC00, Obj_Speed_X(A1)				; $0018
		move.w	#$0000, Obj_Speed_Y(A1)				; $001A
		move.w	D2, Obj_Control_Var_04(A1)				; $0034
		addi.w	#$0040,d2
		dbra	D1, Offset_0x024306
Offset_0x024370:
		rts
;-------------------------------------------------------------------------------
Offset_0x024372:
		move.b	Obj_Col_Prop(A0),d0					; $0029
		beq.w	Offset_0x024390
		andi.b	#$01,d0
		beq.s	Offset_0x02438C
		move.b	#$01,(Special_Stage_Entry_Flag).w		 ; $FFFFF7CD
		move.b	#gm_S2_SpecialStage,(Game_Mode).w	 ; $10, $FFFFF600
Offset_0x02438C:
		clr.b	Obj_Col_Prop(A0)				 ; $0029
Offset_0x024390:
		addi.w	#$000A, Obj_Control_Var_04(A0)			; $0034
		move.w	Obj_Control_Var_04(A0),d0				; $0034
		andi.w	#$00FF,d0
		jsr	(CalcSine).l					; Offset_0x001B20
		asr.w	#$05,d0
		asr.w	#$03,d1
		move.w	D1,d3
		move.w	Obj_Control_Var_04(A0),d2				; $0034
		andi.w	#$03E0,d2
		lsr.w	#$05,d2
		moveq	#$02,d5
		moveq	#0,d4
		cmpi.w	#$0010,d2
		ble.s	Offset_0x0243C0
		neg.w	D1
Offset_0x0243C0:
		andi.w	#$000F,d2
		cmpi.w	#$0008,d2
		ble.s	Offset_0x0243D0
		neg.w	D2
		andi.w	#$0007,d2
Offset_0x0243D0:
		lsr.w	#$01,d2
		beq.s	Offset_0x0243D6
		add.w	D1,d4
Offset_0x0243D6:
		asl.w	#$01,d1
		dbra	D5, Offset_0x0243D0
		asr.w	#$04,d4
		add.w	D4,d0
		addq.w	#$01, Obj_Control_Var_06(A0)			; $0036
		move.w	Obj_Control_Var_06(A0),d1				; $0036
		cmpi.w	#$0080,d1
		beq.s	Offset_0x0243FA
		bgt.s	Offset_0x024400
Offset_0x0243F0:
		muls.w	D1,d0
		muls.w	D1,d3
		asr.w	#$07,d0
		asr.w	#$07,d3
		bra.s	Offset_0x024412
Offset_0x0243FA:
		move.b	#$D8, Obj_Col_Flags(A0)				; $0028
Offset_0x024400:
		cmpi.w	#$0180,d1
		ble.s	Offset_0x024412
		neg.w	D1
		addi.w	#$0200,d1
		bmi.w	Offset_0x024446
		bra.s	Offset_0x0243F0
Offset_0x024412:
		move.w	Obj_Control_Var_00(A0),d2				; $0030
		add.w	D3,d2
		move.w	D2, Obj_X(A0)					; $0010
		move.w	Obj_Control_Var_02(A0),d2				; $0032
		add.w	D0,d2
		move.w	D2, Obj_Y(A0)					; $0014
		addq.b	#$01, Obj_Ani_Frame(A0)				; $0023
		move.b	Obj_Ani_Frame(A0),d0					; $0023
		andi.w	#$0006,d0
		lsr.w	#$01,d0
		cmpi.b	#$03,d0
		bne.s	Offset_0x02443C
		moveq	#$01,d0
Offset_0x02443C:
		move.b	D0, Obj_Map_Id(A0)					; $0022
		jmp	(MarkObjGone)				; Offset_0x011AF2
Offset_0x024446:
		jmp	(DeleteObject).l

Obj_Time_Over_Game_Over:                                       ; Offset_0x02444C
		include "data\objects\tmgmover.asm"
; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Title Card
; ---------------------------------------------------------------------------

titlecard_objcnt	= Obj_Control_Var_00		; counts which object of the title card is loaded
titlecard_timer		= Obj_Control_Var_02		; timer until the title card disappears
titlecard_unk1		= Obj_Control_Var_04		; seems to be used to actually tell the title card to move offscreen?
titlecard_xdest		= Obj_Control_Var_16		; where each title card ends up on the X axis

; Offset_0x024546: Obj_Title_Cards:
Obj_TitleCard:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	TitleCard_Index(pc,d0.w),d1
		jmp	TitleCard_Index(pc,d1.w)
; ===========================================================================
; Offset_0x024554:
TitleCard_Index:
		dc.w TitleCard_Init-TitleCard_Index
		dc.w TitleCard_Main-TitleCard_Index
		dc.w TitleCard_Wait-TitleCard_Index
		dc.w TitleCard_Wait2-TitleCard_Index
; ===========================================================================
; Offset_0x02455C:
TitleCard_Init:
		lea	(Title_Card_ZONE_ACT).l,a1
		move.w	#$A000,d2
		jsr	(Queue_Kos_Module).l
		lea	(Title_Card_Number_1).l,a1
		tst.b	(Apparent_Act).w			; is this "Act 2"?
		beq.s	Offset_0x02457E				; if not, branch
		lea	(Title_Card_Number_2).l,a1

Offset_0x02457E:
		move.w	#$A7A0,d2
		jsr	(Queue_Kos_Module).l
		lea	TitleCard_LevelGfx(pc),a1
		moveq	#0,d0
		move.b	(Apparent_Zone).w,d0			; load title card based on zone
		lsl.w	#2,d0
		move.l	(a1,d0.w),a1
		move.w	#$A9A0,d2
		jsr	(Queue_Kos_Module).l
		move.w	#90,Obj_Timer(a0)			; set wait timer to 90 frames
		move.w	#4,titlecard_objcnt(a0)
		clr.w	titlecard_timer(a0)
		addq.b	#2,Obj_Routine(a0)
		rts
; ===========================================================================
; Offset_0x0245B8:
TitleCard_Main:
		tst.b	(Kos_modules_left).w		; has the KosinskiM art finished decompressing?
		bne.s	Offset_0x02461E				; if not, branch
		jsr	(AllocateObjectAfterCurrent).l
		bne.s	Offset_0x02461E
		lea	TitleCard_ObjArray(pc),a2
		moveq	#(TitleCard_ObjArray_End-TitleCard_ObjArray)/14-1,d1	; create objects
; Offset_0x0245CC:
TitleCard_MakeObject:
		move.l	(a2)+,(a1)
		move.w	(a2)+,titlecard_xdest(a1)
		move.w	(a2)+,Obj_X(a1)
		move.w	(a2)+,Obj_Y(a1)
		move.b	(a2)+,Obj_Map_Id(a1)
		move.b	(a2)+,Obj_Width(a1)
		move.w	(a2)+,d2
		move.b	d2,Obj_Col_Flags(a1)
		move.b	#$40,Obj_Flags(a1)
		move.l	#Title_Cards_Mappings,Obj_Map(a1)
		move.w	a0,Obj_Respaw_Ref(a1)
		jsr	(AllocateObject_Immediate).l
		dbne	d1,TitleCard_MakeObject
		tst.w	Obj_Control_Var_0E(a0)
		beq.s	Offset_0x02461A
		move.b	(Apparent_Zone).w,d0
		beq.s	Offset_0x02461A
		cmpi.b	#Iz_Id,d0				; are we in IceCap Zone?
		beq.s	Offset_0x02461A				; if not, branch
		st	(Level_Events_Buffer_5).w

Offset_0x02461A:
		addq.b	#2,Obj_Routine(a0)

Offset_0x02461E:
		rts
; ===========================================================================
; Offset_0x024620:
TitleCard_Wait:
		tst.w	titlecard_unk1(a0)
		beq.s	Offset_0x02462C
		clr.w	titlecard_unk1(a0)
		rts
; ---------------------------------------------------------------------------

Offset_0x02462C:
		st	Obj_Respaw_Ref(a0)
		addq.b	#2,Obj_Routine(a0)
		rts
; ===========================================================================
; Offset_0x024636:
TitleCard_Wait2:
		tst.w	Obj_Timer(a0)
		beq.s	Offset_0x024642
		subq.w	#1,Obj_Timer(a0)
		rts
; ---------------------------------------------------------------------------

Offset_0x024642:
		tst.w	titlecard_objcnt(a0)
		beq.s	TitleCard_SetupLevel
		addq.w	#1,titlecard_timer(a0)
		rts
; ---------------------------------------------------------------------------
; Offset_0x02464E:
TitleCard_SetupLevel:
		tst.w	Obj_Control_Var_0E(a0)
		beq.s	TitleCard_LoadMainGraphics
		clr.l	(Timer).w
		clr.w	(Ring_count).w
		clr.w	(Total_Ring_Count_Address).w
		clr.b	(Extra_life_flags).w
		clr.l	(Time_Count_Address_P2).w
		clr.w	(Ring_Count_Address_P2).w
		clr.w	(Total_Ring_Count_Address_P2).w
		clr.b	(Ring_Status_Flag_P2).w
		st	(Update_HUD_timer).w
		st	(Update_HUD_rings).w
		st	(End_Level_Flag).w
		bra.s	TitleCard_LoadAnimals
; Offset_0x024682:
TitleCard_LoadMainGraphics:
		lea	(PLC_Spikes_Springs).l,a1
		jsr	(LoadPLC_Direct).l
; Offset_0x02468E:
TitleCard_LoadAnimals:
		move.w	(Apparent_ZoneAndAct).w,d0
		jsr	Level_Load_Enemies_Art(pc)		; load animals based on zone
		moveq	#id_PLC_Main3,d0
		jsr	(LoadPLC).l
		jmp	(DeleteObject).l
; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Title Card Red Bar
; ---------------------------------------------------------------------------
; Offset_0x0246A4: Title_Card_Red_Bar:
Obj_TtlCardRedBar:
		move.w	Obj_Respaw_Ref(a0),a1
		move.w	titlecard_timer(a1),d0
		beq.s	Offset_0x0246CC
		tst.b	Obj_Flags(a0)
		bmi.s	Offset_0x0246BE
		subq.w	#1,titlecard_objcnt(a1)
		jmp	(DeleteObject).l

Offset_0x0246BE:
		cmp.b	Obj_Col_Flags(a0),d0
		bcs.s	Offset_0x0246E2
		subi.w	#$20,Obj_Y(a0)
		bra.s	Offset_0x0246E2

Offset_0x0246CC:
		move.w	Obj_Y(a0),d0
		cmp.w	titlecard_xdest(a0),d0
		beq.s	Offset_0x0246E2
		addi.w	#$10,d0
		move.w	d0,Obj_Y(a0)
		st	titlecard_unk1(a1)

Offset_0x0246E2:
		move.b	#$70,Obj_Height(a0)
		jmp	(DisplaySprite).l
; ---------------------------------------------------------------------------
; Object - Title Card Level Name
; ---------------------------------------------------------------------------
; Offset_0x0246EE: Title_Card_Level_Name:
Obj_TtlCardName:
		move.b	(Apparent_Zone).w,d0
		add.b	d0,Obj_Map_Id(a0)
		move.l	#Obj_TtlCardZone,(a0)
; ---------------------------------------------------------------------------
; Object - Title Card Zone
; ---------------------------------------------------------------------------
; Offset_0x0246FC: Title_Card_Zone:
Obj_TtlCardZone:
		move.w	Obj_Respaw_Ref(a0),a1
		move.w	titlecard_timer(a1),d0
		beq.s	Offset_0x024724
		tst.b	Obj_Flags(a0)
		bmi.s	Offset_0x024716
		subq.w	#1,titlecard_objcnt(a1)
		jmp	(DeleteObject).l
; ---------------------------------------------------------------------------

Offset_0x024716:
		cmp.b	Obj_Col_Flags(a0),d0
		bcs.s	Offset_0x02473A
		addi.w	#$20,Obj_X(a0)
		bra.s	Offset_0x02473A

Offset_0x024724:
		move.w	Obj_X(A0),d0
		cmp.w	titlecard_xdest(a0),d0
		beq.s	Offset_0x02473A
		subi.w	#$10,d0
		move.w	d0,Obj_X(a0)
		st	titlecard_unk1(a1)

Offset_0x02473A:
		jmp	(DisplaySprite).l
; ---------------------------------------------------------------------------
; Object - Title Card Act
; ---------------------------------------------------------------------------
; Offset_0x024740: Title_Card_Act_Number:
Obj_TtlCardAct:
		move.l	#Obj_TtlCardZone,(a0)
		move.b	(Apparent_Zone).w,d0
		cmpi.b	#$A,d0
		beq.s	Offset_0x024756
		cmpi.b	#$C,d0
		bne.s	Obj_TtlCardZone

Offset_0x024756:
		move.w	Obj_Respaw_Ref(a0),a1
		subq.w	#1,titlecard_objcnt(a1)
		jmp	(DeleteObject).l
; ===========================================================================
; Offset_0x024764: Title_Card_Letters_Ptr:
TitleCard_LevelGfx:
		dc.l	TC_Angel_Island
		dc.l	TC_Hidrocity
		dc.l	TC_Marble_Garden
		dc.l	TC_Carnival_Night
		dc.l	TC_Flying_Battery
		dc.l	TC_Icecap
		dc.l	TC_Launch_Base
		; in the final game, these instead point to Angel Island; still, their presense
		; here indicates that the remaining levels did have title cards at some point
		dc.l	TC_Launch_Base		; Mushroom Valley
		dc.l	TC_Launch_Base		; Sandopolis
		dc.l	TC_Launch_Base		; Lava Reef
		dc.l	TC_Launch_Base		; Sky Sanctuary
		dc.l	TC_Launch_Base		; Death Egg
		dc.l	TC_Launch_Base		; The Doomsday
		; no entries for Zone 0D and beyond, which the game doesn't load the title card
		; object in anyways, which also means that the unused 2P title cards aren't here
; ===========================================================================

ttlresObjData macro obj,xdest,xpos,ypos,frame,width,place
	dc.l	obj
	dc.w	xdest
	dc.w	xpos
	dc.w	ypos
	dc.b	frame
	dc.b	width
	dc.w	place
	endm

; Offset_0x024798: Title_Cards_Conf_Ptr:
TitleCard_ObjArray:
		ttlresObjData Obj_TtlCardName,		$120, $260, $E0,  4,$80,3	; Zone Name
		ttlresObjData Obj_TtlCardZone,		$17C, $2FC,$100,  3,$24,5	; "ZONE"
		ttlresObjData Obj_TtlCardAct,		$184, $344,$120,  2,$1C,7	; "ACT X"
		ttlresObjData Obj_TtlCardRedBar,	 $C0,  $E0, $10,  1,  0,1	; Red Bar
TitleCard_ObjArray_End:

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Level Results
; ---------------------------------------------------------------------------
; Offset_0x0247D0:
Obj_LevelResults:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	LevelResults_Index(pc,d0.w),d1
		jmp	LevelResults_Index(pc,d1.w)
; ===========================================================================
; Offset_0x0247DE:
LevelResults_Index:
		dc.w LevelResults_Init-LevelResults_Index
		dc.w LevelResults_Main-LevelResults_Index
		dc.w LevelResults_Wait-LevelResults_Index
		dc.w LevelResults_Wait2-LevelResults_Index
; ===========================================================================
; Offset_0x0247E6:
LevelResults_Init:
		lea	(Title_Card_Results).l,a1
		move.w	#$A400,d2
		jsr	(Queue_Kos_Module).l
		lea	(Title_Card_Number_1).l,a1
		move.w	#$B000,d2
		tst.b	(Apparent_Act).w			; are we in "Act 2"?
		beq.s	Offset_0x024810				; if not, branch
		lea	(Title_Card_Number_2).l,a1
		move.w	#$B400,d2

Offset_0x024810:
		jsr	(Queue_Kos_Module).l
		lea	(Level_Results_Sonic).l,a1
		cmpi.w	#Sonic_Alone,(Player_Selected_Flag).w	; is this a Sonic or Sonic and Tails game?
		bls.s	Offset_0x024844				; if yes, branch
		lea	(Level_Results_Knuckles).l,a1
		cmpi.w	#Knuckles_Alone,(Player_Selected_Flag).w	; is this a Knuckles game?
		beq.s	Offset_0x024844				; if yes, branch
		lea	(Level_Results_Miles).l,a1
		tst.b	(Hardware_Id).w				; is this a Japanese console?
		beq.s	Offset_0x024844				; if yes, branch
		lea	(Level_Results_Tails).l,a1

Offset_0x024844:
		move.w	#$AC20,d2
		jsr	(Queue_Kos_Module).l
		moveq	#0,d0
		move.b	(Timer_minute).w,d0
		mulu.w	#$3C,d0
		moveq	#0,d1
		move.b	(Timer_second).w,d1
		add.w	d1,d0
		cmpi.w	#600-1,d0				; are we 1 second away from a Time Over?
		bne.s	LevelResults_TimeBonus			; if not, branch
		move.w	#10000,(Level_Results_Time_Bonus).w	; give 100000 points
		bra.s	LevelResults_RingBonus
; ---------------------------------------------------------------------------
; Offset_0x02486E:
LevelResults_TimeBonus:
		divu.w	#30,d0
		moveq	#(TimeBonuses_End-TimeBonuses)/2-1,d1
		cmp.w	d1,d0
		bcs.s	Offset_0x02487A
		move.w	d1,d0

Offset_0x02487A:
		add.w	d0,d0
		lea	TimeBonuses(pc),a1
		move.w	(a1,d0.w),(Level_Results_Time_Bonus).w
; Offset_0x024886:
LevelResults_RingBonus:
		move.w	(Ring_count).w,d0
		mulu.w	#10,d0
		move.w	d0,(Level_Results_Ring_Bonus).w
		clr.w	(Level_Results_Total_Bonus).w
		move.w	#$96,Obj_Timer(a0)
		move.w	#$C,Obj_Control_Var_00(a0)
		move.b	#$1E,(Obj_Player_One+Obj_Subtype).w
		move.b	#$1E,(Obj_Player_Two+Obj_Subtype).w
		addq.b	#2,Obj_Routine(a0)
		rts
; ===========================================================================
; Offset_0x0248B4:
LevelResults_Main:
		subq.w	#1,Obj_Timer(a0)
		tst.b	(Kos_modules_left).w		; has the KosinskiM art finished decompressing?
		bne.s	Offset_0x02490C				; if not, branch
		jsr	(AllocateObjectAfterCurrent).l
		bne.s	Offset_0x02490C
		lea	LevelResults_ObjArray(pc),a2
		moveq	#(LevelResults_ObjArray_End-LevelResults_ObjArray)/14-1,d1	; create objects
; Offset_0x0248CC:
LevelResults_MakeObject:
		move.l	(a2)+,(a1)
		move.w	(a2)+,Obj_Control_Var_16(a1)
		move.w	(a2)+,Obj_X(a1)
		spl	Obj_Routine(a1)
		move.w	(a2)+,Obj_Y(a1)
		move.b	(a2)+,Obj_Map_Id(a1)
		move.b	(a2)+,Obj_Width(a1)
		move.w	(a2)+,d2
		move.b	d2,Obj_Col_Flags(a1)
		move.b	#$40,Obj_Flags(a1)
		move.l	#Level_Results_Mappings,Obj_Map(a1)
		move.w	a0,Obj_Respaw_Ref(a1)
		jsr	(AllocateObject_Immediate).l
		dbne	d1,LevelResults_MakeObject
		addq.b	#2,Obj_Routine(a0)

Offset_0x02490C:
		rts
; ===========================================================================
; Offset_0x02490E:
LevelResults_Wait:
		tst.w	Obj_Timer(a0)
		beq.s	LevelResults_AddTimeBonus
		subq.w	#1,Obj_Timer(a0)
		rts
; ---------------------------------------------------------------------------
; Offset_0x02491A:
LevelResults_AddTimeBonus:
		moveq	#0,d0
		tst.w	(Level_Results_Time_Bonus).w		; are we calcuating the time bonus?
		beq.s	LevelResults_AddRingBonus		; if not, branch
		addi.w	#10,d0
		subi.w	#10,(Level_Results_Time_Bonus).w
; Offset_0x02492C:
LevelResults_AddRingBonus:
		tst.w	(Level_Results_Ring_Bonus).w		; are we calculating the ring bonus?
		beq.s	LevelResults_AddTotalBonus		; if not, branch
		addi.w	#10,d0
		subi.w	#10,(Level_Results_Ring_Bonus).w
; Offset_0x02493C:
LevelResults_AddTotalBonus:
		add.w	d0,(Level_Results_Total_Bonus).w
		tst.w	d0
		beq.s	LevelResults_SetTimer
		jsr	(Add_Points_P1).l
		move.w	(Level_frame_counter).w,d0
		andi.w	#3,d0
		rts
; ===========================================================================
; Offset_0x024954:
LevelResults_SetTimer:
		move.w	#$3C,Obj_Timer(a0)
		addq.b	#2,Obj_Routine(a0)
; Offset_0x02495E:
LevelResults_Wait2:
		tst.w	Obj_Timer(a0)
		beq.s	Offset_0x02496A
		subq.w	#1,Obj_Timer(a0)
		rts
; ---------------------------------------------------------------------------

Offset_0x02496A:
		tst.w	Obj_Control_Var_00(a0)
		beq.s	LevelResults_EndLevel
		addq.w	#1,Obj_Control_Var_02(a0)
		rts
; ---------------------------------------------------------------------------

; Offset_0x024976:
LevelResults_EndLevel:
		tst.b	(Apparent_Act).w			; are we in "Act 2"?
		beq.s	LevelResults_LoadAct2			; if not, branch
		clr.b	(Player_Control_Lock_Flag).w
		st	(End_Level_Flag).w
		jmp	(DeleteObject).l
; Offset_0x02498A:
LevelResults_LoadAct2:
		move.b	#1,(Apparent_Act).w
		clr.b	(Player_Control_Lock_Flag).w
		move.l	#Obj_TitleCard,(a0)
		clr.b	Obj_Routine(A0)
		st	Obj_Control_Var_0E(a0)
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Character Name on the Level Results
; ---------------------------------------------------------------------------
; Offset_0x0249A4: Obj_Lvl_Res_Sonic_Miles_Knuckles_Tails:
Obj_LevResultsCharName:
		cmpi.w	#Miles_Alone,(Player_Selected_Flag).w	; is this a Tails game?
		beq.s	LevResultsCharName_Tails		; if yes, branch
		cmpi.w	#Knuckles_Alone,(Player_Selected_Flag).w	; is this a Knuckles game?
		bne.s	Offset_0x0249E4				; if not, branch
; LevResultsCharName_Knux:
		addq.b	#3,Obj_Map_Id(a0)			; use Knuckles frame
		moveq	#$30,d0
		sub.w	d0,Obj_X(a0)
		sub.w	d0,Obj_Control_Var_16(a0)
		add.b	d0,Obj_Width(a0)
		bra.s	Offset_0x0249E4
; ---------------------------------------------------------------------------
; Offset_0x0249C8:
LevResultsCharName_Tails:
		addq.b	#1,Obj_Map_Id(a0)			; use Miles frame
		tst.b	(Hardware_Id).w				; is this a Japanese console?
		bpl.s	Offset_0x0249E4				; if yes, branch
		addq.b	#1,Obj_Map_Id(a0)			; use Tails frame
		moveq	#8,d0
		add.w	d0,Obj_X(a0)
		add.w	d0,Obj_Control_Var_16(a0)
		sub.b	d0,Obj_Width(a0)

Offset_0x0249E4:
		move.l	#Obj_LevResultsGeneral,(a0)
; ---------------------------------------------------------------------------
; Object - General Level Results Object
; ---------------------------------------------------------------------------
; Offset_0x0249EA:
Obj_LevResultsGeneral:
		jsr	LevelResults_MoveElement(pc)
		jmp	(DisplaySprite).l
; ---------------------------------------------------------------------------
; Object - Act on the Level Results
; ---------------------------------------------------------------------------
; Offset_0x0249F4: Obj_LvL_Res_ACT_X:
Obj_LevResultsAct:
		tst.b	(Apparent_Act).w			; are we in "Act 2"?
		beq.s	Offset_0x0249E4				; if not, branch
		addq.b	#1,Obj_Map_Id(a0)
		bra.s	Offset_0x0249E4
; ---------------------------------------------------------------------------
; Object - Time Results on the Level Results
; ---------------------------------------------------------------------------
; Offset_0x024A00: Obj_LvL_Res_Time_Bonus:
Obj_LevelResultsTimeBonus:
		jsr	LevelResults_MoveElement(pc)
		move.w	(Level_Results_Time_Bonus).w,d0
		bra.s	LevelResults_Display
; ---------------------------------------------------------------------------
; Object - Ring Results on the Level Results
; ---------------------------------------------------------------------------
; Offset_0x024A0A: Obj_LvL_Res_Ring_Bonus:
Obj_LevelResultsRingBonus:
		jsr	LevelResults_MoveElement(pc)
		move.w	(Level_Results_Ring_Bonus).w,d0
		bra.s	LevelResults_Display
; ---------------------------------------------------------------------------
; Object - Total Results on the Level Results
; ---------------------------------------------------------------------------
; Offset_0x024A14: Obj_LvL_Res_Total_Bonus:
Obj_LevelResultsTotal:
		jsr	LevelResults_MoveElement(pc)
		move.w	(Level_Results_Total_Bonus).w,d0

; Offset_0x024A1C: LR_Display_Value_D0:
LevelResults_Display:
		bsr.s	LevelResults_DisplayScore
		jmp	(DisplaySprite).l
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to convert the level results score to a viewable format
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x024A24: LR_Cvt_Hex_To_BCD:
LevelResults_DisplayScore:
		move.w	#7,Obj_Sub_Y(a0)
		jsr	LevelResults_GetDecimalScore(pc)
		rol.l	#4,d1
		lea	Obj_Speed_X(a0),a1
		move.w	Obj_X(a0),d2
		subi.w	#$38,d2					; move to left of the last zero
		move.w	Obj_Y(A0),d3
		moveq	#0,d4
		moveq	#6,d5

Offset_0x024A44:
		move.w	d2,(a1)+
		move.w	d3,(a1)+
		addq.w	#1,a1
		rol.l	#4,d1					; adjust bits
		move.w	d1,d0
		andi.w	#$F,d0
		beq.s	Offset_0x024A56
		moveq	#1,d4

Offset_0x024A56:
		add.w	d4,d0
		move.b	d0,(a1)+
		addq.w	#8,d2
		dbf	d5,Offset_0x024A44
		rts
; End of function LevelResults_DisplayScore

; ---------------------------------------------------------------------------
; Subroutine to move the level results onto screen
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x024A62: LR_Move_Element:
LevelResults_MoveElement:
		move.w	Obj_Respaw_Ref(a0),a1
		move.w	Obj_Control_Var_02(a1),d0		; is the object moving onto the screen?
		beq.s	LevelResults_MoveOntoScreen		; if yes, branch
		tst.b	Obj_Flags(a0)				; is the object off-screen?
		bmi.s	LevelResults_MoveOffScreen		; if not, branch
		subq.w	#1,Obj_Control_Var_00(a1)
		addq.w	#4,sp
		jmp	(DeleteObject).l
; ---------------------------------------------------------------------------
; Offset_0x024A7E:
LevelResults_MoveOffScreen:
		cmp.b	Obj_Col_Flags(a0),d0
		bcs.s	Offset_0x024AAC
		move.w	#-$20,d0
		tst.b	Obj_Routine(a0)
		beq.s	Offset_0x024A90
		neg.w	d0

Offset_0x024A90:
		add.w	Obj_X(a0),d0
		bra.s	LevelResults_ApplySpeed
; ---------------------------------------------------------------------------
; Offset_0x024A96:
LevelResults_MoveOntoScreen:
		moveq	#$10,d1
		move.w	Obj_X(a0),d0
		cmp.w	Obj_Control_Var_16(a0),d0
		beq.s	LevelResults_ApplySpeed
		blt.s	Offset_0x024AA6
		neg.w	d1

Offset_0x024AA6:
		add.w	d1,d0
; Offset_0x024AA8:
LevelResults_ApplySpeed:
		move.w	d0,Obj_X(a0)

Offset_0x024AAC:
		rts
; End of function LevelResults_MoveElement

; ---------------------------------------------------------------------------
; Subroutine to convert the score to decimal
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x24AAE: LR_Get_BCD_Total_Bonus:
LevelResults_GetDecimalScore:
		clr.l	(Level_Result_BCD_Total_Bonus).w
		lea	TimeBonuses(pc),a1
		moveq	#$F,d2

Offset_0x024AB8:
		ror.w	#1,d0
		bcs.s	Offset_0x024AC0
		subq.w	#3,a1
		bra.s	Offset_0x024ACE
; ---------------------------------------------------------------------------

Offset_0x024AC0:
		lea	(Level_Result_BCD_Total_Bonus+4).w,a2
		addi.w	#0,d0
		abcd	-(a1),-(a2)
		abcd	-(a1),-(a2)
		abcd	-(a1),-(a2)

Offset_0x024ACE:
		dbf	d2,Offset_0x024AB8
		move.l	(Level_Result_BCD_Total_Bonus).w,d1
		rts
; End of function LevelResults_GetDecimalScore

; ===========================================================================
; Apparently,according to Jorge, this is used by LevelResults_GetDecimalScore
; as it reads backwards into these values when reading TimeBonuses
; Offset_0x024AD8:
		dc.b    $03, $27, $68, $01, $63, $84, $00, $81
		dc.b    $92, $00, $40, $96, $00, $20, $48, $00
		dc.b    $10, $24, $00, $05, $12, $00, $02, $56
		dc.b    $00, $01, $28, $00, $00, $64, $00, $00
		dc.b    $32, $00, $00, $16, $00, $00, $08, $00
		dc.b    $00, $04, $00, $00, $02, $00, $00, $01
; ===========================================================================
; Offset_0x024B08: LR_Decimal_Values:
TimeBonuses:	dc.w	5000
		dc.w	5000
		dc.w	5000
		dc.w	5000
		dc.w	5000
		dc.w	1000
		dc.w	500
		dc.w	400
		dc.w	300
		dc.w	100
TimeBonuses_End:
; ===========================================================================
; Offset_0x024B1C: Level_Results_Conf:
LevelResults_ObjArray:
		ttlresObjData Obj_LevResultsCharName,	 $E0,-$220, $B8,$13,$48,1	; Character Name
		ttlresObjData Obj_LevResultsGeneral,	$130,-$1D0, $B8,$12,$30,1	; "GOT"
		ttlresObjData Obj_LevResultsGeneral,	 $E8, $468, $CC,$11,$70,3	; "THROUGH"
		ttlresObjData Obj_LevResultsAct,	$160, $4E0, $BC, $F,$38,3	; "ACT X"
		ttlresObjData Obj_LevResultsGeneral,	 $C0, $4C0, $F0, $E,$20,5	; "TIME"
		ttlresObjData Obj_LevResultsGeneral,	 $E8, $4E8, $F0, $C,$30,5	; "BONUS"
		ttlresObjData Obj_LevelResultsTimeBonus,$178, $578, $F0,  1,$40,5	; Time Bonus Number
		ttlresObjData Obj_LevResultsGeneral,	 $C0, $500,$100, $D,$20,7	; "RING"
		ttlresObjData Obj_LevResultsGeneral,	 $E8, $528,$100, $C,$30,7	; "BONUS"
		ttlresObjData Obj_LevelResultsRingBonus,$178, $5B8,$100,  1,$40,7	; Ring Bonus Number
		ttlresObjData Obj_LevResultsGeneral,	 $D4, $554,$11C, $B,$30,9	; "TOTAL"
		ttlresObjData Obj_LevelResultsTotal,	$178, $5F8,$11C,  1,$40,9	; Total Score Number
LevelResults_ObjArray_End:
; ===========================================================================

Offset_0x024BC4:
		jmp	(DeleteObject).l
; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Special Stage Results (leftover from Sonic 2)
; ---------------------------------------------------------------------------
; Offset_0x024BCA: Obj_S2_0x6F_Special_Stage_Results: S2Obj6F_SSResults:
		include	"data\s2_obj\Special Stage Results.asm"
;-------------------------------------------------------------------------------
; Rotina para carregar os inimigos ap�s a exibi��o dos Title Cards
; ->>>
;-------------------------------------------------------------------------------
Level_Load_Enemies_Art:                                        ; Offset_0x024F46
		lea	ArtLoadCues_KM(PC),a6                 ; Offset_0x02540C
		move.w	(Apparent_ZoneAndAct).w,d0                           ; $FFFFEE54
		ror.b	#1,d0
		lsr.w	#6,d0
		adda.w	(A6,d0),a6
		move.w	(A6)+,d6
		bmi.s	Offset_0x024F68
Offset_0x024F5A:
		move.l	(A6)+,a1
		move.w	(A6)+,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		dbf	D6, Offset_0x024F5A
Offset_0x024F68:
		rts
;-------------------------------------------------------------------------------
Special_Stage_Screen_Pos:                                      ; Offset_0x024F6A
		dc.w	$0240, $0120, $00AA
		dc.b	$02, $00
		dc.w	$0000, $0120, $0098
		dc.b	$04, $01
		dc.w	$0118, $0000, $00C4
		dc.b	$06, $05
		dc.w	$0130, $0000, $00D0
		dc.b	$08, $06
		dc.w	$0130, $0000, $00E8
		dc.b	$0A, $07
		dc.w	$0118, $0000, $00F4
		dc.b	$0C, $08
		dc.w	$0100, $0000, $00E8
		dc.b	$0E, $09
		dc.w	$0100, $0000, $00D0
		dc.b	$10, $0A
		dc.w	$0118, $0000, $00DC
		dc.b	$12, $0B
		dc.w	$0330, $0120, $0108
		dc.b	$14, $0C
		dc.w	$0340, $0120, $0118
		dc.b	$16, $0D
		dc.w	$0350, $0120, $0128
		dc.b	$18, $0E
		dc.w	$0360, $0120, $0138
		dc.b	$1A, $10
;-------------------------------------------------------------------------------
; Rotina para carregar os inimigos ap�s a exibi��o dos Title Cards
; ->>>
;-------------------------------------------------------------------------------
Time_Over_Game_Over_Mappings:                                  ; Offset_0x024FD2
		dc.w	Map_Game-Time_Over_Game_Over_Mappings  ; Offset_0x024FDA
		dc.w	Map_Over-Time_Over_Game_Over_Mappings  ; Offset_0x024FE8
		dc.w	Map_Time-Time_Over_Game_Over_Mappings  ; Offset_0x024FF6
		dc.w	Map_Over_-Time_Over_Game_Over_Mappings ; Offset_0x025004
Map_Game:                                                      ; Offset_0x024FDA
		dc.w	$0002
		dc.w	$F80D, $0000, $FFB8
		dc.w	$F80D, $0008, $FFD8
Map_Over:                                                      ; Offset_0x024FE8
		dc.w	$0002
		dc.w	$F80D, $0014, $0008
		dc.w	$F80D, $000C, $0028
Map_Time:                                                      ; Offset_0x024FF6
		dc.w	$0002
		dc.w	$F809, $001C, $FFC4
		dc.w	$F80D, $0008, $FFDC
Map_Over_:                                                     ; Offset_0x025004
		dc.w	$0002
		dc.w	$F80D, $0014, $000C
		dc.w	$F80D, $000C, $002C
;-------------------------------------------------------------------------------
Title_Cards_Mappings:                                          ; Offset_0x025012
		dc.w	TC_Map_Null-Title_Cards_Mappings            ; Offset_0x025034
		dc.w	TC_Map_Red_Bar-Title_Cards_Mappings         ; Offset_0x025036
		dc.w	TC_Map_Act_Number-Title_Cards_Mappings      ; Offset_0x025098
		dc.w	TC_Map_Zone-Title_Cards_Mappings            ; Offset_0x0250A6
		dc.w	TC_Map_Angel_Island-Title_Cards_Mappings    ; Offset_0x0250C0
		dc.w	TC_Map_Hydrocity-Title_Cards_Mappings       ; Offset_0x025104
		dc.w	TC_Map_Marble_Garden-Title_Cards_Mappings   ; Offset_0x02513C
		dc.w	TC_Map_Carnival_Night-Title_Cards_Mappings  ; Offset_0x025186
		dc.w	TC_Map_Flying_Battery-Title_Cards_Mappings  ; Offset_0x0251D6
		dc.w	TC_Map_Icecap-Title_Cards_Mappings          ; Offset_0x025226
		dc.w	TC_Map_Launch_Base-Title_Cards_Mappings     ; Offset_0x02524C
		dc.w	TC_Map_Mushroom_Valley-Title_Cards_Mappings ; Offset_0x02524C
		dc.w	TC_Map_Sandopolis-Title_Cards_Mappings      ; Offset_0x02524C
		dc.w	TC_Map_Lava_Reef-Title_Cards_Mappings       ; Offset_0x02524C
		dc.w	TC_Map_Sky_Sanctuary-Title_Cards_Mappings   ; Offset_0x02524C
		dc.w	TC_Map_Death_Egg-Title_Cards_Mappings       ; Offset_0x02524C
		dc.w	TC_Map_The_Doomsday-Title_Cards_Mappings    ; Offset_0x02524C
TC_Map_Null:                                                   ; Offset_0x025034
		dc.w	$0000
TC_Map_Red_Bar:                                                ; Offset_0x025036
		dc.w	$0010
		dc.w	$5809, $8510, $FFE8
		dc.w	$5809, $8516, $0000
		dc.w	$900F, $8500, $FFE0
		dc.w	$900F, $8500, $0000
		dc.w	$B00F, $8500, $FFE0
		dc.w	$B00F, $8500, $0000
		dc.w	$D00F, $8500, $FFE0
		dc.w	$D00F, $8500, $0000
		dc.w	$F00F, $8500, $FFE0
		dc.w	$F00F, $8500, $0000
		dc.w	$100F, $8500, $FFE0
		dc.w	$100F, $8500, $0000
		dc.w	$300F, $8500, $FFE0
		dc.w	$300F, $8500, $0000
		dc.w	$500F, $8500, $FFE0
		dc.w	$500F, $8500, $0000
TC_Map_Act_Number:                                             ; Offset_0x025098
		dc.w	$0002
		dc.w	$1009, $8537, $FFE4
		dc.w	$000F, $853D, $FFF5
TC_Map_Zone:                                                   ; Offset_0x0250A6
		dc.w	$0004
		dc.w	$0006, $8531, $FFDC ; Z
		dc.w	$000A, $8528, $FFEC ; O
		dc.w	$0006, $8522, $0004 ; N
		dc.w	$0006, $851C, $0014 ; E
TC_Map_Angel_Island:                                           ; Offset_0x0250C0
		dc.w	$000B
		dc.w	$0006, $854D, $FFE0 ; A
		dc.w	$0006, $8522, $FFF0 ; N
		dc.w	$0006, $8559, $0000 ; G
		dc.w	$0006, $851C, $0010 ; E
		dc.w	$0002, $8562, $0020 ; L
		dc.w	$0002, $855F, $0030 ; I
		dc.w	$0006, $8565, $0038 ; S
		dc.w	$0002, $8562, $0048 ; L
		dc.w	$0006, $854D, $0050 ; A
		dc.w	$0006, $8522, $0060 ; N
		dc.w	$0006, $8553, $0070 ; D
TC_Map_Hydrocity:                                              ; Offset_0x025104
		dc.w	$0009
		dc.w	$0006, $8559, $FFF0 ; H
		dc.w	$0006, $856E, $0000 ; Y
		dc.w	$0006, $8553, $0010 ; D
		dc.w	$0006, $8562, $0020 ; R
		dc.w	$000A, $8528, $0030 ; O
		dc.w	$0006, $854D, $0048 ; C
		dc.w	$0002, $855F, $0058 ; I
		dc.w	$0006, $8568, $0060 ; T
		dc.w	$0006, $856E, $0070 ; Y
TC_Map_Marble_Garden:                                          ; Offset_0x02513C
		dc.w	$000C
		dc.w	$000A, $8568, $FFB8 ; M
		dc.w	$0006, $854D, $FFD0 ; A
		dc.w	$0006, $8571, $FFE0 ; R
		dc.w	$0006, $8553, $FFF0 ; B
		dc.w	$0002, $8565, $0000 ; L
		dc.w	$0006, $851C, $0008 ; E
		dc.w	$0006, $855F, $0020 ; G
		dc.w	$0006, $854D, $0030 ; A
		dc.w	$0006, $8571, $0040 ; R
		dc.w	$0006, $8559, $0050 ; D
		dc.w	$0006, $851C, $0060 ; E
		dc.w	$0006, $8522, $0070 ; N
TC_Map_Carnival_Night:                                         ; Offset_0x025186
		dc.w	$000D
		dc.w	$0006, $8553, $FFC0 ; C
		dc.w	$0006, $854D, $FFD0 ; A
		dc.w	$0006, $856B, $FFE0 ; R
		dc.w	$0006, $8522, $FFF0 ; N
		dc.w	$0002, $8565, $0000 ; I
		dc.w	$0006, $8577, $0008 ; V
		dc.w	$0006, $854D, $0018 ; A
		dc.w	$0002, $8568, $0028 ; L
		dc.w	$0006, $8522, $0038 ; N
		dc.w	$0002, $8565, $0048 ; I
		dc.w	$0006, $8559, $0050 ; G
		dc.w	$0006, $855F, $0060 ; H
		dc.w	$0006, $8571, $0070 ; T
TC_Map_Flying_Battery:                                         ; Offset_0x0251D6
		dc.w	$000D
		dc.w	$0006, $8559, $FFB8 ; F
		dc.w	$0002, $8568, $FFC8 ; L
		dc.w	$0006, $8577, $FFD0 ; Y
		dc.w	$0002, $8565, $FFE0 ; I
		dc.w	$0006, $8522, $FFE8 ; N
		dc.w	$0006, $855F, $FFF8 ; G
		dc.w	$0006, $8553, $0010 ; B
		dc.w	$0006, $854D, $0020 ; A
		dc.w	$0006, $8571, $0030 ; T
		dc.w	$0006, $8571, $0040 ; T
		dc.w	$0006, $851C, $0050 ; E
		dc.w	$0006, $856B, $0060 ; R
		dc.w	$0006, $8577, $0070 ; Y
TC_Map_Icecap:                                                 ; Offset_0x025226
		dc.w	$0006
		dc.w	$0002, $8559, $0028 ; I
		dc.w	$0006, $8553, $0030 ; C
		dc.w	$0006, $851C, $0040 ; E
		dc.w	$0006, $8553, $0050 ; C
		dc.w	$0006, $854D, $0060 ; A
		dc.w	$0006, $855C, $0070 ; P
TC_Map_Launch_Base:                                            ; Offset_0x02524C
TC_Map_Mushroom_Valley:                                        ; Offset_0x02524C
TC_Map_Sandopolis:                                             ; Offset_0x02524C
TC_Map_Lava_Reef:                                              ; Offset_0x02524C
TC_Map_Sky_Sanctuary:                                          ; Offset_0x02524C
TC_Map_Death_Egg:                                              ; Offset_0x02524C
TC_Map_The_Doomsday:                                           ; Offset_0x02524C
		dc.w	$000A
		dc.w	$0002, $8565, $FFE0 ; L
		dc.w	$0006, $854D, $FFE8 ; A
		dc.w	$0006, $856E, $FFF8 ; U
		dc.w	$0006, $8522, $0008 ; N
		dc.w	$0006, $8559, $0018 ; C
		dc.w	$0006, $855F, $0028 ; H
		dc.w	$0006, $8553, $0040 ; B
		dc.w	$0006, $854D, $0050 ; A
		dc.w	$0006, $8568, $0060 ; S
		dc.w	$0006, $851C, $0070 ; E
;-------------------------------------------------------------------------------
Level_Results_Mappings:                                        ; Offset_0x02528A
		dc.w	TC_Res_Map_Null-Level_Results_Mappings ; Offset_0x0252B8
		dc.w	TC_Res_Map_Num_0-Level_Results_Mappings ; Offset_0x0252BA
		dc.w	TC_Res_Map_Num_1-Level_Results_Mappings ; Offset_0x0252C2
		dc.w	TC_Res_Map_Num_2-Level_Results_Mappings ; Offset_0x0252CA
		dc.w	TC_Res_Map_Num_3-Level_Results_Mappings ; Offset_0x0252D2
		dc.w	TC_Res_Map_Num_4-Level_Results_Mappings ; Offset_0x0252DA
		dc.w	TC_Res_Map_Num_5-Level_Results_Mappings ; Offset_0x0252E2
		dc.w	TC_Res_Map_Num_6-Level_Results_Mappings ; Offset_0x0252EA
		dc.w	TC_Res_Map_Num_7-Level_Results_Mappings ; Offset_0x0252F2
		dc.w	TC_Res_Map_Num_8-Level_Results_Mappings ; Offset_0x0252FA
		dc.w	TC_Res_Map_Num_9-Level_Results_Mappings ; Offset_0x025302
		dc.w	LR_Total-Level_Results_Mappings         ; Offset_0x02530A
		dc.w	TC_BONUS-Level_Results_Mappings         ; Offset_0x025330
		dc.w	TC_RING-Level_Results_Mappings          ; Offset_0x025356
		dc.w	TC_TIME-Level_Results_Mappings          ; Offset_0x02535E
		dc.w	Offset_0x025366-Level_Results_Mappings
		dc.w	Offset_0x025374-Level_Results_Mappings
		dc.w	Offset_0x025382-Level_Results_Mappings
		dc.w	Offset_0x0253A8-Level_Results_Mappings
		dc.w	Offset_0x0253BC-Level_Results_Mappings
		dc.w	Offset_0x0253D0-Level_Results_Mappings
		dc.w	Offset_0x0253E4-Level_Results_Mappings
		dc.w	Offset_0x0253F2-Level_Results_Mappings
TC_Res_Map_Null:                                               ; Offset_0x0252B8
		dc.w	$0000
TC_Res_Map_Num_0:                                              ; Offset_0x0252BA
		dc.w	$0001
		dc.w	$0001, $A520, $0000
TC_Res_Map_Num_1:                                              ; Offset_0x0252C2
		dc.w	$0001
		dc.w	$0001, $A522, $0000
TC_Res_Map_Num_2:                                              ; Offset_0x0252CA
		dc.w	$0001
		dc.w	$0001, $A524, $0000
TC_Res_Map_Num_3:                                              ; Offset_0x0252D2
		dc.w	$0001
		dc.w	$0001, $A526, $0000
TC_Res_Map_Num_4:                                              ; Offset_0x0252DA
		dc.w	$0001
		dc.w	$0001, $A528, $0000
TC_Res_Map_Num_5:                                              ; Offset_0x0252E2
		dc.w	$0001
		dc.w	$0001, $A52A, $0000
TC_Res_Map_Num_6:                                              ; Offset_0x0252EA
		dc.w	$0001
		dc.w	$0001, $A52C, $0000
TC_Res_Map_Num_7:                                              ; Offset_0x0252F2
		dc.w	$0001
		dc.w	$0001, $A52E, $0000
TC_Res_Map_Num_8:                                              ; Offset_0x0252FA
		dc.w	$0001
		dc.w	$0001, $A530, $0000
TC_Res_Map_Num_9:                                              ; Offset_0x025302
		dc.w	$0001
		dc.w	$0001, $A532, $0000
LR_Total:                                                      ; Offset_0x02530A
		dc.w	$0006
		dc.w	$0001, $A6DA, $0000
		dc.w	$0001, $A6CE, $0008
		dc.w	$0001, $A6DA, $0010
		dc.w	$0005, $A539, $0018
		dc.w	$F600, $8534, $002C
		dc.w	$FE05, $8535, $0024
TC_BONUS:                                                      ; Offset_0x025330
		dc.w	$0006
		dc.w	$0001, $A53D, $0000
		dc.w	$0001, $A6CE, $0008
		dc.w	$0005, $A53F, $0010
		dc.w	$0001, $A6CA, $0020
		dc.w	$F600, $8534, $002C
		dc.w	$FE05, $8535, $0024
TC_RING:                                                       ; Offset_0x025356
		dc.w	$0001
		dc.w	$000D, $A6D2, $0000
TC_TIME:                                                       ; Offset_0x02535E
		dc.w	$0001
		dc.w	$000D, $A6DA, $0000
Offset_0x025366:
		dc.w	$0002
		dc.w	$1009, $8543, $0000
		dc.w	$000F, $8580, $0011
Offset_0x025374:
		dc.w	$0002
		dc.w	$1009, $8543, $0000
		dc.w	$000F, $85A0, $0011
Offset_0x025382:
		dc.w	$0006
		dc.w	$0005, $8559, $0000
		dc.w	$0005, $854D, $0010
		dc.w	$0005, $8555, $0020
		dc.w	$0005, $8551, $0030
		dc.w	$0005, $855D, $0040
		dc.w	$000D, $8549, $0050
Offset_0x0253A8:
		dc.w	$0003
		dc.w	$0005, $8549, $0000
		dc.w	$0005, $8551, $0010
		dc.w	$0005, $8559, $001E
Offset_0x0253BC:
		dc.w	$0003
		dc.w	$000D, $8561, $0001
		dc.w	$000D, $8569, $0021
		dc.w	$0001, $8571, $0041
Offset_0x0253D0:
		dc.w	$0003
		dc.w	$000D, $8561, $0006
		dc.w	$000D, $8569, $0026
		dc.w	$0001, $8571, $0046
Offset_0x0253E4:
		dc.w	$0002
		dc.w	$000D, $8561, $0001
		dc.w	$000D, $8569, $0021
Offset_0x0253F2:
		dc.w	$0004
		dc.w	$000D, $8561, $0004
		dc.w	$000D, $8569, $0024
		dc.w	$000D, $8571, $0044
		dc.w	$0009, $8579, $0064
;-------------------------------------------------------------------------------
; Refer�ncia do objeto 0x6F - Left over do Sonic 2
; ->>>
;-------------------------------------------------------------------------------
Special_Stage_Results_Mappings:                                ; Offset_0x02540C
;-------------------------------------------------------------------------------
; Refer�ncia do objeto 0x6F - Left over do Sonic 2
; <<<-
;-------------------------------------------------------------------------------
ArtLoadCues_KM:                                                ; Offset_0x02540C
		dc.w	PLC_Angel_Island_Act_1_Enemies-ArtLoadCues_KM    ; Offset_0x025440
		dc.w	PLC_Angel_Island_Act_2_Enemies-ArtLoadCues_KM    ; Offset_0x025440
		dc.w	PLC_Hydrocity_Act_1_Enemies-ArtLoadCues_KM       ; Offset_0x025454
		dc.w	PLC_Hydrocity_Act_2_Enemies-ArtLoadCues_KM       ; Offset_0x02546E
		dc.w	PLC_Marble_Garden_Act_1_Enemies-ArtLoadCues_KM   ; Offset_0x025488
		dc.w	PLC_Marble_Garden_Act_2_Enemies-ArtLoadCues_KM   ; Offset_0x02549C
		dc.w	PLC_Carnival_Night_Act_1_Enemies-ArtLoadCues_KM  ; Offset_0x0254B0
		dc.w	PLC_Carnival_Night_Act_2_Enemies-ArtLoadCues_KM  ; Offset_0x0254B0
		dc.w	PLC_Flying_Battery_Act_1_Enemies-ArtLoadCues_KM  ; Offset_0x0254CA
		dc.w	PLC_Flying_Battery_Act_2_Enemies-ArtLoadCues_KM  ; Offset_0x0254CA
		dc.w	PLC_Icecap_Act_1_Enemies-ArtLoadCues_KM          ; Offset_0x0254D8
		dc.w	PLC_Icecap_Act_2_Enemies-ArtLoadCues_KM          ; Offset_0x0254D8
		dc.w	PLC_Launch_Bast_Act_1_Enemies-ArtLoadCues_KM     ; Offset_0x0254E6
		dc.w	PLC_Launch_Bast_Act_2_Enemies-ArtLoadCues_KM     ; Offset_0x0254E6
		dc.w	PLC_Mushroom_Valley_Act_1_Enemies-ArtLoadCues_KM ; Offset_0x0254E6
		dc.w	PLC_Mushroom_Valley_Act_1_Enemies-ArtLoadCues_KM ; Offset_0x0254E6
		dc.w	PLC_Sandopolis_Act_1_Enemies-ArtLoadCues_KM      ; Offset_0x0254E6
		dc.w	PLC_Sandopolis_Act_2_Enemies-ArtLoadCues_KM      ; Offset_0x0254E6
		dc.w	PLC_Lava_Reef_Act_1_Enemies-ArtLoadCues_KM       ; Offset_0x0254E6
		dc.w	PLC_Lava_Reef_Act_2_Enemies-ArtLoadCues_KM       ; Offset_0x0254E6
		dc.w	PLC_Sky_Sanctuary_Act_1_Enemies-ArtLoadCues_KM   ; Offset_0x0254E6
		dc.w	PLC_Sky_Sanctuary_Act_1_Enemies-ArtLoadCues_KM   ; Offset_0x0254E6
		dc.w	PLC_Death_Egg_Act_1_Enemies-ArtLoadCues_KM       ; Offset_0x0254E6
		dc.w	PLC_Death_Egg_Act_2_Enemies-ArtLoadCues_KM       ; Offset_0x0254E6
		dc.w	PLC_The_Doomsday_Act_1_Enemies-ArtLoadCues_KM    ; Offset_0x0254E6
		dc.w	PLC_The_Doomsday_Act_2_Enemies-ArtLoadCues_KM    ; Offset_0x0254E6
;-------------------------------------------------------------------------------
PLC_Angel_Island_Act_1_Enemies:                                ; Offset_0x025440
PLC_Angel_Island_Act_2_Enemies:                                ; Offset_0x025440
		dc.w	(((PLCE_00_End-PLCE_00)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_00:
		dc.l	Art_Monkey_Dude                        ; Offset_0x1142A8
		dc.w	$A900
		dc.l	Art_Tulipon                            ; Offset_0x114066
		dc.w	$A540
		dc.l	Art_Catakiller_Jr                      ; Offset_0x11449A
		dc.w	$ABE0
PLCE_00_End:
;-------------------------------------------------------------------------------
PLC_Hydrocity_Act_1_Enemies:                                   ; Offset_0x025454
		dc.w	(((PLCE_02_End-PLCE_02)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_02:
		dc.l	Art_Blastoid                           ; Offset_0x1169C4
		dc.w	$A720
		dc.l	Art_Turbo_Spiker                       ; Offset_0x116B66
		dc.w	$A000
		dc.l	Art_Mega_Chopper                       ; Offset_0x1168C2
		dc.w	$A9A0
		dc.l	Art_Pointdexter                        ; Offset_0x116F88
		dc.w	$AB20
PLCE_02_End:
;-------------------------------------------------------------------------------
PLC_Hydrocity_Act_2_Enemies:                                   ; Offset_0x02546E
		dc.w	(((PLCE_03_End-PLCE_03)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_03:
		dc.l	Art_Jawz                               ; Offset_0x116750
		dc.w	$A720
		dc.l	Art_Turbo_Spiker                       ; Offset_0x116B66
		dc.w	$A000
		dc.l	Art_Mega_Chopper                       ; Offset_0x1168C2
		dc.w	$A9A0
		dc.l	Art_Pointdexter                        ; Offset_0x116F88
		dc.w	$AB20
PLCE_03_End:
;-------------------------------------------------------------------------------
PLC_Marble_Garden_Act_1_Enemies:                               ; Offset_0x025488
		dc.w	(((PLCE_04_End-PLCE_04)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_04:
		dc.l	Art_Spiker                             ; Offset_0x11A308
		dc.w	$A600
		dc.l	Art_Tunnelbot                          ; Offset_0x11722A
		dc.w	$A9E0
		dc.l	Art_Rocks                              ; Offset_0x1197B6
		dc.w	$AE00
PLCE_04_End:
;-------------------------------------------------------------------------------
PLC_Marble_Garden_Act_2_Enemies:                               ; Offset_0x02549C
		dc.w	(((PLCE_05_End-PLCE_05)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_05:
		dc.l	Art_Spiker                             ; Offset_0x11A308
		dc.w	$A600
		dc.l	Art_Mantis                             ; Offset_0x11A51A
		dc.w	$A9E0
		dc.l	Art_Rocks                              ; Offset_0x1197B6
		dc.w	$7DE0
PLCE_05_End:
;-------------------------------------------------------------------------------
PLC_Carnival_Night_Act_1_Enemies:                              ; Offset_0x0254B0
PLC_Carnival_Night_Act_2_Enemies:                              ; Offset_0x0254B0
		dc.w	(((PLCE_06_End-PLCE_06)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_06:
		dc.l	Art_Sparkle                            ; Offset_0x11C30E
		dc.w	$A480
		dc.l	Art_Batbot                             ; Offset_0x11C630
		dc.w	$AA40
		dc.l	Art_Spikeball                          ; Offset_0x11C29C
		dc.w	$AE00
		dc.l	Art_Balloon                            ; Offset_0x11C852
		dc.w	$AE80
PLCE_06_End:
;-------------------------------------------------------------------------------
PLC_Flying_Battery_Act_1_Enemies:                              ; Offset_0x0254CA
PLC_Flying_Battery_Act_2_Enemies:                              ; Offset_0x0254CA
		dc.w	(((PLCE_08_End-PLCE_08)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_08:
		dc.l	Art_Blaster                            ; Offset_0x11D79E
		dc.w	$A000
		dc.l	Art_Technosqueek                       ; Offset_0x11DAA0
		dc.w	$A500
PLCE_08_End:
;-------------------------------------------------------------------------------
PLC_Icecap_Act_1_Enemies:                                      ; Offset_0x0254D8
PLC_Icecap_Act_2_Enemies:                                      ; Offset_0x0254D8
		dc.w	(((PLCE_0A_End-PLCE_0A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_0A:
		dc.l	Art_Ice_Block                          ; Offset_0x1213CE
		dc.w	$AB00
		dc.l	Art_Orbinaut                           ; Offset_0x121460
		dc.w	$A900
PLCE_0A_End:
;-------------------------------------------------------------------------------
PLC_Launch_Bast_Act_1_Enemies:                                 ; Offset_0x0254E6
PLC_Launch_Bast_Act_2_Enemies:                                 ; Offset_0x0254E6
PLC_Mushroom_Valley_Act_1_Enemies:                             ; Offset_0x0254E6
PLC_Mushroom_Valley_Act_2_Enemies:                             ; Offset_0x0254E6
PLC_Sandopolis_Act_1_Enemies:                                  ; Offset_0x0254E6
PLC_Sandopolis_Act_2_Enemies:                                  ; Offset_0x0254E6
PLC_Lava_Reef_Act_1_Enemies:                                   ; Offset_0x0254E6
PLC_Lava_Reef_Act_2_Enemies:                                   ; Offset_0x0254E6
PLC_Sky_Sanctuary_Act_1_Enemies:                               ; Offset_0x0254E6
PLC_Sky_Sanctuary_Act_2_Enemies:                               ; Offset_0x0254E6
PLC_Death_Egg_Act_1_Enemies:                                   ; Offset_0x0254E6
PLC_Death_Egg_Act_2_Enemies:                                   ; Offset_0x0254E6
PLC_The_Doomsday_Act_1_Enemies:                                ; Offset_0x0254E6
PLC_The_Doomsday_Act_2_Enemies:                                ; Offset_0x0254E6
		dc.w	(((PLCE_0C_End-PLCE_0C)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLCE_0C:
		dc.l	Art_Snale_Blaster                      ; Offset_0x12281E
		dc.w	$A480
		dc.l	Art_Orbinaut_2                         ; Offset_0x122BA2
		dc.w	$ADC0
		dc.l	Art_Ribot                              ; Offset_0x122A70
		dc.w	$A8E0
		dc.l	Art_Corkey                             ; Offset_0x122C84
		dc.w	$AB00
PLCE_0C_End:
;-------------------------------------------------------------------------------
Obj_0x54_Oxygen_Bubbles:                                       ; Offset_0x025500
		include "data\objects\obj_0x54.asm"
;-------------------------------------------------------------------------------
Sonic_Underwater_Mappings:                                     ; Offset_0x025872
		dc.w	Offset_0x0258CE-Sonic_Underwater_Mappings
		dc.w	Offset_0x0258D6-Sonic_Underwater_Mappings
		dc.w	Offset_0x0258DE-Sonic_Underwater_Mappings
		dc.w	Offset_0x0258E6-Sonic_Underwater_Mappings
		dc.w	Offset_0x0258EE-Sonic_Underwater_Mappings
		dc.w	Offset_0x0258F6-Sonic_Underwater_Mappings
		dc.w	Offset_0x0258FE-Sonic_Underwater_Mappings
		dc.w	Offset_0x025906-Sonic_Underwater_Mappings
		dc.w	Offset_0x025920-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x02593A-Sonic_Underwater_Mappings
		dc.w	Offset_0x025942-Sonic_Underwater_Mappings
		dc.w	Offset_0x02594A-Sonic_Underwater_Mappings
		dc.w	Offset_0x025952-Sonic_Underwater_Mappings
		dc.w	Offset_0x02595A-Sonic_Underwater_Mappings
Miles_Underwater_Mappings:                                     ; Offset_0x0258A0
		dc.w	Offset_0x0258CE-Miles_Underwater_Mappings
		dc.w	Offset_0x0258D6-Miles_Underwater_Mappings
		dc.w	Offset_0x0258DE-Miles_Underwater_Mappings
		dc.w	Offset_0x0258E6-Miles_Underwater_Mappings
		dc.w	Offset_0x0258EE-Miles_Underwater_Mappings
		dc.w	Offset_0x0258F6-Miles_Underwater_Mappings
		dc.w	Offset_0x0258FE-Miles_Underwater_Mappings
		dc.w	Offset_0x025906-Miles_Underwater_Mappings
		dc.w	Offset_0x025920-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x02595C-Miles_Underwater_Mappings
		dc.w	Offset_0x025942-Miles_Underwater_Mappings
		dc.w	Offset_0x02594A-Miles_Underwater_Mappings
		dc.w	Offset_0x025952-Miles_Underwater_Mappings
		dc.w	Offset_0x02595A-Miles_Underwater_Mappings
Offset_0x0258CE:
		dc.w	$0001
		dc.w	$FC00, $0000, $FFFC
Offset_0x0258D6:
		dc.w	$0001
		dc.w	$FC00, $0001, $FFFC
Offset_0x0258DE:
		dc.w	$0001
		dc.w	$FC00, $0002, $FFFC
Offset_0x0258E6:
		dc.w	$0001
		dc.w	$F805, $0003, $FFF8
Offset_0x0258EE:
		dc.w	$0001
		dc.w	$F805, $0007, $FFF8
Offset_0x0258F6:
		dc.w	$0001
		dc.w	$F40A, $000B, $FFF4
Offset_0x0258FE:
		dc.w	$0001
		dc.w	$F00F, $0014, $FFF0
Offset_0x025906:
		dc.w	$0004
		dc.w	$F005, $0024, $FFF0
		dc.w	$F005, $0824, $0000
		dc.w	$0005, $1024, $FFF0
		dc.w	$0005, $1824, $0000
Offset_0x025920:
		dc.w	$0004
		dc.w	$F005, $0028, $FFF0
		dc.w	$F005, $0828, $0000
		dc.w	$0005, $1028, $FFF0
		dc.w	$0005, $1828, $0000
Offset_0x02593A:
		dc.w	$0001
		dc.w	$F406, $0384, $FFF8
Offset_0x025942:
		dc.w	$0001
		dc.w	$F805, $002C, $FFF8
Offset_0x02594A:
		dc.w	$0001
		dc.w	$F805, $0030, $FFF8
Offset_0x025952:
		dc.w	$0001
		dc.w	$F805, $0034, $FFF8
Offset_0x02595A:
		dc.w	$0000
Offset_0x02595C:
		dc.w	$0001
		dc.w	$F406, $0394, $FFF8
;-------------------------------------------------------------------------------
Obj_0x37_Hz_Vertical_Water_Stream:                             ; Offset_0x025964
		include "data\objects\obj_0x37.asm"
Obj_0x3B_Hz_Water_Wall:                                        ; Offset_0x025C30
		include "data\objects\obj_0x3B.asm"
Obj_0x38_Hz_Fan:                                               ; Offset_0x026408
		include "data\objects\obj_0x38.asm"
Obj_0x39_Hz_Large_Fan:                                         ; Offset_0x026736
		include "data\objects\obj_0x39.asm"
Obj_0x38_CGz_Fan_2P:                                           ; Offset_0x026960
		include "data\objects\obj2px38.asm"
Obj_0x3A_Hz_Hand_Launcher:                                     ; Offset_0x026A80
		include "data\objects\obj_0x3A.asm"
; Obj_0x3C_Automatic_Door:                                     ; Offset_0x026ED0
		include "data\objects\obj_0x3C.asm"
; Obj_0x3E_Conveyor_Belt_Attributes:                           ; Offset_0x0271C4
		include "data\objects\obj_0x3E.asm"
Obj_0x3F_Hz_Spikes_On_Conveyor_Belt:                           ; Offset_0x027346
		include "data\objects\obj_0x3F.asm"
Obj_0x41_CNz_Balloon:                                          ; Offset_0x027552
		include "data\objects\obj_0x41.asm"
Obj_0x42_CNz_Cannon:                                           ; Offset_0x02794E
		include "data\objects\obj_0x42.asm"
Obj_0x43_CNz_Platform:                                         ; Offset_0x027DBA
		include "data\objects\obj_0x43.asm"
Obj_0x44_CNz_Trapdoor:                                         ; Offset_0x027F0E
		include "data\objects\obj_0x44.asm"
Obj_0x45_CNz_Light_Bulb:                                       ; Offset_0x027FDA
		include "data\objects\obj_0x45.asm"
Obj_0x46_CNz_Fan:                                              ; Offset_0x02805C
		include "data\objects\obj_0x46.asm"
Obj_0x48_CNz_Vacuum_Tubes:                                     ; Offset_0x028278
		include "data\objects\obj_0x48.asm"
; Obj_0x47_CNz_Barrel:                                         ; Offset_0x028430
		include "data\objects\obj_0x47.asm"
Obj_0x68_Hz_Spinning_Column:                                   ; Offset_0x0289B8
		include "data\objects\obj_0x68.asm"
Obj_0x49_CNz_Wheel:                                            ; Offset_0x028C62
		include "data\objects\obj_0x49.asm"
Obj_0x4B_Triangular_Springs:                                   ; Offset_0x028D2E
		include "data\objects\obj_0x4B.asm"
Obj_0x4F_Mud_Quicksand_Attributes:                             ; Offset_0x028E12
		include "data\objects\obj_0x4F.asm"
Obj_0x5D_CGz_Triangular_Springs:                               ; Offset_0x029004
		include "data\objects\obj_0x5D.asm"
Obj_0x4A_Bumper:                                               ; Offset_0x029188
		include "data\objects\obj_0x4A.asm"
Obj_0x4C_Corkscrew:                                            ; Offset_0x029408
		include "data\objects\obj_0x4C.asm"
Obj_0x4D_CNz_Barber_Pole:                                      ; Offset_0x0296A0
		include "data\objects\obj_0x4D.asm"
Obj_0x4E_CNz_Rotating_Mesh:                                    ; Offset_0x029B5E
		include "data\objects\obj_0x4E.asm"
Obj_0x50_MGz_Vertical_Pole:                                    ; Offset_0x029F86
		include "data\objects\obj_0x50.asm"
Obj_0x53_MGz_Swinging_Platform:                                ; Offset_0x02A224
		include "data\objects\obj_0x53.asm"
Obj_0x58_MGz_Swinging_Spiked_Ball:                             ; Offset_0x02A390
		include "data\objects\obj_0x58.asm"
Obj_0x55_MGz_Head_Trigger:                                     ; Offset_0x02A5BC
		include "data\objects\obj_0x55.asm"
; Obj_0x57_MGz_Trigger_Platform:                               ; Offset_0x02A884
		include "data\objects\obj_0x57.asm"
Obj_0x56_MGz_Moving_Spike_Platform:                            ; Offset_0x02AA8A
		include "data\objects\obj_0x56.asm"
Obj_0x5A_MGz_Pulley:                                           ; Offset_0x02ACD8
		include "data\objects\obj_0x5A.asm"
Obj_0x5B_MGz_Blue_Spinning_Platform:                           ; Offset_0x02B19A
		include "data\objects\obj_0x5B.asm"
Obj_0x5C_MGz_Blue_Platform_Launcher:                           ; Offset_0x02BED2
		include "data\objects\obj_0x5C.asm"
Obj_0x5E_CGz_Blade_Platform:                                   ; Offset_0x02BFBE
		include "data\objects\obj_0x5E.asm"
Obj_0x60_BPz_Elephant_Block:                                   ; Offset_0x02C13C
		include "data\objects\obj_0x60.asm"
Obj_0x61_BPz_Balloon:                                          ; Offset_0x02C2C4
		include "data\objects\obj_0x61.asm"
Obj_0x62_DPz_Dissolving_Sand_Bar:                              ; Offset_0x02C47E
		include "data\objects\obj_0x62.asm"
Obj_0x63_DPz_Button:                                           ; Offset_0x02C7E6
		include "data\objects\obj_0x63.asm"
Obj_0x64_Bubble_Container:                                     ; Offset_0x02C8A8
		include "data\objects\obj_0x64.asm"
Obj_0x65_Goal_Marker:                                          ; Offset_0x02D124
		include "data\objects\obj_0x65.asm"
Obj_0x66_EMz_Dripper:                                          ; Offset_0x02DF26
		include "data\objects\obj_0x66.asm"
Obj_0x6E_Hz_Waterfall:                                         ; Offset_0x02E0A8
		include	"data\objects\obj_0x6E.asm"
Obj_0x6D_Hz_Water_Splash:                                      ; Offset_0x02E22E
		include "data\objects\obj_0x6D.asm"
Obj_0x6C_Bridge:                                               ; Offset_0x02E504
		include "data\objects\obj_0x6C.asm"
; Obj_0x69_Hz_Curved_Twisting_Pipe:                            ; Offset_0x02EEEA
		include "data\objects\obj_0x69.asm"
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to setup level tile drawing routines
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x02F25C: Load_Tiles_From_Start:
Setup_TileDrawing:
		clr.b	(Background_Collision_Flag).w
		clr.l	(Plane_Double_Update_Flag).w
		clr.w	(Level_Repeat_Routine).w
		clr.l	(Level_Repeat_Offset).w
		clr.l	(Level_Events_Routine).w
		clr.l	(Foreground_Events_Y_Counter).w
		clr.w	(Earthquake_Flag).w
		clr.l	(Earthquake_Offset).w
		clr.l	(Background_Events).w
		clr.l	(Background_Events+4).w
		clr.l	(Background_Events+8).w
		clr.l	(Background_Events+$C).w
		move.w	#$FFF,(Screen_Wrap_Y).w
		move.w	#$FF0,(Level_Layout_Wrap_Y).w
		move.w	#$7C,(Level_Layout_Wrap_Row).w
		move.w	(Camera_X).w,(Screen_Pos_Buffer_X).w
		move.w	(Camera_Y).w,(Screen_Pos_Buffer_Y).w
		lea	(Plane_Buffer).w,a0
		lea	(Blocks_Mem_Address).w,a2
		lea	(Fg_Mem_Index_Address).w,a3
		move.w	#$C000,d7
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#2,d0
		lsr.w	#3,d0
		move.l	Load_Tiles_From_Start_Pointers(pc,d0.w),a1
		jsr	(a1)
		addq.w	#2,a3
		move.w	#$E000,d7
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#2,d0
		lsr.w	#3,d0
		move.l	Load_Tiles_From_Start_Pointers+4(pc,d0.w),a1
		jsr	(a1)
		move.w	(Screen_Pos_Buffer_Y).w,(Vertical_Scroll_Value).w
		move.w	(Screen_Pos_Buffer_Y_2).w,(Vertical_Scroll_Value_2).w
		rts
; End of function Setup_TileDrawing

; ---------------------------------------------------------------------------
; Subroutine to run level tile drawing routines
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x02F2EA: Background_Scroll_Layer:
Run_TileDrawing:
		move.w	(Camera_X).w,(Screen_Pos_Buffer_X).w
		move.w	(Camera_Y).w,(Screen_Pos_Buffer_Y).w
		lea	(Plane_Buffer).w,a0
		lea	(Blocks_Mem_Address).w,a2
		lea	(Fg_Mem_Index_Address).w,a3
		move.w	#$C000,d7
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#2,d0
		lsr.w	#3,d0
		move.l	Load_Tiles_As_You_Move_Pointers(pc,d0.w),a1
		jsr	(a1)
		addq.w	#2,a3
		move.w	#$E000,d7
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#2,d0
		lsr.w	#3,d0
		move.l	Load_Tiles_As_You_Move_Pointers+4(pc,d0.w),a1
		jsr	(a1)
		move.w	(Screen_Pos_Buffer_Y).w,(Vertical_Scroll_Value).w
		move.w	(Screen_Pos_Buffer_Y_2).w,(Vertical_Scroll_Value_2).w
		rts
; End of function Run_TileDrawing

; ---------------------------------------------------------------------------
; Offset_0x02F336:
Load_Tiles_From_Start_Pointers:
		dc.l	AIz_1_Events_Init
		dc.l	AIz_1_Events_Init_2
		dc.l	AIz_2_Events_Init
		dc.l	AIz_2_Events_Init_2
; Offset_0x02F346:
Load_Tiles_As_You_Move_Pointers:
		dc.l	AIz_1_Events_Run
		dc.l	AIz_1_Events_Run_2
		dc.l	AIz_2_Events_Run
		dc.l	AIz_2_Events_Run_2
;--------------
		dc.l	Hz_1_Events_Init                       ; Offset_0x031C52
		dc.l	Hz_1_Events_Init_2                     ; Offset_0x031C5E
		dc.l	HCZ2_RefreshScreen
		dc.l	HCZ2_RefreshBackground
;--------------
		dc.l	Hz_1_Events_Run                        ; Offset_0x031C5A
		dc.l	Hz_1_Events_Run_2                      ; Offset_0x031C70
		dc.l	HCZ2_RunScreen
		dc.l	HCZ2_RunBackground
;--------------
		dc.l	MGz_1_Events_Init                      ; Offset_0x031F18
		dc.l	MGz_1_Events_Init_2                    ; Offset_0x031F2C
		dc.l	MGz_2_Events_Init                      ; Offset_0x0320E2
		dc.l	MGz_2_Events_Init_2                    ; Offset_0x032732
;--------------
		dc.l	MGz_1_Events_Run                       ; Offset_0x031F20
		dc.l	MGz_1_Events_Run_2                     ; Offset_0x031F44
		dc.l	MGz_2_Events_Run                       ; Offset_0x0320F2
		dc.l	MGz_2_Events_Run_2                     ; Offset_0x0327DE
;--------------
		dc.l	CNz_1_Events_Init                      ; Offset_0x032BAE
		dc.l	CNz_1_Events_Init_2                    ; Offset_0x032C8A
		dc.l	CNz_2_Events_Init                      ; Offset_0x032BAE
		dc.l	CNz_2_Events_Init_2                    ; Offset_0x032C8A
;--------------
		dc.l	CNz_1_Events_Run                       ; Offset_0x032BB6
		dc.l	CNz_1_Events_Run_2                     ; Offset_0x032CA4
		dc.l	CNz_2_Events_Run                       ; Offset_0x032BB6
		dc.l	CNz_2_Events_Run_2                     ; Offset_0x032CA4
;--------------
		dc.l	Level_RefreshScreen	; FBZ1
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen	; FBZ2
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground	; FBZ1
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground	; FBZ2
;--------------
		dc.l	Iz_1_Events_Init                       ; Offset_0x032D36
		dc.l	Iz_1_Events_Init_2                     ; Offset_0x032D86
		dc.l	Iz_2_Events_Init                       ; Offset_0x033138
		dc.l	Iz_2_Events_Init_2                     ; Offset_0x033144
;--------------
		dc.l	Iz_1_Events_Run                        ; Offset_0x032D50
		dc.l	Iz_1_Events_Run_2                      ; Offset_0x032E00
		dc.l	Iz_2_Events_Run                        ; Offset_0x033140
		dc.l	Iz_2_Events_Run_2                      ; Offset_0x0331AC
;--------------
		dc.l	LBz_1_Events_Init                      ; Offset_0x033422
		dc.l	LBz_1_Events_Init_2                    ; Offset_0x033736
		dc.l	LBz_2_Events_Init                      ; Offset_0x033900
		dc.l	LBz_2_Events_Init_2                    ; Offset_0x03395A
;--------------
		dc.l	LBz_1_Events_Run                       ; Offset_0x03348A
		dc.l	LBZ1_RunBackground
		dc.l	LBz_2_Events_Run                       ; Offset_0x033910
		dc.l	LBz_2_Events_Run_2                     ; Offset_0x03397A
;--------------
		dc.l	MVz_1_Events_Init                      ; Offset_0x033C24
		dc.l	MVz_1_Events_Init_2                    ; Offset_0x033C30
		dc.l	MVz_2_Events_Init                      ; Offset_0x033C24
		dc.l	MVz_2_Events_Init_2                    ; Offset_0x033C30
;--------------
		dc.l	MVz_1_Events_Run                       ; Offset_0x033C2C
		dc.l	MVz_1_Events_Run_2                     ; Offset_0x033C42
		dc.l	MVz_2_Events_Run                       ; Offset_0x033C2C
		dc.l	MVz_2_Events_Run_2                     ; Offset_0x033C42
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	LRz_1_Events_Init                      ; Offset_0x033C70
		dc.l	LRz_1_Events_Init_2                    ; Offset_0x033C84
		dc.l	LRz_2_Events_Init                      ; Offset_0x033C70
		dc.l	LRz_2_Events_Init_2                    ; Offset_0x033C84
;--------------
		dc.l	LRz_1_Events_Run                       ; Offset_0x033C78
		dc.l	LRz_1_Events_Run_2                     ; Offset_0x033CB0
		dc.l	LRz_2_Events_Run                       ; Offset_0x033C78
		dc.l	LRz_2_Events_Run_2                     ; Offset_0x033CB0
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	ALz_Events_Init                        ; Offset_0x033D60
		dc.l	ALz_Events_Init_2                      ; Offset_0x033DF0
		dc.l	ALz_Events_Init                        ; Offset_0x033D60
		dc.l	ALz_Events_Init_2                      ; Offset_0x033DF0
;--------------
		dc.l	ALz_Events_Run                         ; Offset_0x033DAE
		dc.l	ALz_Events_Run_2                       ; Offset_0x033E66
		dc.l	ALz_Events_Run                         ; Offset_0x033DAE
		dc.l	ALz_Events_Run_2                       ; Offset_0x033E66
;--------------
		dc.l	BPz_Events_Init                        ; Offset_0x033D60
		dc.l	BPz_Events_Init_2                      ; Offset_0x033DF6
		dc.l	BPz_Events_Init                        ; Offset_0x033D60
		dc.l	BPz_Events_Init_2                      ; Offset_0x033DF6
;--------------
		dc.l	BPz_Events_Run                         ; Offset_0x033DAE
		dc.l	BPz_Events_Run_2                       ; Offset_0x033E70
		dc.l	BPz_Events_Run                         ; Offset_0x033DAE
		dc.l	BPz_Events_Run_2                       ; Offset_0x033E70
;--------------
		dc.l	DPz_Events_Init                        ; Offset_0x033D60
		dc.l	DPz_Events_Init_2                      ; Offset_0x033DFC
		dc.l	DPz_Events_Init                        ; Offset_0x033D60
		dc.l	DPz_Events_Init_2                      ; Offset_0x033DFC
;--------------
		dc.l	DPz_Events_Run                         ; Offset_0x033DAE
		dc.l	DPz_Events_Run_2                       ; Offset_0x033EBE
		dc.l	DPz_Events_Run                         ; Offset_0x033DAE
		dc.l	DPz_Events_Run_2                       ; Offset_0x033EBE
;--------------
		dc.l	CGz_Events_Init                        ; Offset_0x033D60
		dc.l	CGz_Events_Init_2                      ; Offset_0x033E02
		dc.l	CGz_Events_Init                        ; Offset_0x033D60
		dc.l	CGz_Events_Init_2                      ; Offset_0x033E02
;--------------
		dc.l	CGz_Events_Run                         ; Offset_0x033DD0
		dc.l	CGz_Events_Run_2                       ; Offset_0x033E7A
		dc.l	CGz_Events_Run                         ; Offset_0x033DD0
		dc.l	CGz_Events_Run_2                       ; Offset_0x033E7A
;--------------
		dc.l	EMz_Events_Init                        ; Offset_0x033D60
		dc.l	EMz_Events_Init_2                      ; Offset_0x033E3E
		dc.l	EMz_Events_Init                        ; Offset_0x033D60
		dc.l	EMz_Events_Init_2                      ; Offset_0x033E3E
;--------------
		dc.l	EMz_Events_Run                         ; Offset_0x033DAE
		dc.l	EMz_Events_Run_2                       ; Offset_0x033E84
		dc.l	EMz_Events_Run                         ; Offset_0x033DAE
		dc.l	EMz_Events_Run_2                       ; Offset_0x033E84
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
;--------------
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
		dc.l	Level_RefreshScreen
		dc.l	Level_RefreshBackground
;--------------
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
		dc.l	Level_RunScreen
		dc.l	Level_RunBackground
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to draw level tiles in normal gameplay
; ---------------------------------------------------------------------------
; Offset_0x02F636: Vint_Draw_Level:
DrawLevel:
		lea	(VDP_Data_Port).l,a6
		lea	(Plane_Buffer).w,a0

Offset_0x02F640:
		move.w	(a0),d0			; have we finished drawing the screen?
		beq.s	DrawLevel_Done		; if yes, branch
		clr.w	(a0)+
		move.w	(a0)+,d1		; are we moving left/right?
		bmi.s	DrawLevel_Column	; if yes, branch
; DrawLevel_Row:
		move.w	#$8F02,d2		; VRAM increment at 2 bytes (horizontal level write)
		move.w	#$80,d3
		bra.s	DrawLevel_Draw
; ---------------------------------------------------------------------------
; Offset_0x02F654:
DrawLevel_Column:
		move.w	#$8F80,d2		; VRAM increment at $80 bytes (vertical level write)
		moveq	#2,d3
		andi.w	#$7FFF,d1
; Offset_0x02F65E:
DrawLevel_Draw:
		move.w	d2,VDP_Control_Port-VDP_Data_Port(a6)
		move.w	d0,d2
		move.w	d1,d4
		bsr.s	WriteToVRAM
		move.w	d2,d0
		add.w	d3,d0
		move.w	d4,d1
		bsr.s	WriteToVRAM
		bra.s	Offset_0x02F640
; ---------------------------------------------------------------------------
; Offset_0x02F672:
DrawLevel_Done:
		move.w	#$8F02,VDP_Control_Port-VDP_Data_Port(a6)
		rts
; End of function DrawLevel

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to write data to VRAM
; ---------------------------------------------------------------------------
; Offset_0x02F67A: Special_Vint_VRAM_Write:
WriteToVRAM:
		swap	d0
		clr.w	d0
		swap	d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,VDP_Control_Port-VDP_Data_Port(a6)
; Offset_0x02F68E:
.copyToVRAM:
		move.l	(a0)+,(a6)
		dbf	d1,.copyToVRAM
		rts
; End of function WriteToVRAM

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to draw level tiles in Competition Mode
; ---------------------------------------------------------------------------
; Offset_0x02F696:
DrawLevel_Competition:
		lea	(VDP_Data_Port).l,a6
		lea	(Plane_Buffer).w,a0

Offset_0x02F6A0:
		move.w	(a0),d0			; have we finished drawing the screen?
		beq.s	DrawLevelC_Done		; if yes, branch
		clr.w	(a0)+
		move.w	(a0)+,d1
		move.w	d0,d2
		move.w	d1,d4
		bsr.s	WriteToVRAM
		move.w	d2,d0
		add.w	(VRAM_Add).w,d0
		move.w	d4,d1
		bsr.s	WriteToVRAM
		bra.s	Offset_0x02F6A0
; ---------------------------------------------------------------------------
; Offset_0x02F6BA:
DrawLevelC_Done:
		rts
; End of function DrawLevel_Competition

;===============================================================================
Special_Vint:                                                  ; Offset_0x02F6BC
		lea	(VDP_Data_Port),a6                          ; $00C00000
		move.w	(Special_Vint_Routine).w,d0                 ; $FFFFEEA6
		jmp	Special_Vint_Index(pc,d0.w)             ; Offset_0x02F6CA
Special_Vint_Index:                                            ; Offset_0x02F6CA
		rts
		bra.s	Special_Vint_VScroll_On                ; Offset_0x02F6DC
		bra.s	Special_Vint_VScroll_Copy              ; Offset_0x02F6E6
;-------------------------------------------------------------------------------
; Special_Vint_VScroll_Off:                                    ; Offset_0x02F6D0
		move.w	#$8B03, $0004(A6)
		clr.w	(Special_Vint_Routine).w                     ; $FFFFEEA6
		rts
;-------------------------------------------------------------------------------
Special_Vint_VScroll_On:                                       ; Offset_0x02F6DC
		move.w	#$8B07, $0004(A6)
		addq.w	#$02,(Special_Vint_Routine).w               ; $FFFFEEA6
;-------------------------------------------------------------------------------
Special_Vint_VScroll_Copy:                                     ; Offset_0x02F6E6
		lea	(Vertical_Scroll_Buffer).w,a0               ; $FFFFEEEA
		move.l	#$40000010, $0004(A6)
		moveq	#$13,d0
Special_Vint_VScroll_Copy_Loop:                                ; Offset_0x02F6F4
		move.l	(A0)+,(A6)
		dbf	D0, Special_Vint_VScroll_Copy_Loop     ; Offset_0x02F6F4
		rts
;===============================================================================

; Offset_0x02F6FC: Draw_Tile_Column:
DrawBlockColumn:
		move.w	(A6),d0
		andi.w	#$FFF0,d0
		move.w	(A5),d2
		move.w	D0,(A5)
		move.w	D2,d3
		sub.w	D0,d2
		beq.w	Offset_0x02F888
		tst.b	D2
		bpl.s	Offset_0x02F71A
		neg.w   D2
		move.w	D3,d0
		addi.w	#$0150,d0
Offset_0x02F71A:
		andi.w	#$0030,d2
		cmpi.w	#$0010,d2
		sne     (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
		movem.w	D1/D6, -(sp)
		bsr.s	Setup_Tile_Column_Drawn                ; Offset_0x02F780
		movem.w	(sp)+,d1/D6
		tst.b	(Plane_Double_Update_Flag).w                 ; $FFFFEEA4
		beq.w	Offset_0x02F888
		addi.w	#$0010,d0
		bra.s	Setup_Tile_Column_Drawn                ; Offset_0x02F780
;-------------------------------------------------------------------------------
Draw_Tile_Column_2:                                            ; Offset_0x02F73E
		move.w	(A6),d0
		andi.w	#$FFF0,d0
		move.w	(A5),d2
		move.w	D0,(A5)
		move.w	D2,d3
		sub.w	D0,d2
		beq.w	Offset_0x02F888
		tst.b	D2
		bpl.s	Offset_0x02F75E
		neg.w   D2
		move.w	D3,d0
		addi.w	#$0150,d0
		swap	D1
Offset_0x02F75E:
		andi.w	#$0030,d2
		cmpi.w	#$0010,d2
		sne     (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
		movem.w	D1/D6, -(sp)
		bsr.s	Setup_Tile_Column_Drawn                ; Offset_0x02F780
		movem.w	(sp)+,d1/D6
		tst.b	(Plane_Double_Update_Flag).w                 ; $FFFFEEA4
		beq.w	Offset_0x02F888
		addi.w	#$0010,d0
Setup_Tile_Column_Drawn:                                       ; Offset_0x02F780
		move.w	D1,d2
		andi.w	#$0070,d2
		move.w	D1,d3
		lsl.w	#$04,d3
		andi.w	#$0F00,d3
		asr.w	#$04,d1
		move.w	D1,d4
		asr.w	#$01,d1
		and.w	(Level_Layout_Wrap_Row).w,d1                ; $FFFFEEAE
		andi.w	#$000F,d4
		moveq	#$10,d5
		sub.w	D4,d5
		move.w	D5,d4
		sub.w	D6,d5
		bmi.s	Offset_0x02F7CE
		move.w	D0,d5
		asr.w	#$02,d5
		andi.w	#$007C,d5
		add.w	D7,d5
		add.w	D3,d5
		move.w	D5,(A0)+
		move.w	D6,d5
		subq.w	#$01,d6
		move.w	D6,(A0)+
		bset	#$07,-2(A0)
		lea	(A0),a1
		add.w	D5,d5
		add.w	D5,d5
		adda.w	D5,a0
		jsr	Get_Level_Chunk_Column(PC)             ; Offset_0x02F88A
		bra.s	Offset_0x02F81C
Offset_0x02F7CE:
		neg.w   D5
		move.w	D5,-(sp)
		move.w	D0,d5
		asr.w	#$02,d5
		andi.w	#$007C,d5
		add.w	D7,d5
		add.w	D3,d5
		move.w	D5,(A0)+
		move.w	D4,d6
		subq.w	#$01,d6
		move.w	D6,(A0)+
		bset	#$07,-2(A0)
		lea	(A0),a1
		add.w	D4,d4
		add.w	D4,d4
		adda.w	D4,a0
		jsr	Get_Level_Chunk_Column(PC)             ; Offset_0x02F88A
		bsr.s	Offset_0x02F81C
		move.w	(sp)+,d6
		move.w	D0,d5
		asr.w	#$02,d5
		andi.w	#$007C,d5
		add.w	D7,d5
		move.w	D5,(A0)+
		move.w	D6,d5
		subq.w	#$01,d6
		move.w	D6,(A0)+
		bset	#$07, -2(A0)
		lea	(A0),a1
		add.w	D5,d5
		add.w	D5,d5
		adda.w	D5,a0
Offset_0x02F81C:
		swap	D7
Offset_0x02F81E:
		move.w	(A5,d2),d3
		move.w	D3,d4
		andi.w	#$03FF,d3
		lsl.w	#$03,d3
		move.w	(A2,d3),d5
		swap	D5
		move.w	$04(A2,d3),d5
		move.w	$06(A2,d3),d7
		move.w	$02(A2,d3),d3
		swap	D3
		move.w	D7,d3
		btst	#$0B,d4
		beq.s	Offset_0x02F856
		eori.l	#$10001000,d5
		eori.l	#$10001000,d3
		swap	D5
		swap	D3
Offset_0x02F856:
		btst	#$0A,d4
		beq.s	Offset_0x02F86A
		eori.l	#$08000800,d5
		eori.l	#$08000800,d3
		exg.l	D3,d5
Offset_0x02F86A:
		move.l	D5,(A1)+
		move.l	D3,(A0)+
		addi.w	#$0010,d2
		andi.w	#$0070,d2
		bne.s	Offset_0x02F880
		addq.w	#$04,d1
		and.w	(Level_Layout_Wrap_Row).w,d1                ; $FFFFEEAE
		bsr.s	Get_Level_Chunk_Column                 ; Offset_0x02F88A
Offset_0x02F880:
		dbf	D6, Offset_0x02F81E
		swap	D7
		clr.w	(A0)
Offset_0x02F888:
		rts
;-------------------------------------------------------------------------------
Get_Level_Chunk_Column:                                        ; Offset_0x02F88A
		move.w	(A3,d1),a4
		move.w	D0,d3
		asr.w	#$07,d3
		adda.w	D3,a4
		moveq	#-$01,d3
		clr.w	D3
		move.b	(A4),d3
		lsl.w	#$07,d3
		move.w	D0,d4
		asr.w	#$03,d4
		andi.w	#$000E,d4
		add.w	D4,d3
		move.l	D3,a5
		rts
;-------------------------------------------------------------------------------

; Offset_0x02F8AA: Draw_Tile_Row:
DrawBlockRow:
		move.w	(A6),d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	(A5),d2
		move.w	D0,(A5)
		move.w	D2,d3
		sub.w	D0,d2
		beq.w	Offset_0x02FA18
		tst.b	D2
		bpl.s	Offset_0x02F8CC
		neg.w   D2
		move.w	D3,d0
		addi.w	#$00F0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
Offset_0x02F8CC:
		andi.w	#$0030,d2
		cmpi.w	#$0010,d2
		sne     (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
		movem.w	D1/D6, -(sp)
		bsr.s	Setup_Tile_Row_Draw                    ; Offset_0x02F93E
		movem.w	(sp)+,d1/D6
		tst.b	(Plane_Double_Update_Flag).w                 ; $FFFFEEA4
		beq.w	Offset_0x02FA18
		addi.w	#$0010,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		bra.s	Setup_Tile_Row_Draw                    ; Offset_0x02F93E
;-------------------------------------------------------------------------------
Draw_Tile_Row_2:                                               ; Offset_0x02F8F4
		move.w	(A6),d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	(A5),d2
		move.w	D0,(A5)
		move.w	D2,d3
		sub.w	D0,d2
		beq.w	Offset_0x02FA18
		tst.b	D2
		bpl.s	Offset_0x02F918
		neg.w   D2
		move.w	D3,d0
		addi.w	#$00F0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		swap	D1
Offset_0x02F918:
		andi.w	#$0030,d2
		cmpi.w	#$0010,d2
		sne     (Plane_Double_Update_Flag).w                 ; $FFFFEEA4
		movem.w	D1/D6, -(sp)
		bsr.s	Setup_Tile_Row_Draw                    ; Offset_0x02F93E
		movem.w	(sp)+,d1/D6
		tst.b	(Plane_Double_Update_Flag).w                 ; $FFFFEEA4
		beq.w	Offset_0x02FA18
		addi.w	#$0010,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
;-------------------------------------------------------------------------------
Setup_Tile_Row_Draw:                                           ; Offset_0x02F93E
		asr.w	#$04,d1
		move.w	D1,d2
		move.w	D1,d4
		asr.w	#$03,d1
		add.w	D2,d2
		move.w	D2,d3
		andi.w	#$000E,d2
		add.w	D3,d3
		andi.w	#$007C,d3
		andi.w	#$001F,d4
		moveq	#$20,d5
		sub.w	D4,d5
		move.w	D5,d4
		sub.w	D6,d5
		bmi.s	Offset_0x02F984
		move.w	D0,d5
		andi.w	#$00F0,d5
		lsl.w	#$04,d5
		add.w	D7,d5
		add.w	D3,d5
		move.w	D5,(A0)+
		move.w	D6,d5
		subq.w	#$01,d6
		move.w	D6,(A0)+
		lea	(A0),a1
		add.w	D5,d5
		add.w	D5,d5
		adda.w	D5,a0
		jsr	Get_Chunk_Addr(PC)                     ; Offset_0x02FA1A
		bra.s	Offset_0x02F9C4
Offset_0x02F984:
		neg.w   D5
		move.w	D5, -(sp)
		move.w	D0,d5
		andi.w	#$00F0,d5
		lsl.w	#$04,d5
		add.w	D7,d5
		add.w	D3,d5
		move.w	D5,(A0)+
		move.w	D4,d6
		subq.w	#$01,d6
		move.w	D6,(A0)+
		lea	(A0),a1
		add.w	D4,d4
		add.w	D4,d4
		adda.w	D4,a0
		bsr.s	Get_Chunk_Addr                         ; Offset_0x02FA1A
		bsr.s	Offset_0x02F9C4
		move.w	(sp)+,d6
		move.w	D0,d5
		andi.w	#$00F0,d5
		lsl.w	#$04,d5
		add.w	D7,d5
		move.w	D5,(A0)+
		move.w	D6,d5
		subq.w	#$01,d6
		move.w	D6,(A0)+
		lea	(A0),a1
		add.w	D5,d5
		add.w	D5,d5
		adda.w	D5,a0
Offset_0x02F9C4:
		move.w	(A5,d2),d3
		move.w	D3,d4
		andi.w	#$03FF,d3
		lsl.w	#$03,d3
		move.l	(A2,d3),d5
		move.l	$04(A2,d3),d3
		btst	#$0B,d4
		beq.s	Offset_0x02F9EC
		eori.l	#$10001000,d5
		eori.l	#$10001000,d3
		exg.l	D3,d5
Offset_0x02F9EC:
		btst	#$0A,d4
		beq.s	Offset_0x02FA02
		eori.l	#$08000800,d5
		eori.l	#$08000800,d3
		swap	D5
		swap	D3
Offset_0x02FA02:
		move.l	D5,(A1)+
		move.l	D3,(A0)+
		addq.w	#$02,d2
		andi.w	#$000E,d2
		bne.s	Offset_0x02FA12
		addq.w	#$01,d1
		bsr.s	Offset_0x02FA26
Offset_0x02FA12:
		dbf	D6, Offset_0x02F9C4
		clr.w	(A0)
Offset_0x02FA18:
		rts
;-------------------------------------------------------------------------------
Get_Chunk_Addr:                                                ; Offset_0x02FA1A
		move.w	D0,d3
		asr.w	#$05,d3
		and.w	(Level_Layout_Wrap_Row).w,d3                ; $FFFFEEAE
		move.w	(A3,d3),a4
Offset_0x02FA26:
		moveq	#-$01,d3
		clr.w	D3
		move.b	(A4,d1),d3
		lsl.w	#$07,d3
		move.w	D0,d4
		andi.w	#$0070,d4
		add.w	D4,d3
		move.l	D3,a5
		rts
;-------------------------------------------------------------------------------
Offset_0x02FA3C:
		asr.w	#$03,d1
		move.w	D1,d2
		asr.w	#$04,d1
		andi.w	#$000E,d2
		cmpi.w	#$0100,(VRAM_Add).w                         ; $FFFFEEB0
		beq.s	Offset_0x02FA56
		moveq	#$04,d3
		move.w	#$1F80,d4
		bra.s	Offset_0x02FA5C
Offset_0x02FA56:
		moveq	#$05,d3
		move.w	#$1F00,d4
Offset_0x02FA5C:
		move.w	D0,d5
		lsl.w	D3,d5
		and.w	D4,d5
		add.w	D7,d5
		move.w	D5,(A0)+
		move.w	D6,d5
		subq.w	#$01,d6
		move.w	D6,(A0)+
		lea	(A0),a1
		add.w	D5,d5
		add.w	D5,d5
		adda.w	D5,a0
		jsr	Get_Chunk_Addr(PC)                     ; Offset_0x02FA1A
		bra.w	Offset_0x02F9C4
;-------------------------------------------------------------------------------
Refresh_Plane_Full:                                            ; Offset_0x02FA7C
		moveq	#$0F,d2
Offset_0x02FA7E:
		movem.l	D0-D2/A0, -(sp)
		moveq	#$20,d6
		jsr	Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
		jsr	DrawLevel(PC)                    ; Offset_0x02F636
		movem.l	(sp)+,d0-D2/A0
		addi.w	#$0010,d0
		dbf	D2, Offset_0x02FA7E
		rts
;-------------------------------------------------------------------------------
Refresh_Plane_Tile_Deform:                                     ; Offset_0x02FA9A
		move.w	(A4)+,d2
		moveq	#$0F,d3
Offset_0x02FA9E:
		cmp.w	D2,d0
		bmi.s	Offset_0x02FAA8
		add.w	(A4)+,d2
		addq.w	#$04,a5
		bra.s	Offset_0x02FA9E
Offset_0x02FAA8:
		move.w	(A5),d1
		moveq	#$20,d6
		movem.l	D0/D2/D3/A0/A4/A5, -(sp)
		jsr	Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
		jsr	DrawLevel(PC)                    ; Offset_0x02F636
		movem.l	(sp)+,d0/D2/D3/A0/A4/A5
		addi.w	#$0010,d0
		dbf	D3, Offset_0x02FA9E
		rts
;-------------------------------------------------------------------------------
Offset_0x02FAC6:
		movem.l	D0-D2/D6/A0, -(sp)
		jsr	Offset_0x02FA3C(PC)
		jsr	DrawLevel_Competition(PC)
		movem.l	(sp)+,d0-D2/D6/A0
		addi.w	#$0010,d0
		dbf	D2, Offset_0x02FAC6
		rts
;-------------------------------------------------------------------------------
Refresh_Plane_Screen_Direct:                                   ; Offset_0x02FAE0
		move	#$2700, SR
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		move.w	(Screen_Pos_Buffer_X).w,d1                  ; $FFFFEE80
		moveq	#$0E,d2
Offset_0x02FAEE:
		movem.l	D0-D2/A0, -(sp)
		moveq	#$15,d6
		jsr	Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
		jsr	DrawLevel(PC)                    ; Offset_0x02F636
		movem.l	(sp)+,d0-D2/A0
		addi.w	#$0010,d0
		dbf	D2, Offset_0x02FAEE
		move	#$2300, SR
		rts
; ---------------------------------------------------------------------------
; Subroutine to load foreground tiles as the player moves
; ---------------------------------------------------------------------------
; Offset_0x02FB0E: LoadTilesAsYouMove:
LoadTilesAsYouMove_Foreground:
		lea	(Screen_Pos_Buffer_X).w,a6
		lea	(Screen_Pos_Rounded_X).w,a5
		move.w	(Screen_Pos_Buffer_Y).w,d1
		moveq	#$F,d6
		jsr	DrawBlockColumn(pc)
		lea	(Screen_Pos_Buffer_Y).w,a6
		lea	(Screen_Pos_Rounded_Y).w,a5
		move.w	(Screen_Pos_Buffer_X).w,d1
		moveq	#$15,d6
		jmp	DrawBlockRow(pc)
; ---------------------------------------------------------------------------
; Subroutine to load background tiles as the player moves
; ---------------------------------------------------------------------------
; Offset_0x02FB32: Load_Tiles_As_You_Move_2:
LoadTilesAsYouMove_Background:
		lea	(Screen_Pos_Buffer_X_2).w,a6
		lea	(Screen_Pos_Rounded_X_2).w,a5
		move.w	(Screen_Pos_Buffer_Y_2).w,d1
		moveq	#$F,d6
		jsr	DrawBlockColumn(pc)
		lea	(Screen_Pos_Buffer_Y_2).w,a6
		lea	(Screen_Pos_Rounded_Y_2).w,a5
		move.w	(Screen_Pos_Buffer_X_2).w,d1
		moveq	#$15,d6
		jmp	DrawBlockRow(pc)
;-------------------------------------------------------------------------------
; Offset_0x02FB56:
		movem.l	D5/A4/A5, -(sp)
		lea	(Screen_Pos_Buffer_Y).w,a6                  ; $FFFFEE84
		jsr	Get_Deform_Draw_Position_Vertical(PC)  ; Offset_0x02FBF4
		lea	(Screen_Pos_Rounded_Y).w,a5                 ; $FFFFEE8A
		jsr	Draw_Tile_Row_2(PC)                    ; Offset_0x02F8F4
		movem.l	(sp)+,d5/A4/A6
		move.w	(Screen_Pos_Rounded_Y).w,d6                 ; $FFFFEE8A
		bra.s	Draw_Background_D6                     ; Offset_0x02FB90
;-------------------------------------------------------------------------------
Draw_Background:                                               ; Offset_0x02FB74
		movem.l	D5/A4/A5, -(sp)
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		jsr	Get_Deform_Draw_Position_Vertical(PC)  ; Offset_0x02FBF4
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		jsr	Draw_Tile_Row_2(PC)                    ; Offset_0x02F8F4
		movem.l	(sp)+,d5/A4/A6
		move.w	(Screen_Pos_Rounded_Y_2).w,d6               ; $FFFFEE96
Draw_Background_D6:                                            ; Offset_0x02FB90
		move.w	D6,d1
Offset_0x02FB92:
		sub.w	(A4)+,d6
		bmi.s	Offset_0x02FBA2
		move.w	(A6)+,d0
		andi.w	#$FFF0,d0
		move.w	D0,(A6)+
		subq.w	#$01,d5
		bra.s	Offset_0x02FB92
Offset_0x02FBA2:
		neg.w   D6
		lsr.w	#$04,d6
		moveq	#$0F,d4
		sub.w	D6,d4
		bcc.s	Offset_0x02FBB0
		moveq	#0,d4
		moveq	#$0F,d6
Offset_0x02FBB0:
		movem.w	D1/D4-D6, -(sp)
		movem.l	A4/A6, -(sp)
		lea	$0002(A6),a5
		jsr	DrawBlockColumn(PC)                   ; Offset_0x02F6FC
		movem.l	(sp)+,a4/A6
		movem.w	(sp)+,d1/D4-D6
		addq.w	#$04,a6
		tst.w	D4
		beq.s	Offset_0x02FBE4
		lsl.w	#$04,d6
		add.w	D6,d1
		subq.w	#$01,d5
		move.w	(A4)+,d6
		lsr.w	#$04,d6
		move.w	D4,d0
		sub.w	D6,d4
		bpl.s	Offset_0x02FBB0
		move.w	D0,d6
		moveq	#0,d4
		bra.s	Offset_0x02FBB0
Offset_0x02FBE4:
		subq.w	#$01,d5
		beq.s	Offset_0x02FBF2
		move.w	(A6)+,d0
		andi.w	#$FFF0,d0
		move.w	D0,(A6)+
		bra.s	Offset_0x02FBE4
Offset_0x02FBF2:
		rts
;-------------------------------------------------------------------------------
Get_Deform_Draw_Position_Vertical:                             ; Offset_0x02FBF4
		move.w	(A4)+,d2
		move.w	(A6),d0
		bsr.s	Offset_0x02FBFE
		addi.w	#$00E0,d0
Offset_0x02FBFE:
		cmp.w	D2,d0
		bmi.s	Offset_0x02FC08
		add.w	(A4)+,d2
		addq.w	#$04,a5
		bra.s	Offset_0x02FBFE
Offset_0x02FC08:
		move.w	(A5),d1
		swap	D1
		rts
;-------------------------------------------------------------------------------
Draw_Tiles_Vertical:                                           ; Offset_0x02FC0E
		movem.l	D5/A4/A5, -(sp)
		lea	(Screen_Pos_Buffer_X).w,a6                  ; $FFFFEE80
		jsr	Get_X_Deform_Range(PC)                 ; Offset_0x02FCAC
		lea	(Screen_Pos_Rounded_X).w,a5                 ; $FFFFEE88
		jsr	Draw_Tile_Column_2(PC)                 ; Offset_0x02F73E
		movem.l	(sp)+,d5/A4/A6
		move.w	(Screen_Pos_Rounded_X).w,d6                 ; $FFFFEE88
		bra.s	Offset_0x02FC48
;-------------------------------------------------------------------------------
Draw_Tiles_Vertical_2:                                         ; Offset_0x02FC2C:
		movem.l	D5/A4/A5, -(sp)
		lea	(Screen_Pos_Buffer_X_2).w,a6                ; $FFFFEE8C
		jsr	Get_X_Deform_Range(PC)                 ; Offset_0x02FCAC
		lea	(Screen_Pos_Rounded_X_2).w,a5               ; $FFFFEE94
		jsr	Draw_Tile_Column_2(PC)                 ; Offset_0x02F73E
		movem.l	(sp)+,d5/A4/A6
		move.w	(Screen_Pos_Rounded_X_2).w,d6               ; $FFFFEE94
Offset_0x02FC48:
		move.w	D6,d1
Offset_0x02FC4A:
		sub.w	(A4)+,d6
		bcs.s	Offset_0x02FC5A
		move.w	(A6)+,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(A6)+
		subq.w	#$01,d5
		bra.s	Offset_0x02FC4A
Offset_0x02FC5A:
		neg.w   D6
		lsr.w	#$04,d6
		moveq	#$15,d4
		sub.w	D6,d4
		bcc.s	Offset_0x02FC68
		moveq	#0,d4
		moveq	#$15,d6
Offset_0x02FC68:
		movem.w	D1/D4-D6, -(sp)
		movem.l	A4/A6, -(sp)
		lea	$0002(A6),a5
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		movem.l	(sp)+,a4/A6
		movem.w	(sp)+,d1/D4-D6
		addq.w	#$04,a6
		tst.w	D4
		beq.s	Offset_0x02FC9C
		lsl.w	#$04,d6
		add.w	D6,d1
		subq.w	#$01,d5
		move.w	(A4)+,d6
		lsr.w	#$04,d6
		move.w	D4,d0
		sub.w	D6,d4
		bcc.s	Offset_0x02FC68
		move.w	D0,d6
		moveq	#0,d4
		bra.s	Offset_0x02FC68
Offset_0x02FC9C:
		subq.w	#$01,d5
		beq.s	Offset_0x02FCAA
		move.w	(A6)+,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(A6)+
		bra.s	Offset_0x02FC9C
Offset_0x02FCAA:
		rts
;-------------------------------------------------------------------------------
Get_X_Deform_Range:                                            ; Offset_0x02FCAC
		move.w	(A4)+,d2
		move.w	(A6),d0
		bsr.s	Offset_0x02FCB6
		addi.w	#$0140,d0
Offset_0x02FCB6:
		cmp.w	D2,d0
		bcs.s	Offset_0x02FCC0
		add.w	(A4)+,d2
		addq.w	#$04,a5
		bra.s	Offset_0x02FCB6
Offset_0x02FCC0:
		move.w	(A5),d1
		swap	D1
		rts
;-------------------------------------------------------------------------------
Draw_Plane_Vertical_Bottom_Up:                                 ; Offset_0x02FCC6
		movem.w	D1/D2, -(sp)
		bsr.s	Offset_0x02FCD4
		movem.w	(sp)+,d1/D2
		bpl.s	Offset_0x02FCD4
		rts
Offset_0x02FCD4:
		and.w	(Level_Layout_Wrap_Y).w,d2                  ; $FFFFEEAC
		move.w	D2,d3
		addi.w	#$00F0,d3
		and.w	(Level_Layout_Wrap_Y).w,d3                  ; $FFFFEEAC
		move.w	(Draw_Delayed_Position).w,d0                ; $FFFFEEC8
		cmp.w	D2,d0
		bcs.s	Offset_0x02FCF4
		cmp.w	D3,d0
		bhi.s	Offset_0x02FCF4
		moveq	#$20,d6
		jsr	Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
Offset_0x02FCF4:
		subi.w	#$0010,(Draw_Delayed_Position).w            ; $FFFFEEC8
		subq.w	#$01,(Draw_Delayed_Position_Rowcount).w     ; $FFFFEECA
		rts
;-------------------------------------------------------------------------------
Draw_Plane_Vertical_Bottom_Up_Complex:                         ; Offset_0x02FD00
		movem.l	D1/A4/A5, -(sp)
		bsr.s	Offset_0x02FD0E
		movem.l	(sp)+,d1/A4/A5
		bpl.s	Offset_0x02FD0E
		rts
Offset_0x02FD0E:
		and.w	(Level_Layout_Wrap_Y).w,d1                  ; $FFFFEEAC
		move.w	D1,d2
		addi.w	#$00F0,d2
		and.w	(Level_Layout_Wrap_Y).w,d2                  ; $FFFFEEAC
		move.w	(Draw_Delayed_Position).w,d0                ; $FFFFEEC8
		cmp.w	D1,d0
		bcs.s	Offset_0x02FD36
		cmp.w	D2,d0
		bhi.s	Offset_0x02FD36
Offset_0x02FD28:
		addq.w	#$04,a5
		cmp.w	(A4)+,d0
		bpl.s	Offset_0x02FD28
		move.w	(A5),d1
		moveq	#$20,d6
		jsr	Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
Offset_0x02FD36:
		subi.w	#$0010,(Draw_Delayed_Position).w            ; $FFFFEEC8
		subq.w	#$01,(Draw_Delayed_Position_Rowcount).w     ; $FFFFEECA
		rts
;-------------------------------------------------------------------------------
Plain_Deformation:                                             ; Offset_0x02FD42
		lea	(Horizontal_Scroll_Buffer).w,a1             ; $FFFFE000
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		neg.w   D0
		swap	D0
		move.w	(Screen_Pos_Buffer_X_2).w,d0                ; $FFFFEE8C
		neg.w   D0
		moveq	#$37,d1
Offset_0x02FD56:
		move.l	D0,(A1)+
		move.l	D0,(A1)+
		move.l	D0,(A1)+
		move.l	D0,(A1)+
		dbf	D1, Offset_0x02FD56
		rts
;-------------------------------------------------------------------------------
Make_Foreground_Deform_Array:                                  ; Offset_0x02FD64
		move.w	D1,d0
		lsr.w	#$01,d0
		bcc.s	Offset_0x02FD70
Offset_0x02FD6A:
		move.w	(A6)+,d5
		add.w	D6,d5
		move.w	D5,(A1)+
Offset_0x02FD70:
		move.w	(A6)+,d5
		add.w	D6,d5
		move.w	D5,(A1)+
		dbf	D0, Offset_0x02FD6A
		rts
;-------------------------------------------------------------------------------
Apply_Deformation:                                             ; Offset_0x02FD7C
		move.w	#$00DF,d1
Apply_Deformation_D1:                                          ; Offset_0x02FD80
		lea	(Horizontal_Scroll_Buffer).w,a1             ; $FFFFE000
		move.w	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d3                  ; $FFFFEE80
Offset_0x02FD8C:
		move.w	(A4)+,d2
		smi     D4
		bpl.s	Offset_0x02FD96
		andi.w	#$7FFF,d2
Offset_0x02FD96:
		sub.w	D2,d0
		bmi.s	Offset_0x02FDA8
		addq.w	#$02,a5
		tst.b	D4
		beq.s	Offset_0x02FD8C
		subq.w	#$02,a5
		add.w	D2,d2
		adda.w	D2,a5
		bra.s	Offset_0x02FD8C
Offset_0x02FDA8:
		tst.b	D4
		beq.s	Offset_0x02FDB2
		add.w	D0,d2
		add.w	D2,d2
		adda.w	D2,a5
Offset_0x02FDB2:
		neg.w   D0
		move.w	D1,d2
		sub.w	D0,d2
		bcc.s	Offset_0x02FDBE
		move.w	D1,d0
		addq.w	#$01,d0
Offset_0x02FDBE:
		neg.w   D3
		swap	D3
Offset_0x02FDC2:
		subq.w	#$01,d0
Offset_0x02FDC4:
		tst.b	D4
		beq.s	Offset_0x02FDDE
		lsr.w	#$01,d0
		bcc.s	Offset_0x02FDD2
Offset_0x02FDCC:
		move.w	(A5)+,d3
		neg.w   D3
		move.l	D3,(A1)+
Offset_0x02FDD2:
		move.w	(A5)+,d3
		neg.w   D3
		move.l	D3,(A1)+
		dbf	D0, Offset_0x02FDCC
		bra.s	Offset_0x02FDEE
Offset_0x02FDDE:
		move.w	(A5)+,d3
		neg.w   D3
		lsr.w	#$01,d0
		bcc.s	Offset_0x02FDE8
Offset_0x02FDE6:
		move.l	D3,(A1)+
Offset_0x02FDE8:
		move.l	D3,(A1)+
		dbf	D0, Offset_0x02FDE6
Offset_0x02FDEE:
		tst.w	D2
		bmi.s	Offset_0x02FE06
		move.w	(A4)+,d0
		smi     D4
		bpl.s	Offset_0x02FDFC
		andi.w	#$7FFF,d0
Offset_0x02FDFC:
		move.w	D2,d3
		sub.w	D0,d2
		bpl.s	Offset_0x02FDC2
		move.w	D3,d0
		bra.s	Offset_0x02FDC4
Offset_0x02FE06:
		rts
;-------------------------------------------------------------------------------
Apply_All_Deformation:                                         ; Offset_0x02FE08
		swap	D7
		swap	D3
Offset_0x02FE0C:
		move.w	(A4)+,d3
		smi     D7
		bpl.s	Offset_0x02FE16
		andi.w	#$7FFF,d3
Offset_0x02FE16:
		sub.w	D3,d0
		bmi.s	Offset_0x02FE28
		addq.w	#$02,a5
		tst.b	D7
		beq.s	Offset_0x02FE0C
		subq.w	#$02,a5
		add.w	D3,d3
		adda.w	D3,a5
		bra.s	Offset_0x02FE0C
Offset_0x02FE28:
		tst.b	D7
		beq.s	Offset_0x02FE32
		add.w	D0,d3
		add.w	D3,d3
		adda.w	D3,a5
Offset_0x02FE32:
		swap	D3
		neg.w   D0
		move.w	D1,d4
		sub.w	D0,d4
		bcc.s	Offset_0x02FE40
		move.w	D1,d0
		addq.w	#$01,d0
Offset_0x02FE40:
		subq.w	#$01,d0
Offset_0x02FE42:
		tst.b	D7
		beq.s	Offset_0x02FE68
		lsr.w	#$01,d0
		bcc.s	Offset_0x02FE56
Offset_0x02FE4A:
		move.w	(A2)+,d6
		swap	D6
		move.w	(A5)+,d6
		neg.w   D6
		add.w	(A6)+,d6
		move.l	D6,(A1)+
Offset_0x02FE56:
		move.w	(A2)+,d6
		swap	D6
		move.w	(A5)+,d6
		neg.w   D6
		add.w	(A6)+,d6
		move.l	D6,(A1)+
		dbf	D0, Offset_0x02FE4A
		bra.s	Offset_0x02FE88
Offset_0x02FE68:
		move.w	(A5)+,d5
		neg.w   D5
		lsr.w	#$01,d0
		bcc.s	Offset_0x02FE7A
Offset_0x02FE70:
		move.w	(A2)+,d6
		swap	D6
		move.w	(A6)+,d6
		add.w	D5,d6
		move.l	D6,(A1)+
Offset_0x02FE7A:
		move.w	(A2)+,d6
		swap	D6
		move.w	(A6)+,d6
		add.w	D5,d6
		move.l	D6,(A1)+
		dbf	D0, Offset_0x02FE70
Offset_0x02FE88:
		tst.w	D4
		bmi.s	Offset_0x02FEA0
		move.w	(A4)+,d0
		smi     D7
		bpl.s	Offset_0x02FE96
		andi.w	#$7FFF,d0
Offset_0x02FE96:
		move.w	D4,d5
		sub.w	D0,d4
		bpl.s	Offset_0x02FE40
		move.w	D5,d0
		bra.s	Offset_0x02FE42
Offset_0x02FEA0:
		swap	D7
		rts
;-------------------------------------------------------------------------------
Apply_Foreground_Vertical_Scroll:                              ; Offset_0x02FEA4
		lea	(Vertical_Scroll_Buffer).w,a1               ; $FFFFEEEA
		move.w	(Screen_Pos_Buffer_Y_2).w,d1                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		move.w	D0,d2
		andi.w	#$000F,d2
		beq.s	Offset_0x02FEBC
		addi.w	#$0010,d0
Offset_0x02FEBC:
		lsr.w	#$04,d0
Offset_0x02FEBE:
		addq.w	#$02,a5
		move.w	(A4)+,d2
		lsr.w	#$04,d2
		sub.w	D2,d0
		bpl.s	Offset_0x02FEBE
		neg.w   D0
		moveq	#$13,d2
		sub.w	D0,d2
		bcc.s	Offset_0x02FED2
		moveq	#$14,d0
Offset_0x02FED2:
		subq.w	#$01,d0
Offset_0x02FED4:
		move.w	(A5)+,d3
Offset_0x02FED6:
		move.w	D3,(A1)+
		move.w	D1,(A1)+
		dbf	D0, Offset_0x02FED6
		tst.w	D2
		bmi.s	Offset_0x02FEF0
		move.w	(A4)+,d0
		lsr.w	#$04,d0
		move.w	D2,d3
		sub.w	D0,d2
		bpl.s	Offset_0x02FED2
		move.w	D3,d0
		bra.s	Offset_0x02FED4
Offset_0x02FEF0:
		rts
;-------------------------------------------------------------------------------
Reset_Tile_Offset_Position_Actual:                             ; Offset_0x02FEF2
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		move.w	D0,d1
		andi.w	#$FFF0,d0
		move.w	D0,(Screen_Pos_Rounded_X).w                 ; $FFFFEE88
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Screen_Pos_Rounded_Y).w                 ; $FFFFEE8A
		rts
;-------------------------------------------------------------------------------
Reset_Tile_Offset_Position_Actual_2:                           ; Offset_0x02FF0E
		move.w	(Screen_Pos_Buffer_X_2).w,d0                ; $FFFFEE8C
		move.w	D0,d1
		andi.w	#$FFF0,d0
		move.w	D0,d2
		move.w	D0,(Screen_Pos_Rounded_X_2).w               ; $FFFFEE94
		move.w	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Screen_Pos_Rounded_Y_2).w               ; $FFFFEE96
		rts
;-------------------------------------------------------------------------------
Update_Camera_P2_2:                                            ; Offset_0x02FF2C
		move.w	(Camera_X_P2).w,(Screen_Pos_Buffer_X_P2).w ; $FFFFEE60, $FFFFEE68
		move.w	(Camera_Y_P2).w,(Screen_Pos_Buffer_Y_P2).w ; $FFFFEE64, $FFFFEE6C
		rts
;-------------------------------------------------------------------------------
Update_Vertical_Scroll_Value_P2:                               ; Offset_0x02FF3A
		move.w	(Screen_Pos_Buffer_Y_P2).w,d0               ; $FFFFEE6C
		subi.w	#$0070,d0
		move.w	D0,(Vertical_Scroll_Value_P2).w             ; $FFFFF61E
		move.w	(Screen_Pos_Buffer_Y_P2_2).w,d0             ; $FFFFEE74
		subi.w	#$0070,d0
		move.w	D0,(Vertical_Scroll_Value_P2_3).w           ; $FFFFF620
		rts
; ---------------------------------------------------------------------------
; Subroutine to repeat level tile drawing in a level segment
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x02FF54: Load_Tiles_As_You_Move_Loop:
Repeat_TileDrawing:
		cmpi.b	#6,(Obj_Player_One+Obj_Routine).w
		bcc.s	RepeatTiles_Index
		move.w	(Level_Repeat_Routine).w,d0
		jmp	RepeatTiles_Index(pc,d0.w)
; ===========================================================================
; Offset_0x02FF64:
RepeatTiles_Index:
		; these two instructions make a blank Act 1 entry
		rts
		nop
		bra.w	AIz_Do_Ship_Loop
; ===========================================================================
; Offset_0x02FF6C:
Adjust_Background_During_Loop:
		move.w	(A1),d1
		move.w	D0,(A1)+
		sub.w	D1,d0
		bpl.s	Offset_0x02FF80
		neg.w   D0
		cmp.w	D2,d0
		bcs.s	Offset_0x02FF7C
		sub.w	D3,d0
Offset_0x02FF7C:
		sub.w	D0,(A1)+
		rts
Offset_0x02FF80:
		cmp.w	D2,d0
		bcs.s	Offset_0x02FF86
		sub.w	D3,d0
Offset_0x02FF86:
		add.w	D0,(A1)+
		rts
;===============================================================================
; Rotina para recarregar os tiles ao se mover na tela
; <<<-
;===============================================================================
Calc_Screen_Pos_Difference:                                    ; Offset_0x02FF8A
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		sub.w	(Screen_Pos_Buffer_X_2).w,d0                ; $FFFFEE8C
		move.w	D0,(Camera_X_Difference).w                  ; $FFFFEE3E
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		sub.w	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		move.w	D0,(Camera_Y_Difference).w                  ; $FFFFEE40
		rts
;-------------------------------------------------------------------------------
Earthquake_Setup:                                              ; Offset_0x02FFA4
		move.w	(Earthquake_Offset).w,(Earthquake_Last_Offset).w ; $FFFFEECE, $FFFFEED0
		cmpi.b	#$06,(Obj_Player_One+Obj_Routine).w         ; $FFFFB005
		bcc.s	Offset_0x02FFDE
		move.w	(Earthquake_Flag).w,d0                      ; $FFFFEECC
		beq.s	Offset_0x02FFDE
		bmi.s	Offset_0x02FFCC
		subq.w	#$01,d0
		move.w	D0,(Earthquake_Flag).w                      ; $FFFFEECC
		move.b	Earthquake_Data(pc,d0.w),d0            ; Offset_0x030008
		ext.w	D0
		move.w	D0,(Earthquake_Offset).w                    ; $FFFFEECE
		rts
Offset_0x02FFCC:
		move.w	(Level_frame_counter).w,d0                    ; $FFFFFE04
		andi.w	#$003F,d0
		move.b	Earthquake_Data_2(pc,d0.w),d0          ; Offset_0x03001C
		move.w	D0,(Earthquake_Offset).w                    ; $FFFFEECE
		rts
Offset_0x02FFDE:
		clr.w	(Earthquake_Offset).w                        ; $FFFFEECE
		rts
;-------------------------------------------------------------------------------
Calc_Objects_X_Y_During_Transition:                            ; Offset_0x02FFE4
		lea	(Obj_04_Mem_Address).w,a1                   ; $FFFFB128
		moveq	#$59,d2
Offset_0x02FFEA:
		tst.l	(A1)
		beq.s	Offset_0x02FFFE
		btst	#$02, Obj_Flags(A1)                              ; $0004
		beq.s	Offset_0x02FFFE
		sub.w	D0, Obj_X(A1)                                    ; $0010
		sub.w	D1, Obj_Y(A1)                                    ; $0014
Offset_0x02FFFE:
		lea	Obj_Size(A1),a1                                 ; $004A
		dbf	D2, Offset_0x02FFEA
		rts
;-------------------------------------------------------------------------------
Earthquake_Data:                                               ; Offset_0x030008
		dc.b	$01, $FF, $01, $FF, $02, $FE, $02, $FE
		dc.b	$03, $FD, $03, $FD, $04, $FC, $04, $FC
		dc.b	$05, $FB, $05, $FB
;-------------------------------------------------------------------------------
Earthquake_Data_2:                                             ; Offset_0x03001C
		dc.b	$01, $02, $01, $03, $01, $02, $02, $01
		dc.b	$02, $03, $01, $02, $01, $02, $00, $00
		dc.b	$02, $00, $03, $02, $02, $03, $02, $02
		dc.b	$01, $03, $00, $00, $01, $00, $01, $03
		dc.b	$01, $02, $01, $03, $01, $02, $02, $01
		dc.b	$02, $03, $01, $02, $01, $02, $00, $00
		dc.b	$02, $00, $03, $02, $02, $03, $02, $02
		dc.b	$01, $03, $00, $00, $01, $00, $01, $03
;-------------------------------------------------------------------------------
AIz_Water_Fg_Deform_Delta:                                     ; Offset_0x03005C
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
;-------------------------------------------------------------------------------
AIz_Water_Bg_Deform_Delta:                                     ; Offset_0x03029C
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $FF, $FF, $00, $00, $00, $02
		dc.b	$00, $02, $00, $02, $00, $02, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $FF, $FF, $00, $00, $00, $02
		dc.b	$00, $02, $00, $02, $00, $02, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $FF, $FF, $00, $00, $00, $02
		dc.b	$00, $02, $00, $02, $00, $02, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $01, $00, $01
;-------------------------------------------------------------------------------
LBz_Water_Bg_Deform_Delta:                                     ; Offset_0x03045C
		dc.b	$00, $01, $00, $01, $00, $01, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $FF, $FF, $00, $00, $00, $02
		dc.b	$00, $02, $00, $02, $00, $02, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$00, $00, $00, $00, $00, $00, $00, $01
		dc.b	$00, $01, $00, $01, $00, $01, $00, $01
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $FF, $FF, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $01, $00, $01
;-------------------------------------------------------------------------------
AIz_1_Events_Init:                                             ; Offset_0x0304DC
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
AIz_1_Events_Run:                                              ; Offset_0x0304E4
		jsr	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
		move.w	(Foreground_Events_Y_Counter).w,d0          ; $FFFFEEC4
		beq.w	Offset_0x030580
		cmpi.w	#$0039,d0
		bcc.w	 Offset_0x030582
		cmpi.w	#$0034,d0
		bcs.s	Offset_0x030504
		bsr.w	Offset_0x030596
		bra.s	Offset_0x03051A
Offset_0x030504:
		cmpi.w	#$0024,d0
		bcs.s	Offset_0x030510
		bsr.w	Offset_0x0305A8
		bra.s	Offset_0x03051A
Offset_0x030510:
		cmpi.w	#$0014,d0
		bcs.s	Offset_0x03051A
		bsr.w	Offset_0x0305BA
Offset_0x03051A:
		lea	AIz_Tree_Reveal_Array(PC),a6          ; Offset_0x030682
		btst	#0,d0
		bne.s	Offset_0x030528
		lea	$0010(A6),a6
Offset_0x030528:
		subq.w	#$01,d0
		lsr.w	#$01,d0
		move.w	D0,(Background_Events).w                    ; $FFFFEED2
		cmpi.w	#$0003,d0
		bcs.s	Offset_0x03053C
		move.w	#$0002,(Background_Events).w                ; $FFFFEED2
Offset_0x03053C:
		lsl.w	#$04,d0
		neg.w   D0
		addi.w	#$0470,d0
Offset_0x030544:
		cmp.w	(Screen_Pos_Rounded_Y).w,d0                 ; $FFFFEE8A
		bcc.s	Offset_0x03055A
		lea	$0020(A6),a6
		addi.w	#$0010,d0
		subq.w	#$01,(Background_Events).w                  ; $FFFFEED2
		bpl.s	Offset_0x030544
		bra.s	Offset_0x030582
Offset_0x03055A:
		move.w	#$2C80,d1
		moveq	#$10,d6
		move.l	A0, -(sp)
		jsr	Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
		move.l	(sp)+,a0
		subi.w	#$0280,d0
		moveq	#0,d1
		moveq	#$0F,d6
		bsr.s	Offset_0x0305CE
		lea	$0010(A6),a6
		addi.w	#$0290,d0
		subq.w	#$01,(Background_Events).w                  ; $FFFFEED2
		bpl.s	Offset_0x030544
Offset_0x030580:
		rts
Offset_0x030582:
		clr.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		move.w	$0014(A3),a1
		move.w	(A3),a5
		move.b	(A5), $0059(A1)
		move.b	$0001(A5), $005A(A1)
Offset_0x030596:
		move.w	$0018(A3),a1
		move.w	$0004(A3),a5
		move.b	(A5), $0059(A1)
		move.b	$0001(A5), $005A(A1)
Offset_0x0305A8:
		move.w	$001C(A3),a1
		move.w	$0008(A3),a5
		move.b	(A5), $0059(A1)
		move.b	$0001(A5), $005A(A1)
Offset_0x0305BA:
		move.w	$0020(A3),a1
		move.w	$000C(A3),a5
		move.b	(A5), $0059(A1)
		move.b	$0001(A5), $005A(A1)
		rts
Offset_0x0305CE:
		asr.w	#$04,d1
		move.w	D1,d2
		asr.w	#$03,d1
		add.w	D2,d2
		andi.w	#$000E,d2
		addq.w	#$04,a0
		move.l	A0,a1
		lea	$0040(A0),a0
		jsr	Get_Chunk_Addr(PC)                     ; Offset_0x02FA1A
Offset_0x0305E6:
		move.w	(A5,d2),d3
		move.w	D3,d4
		andi.w	#$03FF,d3
		lsl.w	#$03,d3
		move.l	(A2,d3),d5
		move.l	$04(A2,d3),d3
		btst	#$0B,d4
		beq.s	Offset_0x03060E
		eori.l	#$10001000,d5
		eori.l	#$10001000,d3
		exg.l	D3,d5
Offset_0x03060E:
		btst	#$0A,d4
		beq.s	Offset_0x030624
		eori.l	#$08000800,d5
		eori.l	#$08000800,d3
		swap	D5
		swap	D3
Offset_0x030624:
		tst.b	(A6)+
		beq.s	Offset_0x03062A
		move.l	D5,(A1)
Offset_0x03062A:
		addq.w	#$04,a1
		tst.b	$000F(A6)
		beq.s	Offset_0x030634
		move.l	D3,(A0)
Offset_0x030634:
		addq.w	#$04,a0
		addq.w	#$02,d2
		andi.w	#$000E,d2
		bne.s	Offset_0x030644
		addq.w	#$01,d1
		jsr	Offset_0x02FA26(PC)
Offset_0x030644:
		dbf	D6, Offset_0x0305E6
		clr.w	(A0)
		rts
;-------------------------------------------------------------------------------
Obj_AIz_Tree_Reveal_Control:                                   ; Offset_0x03064C
		tst.w	Obj_Timer(A0)                                    ; $002E
		beq.s	Offset_0x03065E
		tst.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		bne.s	Offset_0x03065E
		jmp	(DeleteObject)                         ; Offset_0x011138
Offset_0x03065E:
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		move.w	#$0480,d0
		sub.w	(Obj_Player_One+Obj_Y).w,d0                 ; $FFFFB014
		lsr.w	#$03,d0
		addq.w	#$03,d0
		cmp.w	(Foreground_Events_Y_Counter).w,d0          ; $FFFFEEC4
		bcc.s	Offset_0x03067C
		btst	#Classic_Type, Obj_Player_Status(A0)        ; $00, $002F
		beq.s	Offset_0x030680
Offset_0x03067C:
		addq.w	#$01,(Foreground_Events_Y_Counter).w        ; $FFFFEEC4
Offset_0x030680:
		rts
;-------------------------------------------------------------------------------
AIz_Tree_Reveal_Array:                                         ; Offset_0x030682
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $01, $01
		dc.b	$01, $01, $01, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $01, $01, $01, $01
		dc.b	$01, $01, $01, $01, $01, $00, $00, $00
		dc.b	$00, $00, $01, $01, $01, $01, $01, $01
		dc.b	$01, $01, $01, $01, $01, $01, $00, $00
		dc.b	$00, $01, $01, $01, $01, $01, $01, $01
		dc.b	$01, $01, $01, $01, $01, $01, $01, $00
		dc.b	$01, $01, $01, $01, $01, $01, $01, $01
		dc.b	$01, $01, $01, $01, $01, $01, $01, $01
		dc.b	$01, $01, $01, $01, $01, $01, $01, $01
		dc.b	$01, $01, $01, $01, $01, $01, $01, $01
;-------------------------------------------------------------------------------
AIz_1_Events_Init_2:                                           ; Offset_0x0306F2
		cmpi.w	#$1400,(Screen_Pos_Buffer_X).w              ; $FFFFEE80
		bcc.s	Offset_0x03071E
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		moveq	#$09,d0
Offset_0x030700:
		clr.l	(A1)+
		dbf	D0, Offset_0x030700
		jsr	AIz_Intro_Deform(PC)                   ; Offset_0x0309F8
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		lea	AIz_Intro_Deform_Array(PC),a4         ; Offset_0x030BF0
		lea	(Horizontal_Scroll_Table+$0028).w,a5        ; $FFFFA828
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x03071E:
		move.w	#$0008,(Level_Events_Routine_2).w           ; $FFFFEEC2
		jsr	AIz_1_Deform(PC)                       ; Offset_0x030A64
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		clr.l	(Horizontal_Scroll_Table).w                  ; $FFFFA800
		move.w	D2,(Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
		lea	AIz_BG_Draw_Array(PC),a4              ; Offset_0x030C3A
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jsr	Refresh_Plane_Tile_Deform(PC)          ; Offset_0x02FA9A
		jmp	AIz_Apply_Deform_Water(PC)             ; Offset_0x030AFA
;-------------------------------------------------------------------------------
AIz_1_Events_Run_2:                                            ; Offset_0x030744
		move.w	(Level_Events_Routine_2).w,d0               ; $FFFFEEC2
		jmp	Offset_0x03074C(pc,d0.w)
Offset_0x03074C:
		bra.w	AIz_1_Intro                            ; Offset_0x030764
		bra.w	AIz_1_Normal_Refresh                   ; Offset_0x0307BE
		bra.w	AIz_1_Normal                           ; Offset_0x0307DA
		bra.w	AIz_1_Fire_Transition                  ; Offset_0x030832
		bra.w	AIz_1_Fire_Refresh                     ; Offset_0x0308F0
		bra.w	AIz_1_Finish                           ; Offset_0x03091C
;-------------------------------------------------------------------------------
AIz_1_Intro:                                                   ; Offset_0x030764
		tst.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		beq.s	Offset_0x03079E
		tst.w	(Kos_decomp_queue_count).w                 ; $FFFFFF0E
		bne.w	Offset_0x03079E
		clr.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		jsr	AIz_1_Deform(PC)                       ; Offset_0x030A64
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		clr.l	(Horizontal_Scroll_Table).w                  ; $FFFFA800
		move.w	D2,(Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x0307C2
Offset_0x03079E:
		jsr	AIz_Intro_Deform(PC)                   ; Offset_0x0309F8
		lea	AIz_Intro_Draw_Array(PC),a4           ; Offset_0x030BDC
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		moveq	#$20,d6
		moveq	#$0A,d5
		jsr	Draw_Background(PC)                    ; Offset_0x02FB74
		lea	AIz_Intro_Deform_Array(PC),a4         ; Offset_0x030BF0
		lea	(Horizontal_Scroll_Table+$0028).w,a5        ; $FFFFA828
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
AIz_1_Normal_Refresh:                                          ; Offset_0x0307BE
		jsr	AIz_1_Deform(PC)                       ; Offset_0x030A64
Offset_0x0307C2:
		lea	AIz_BG_Draw_Array(PC),a4              ; Offset_0x030C3A
		lea	(Horizontal_Scroll_Table-$0004).w,a5        ; $FFFFA7FC
		move.w	(Screen_Pos_Buffer_Y_2).w,d1                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up_Complex(PC) ; Offset_0x02FD00
		bpl.s	Offset_0x03081E
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x03081E
;-------------------------------------------------------------------------------
AIz_1_Normal:                                                  ; Offset_0x0307DA
		tst.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		beq.s	Offset_0x03081A
		clr.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		lea	(Palette_Row_3_Offset+$02).w,a1             ; $FFFFED62
		move.l	#$004E006E,(A1)+
		move.l	#$00AE00CE,(A1)+
		move.l	#$02EE0AEE,(A1)
		move.l	#$00200000,(Screen_Pos_Buffer_Y_2).w        ; $FFFFEE90
		move.w	#$0010,(Screen_Pos_Rounded_Y_2).w           ; $FFFFEE96
		move.w	#$0068,(Background_Events).w                ; $FFFFEED2
		move.w	#$0002,(Special_Vint_Routine).w             ; $FFFFEEA6
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	AIz_1_Fire_Transition                  ; Offset_0x030832
Offset_0x03081A:
		jsr	AIz_1_Deform(PC)                       ; Offset_0x030A64
Offset_0x03081E:
		lea	AIz_BG_Draw_Array(PC),a4              ; Offset_0x030C3A
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		moveq	#$20,d6
		moveq	#$02,d5
		jsr	Draw_Background(PC)                    ; Offset_0x02FB74
		jmp	AIz_Apply_Deform_Water(PC)             ; Offset_0x030AFA
;-------------------------------------------------------------------------------
AIz_1_Fire_Transition:                                         ; Offset_0x030832
		tst.w	(Background_Events+$02).w                    ; $FFFFEED4
		bne.s	Offset_0x030852
		move.w	(Background_Events).w,d0                    ; $FFFFEED2
		swap	D0
		clr.w	D0
		sub.l	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		asr.l	#$05,d0
		add.l	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		cmpi.l	#$00001400,d0
		bcc.s	Offset_0x030856
Offset_0x030852:
		jsr	AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
Offset_0x030856:
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		move.w	#$1000,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		cmpi.w	#$0190,(Screen_Pos_Buffer_Y_2).w            ; $FFFFEE90
		bcs.s	Offset_0x0308E8
		movem.l	D7/A0/A2/A3, -(sp)
		lea	(Angel_Island_2_Chunks),a1            ; Offset_0x14EA6E
		lea	(RAM_Start),a2                         ; $FFFF0000
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Angel_Island_2_Blocks),a1            ; Offset_0x148128
		lea	(Blocks_Mem_Address).w,a2                   ; $FFFF9000
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Angel_Island_2_Blocks_2),a1          ; Offset_0x1489A8
		lea	(Blocks_Mem_Address+$0AA0).w,a2             ; $FFFF9AA0
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Angel_Island_2_Tiles),a1             ; Offset_0x1496B8
		move.w	#$0000,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		lea	(Angel_Island_2_Tiles_2),a1           ; Offset_0x14A1BA
		move.w	#$16A0,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		lea	(PLC_Spikes_Springs),a1               ; Offset_0x04192C
		jsr	(LoadPLC_Direct).l                           ; Offset_0x001502
		movem.l	(sp)+,d7/A0/A2/A3
		move.w	#$00F0,(Draw_Delayed_Position).w            ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x0308F4
Offset_0x0308E8:
		jsr	AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
AIz_1_Fire_Refresh:                                            ; Offset_0x0308F0
		jsr	AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
Offset_0x0308F4:
		lea	(Fg_Mem_Index_Address).w,a3                 ; $FFFF8008
		move.w	#$C000,d7
		move.w	#$0180,d1
		moveq	#0,d2
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x030914
		addq.w	#$02,a3
		move.w	#$E000,d7
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x030920
Offset_0x030914:
		jsr	AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
AIz_1_Finish:                                                  ; Offset_0x03091C
		jsr	AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
Offset_0x030920:
		tst.b	(Kos_modules_left).w                    ; $FFFFFF60
		bne.w	Offset_0x0309F0
		move.w	#AIz_Act_2,(Current_ZoneAndAct).w              ; $0001, $FFFFFE10
		clr.b	(Saved_Level_Flag).w                         ; $FFFFFE30
		clr.b	(Saved_Level_Flag_P2).w                      ; $FFFFFEE0
		clr.b	(Dynamic_Resize_Routine).w                   ; $FFFFEE33
		clr.b	(Object_Pos_Routine).w                       ; $FFFFF76C
		clr.b	(Ring_Pos_Routine).w                         ; $FFFFF710
		clr.b	(Boss_Flag).w                                ; $FFFFF7AA
		clr.l	(Animate_Counters).w                         ; $FFFFF7F0
		clr.w	(Animate_Counters+$04).w                     ; $FFFFF7F4
		movem.l	D7/A0/A2/A3, -(sp)
		jsr	(LoadLevelLayout).l                    ; Offset_0x01247C
		jsr	(LoadCollisionIndex).l                 ; Offset_0x0049B2
		jsr	(Level_InitWaterLevels).l                    ; Offset_0x005056
		moveq	#$0B,d0
		jsr	(PalLoad_Now).l                             ; Offset_0x002FBA
		movem.l	(sp)+,d7/A0/A2/A3
		lea	(Palette_Row_3_Offset+$02).w,a1             ; $FFFFED62
		move.l	#$004E006E,(A1)+
		move.l	#$00AE00CE,(A1)+
		move.l	#$02EE0AEE,(A1)
		move.w	#$2F00,d0
		move.w	#$0080,d1
		sub.w	D0,(Obj_Player_One+Obj_X).w                 ; $FFFFB010
		sub.w	D1,(Obj_Player_One+Obj_Y).w                 ; $FFFFB014
		sub.w	D0,(Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
		sub.w	D1,(Obj_Player_Two+Obj_Y).w                 ; $FFFFB05E
		sub.w	D0,(Camera_X).w                             ; $FFFFEE78
		sub.w	D1,(Camera_Y).w                             ; $FFFFEE7C
		sub.w	D0,(Screen_Pos_Buffer_X).w                  ; $FFFFEE80
		sub.w	D1,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
		move.l	#$00100010,d0
		move.l	#$00000260,d1
		move.l	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		move.l	D0,(Level_Limits_Min_X).w                   ; $FFFFEE0C
		move.l	D1,(Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
		move.l	D1,(Level_Limits_Min_Y).w                   ; $FFFFEE10
		move.w	(Screen_Pos_Buffer_X).w,(Level_Events_Buffer_0).w ; $FFFFEE80, $FFFFEEB4
		move.w	(Screen_Pos_Buffer_X).w,(Level_Events_Buffer_1).w ; $FFFFEE80, $FFFFEEB6
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		clr.w	(Level_Events_Routine_2).w                   ; $FFFFEEC2
Offset_0x0309F0:
		jsr	AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
AIz_Intro_Deform:                                              ; Offset_0x0309F8
		move.w	(Screen_Pos_Buffer_Y).w,(Screen_Pos_Buffer_Y_2).w ; $FFFFEE84, $FFFFEE90
		move.w	(Level_Events_Buffer_1).w,d0                ; $FFFFEEB6
		bmi.s	Offset_0x030A08
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
Offset_0x030A08:
		asr.w	#$01,d0
		lea	(Horizontal_Scroll_Table+$0028).w,a1        ; $FFFFA828
		cmpi.w	#$0580,d0
		blt.s	Offset_0x030A1E
		moveq	#$24,d1
Offset_0x030A16:
		move.w	D0,(A1)+
		dbf	D1, Offset_0x030A16
		bra.s	Offset_0x030A3E
Offset_0x030A1E:
		move.w	D0,(A1)+
		subi.w	#$0580,d0
		swap	D0
		clr.w	D0
		move.l	D0,d1
		asr.l	#$05,d1
		moveq	#$23,d2
Offset_0x030A2E:
		add.l	D1,d0
		move.l	D0,d3
		swap	D3
		addi.w	#$0580,d3
		move.w	D3,(A1)+
		dbf	D2, Offset_0x030A2E
Offset_0x030A3E:
		lea	(Horizontal_Scroll_Table+$0028).w,a1        ; $FFFFA828
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		move.w	(A1)+,d0
		bpl.s	Offset_0x030A4C
		moveq	#0,d0
Offset_0x030A4C:
		move.w	D0,(A5)
		addq.w	#$04,a5
		moveq	#$08,d0
Offset_0x030A52:
		move.w	(A1),d1
		bpl.s	Offset_0x030A58
		moveq	#0,d1
Offset_0x030A58:
		move.w	D1,(A5)
		addq.w	#$08,a1
		addq.w	#$04,a5
		dbf	D0, Offset_0x030A52
		rts
;-------------------------------------------------------------------------------
AIz_1_Deform:                                                  ; Offset_0x030A64
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		asr.w	#$01,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		subi.w	#$1300,d0
		swap	D0
		clr.w	D0
		asr.l	#$05,d0
		move.l	D0,d2
		add.l	D0,d0
		move.l	D0,d1
		lsl.l	#$03,d0
		sub.l	D1,d0
		lea	(Horizontal_Scroll_Table+$0030).w,a1        ; $FFFFA830
		swap	D0
		move.w	D0,(A1)
		swap	D0
		add.l	D1,d0
		swap	D0
		move.w	D0, -$2C(A1)
		move.w	D0, $0002(A1)
		move.w	D0, $000A(A1)
		swap	D0
		add.l	D1,d0
		swap	D0
		move.w	D0, $0004(A1)
		move.w	D0, $0008(A1)
		swap	D0
		add.l	D1,d0
		swap	D0
		move.w	D0, $0006(A1)
		lea	(Horizontal_Scroll_Table+$0016).w,a1        ; $FFFFA816
		move.l	D2,d0
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		move.l	(Horizontal_Scroll_Table+$003C).w,d3        ; $FFFFA83C
		addi.l	#$00002000,(Horizontal_Scroll_Table+$003C).w ; $FFFFA83C
		asr.l	#$01,d0
		moveq	#$05,d1
Offset_0x030AD4:
		add.l	D3,d0
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		add.l	D2,d0
		dbf	D1, Offset_0x030AD4
		lea	(Horizontal_Scroll_Table+$0016).w,a1        ; $FFFFA816
		move.l	D2,d0
		asr.l	#$03,d2
		moveq	#$0C,d1
Offset_0x030AEC:
		add.l	D2,d0
		swap	D0
		move.w	D0,(A1)+
		swap	D0
		dbf	D1, Offset_0x030AEC
		rts
;-------------------------------------------------------------------------------
AIz_Apply_Deform_Water:                                        ; Offset_0x030AFA
		lea	AIz_Deform_Array(PC),a4               ; Offset_0x030C3E
		lea	(Horizontal_Scroll_Table+$0008).w,a5        ; $FFFFA808
		move.w	(Water_Level_Move).w,d1                     ; $FFFFF646
		sub.w	(Screen_Pos_Buffer_Y).w,d1                  ; $FFFFEE84
		cmpi.w	#$00E0,d1
		blt.s	Offset_0x030B14
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x030B14:
		subq.w	#$01,d1
		jsr	Apply_Deformation_D1(PC)               ; Offset_0x02FD80
		move.l	A1, -(sp)
		lea	(Horizontal_Scroll_Table+$0040).w,a1        ; $FFFFA840
		lea	AIz_Water_Fg_Deform_Delta(PC),a6      ; Offset_0x03005C
		move.w	(Water_Level_Move).w,d0                     ; $FFFFF646
		subi.w	#$00DE,d1
		neg.w   D1
		move.w	(Level_frame_counter).w,d2                    ; $FFFFFE04
		add.w	D0,d2
		add.w	D0,d2
		andi.w	#$007E,d2
		adda.w	D2,a6
		move.w	(Screen_Pos_Buffer_X).w,d6                  ; $FFFFEE80
		neg.w   D6
		jsr	Make_Foreground_Deform_Array(PC)       ; Offset_0x02FD64
		move.l	(sp)+,a1
		lea	(Horizontal_Scroll_Table+$0040).w,a2        ; $FFFFA840
		lea	AIz_Deform_Array(PC),a4               ; Offset_0x030C3E
		lea	(Horizontal_Scroll_Table+$0008).w,a5        ; $FFFFA808
		lea	AIz_Water_Bg_Deform_Delta(PC),a6      ; Offset_0x03029C
		move.w	(Water_Level_Move).w,d0                     ; $FFFFF646
		sub.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		add.w	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		move.w	(Level_frame_counter).w,d2                    ; $FFFFFE04
		asr.w	#$01,d2
		add.w	D0,d2
		add.w	D0,d2
		andi.w	#$007E,d2
		adda.w	D2,a6
		jmp	Apply_All_Deformation(PC)              ; Offset_0x02FE08
;-------------------------------------------------------------------------------
AIz_1_Fire_Rise:                                               ; Offset_0x030B78
		moveq	#0,d0
		move.w	(Background_Events+$02).w,d0                ; $FFFFEED4
		addi.w	#$0280,d0
		cmpi.w	#$A000,d0
		bcs.s	Offset_0x030B8C
		move.w	#$A000,d0
Offset_0x030B8C:
		move.w	D0,(Background_Events+$02).w                ; $FFFFEED4
		lsl.l	#$04,d0
		add.l	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		rts
;-------------------------------------------------------------------------------
AIz_Transition_Wavy_Flame:                                     ; Offset_0x030B98
		addq.w	#$06,(AIz_Wavy_Flame_Counter).w             ; $FFFFEE8E
		move.w	(AIz_Wavy_Flame_Counter).w,d0               ; $FFFFEE8E
		andi.w	#$0060,d0
		addi.w	#$1000,d0
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		lea	(Vertical_Scroll_Buffer).w,a1               ; $FFFFEEEA
		lea	AIz_Flame_Vertical_Scroll(PC),a5      ; Offset_0x030C5A
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		swap	D0
		move.w	(Screen_Pos_Buffer_Y_2).w,d1                ; $FFFFEE90
		move.w	(Level_frame_counter).w,d2                    ; $FFFFFE04
		asr.w	#$02,d2
		moveq	#$13,d3
Offset_0x030BC6:
		addq.w	#$02,d2
		andi.w	#$000F,d2
		move.b	(A5,d2),d0
		ext.w	D0
		add.w	D1,d0
		move.l	D0,(A1)+
		dbf	D3, Offset_0x030BC6
		rts
;-------------------------------------------------------------------------------
AIz_Intro_Draw_Array:                                          ; Offset_0x030BDC
		dc.w	$03E0, $0010, $0010, $0010, $0010, $0010, $0010, $0010
		dc.w	$0010, $7FFF
;-------------------------------------------------------------------------------
AIz_Intro_Deform_Array:                                        ; Offset_0x030BF0
		dc.w	$03E0, $0004, $0004, $0004, $0004, $0004, $0004, $0004
		dc.w	$0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004
		dc.w	$0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004
		dc.w	$0004, $0004, $0004, $0004, $0004, $0004, $0004, $0004
		dc.w	$0004, $0004, $0004, $0004, $7FFF
;-------------------------------------------------------------------------------
AIz_BG_Draw_Array:                                             ; Offset_0x030C3A
		dc.w	$0220, $7FFF
;-------------------------------------------------------------------------------
AIz_Deform_Array:                                              ; Offset_0x030C3E
		dc.w	$00D0, $0020, $0030, $0030, $0010, $0010, $0010, $800D
		dc.w	$000F, $0006, $000E, $0050, $0020, $7FFF
;-------------------------------------------------------------------------------
AIz_Flame_Vertical_Scroll:                                     ; Offset_0x030C5A
		dc.w	$00FF, $FEFB, $F8F6, $F3F2, $F1F2, $F3F6, $F9FB, $FEFF
;-------------------------------------------------------------------------------
AIz_2_Events_Init:                                             ; Offset_0x030C6A
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
AIz_2_Events_Run:                                              ; Offset_0x030C72
		move.w	(Earthquake_Offset).w,d0                    ; $FFFFEECE
		add.w	D0,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
		move.w	(Level_Events_Routine).w,d0                 ; $FFFFEEC0
		jmp	Offset_0x030C82(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x030C82:
		bra.w	AIz_2_Normal                           ; Offset_0x030C96
		bra.w	AIz_2_Ship_Refresh                     ; Offset_0x030CD6
		bra.w	AIz_2_Ship_Redraw                      ; Offset_0x030D36
		bra.w	AIz_2_End_Refresh                      ; Offset_0x030D80
		bra.w	AIz_2_End                              ; Offset_0x030DB6
;-------------------------------------------------------------------------------
AIz_2_Normal:                                                  ; Offset_0x030C96
		tst.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		beq.s	Offset_0x030CD2
		clr.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		move.w	#$0180,(Draw_Delayed_Position).w            ; $FFFFEEC8
		move.w	#$0005,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		clr.l	(Horizontal_Scroll_Table+$01F8).w            ; $FFFFA9F8
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		andi.w	#$FFF0,d0
		subi.w	#$0010,d0
		move.w	D0,(Horizontal_Scroll_Table+$01FE).w        ; $FFFFA9FE
		move.w	#$0004,(Level_Repeat_Routine).w             ; $FFFFEEB2
		move.b	#$01,(Sonic_Scroll_Lock_Flag).w             ; $FFFFEE0A
		addq.w	#$04,(Level_Events_Routine).w               ; $FFFFEEC0
		bra.s	AIz_2_Ship_Refresh                     ; Offset_0x030CD6
Offset_0x030CD2:
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
AIz_2_Ship_Refresh:                                            ; Offset_0x030CD6
		move.w	#$4380,d1
		move.w	(Screen_Pos_Buffer_Y).w,d2                  ; $FFFFEE84
		subi.w	#$0010,d2
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.w	Offset_0x030D68
		move.w	#$4020,d0
		move.w	D0,(Horizontal_Scroll_Table+$01F6).w        ; $FFFFA9F6
		move.w	D0,(AIz_Flying_Battery_X).w                 ; $FFFFEE98
		clr.w	(AIz_Flying_Battery_X+$02).w                 ; $FFFFEE9A
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		addi.w	#$08F0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(AIz_Flying_Battery_Y).w                 ; $FFFFEE9C
		move.w	D0,(AIz_Flying_Battery_Rounded_Y).w         ; $FFFFEEA2
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x030D1C
		move.l	#Obj_AIz_Battle_Ship,(A1)             ; Offset_0x0311BC
Offset_0x030D1C:
		st	(Background_Events+$04).w                    ; $FFFFEED6
		move.l	#HInt_Angel_Island_2,(H_int_addr).w ; Offset_0x030DBA, $FFFFF60A
		clr.b	(Water_Level_Flag).w                         ; $FFFFF730
		move.b	#$40,(Scanline_Counter).w                   ; $FFFFF625
		addq.w	#$04,(Level_Events_Routine).w               ; $FFFFEEC0
;-------------------------------------------------------------------------------
AIz_2_Ship_Redraw:                                             ; Offset_0x030D36
		tst.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		beq.s	Offset_0x030D52
		clr.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		move.w	#$0170,(Draw_Delayed_Position).w            ; $FFFFEEC8
		move.w	#$0004,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine).w               ; $FFFFEEC0
		bra.s	AIz_2_End_Refresh                      ; Offset_0x030D80
Offset_0x030D52:
		lea	(AIz_Ship_Draw_Array+$04)(PC),a4      ; Offset_0x030DDA
		lea	(Horizontal_Scroll_Table+$01F4).w,a6        ; $FFFFA9F4
		move.w	(AIz_Flying_Battery_X).w,(A6)               ; $FFFFEE98
		moveq	#$02,d5
		move.w	(AIz_Flying_Battery_Rounded_Y).w,d6         ; $FFFFEEA2
		jsr	Draw_Background_D6(PC)                 ; Offset_0x02FB90
Offset_0x030D68:
		lea	AIz_Ship_Draw_Array(PC),a4            ; Offset_0x030DD6
		lea	(Horizontal_Scroll_Table+$01F8).w,a6        ; $FFFFA9F8
		move.w	(Screen_Pos_Buffer_X).w, $0004(A6)           ; $FFFFEE80
		moveq	#$02,d5
		move.w	(Screen_Pos_Rounded_Y).w,d6                 ; $FFFFEE8A
		jmp	Draw_Background_D6(PC)                 ; Offset_0x02FB90
;-------------------------------------------------------------------------------
AIz_2_End_Refresh:                                             ; Offset_0x030D80
		move.w	#$4380,d1
		move.w	(Screen_Pos_Buffer_Y).w,d2                  ; $FFFFEE84
		subi.w	#$0010,d2
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x030D68
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		andi.w	#$FFF0,d0
		subi.w	#$0010,d0
		move.w	D0,(Screen_Pos_Rounded_X).w                 ; $FFFFEE88
		move.w	#$46C0,(Background_Events+$02).w            ; $FFFFEED4
		clr.w	(Background_Events+$04).w                    ; $FFFFEED6
		move.b	#$FF,(Scanline_Counter).w                   ; $FFFFF625
		addq.w	#$04,(Level_Events_Routine).w               ; $FFFFEEC0
;-------------------------------------------------------------------------------
AIz_2_End:                                                     ; Offset_0x030DB6
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
HInt_Angel_Island_2:                                           ; Offset_0x030DBA
		move.w	#$8AFF,(VDP_Control_Port)                   ; $00C00004
		move.l	#$40000010,(VDP_Control_Port)               ; $00C00004
		move.w	(Screen_Pos_Buffer_Y).w,(VDP_Data_Port) ; $FFFFEE84, $00C00000
		rte
;-------------------------------------------------------------------------------
AIz_Ship_Draw_Array:                                           ; Offset_0x030DD6
		dc.w	$0180, $7FFF, $0A80, $7FFF
;-------------------------------------------------------------------------------
AIz_2_Events_Init_2:                                           ; Offset_0x030DDE
		move.w	(Screen_Pos_Buffer_X).w,(Level_Events_Buffer_0).w ; $FFFFEE80, $FFFFEEB4
		move.w	(Screen_Pos_Buffer_X).w,(Level_Events_Buffer_1).w ; $FFFFEE80, $FFFFEEB6
		move.w	#$000C,(Level_Events_Routine_2).w           ; $FFFFEEC2
		cmpi.w	#$3E80,(Screen_Pos_Buffer_X).w              ; $FFFFEE80
		bcs.s	Offset_0x030E04
		move.w	#$0014,(Level_Events_Routine_2).w           ; $FFFFEEC2
		move.w	#$4440,(Background_Events+$02).w            ; $FFFFEED4
Offset_0x030E04:
		jsr	AIZ_2_Deform(PC)                       ; Offset_0x031006
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		moveq	#0,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		jmp	AIz_2_Apply_Deform(PC)                 ; Offset_0x03105E
;-------------------------------------------------------------------------------
AIz_2_Events_Run_2:                                            ; Offset_0x030E16
		lea	(Level_Events_Buffer_0).w,a1                ; $FFFFEEB4
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		move.w	#$0100,d2
		move.w	#$0200,d3
		jsr	Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
		move.w	(Level_Events_Routine_2).w,d0               ; $FFFFEEC2
		jmp	Offset_0x030E32(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x030E32:
		bra.w	AIz_2_Fire_Redraw                      ; Offset_0x030E4A
		bra.w	AIz_2_Wait_Fire                        ; Offset_0x030E7C
		bra.w	AIz_2_Background_Redraw                ; Offset_0x030F5C
		bra.w	AIz_2_Background_Normal                ; Offset_0x030F72
		bra.w	AIz_2_Ship_Refresh_2                   ; Offset_0x030FC0
		bra.w	AIZ_2_Ship_Move                        ; Offset_0x030FD6
;-------------------------------------------------------------------------------
AIz_2_Fire_Redraw:                                             ; Offset_0x030E4A
		lea	(Fg_Mem_Index_Address).w,a3                 ; $FFFF8008
		move.w	#$C000,d7
		move.w	(Screen_Pos_Buffer_X).w,d1                  ; $FFFFEE80
		move.w	(Screen_Pos_Buffer_Y).w,d2                  ; $FFFFEE84
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x030E70
		addq.w	#$02,a3
		move.w	#$E000,d7
		clr.w	(Background_Events).w                        ; $FFFFEED2
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	AIz_2_Wait_Fire                        ; Offset_0x030E7C
Offset_0x030E70:
		jsr	AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
		jsr	AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
AIz_2_Wait_Fire:                                               ; Offset_0x030E7C
		jsr	AIz_1_Fire_Rise(PC)                    ; Offset_0x030B78
		jsr	AIz_Transition_Wavy_Flame(PC)          ; Offset_0x030B98
		tst.w	(Background_Events).w                        ; $FFFFEED2
		bne.s	Offset_0x030EBA
		move.w	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		andi.w	#$007F,d0
		cmpi.w	#$0020,d0
		bcs.s	Offset_0x030E9E
		cmpi.w	#$0030,d0
		bcs.s	Offset_0x030EA2
Offset_0x030E9E:
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
Offset_0x030EA2:
		addi.w	#$0180,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		subi.w	#$0010,d0
		move.w	D0,(Screen_Pos_Rounded_Y_2).w               ; $FFFFEE96
		st	(Background_Events).w                        ; $FFFFEED2
Offset_0x030EBA:
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		move.w	#$0200,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		cmpi.w	#$0310,(Screen_Pos_Buffer_Y_2).w            ; $FFFFEE90
		bcs.s	Offset_0x030F36
		movem.l	D7/A0/A2/A3, -(sp)
		moveq	#$0C,d0
		jsr	(LoadPLC).l                              ; Offset_0x0014D0
		move.w	(Current_ZoneAndAct).w,d0                             ; $FFFFFE10
		jsr	(Level_Load_Enemies_Art)               ; Offset_0x024F46
		movem.l	(sp)+,d7/A0/A2/A3
		lea	(Palette_Row_3_Offset+$02).w,a1             ; $FFFFED62
		move.l	#$08EE00AA,(A1)+
		move.l	#$008E004E,(A1)+
		move.l	#$002E000C,(A1)
		move.w	#$6000,d0
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		move.w	D0,(Level_Limits_Max_X).w                   ; $FFFFEE0E
		jsr	AIZ_2_Deform(PC)                       ; Offset_0x031006
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		move.w	#$0006,(Special_Vint_Routine).w             ; $FFFFEEA6
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x030F60
Offset_0x030F36:
		jsr	AIz_2_Apply_Deform(PC)                 ; Offset_0x03105E
		lea	(Horizontal_Scroll_Buffer+$0002).w,a1       ; $FFFFE002
		move.w	(Screen_Pos_Buffer_X_2).w,d0                ; $FFFFEE8C
		neg.w   D0
		moveq	#$37,d1
Offset_0x030F46:
		move.w	D0,(A1)
		addq.w	#$04,a1
		move.w	D0,(A1)
		addq.w	#$04,a1
		move.w	D0,(A1)
		addq.w	#$04,a1
		move.w	D0,(A1)
		addq.w	#$04,a1
		dbf	D1, Offset_0x030F46
		rts
;-------------------------------------------------------------------------------
AIz_2_Background_Redraw:                                       ; Offset_0x030F5C
		jsr	AIZ_2_Deform(PC)                       ; Offset_0x031006
Offset_0x030F60:
		moveq	#0,d1
		move.w	(Screen_Pos_Buffer_Y_2).w,d2                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x030FA8
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x030FA8
;-------------------------------------------------------------------------------
AIz_2_Background_Normal:                                       ; Offset_0x030F72
		jsr	AIZ_2_Deform(PC)                       ; Offset_0x031006
		tst.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		beq.s	Offset_0x030FA8
		clr.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		addi.w	#$00A8,(Screen_Pos_Buffer_Y_2).w            ; $FFFFEE90
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		move.w	#$4440,(Background_Events+$02).w            ; $FFFFEED4
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x030FC4
Offset_0x030FA8:
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		moveq	#0,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		jsr	AIz_2_Apply_Deform(PC)                 ; Offset_0x03105E
		jmp	Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------
AIz_2_Ship_Refresh_2:                                          ; Offset_0x030FC0
		jsr	AIZ_2_Deform(PC)                       ; Offset_0x031006
Offset_0x030FC4:
		moveq	#0,d1
		move.w	(Screen_Pos_Buffer_Y_2).w,d2                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x030FDA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x030FDA
;-------------------------------------------------------------------------------
AIZ_2_Ship_Move:                                               ; Offset_0x030FD6
		jsr	AIZ_2_Deform(PC)                       ; Offset_0x031006
Offset_0x030FDA:
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		moveq	#0,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		jsr	AIz_2_Apply_Deform(PC)                 ; Offset_0x03105E
		tst.w	(Background_Events+$04).w                    ; $FFFFEED6
		beq.s	Offset_0x031002
		move.w	(AIz_Flying_Battery_Y).w,(Vertical_Scroll_Value).w ; $FFFFEE9C, $FFFFF616
		move.w	(Screen_Pos_Buffer_Y_2).w,(Vertical_Scroll_Value_2).w ; $FFFFEE90, $FFFFF618
		addq.w	#$04, sp
Offset_0x031002:
		jmp	Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------
AIZ_2_Deform:                                                  ; Offset_0x031006
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		move.w	(Earthquake_Offset).w,d1                    ; $FFFFEECE
		sub.w	D1,d0
		asr.w	#$01,d0
		add.w	D1,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		cmpi.w	#$0010,(Level_Events_Routine_2).w           ; $FFFFEEC2
		bcs.s	Offset_0x031026
		addi.w	#$00A8,(Screen_Pos_Buffer_Y_2).w            ; $FFFFEE90
Offset_0x031026:
		move.w	(Level_Events_Buffer_1).w,d0                ; $FFFFEEB6
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d1
		asr.l	#$05,d1
		move.l	D1,d2
		add.l	D1,d1
		add.l	D2,d1
		lea	(Horizontal_Scroll_Table+$01C0).w,a1        ; $FFFFA9C0
		lea	AIz_2_Background_Deform_Make(PC),a5   ; Offset_0x0315FE
		moveq	#0,d2
Offset_0x031044:
		move.b	(A5)+,d3
		bmi.s	Offset_0x03105C
		ext.w	D3
		swap	D0
Offset_0x03104C:
		move.b	(A5)+,d2
		move.w	D0,(A1,d2)
		dbf	D3, Offset_0x03104C
		swap	D0
		add.l	D1,d0
		bra.s	Offset_0x031044
Offset_0x03105C:
		rts
;-------------------------------------------------------------------------------
AIz_2_Apply_Deform:                                            ; Offset_0x03105E
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		lea	AIz_2_Deform_Delta(PC),a6             ; Offset_0x031620
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		move.w	#$00DF,d1
		move.w	(Level_frame_counter).w,d2                    ; $FFFFFE04
		add.w	D0,d2
		add.w	D0,d2
		moveq	#$3E,d3
		move.w	(Screen_Pos_Buffer_X).w,d6                  ; $FFFFEE80
		neg.w   D6
		move.w	(Water_Level_Move).w,d4                     ; $FFFFF646
		sub.w	D0,d4
		bls.s	Offset_0x0310A8
		cmp.w	D1,d4
		bhi.s	Offset_0x0310AE
		move.w	D4,d1
		subq.w	#$01,d1
		and.w	D3,d2
		adda.w	D2,a6
		jsr	Make_Foreground_Deform_Array(PC)       ; Offset_0x02FD64
		move.w	(Water_Level_Move).w,d0                     ; $FFFFF646
		subi.w	#$00DE,d1
		neg.w   D1
		move.w	(Level_frame_counter).w,d2                    ; $FFFFFE04
		add.w	D0,d2
		add.w	D0,d2
Offset_0x0310A8:
		lea	AIz_Water_Fg_Deform_Delta(PC),a6      ; Offset_0x03005C
		moveq	#$7E,d3
Offset_0x0310AE:
		and.w	D3,d2
		adda.w	D2,a6
		jsr	Make_Foreground_Deform_Array(PC)       ; Offset_0x02FD64
		lea	(Horizontal_Scroll_Buffer).w,a1             ; $FFFFE000
		lea	(Horizontal_Scroll_Table).w,a2              ; $FFFFA800
		lea	AIz_2_Background_Deform_Array(PC),a4  ; Offset_0x0315CC
		lea	(Horizontal_Scroll_Table+$01C0).w,a5        ; $FFFFA9C0
		lea	Default_Background_Deform_Delta(PC),a6 ; Offset_0x031820
		move.w	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		move.w	#$00DF,d1
		move.w	(Level_frame_counter).w,d2                    ; $FFFFFE04
		asr.w	#$01,d2
		add.w	D0,d2
		add.w	D0,d2
		moveq	#$3E,d3
		move.w	(Water_Level_Move).w,d4                     ; $FFFFF646
		sub.w	(Screen_Pos_Buffer_Y).w,d4                  ; $FFFFEE84
		bls.s	Offset_0x03111C
		cmp.w	D1,d4
		bhi.s	Offset_0x031122
		move.w	D4,d1
		subq.w	#$01,d1
		and.w	D3,d2
		adda.w	D2,a6
		jsr	Apply_All_Deformation(PC)              ; Offset_0x02FE08
		lea	AIz_2_Background_Deform_Array(PC),a4  ; Offset_0x0315CC
		lea	(Horizontal_Scroll_Table+$01C0).w,a5        ; $FFFFA9C0
		move.w	(Water_Level_Move).w,d0                     ; $FFFFF646
		sub.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		add.w	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		subi.w	#$00DE,d1
		neg.w   D1
		move.w	(Level_frame_counter).w,d2                    ; $FFFFFE04
		asr.w	#$01,d2
		add.w	D0,d2
		add.w	D0,d2
Offset_0x03111C:
		lea	AIz_Water_Bg_Deform_Delta(PC),a6      ; Offset_0x03029C
		moveq	#$7E,d3
Offset_0x031122:
		and.w	D3,d2
		adda.w	D2,a6
		jsr	Apply_All_Deformation(PC)              ; Offset_0x02FE08
		tst.w	(Background_Events+$04).w                    ; $FFFFEED6
		beq.s	Offset_0x031150
		lea	(Horizontal_Scroll_Buffer).w,a1             ; $FFFFE000
		move.w	(AIz_Flying_Battery_X).w,d0                 ; $FFFFEE98
		neg.w   D0
		moveq	#$0F,d1
Offset_0x03113C:
		move.w	D0,(A1)
		addq.w	#$04,a1
		move.w	D0,(A1)
		addq.w	#$04,a1
		move.w	D0,(A1)
		addq.w	#$04,a1
		move.w	D0,(A1)
		addq.w	#$04,a1
		dbf	D1, Offset_0x03113C
Offset_0x031150:
		rts
;-------------------------------------------------------------------------------
AIz_Do_Ship_Loop:                                              ; Offset_0x031152
		clr.w	(Level_Repeat_Offset).w                      ; $FFFFEEBC
		move.w	(Camera_X).w,d0                             ; $FFFFEE78
		addq.w	#$04,d0
		cmp.w	(Background_Events+$02).w,d0                ; $FFFFEED4
		bcs.s	Offset_0x031186
		move.w	#$0200,d1
		move.w	D1,(Level_Repeat_Offset).w                  ; $FFFFEEBC
		sub.w	D1,(Obj_Player_One+Obj_X).w                 ; $FFFFB010
		sub.w	D1,(Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
		sub.w	D1,d0
		move.w	D0,d1
		andi.w	#$FFF0,d1
		subi.w	#$0010,d1
		move.w	D1,(Screen_Pos_Rounded_X).w                 ; $FFFFEE88
		move.w	D1,(Horizontal_Scroll_Table+$01FE).w        ; $FFFFA9FE
Offset_0x031186:
		move.w	D0,(Camera_X).w                             ; $FFFFEE78
		move.w	D0,(Screen_Pos_Buffer_X).w                  ; $FFFFEE80
		move.w	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		addi.w	#$0018,d0
		cmp.w	(Obj_Player_One+Obj_X).w,d0                 ; $FFFFB010
		bls.s	Offset_0x0311AC
		move.w	D0,(Obj_Player_One+Obj_X).w                 ; $FFFFB010
		move.w	#$0400,(Obj_Player_One+Obj_Inertia).w       ; $FFFFB01C
		bra.s	Offset_0x0311BA
Offset_0x0311AC:
		addi.w	#$0088,d0
		cmp.w	(Obj_Player_One+Obj_X).w,d0                 ; $FFFFB010
		bhi.s	Offset_0x0311BA
		move.w	D0,(Obj_Player_One+Obj_X).w                 ; $FFFFB010
Offset_0x0311BA:
		rts
;-------------------------------------------------------------------------------
Obj_AIz_Battle_Ship:                                           ; Offset_0x0311BC
		include "data\objects\aiz_bshp.asm"
;-------------------------------------------------------------------------------
AIz_2_Background_Deform_Array:                                 ; Offset_0x0315CC
		dc.b	$00, $10, $00, $20, $00, $38, $00, $58
		dc.b	$00, $28, $00, $40, $00, $38, $00, $18
		dc.b	$00, $18, $00, $90, $00, $48, $00, $10
		dc.b	$00, $18, $00, $20, $00, $38, $00, $58
		dc.b	$00, $28, $00, $40, $00, $38, $00, $18
		dc.b	$00, $18, $00, $90, $00, $48, $00, $10
		dc.b	$7F, $FF
;-------------------------------------------------------------------------------
AIz_2_Background_Deform_Make:                                  ; Offset_0x0315FE
		dc.b	$01, $12, $2A, $03, $10, $14, $28, $2C
		dc.b	$03, $0E, $16, $26, $2E, $04, $00, $0C
		dc.b	$18, $24, $30, $03, $02, $0A, $1A, $22
		dc.b	$03, $04, $08, $1C, $20, $01, $06, $1E
		dc.b	$FF, $00
;-------------------------------------------------------------------------------
AIz_2_Deform_Delta:                                            ; Offset_0x031620
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $01, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $01, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $01, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $01, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $01, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $01, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $01, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $01, $00, $01
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $01, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $00
		dc.b	$00, $00, $00, $01, $00, $00, $00, $00
		dc.b	$00, $01, $00, $01, $00, $00, $00, $00
;-------------------------------------------------------------------------------
Default_Background_Deform_Delta:                               ; Offset_0x031820
		dc.b	$FF, $FE, $00, $01, $00, $02, $00, $02
		dc.b	$FF, $FF, $00, $02, $00, $02, $00, $01
		dc.b	$00, $02, $FF, $FF, $FF, $FE, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $00, $00, $FF, $FE, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FE, $00, $00
		dc.b	$FF, $FE, $00, $02, $00, $00, $FF, $FE
		dc.b	$00, $02, $00, $02, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $00, $02, $00, $02
		dc.b	$FF, $FF, $00, $02, $00, $02, $00, $01
		dc.b	$00, $02, $FF, $FF, $FF, $FE, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $00, $00, $FF, $FE, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FE, $00, $00
		dc.b	$FF, $FE, $00, $02, $00, $00, $FF, $FE
		dc.b	$00, $02, $00, $02, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $00, $02, $00, $02
		dc.b	$FF, $FF, $00, $02, $00, $02, $00, $01
		dc.b	$00, $02, $FF, $FF, $FF, $FE, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $00, $00, $FF, $FE, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FE, $00, $00
		dc.b	$FF, $FE, $00, $02, $00, $00, $FF, $FE
		dc.b	$00, $02, $00, $02, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $00, $02, $00, $02
		dc.b	$FF, $FF, $00, $02, $00, $02, $00, $01
		dc.b	$00, $02, $FF, $FF, $FF, $FE, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $00, $00, $FF, $FE, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FE, $00, $00
		dc.b	$FF, $FE, $00, $02, $00, $00, $FF, $FE
		dc.b	$00, $02, $00, $02, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $00, $02, $00, $02
		dc.b	$FF, $FF, $00, $02, $00, $02, $00, $01
		dc.b	$00, $02, $FF, $FF, $FF, $FE, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $00, $00, $FF, $FE, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FE, $00, $00
		dc.b	$FF, $FE, $00, $02, $00, $00, $FF, $FE
		dc.b	$00, $02, $00, $02, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $00, $02, $00, $02
		dc.b	$FF, $FF, $00, $02, $00, $02, $00, $01
		dc.b	$00, $02, $FF, $FF, $FF, $FE, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $00, $00, $FF, $FE, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FE, $00, $00
		dc.b	$FF, $FE, $00, $02, $00, $00, $FF, $FE
		dc.b	$00, $02, $00, $02, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $00, $02, $00, $02
		dc.b	$FF, $FF, $00, $02, $00, $02, $00, $01
		dc.b	$00, $02, $FF, $FF, $FF, $FE, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $00, $00, $FF, $FE, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FE, $00, $00
		dc.b	$FF, $FE, $00, $02, $00, $00, $FF, $FE
		dc.b	$00, $02, $00, $02, $FF, $FF, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $00, $02, $00, $02
		dc.b	$FF, $FF, $00, $02, $00, $02, $00, $01
		dc.b	$00, $02, $FF, $FF, $FF, $FE, $FF, $FE
		dc.b	$FF, $FE, $00, $01, $FF, $FF, $FF, $FF
		dc.b	$FF, $FF, $00, $00, $FF, $FE, $00, $00
		dc.b	$00, $00, $00, $00, $FF, $FE, $00, $00
		dc.b	$FF, $FE, $00, $02, $00, $00, $FF, $FE
		dc.b	$00, $02, $00, $02, $FF, $FF, $FF, $FE
;-------------------------------------------------------------------------------
Pal_AIz_Battleship:                                            ; Offset_0x031A20
		dc.w	$0000, $0EEE, $02AE, $006E, $004C, $00EE, $0088, $0224
		dc.w	$00CA, $0066, $0042, $0020, $0CAA, $0866, $0644, $0044
;-------------------------------------------------------------------------------
Pal_AIz_Boss_Small:                                            ; Offset_0x031A40
		dc.w	$0EEE, $0CAA, $0E26, $0222, $00EE, $0000, $0008, $02AE
		dc.w	$004C, $0006, $0020, $0C68, $0A24, $0622
;-------------------------------------------------------------------------------
AIz_Battleship_Bobbing_Motion:                                 ; Offset_0x031A5C
		dc.b	$04, $04, $03, $03, $02, $01, $01, $00
		dc.b	$00, $00, $01, $01, $02, $03, $03, $04
;-------------------------------------------------------------------------------
AIz_FBz_Bomb_Script:                                           ; Offset_0x031A6C
		dc.w	$001E, $3F5C
		dc.w	$001E, $3F2C
		dc.w	$001E, $3F5C
		dc.w	$001E, $3F2C
		dc.w	$001E, $3F5C
		dc.w	$000F, $3F2C
		dc.w	$001E, $3EDC
		dc.w	$001E, $3EAC
		dc.w	$001E, $3EDC
		dc.w	$001E, $3EAC
		dc.w	$001E, $3EDC
		dc.w	$000F, $3EAC
		dc.w	$001E, $3E5C
		dc.w	$001E, $3E2C
		dc.w	$001E, $3E5C
		dc.w	$001E, $3E2C
		dc.w	$001E, $3E5C
		dc.w	$000F, $3E2C
		dc.w	$003C, $3DEC
		dc.w	$003C, $3DEC
		dc.w	$003C, $3DEC
		dc.w	$FFFF
;-------------------------------------------------------------------------------
AIz_FBz_Bomb_Explosion_Data:                                   ; Offset_0x031AC2
		dc.w	$0000, $FFC4, $0000, $000A, $0000, $FFF4, $0101, $0009
		dc.w	$FFFC, $FFCC, $0000, $0008, $000C, $FFFC, $0101, $0007
		dc.w	$FFF4, $FFFC, $0101, $0005, $0008, $FFDC, $0000, $0004
		dc.w	$FFF8, $FFE4, $0000, $0002, $0000, $FFF4, $0000, $0000
;-------------------------------------------------------------------------------
AIz_Make_Tree_Script:                                          ; Offset_0x031B02
		dc.w	$0000, $0280
		dc.w	$0032, $0380
		dc.w	$008E, $0280
		dc.w	$0103, $0380
		dc.w	$0179, $0280
		dc.w	$01C6, $0380
		dc.w	$0233, $0280
		dc.w	$02A0, $0380
		dc.w	$030A, $0280
		dc.w	$037C, $0380
		dc.w	$03C7, $0280
		dc.w	$0401, $0380
		dc.w	$0439, $0280
		dc.w	$046E, $0380
		dc.w	$04CA, $0280
		dc.w	$050C, $0380
		dc.w	$0557, $0280
		dc.w	$FFFF
;-------------------------------------------------------------------------------
AIz_Battleship_Propeller_Mappings:                             ; Offset_0x031B48
		dc.w	Offset_0x031B50-AIz_Battleship_Propeller_Mappings
		dc.w	Offset_0x031B58-AIz_Battleship_Propeller_Mappings
		dc.w	Offset_0x031B60-AIz_Battleship_Propeller_Mappings
		dc.w	Offset_0x031B68-AIz_Battleship_Propeller_Mappings
Offset_0x031B50:
		dc.w	$0001
		dc.w	$F003, $A000, $FFFC
Offset_0x031B58:
		dc.w	$0001
		dc.w	$F402, $A004, $FFFC
Offset_0x031B60:
		dc.w	$0001
		dc.w	$FC00, $A007, $FFFC
Offset_0x031B68:
		dc.w	$0001
		dc.w	$F402, $B004, $FFFC
;-------------------------------------------------------------------------------
AIz_Battleship_Propeller_Animate_Data:                         ; Offset_0x031B70
		dc.w	Offset_0x031B72-AIz_Battleship_Propeller_Animate_Data
Offset_0x031B72:
		dc.b	$02, $00, $01, $02, $03, $FF
;-------------------------------------------------------------------------------
AIz_FBz_Ship_Bomb_Main_Mappings:                               ; Offset_0x031B78
		dc.w	Offset_0x031B90-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031B98-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BA0-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BA8-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BB0-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BB8-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BC0-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BC8-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BD0-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BD8-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BE0-AIz_FBz_Ship_Bomb_Main_Mappings
		dc.w	Offset_0x031BE8-AIz_FBz_Ship_Bomb_Main_Mappings
Offset_0x031B90:
		dc.w	$0001
		dc.w	$F00B, $2008, $FFF4
Offset_0x031B98:
		dc.w	$0001
		dc.w	$FC0E, $0014, $FFF0
Offset_0x031BA0:
		dc.w	$0001
		dc.w	$F40F, $0020, $FFF0
Offset_0x031BA8:
		dc.w	$0001
		dc.w	$F40F, $0030, $FFF0
Offset_0x031BB0:
		dc.w	$0001
		dc.w	$F40E, $0040, $FFF0
Offset_0x031BB8:
		dc.w	$0001
		dc.w	$F40E, $004C, $FFF0
Offset_0x031BC0:
		dc.w	$0001
		dc.w	$0005, $0058, $FFF8
Offset_0x031BC8:
		dc.w	$0001
		dc.w	$FC0A, $005C, $FFF4
Offset_0x031BD0:
		dc.w	$0001
		dc.w	$FC0A, $0065, $FFF4
Offset_0x031BD8:
		dc.w	$0001
		dc.w	$FC0A, $006E, $FFF4
Offset_0x031BE0:
		dc.w	$0001
		dc.w	$FC0A, $0077, $FFF4
Offset_0x031BE8:
		dc.w	$0001
		dc.w	$FC09, $0080, $FFF4
;-------------------------------------------------------------------------------
AIz_FBz_Bomb_Explosion_Animate_Data:                           ; Offset_0x031BF0
		dc.w	Offset_0x031BF4-AIz_FBz_Bomb_Explosion_Animate_Data
		dc.w	Offset_0x031C00-AIz_FBz_Bomb_Explosion_Animate_Data
Offset_0x031BF4:
		dc.b	$01, $03, $02, $04, $03, $05, $04, $05
		dc.b	$05, $05, $FC
		even
Offset_0x031C00:
		dc.b	$06, $02, $07, $03, $08, $04, $09, $05
		dc.b	$0A, $05, $0B, $05, $FC
		even
;-------------------------------------------------------------------------------
AIz_Background_Tree_Mappings:                                  ; Offset_0x031C0E
		dc.w	Offset_0x031C10-AIz_Background_Tree_Mappings
Offset_0x031C10:
		dc.w	$0004
		dc.w	$C007, $4000, $0000
		dc.w	$E007, $4000, $0000
		dc.w	$0007, $4000, $0000
		dc.w	$2007, $4000, $0000
;-------------------------------------------------------------------------------
AIz_Boss_Small_Mappings:                                       ; Offset_0x031C2A
		dc.w	Offset_0x031C2C-AIz_Boss_Small_Mappings
Offset_0x031C2C:
		dc.w	$0006
		dc.w	$E40E, $2086, $FFF0
		dc.w	$F400, $2092, $FFE8
		dc.w	$F400, $2093, $0010
		dc.w	$FC0E, $2094, $FFE0
		dc.w	$FC0E, $20A0, $0000
		dc.w	$140C, $20AC, $FFF0
;-------------------------------------------------------------------------------
Hz_1_Events_Init:                                              ; Offset_0x031C52
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
Hz_1_Events_Run:                                               ; Offset_0x031C5A
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
Hz_1_Events_Init_2:                                            ; Offset_0x031C5E
		jsr	Hz_1_Deform(PC)                        ; Offset_0x031C88
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		moveq	#0,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
Hz_1_Events_Run_2:                                             ; Offset_0x031C70
		jsr	Hz_1_Deform(PC)                        ; Offset_0x031C88
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		moveq	#0,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
Hz_1_Deform:                                                   ; Offset_0x031C88
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		subi.w	#$0610,d0
		move.w	D0,d1
		swap	D0
		clr.w	D0
		asr.l	#$04,d0
		move.l	D0,d2
		add.l	D0,d0
		add.l	D2,d0
		swap	D0
		move.w	D0,d2
		addi.w	#$0110,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		sub.w	D1,d2
		move.w	D2,(Background_Events+$10).w                ; $FFFFEEE2
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		asr.w	#$01,d0
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Hydrocity 2 screen routines
; ---------------------------------------------------------------------------
; Offset_0x031CBC: Hz_2_Events_Init:
HCZ2_RefreshScreen:
		jsr	Reset_Tile_Offset_Position_Actual(pc)
		jmp	Refresh_Plane_Full(pc)
; ===========================================================================
; Offset_0x031CC4: Hz_2_Events_Run:
HCZ2_RunScreen:
		move.w	(Earthquake_Offset).w,d0
		add.w	d0,(Screen_Pos_Buffer_Y).w
		jmp	LoadTilesAsYouMove_Foreground(pc)
; ===========================================================================
; Offset_0x031CD0: Hz_2_Events_Init_2:
HCZ2_RefreshBackground:
		cmpi.w	#$C00,(Screen_Pos_Buffer_X).w
		bcc.s	Offset_0x031CF0
		cmpi.w	#$500,(Screen_Pos_Buffer_Y).w
		bcs.s	Offset_0x031CF0
		jsr	Hz_2_Wall_Move_2(pc)
		jsr	Reset_Tile_Offset_Position_Actual_2(pc)
		jsr	Refresh_Plane_Full(pc)
		jmp	Plain_Deformation(pc)

Offset_0x031CF0:
		move.w	#$C,(Level_Events_Routine_2).w
		jsr	Hz_2_Deform(pc)
		jsr	Reset_Tile_Offset_Position_Actual_2(pc)
		moveq	#0,d1
		jsr	Refresh_Plane_Full(pc)
		lea	Hz_2_Deform_Array(pc),a4
		lea	(Horizontal_Scroll_Table).w,a5
		jmp	Apply_Deformation(pc)
; ===========================================================================
; Offset_0x031D10: Hz_2_Events_Run_2:
HCZ2_RunBackground:
		move.w	(Level_Events_Routine_2).w,d0
		jmp	HCZ2_BackgroundIndex(pc,d0.w)
; ===========================================================================
; Offset_0x031D18:
HCZ2_BackgroundIndex:
		bra.w	HCZ2_MoveWall
		bra.w	Hz_2_Normal_Transition
		bra.w	Hz_2_Normal_Refresh
		bra.w	Hz_2_Normal
; ===========================================================================
; Offset_0x031D28: Hz_2_Wall_Move:
HCZ2_MoveWall:
		tst.w	(Level_Events_Buffer_5).w
		beq.s	HCZ2_SetupWall
		clr.w	(Level_Events_Buffer_5).w
		tst.w	(Earthquake_Flag).w
		bpl.s	HCZ2_RemoveWall
		clr.w	(Earthquake_Flag).w
; Offset_0x031D3C:
HCZ2_RemoveWall:
		clr.b	(Background_Collision_Flag).w
		move.w	#$E0,(Draw_Delayed_Position).w
		move.w	#$F,(Draw_Delayed_Position_Rowcount).w
		addq.w	#4,(Level_Events_Routine_2).w
		bra.s	Hz_2_Normal_Transition
; Offset_0x031D52:
HCZ2_SetupWall:
		jsr	Hz_2_Wall_Move_2(pc)
		jsr	LoadTilesAsYouMove_Background(pc)
		jsr	Plain_Deformation(pc)
		st	(Background_Collision_Flag).w
		jsr	Calc_Screen_Pos_Difference(pc)
		jmp	Earthquake_Setup(pc)

;-------------------------------------------------------------------------------
Hz_2_Normal_Transition:                                        ; Offset_0x031D6A
		move.w	#$0400,d1
		move.w	#$0000,d2
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.w	Plain_Deformation                      ; Offset_0x02FD42
		jsr	Hz_2_Deform(PC)                        ; Offset_0x031E26
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x031D9E
;-------------------------------------------------------------------------------
Hz_2_Normal_Refresh:                                           ; Offset_0x031D9A
		jsr	Hz_2_Deform(PC)                        ; Offset_0x031E26
Offset_0x031D9E:
		moveq	#0,d1
		move.w	(Screen_Pos_Buffer_Y_2).w,d2                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x031DB4
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x031DB4
;-------------------------------------------------------------------------------
Hz_2_Normal:                                                   ; Offset_0x031DB0
		jsr	Hz_2_Deform(PC)                        ; Offset_0x031E26
Offset_0x031DB4:
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		moveq	#0,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		lea	Hz_2_Deform_Array(PC),a4              ; Offset_0x031ECA
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
Hz_2_Wall_Move_2:                                              ; Offset_0x031DD0
		cmpi.b	#$06,(Obj_Player_One+Obj_Routine).w         ; $FFFFB005
		bcc.s	Offset_0x031E08
		move.l	#$0000E000,d0
		move.w	(Background_Events).w,d1                    ; $FFFFEED2
		beq.s	Offset_0x031DF8
		cmpi.w	#$FA00,d1
		bgt.s	Offset_0x031E04
		tst.w	(Earthquake_Flag).w                          ; $FFFFEECC
		bpl.s	Offset_0x031E08
		move.w	#$000E,(Earthquake_Flag).w                  ; $FFFFEECC
		bra.s	Offset_0x031E08
Offset_0x031DF8:
		cmpi.w	#$0688,(Obj_Player_One+Obj_X).w             ; $FFFFB010
		bcs.s	Offset_0x031E08
		st	(Earthquake_Flag).w                          ; $FFFFEECC
Offset_0x031E04:
		sub.l	D0,(Background_Events).w                    ; $FFFFEED2
Offset_0x031E08:
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		subi.w	#$0500,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		subi.w	#$0200,d0
		add.w	(Background_Events).w,d0                    ; $FFFFEED2
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		rts
;-------------------------------------------------------------------------------
Hz_2_Deform:                                                   ; Offset_0x031E26
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		asr.w	#$02,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d1
		asr.l	#$03,d1
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		lea	Hz_2_Deform_Index(PC),a5              ; Offset_0x031EF8
		moveq	#0,d2
Offset_0x031E48:
		move.b	(A5)+,d3
		bmi.s	Offset_0x031E62
		beq.s	Offset_0x031E5E
		ext.w	D3
		swap	D0
Offset_0x031E52:
		move.b	(A5)+,d2
		move.w	D0,(A1,d2)
		dbf	D3, Offset_0x031E52
		swap	D0
Offset_0x031E5E:
		sub.l	D1,d0
		bra.s	Offset_0x031E48
Offset_0x031E62:
		move.w	$0012(A1),d0
		sub.w	$000A(A1),d0
		move.w	D0,(Background_Events+$10).w                ; $FFFFEEE2
		move.w	$0006(A1),d0
		sub.w	$0012(A1),d0
		move.w	D0,(Background_Events+$12).w                ; $FFFFEEE4
		move.w	$0004(A1),d0
		sub.w	$0012(A1),d0
		move.w	D0,(Background_Events+$14).w                ; $FFFFEEE6
		rts
;-------------------------------------------------------------------------------
; Offset_0x031E88:  ; Left over ???
		nop
		nop
		cmpi.w	#$0004,(Level_Events_Routine_2).w           ; $FFFFEEC2
		bcs.s	Offset_0x031E9A
		jmp	(DeleteObject)                         ; Offset_0x011138
Offset_0x031E9A:
		move.w	(Background_Events).w,d4                    ; $FFFFEED2
		neg.w   D4
		addi.w	#$05C0,d4
		move.w	D4, Obj_X(A0)                                    ; $0010
		move.w	#$0700, Obj_Y(A0)                                ; $0014
		move.b	#$40, Obj_Width(A0)                              ; $0007
		bset	#$07, Obj_Status(A0)                             ; $002A
		moveq	#$4B,d1
		move.w	#$0100,d2
		move.w	#$0100,d3
		jmp	(Solid_Object_2)                       ; Offset_0x0135B6
;-------------------------------------------------------------------------------
Hz_2_Deform_Array:                                             ; Offset_0x031ECA
		dc.w	$0008, $0008, $0090, $0010, $0008, $0030, $0018, $0008
		dc.w	$0008, $00A8, $0030, $0018, $0008, $0008, $00A8, $0030
		dc.w	$0018, $0008, $0008, $00B0, $0010, $0008, $7FFF
;-------------------------------------------------------------------------------
Hz_2_Deform_Index:                                             ; Offset_0x031EF8
		dc.b	$03, $0A, $14, $1E, $2C, $02, $0C, $16
		dc.b	$20, $05, $00, $08, $0E, $18, $22, $2A
		dc.b	$03, $02, $10, $1A, $24, $01, $12, $1C
		dc.b	$01, $06, $28, $01, $04, $26, $FF, $00
;-------------------------------------------------------------------------------
MGz_1_Events_Init:                                             ; Offset_0x031F18
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
MGz_1_Events_Run:                                              ; Offset_0x031F20
		move.w	(Earthquake_Offset).w,d0                    ; $FFFFEECE
		add.w	D0,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
MGz_1_Events_Init_2:                                           ; Offset_0x031F2C
		jsr	MGz_1_Deform(PC)                       ; Offset_0x032068
		moveq	#0,d0
		moveq	#0,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		lea	MGz_1_Deform_Array(PC),a4             ; Offset_0x0320C6
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
MGz_1_Events_Run_2:                                            ; Offset_0x031F44
		move.w	(Level_Events_Routine_2).w,d0               ; $FFFFEEC2
		jmp	Offset_0x031F4C(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x031F4C:
		bra.w	MGz_1_Normal                           ; Offset_0x031F54
		bra.w	MGz_1_Transition                       ; Offset_0x031FB8
;-------------------------------------------------------------------------------
MGz_1_Normal:                                                  ; Offset_0x031F54
		tst.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		beq.s	Offset_0x031FA4
		clr.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		movem.l	D7/A0/A2/A3, -(sp)
		lea	(Marble_Garden_2_Chunks_2),a1         ; Offset_0x16403A
		lea	(RAM_Start+$6B80),a2                   ; $FFFF6B80
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Marble_Garden_2_Blocks_2),a1         ; Offset_0x162E58
		lea	(Blocks_Mem_Address+$0C78).w,a2             ; $FFFF9C78
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Marble_Garden_2_Tiles_2),a1          ; Offset_0x1632A8
		move.w	#$4FC0,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		moveq	#$14,d0
		jsr	(LoadPLC).l                              ; Offset_0x0014D0
		movem.l	(sp)+,d7/A0/A2/A3
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
Offset_0x031FA4:
		jsr	MGz_1_Deform(PC)                       ; Offset_0x032068
		lea	MGz_1_Deform_Array(PC),a4             ; Offset_0x0320C6
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jsr	Apply_Deformation(PC)                  ; Offset_0x02FD7C
		jmp	Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------
MGz_1_Transition:                                              ; Offset_0x031FB8
		tst.b	(Kos_modules_left).w                    ; $FFFFFF60
		bne.w	Offset_0x032054
		move.w	#MGz_Act_2,(Current_ZoneAndAct).w              ; $0201, $FFFFFE10
		clr.b	(Saved_Level_Flag).w                         ; $FFFFFE30
		clr.b	(Saved_Level_Flag_P2).w                      ; $FFFFFEE0
		clr.b	(Dynamic_Resize_Routine).w                   ; $FFFFEE33
		clr.b	(Object_Pos_Routine).w                       ; $FFFFF76C
		clr.b	(Ring_Pos_Routine).w                         ; $FFFFF710
		clr.b	(Boss_Flag).w                                ; $FFFFF7AA
		clr.l	(Animate_Counters).w                         ; $FFFFF7F0
		clr.w	(Animate_Counters+$04).w                     ; $FFFFF7F4
		movem.l	D7/A0/A2/A3, -(sp)
		jsr	(LoadLevelLayout).l                    ; Offset_0x01247C
		jsr	(LoadCollisionIndex).l                 ; Offset_0x0049B2
		moveq	#$0F,d0
		jsr	(PalLoad_Now).l                             ; Offset_0x002FBA
		movem.l	(sp)+,d7/A0/A2/A3
		move.w	#$2E00,d0
		move.w	#$0600,d1
		sub.w	D0,(Obj_Player_One+Obj_X).w                 ; $FFFFB010
		sub.w	D1,(Obj_Player_One+Obj_Y).w                 ; $FFFFB014
		sub.w	D0,(Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
		sub.w	D1,(Obj_Player_Two+Obj_Y).w                 ; $FFFFB05E
		jsr	Calc_Objects_X_Y_During_Transition(PC) ; Offset_0x02FFE4
		sub.w	D0,(Camera_X).w                             ; $FFFFEE78
		sub.w	D1,(Camera_Y).w                             ; $FFFFEE7C
		sub.w	D0,(Screen_Pos_Buffer_X).w                  ; $FFFFEE80
		sub.w	D1,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
		sub.w	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		sub.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		sub.w	D1,(Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
		sub.w	D1,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	(Sonic_Level_Limits_Max_Y).w,(Level_Limits_Max_Y).w ; $FFFFEE1A, $FFFFEE12
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		clr.l	(Background_Events+$10).w                    ; $FFFFEEE2
		clr.w	(Background_Events+$14).w                    ; $FFFFEEE6
		clr.w	(Level_Events_Routine_2).w                   ; $FFFFEEC2
Offset_0x032054:
		jsr	MGz_1_Deform(PC)                       ; Offset_0x032068
		lea	MGz_1_Deform_Array(PC),a4             ; Offset_0x0320C6
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jsr	Apply_Deformation(PC)                  ; Offset_0x02FD7C
		jmp	Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------
MGz_1_Deform:                                                  ; Offset_0x032068
		move.w	(Earthquake_Offset).w,(Screen_Pos_Buffer_Y_2).w ; $FFFFEECE, $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		swap	D0
		clr.w	D0
		asr.l	#$02,d0
		move.l	D0,d1
		asr.l	#$04,d1
		lea	(Horizontal_Scroll_Table+$001C).w,a1        ; $FFFFA81C
		moveq	#$08,d2
Offset_0x032082:
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		dbf	D2, Offset_0x032082
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		move.l	(Horizontal_Scroll_Table+$001C).w,d2        ; $FFFFA81C
		addi.l	#$00000500,(Horizontal_Scroll_Table+$001C).w  ; $FFFFA81C
		asr.l	#$01,d0
		moveq	#$04,d3
Offset_0x0320A2:
		add.l	D2,d0
		addi.l	#$00000500,d2
		swap	D0
		move.w	D0,(A1)+
		swap	D0
		add.l	D1,d0
		dbf	D3, Offset_0x0320A2
		move.w	-2(A1),d0
		move.w	-4(A1), -2(A1)
		move.w	D0, -4(A1)
		rts
;-------------------------------------------------------------------------------
MGz_1_Deform_Array:                                            ; Offset_0x0320C6
		dc.w	$0010, $0004, $0004, $0008, $0008, $0008, $000D, $0013
		dc.w	$0008, $0008, $0008, $0008, $0018, $7FFF
;-------------------------------------------------------------------------------
MGz_2_Events_Init:                                             ; Offset_0x0320E2
		clr.l	(Background_Events+$10).w                    ; $FFFFEEE2
		clr.w	(Background_Events+$14).w                    ; $FFFFEEE6
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
MGz_2_Events_Run:                                              ; Offset_0x0320F2
		move.w	(Earthquake_Offset).w,d0                    ; $FFFFEECE
		add.w	D0,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
		move.w	(Level_Events_Routine).w,d0                 ; $FFFFEEC0
		jmp	Offset_0x032102(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x032102:
		bra.w	MGz_2_Normal                           ; Offset_0x03210E
		bra.w	MGz_2_Collapse                         ; Offset_0x03212E
		bra.w	MGz_2_Move_Background                  ; Offset_0x03214C
;-------------------------------------------------------------------------------
MGz_2_Normal:                                                 ;  Offset_0x03210E
		tst.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		bne.s	Offset_0x032120
		jsr	MGz_2_Quake(PC)                        ; Offset_0x0322B0
		jsr	MGz_2_Chunk(PC)                        ; Offset_0x03247A
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
Offset_0x032120:
		clr.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		move.w	#$0014,(Earthquake_Flag).w                  ; $FFFFEECC
		addq.w	#$04,(Level_Events_Routine).w               ; $FFFFEEC0
;-------------------------------------------------------------------------------
MGz_2_Collapse:
		jsr	MGz_2_Collapse_2(PC)                   ; Offset_0x03216C
		tst.w	(Earthquake_Flag).w                          ; $FFFFEECC
		bmi.s	Offset_0x03213C
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
Offset_0x03213C:
		lea	MGz_2_Vertical_Scroll_Array(PC),a4    ; Offset_0x03271E
		lea	(Horizontal_Scroll_Table+$0100).w,a5        ; $FFFFA900
		moveq	#$0F,d6
		moveq	#$0A,d5
		jmp	Draw_Tiles_Vertical(PC)                ; Offset_0x02FC0E
;-------------------------------------------------------------------------------
MGz_2_Move_Background:                                         ; Offset_0x03214C
		move.l	(Background_Events+$08).w,d0                ; $FFFFEEDA
		cmpi.l	#$00050000,d0
		bcc.s	Offset_0x032162
		addi.l	#$00000800,d0
		move.l	D0,(Background_Events+$08).w                ; $FFFFEEDA
Offset_0x032162:
		swap	D0
		add.w	D0,(Background_Events+$0C).w                ; $FFFFEEDE
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
MGz_2_Collapse_2:                                              ; Offset_0x03216C
		cmpi.b	#$06,(Obj_Player_One+Obj_Routine).w         ; $FFFFB005
		bcc.w	Offset_0x0322AE
		tst.w	(Earthquake_Flag).w                          ; $FFFFEECC
		bmi.w	Offset_0x032228
		bne.w	Offset_0x0322AE
		move.w	$0038(A3),a1
		lea	$0079(A1),a1
		move.w	-8(A3),d0
		subq.w	#$03,d0
		moveq	#$02,d1
Offset_0x032192:
		clr.b	(A1)+
		clr.b	(A1)+
		clr.b	(A1)+
		adda.w	D0,a1
		dbf	D1, Offset_0x032192
		lea	(Horizontal_Scroll_Table+$0102).w,a1        ; $FFFFA902
		lea	(Horizontal_Scroll_Table+$013C).w,a5        ; $FFFFA93C
		lea	$0028(A5),a6
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		moveq	#$09,d1
Offset_0x0321B4:
		move.w	D0,(A1)
		addq.w	#$04,a1
		clr.l	(A5)+
		clr.l	(A6)+
		dbf	D1, Offset_0x0321B4
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x03221A
		move.w	#$3C90,d1
		move.l	#$05C00790,d2
		move.l	#$FFFFA93C,d3
		moveq	#$09,d4
Offset_0x0321DA:
		move.l	#Obj_Earthquake_Tiles_Attributes,(A1) ; Offset_0x0325CE
		move.w	D1, Obj_X(A1)                                    ; $0010
		move.w	D2, Obj_Timer(A1)                                ; $002E
		move.l	D3, Obj_Control_Var_00(A1)                       ; $0030
		swap	D2
		jsr	(AllocateObject_Immediate)               ; Offset_0x011DC8
		bne.s	Offset_0x03221A
		move.l	#Obj_Earthquake_Tiles_Attributes,(A1) ; Offset_0x0325CE
		move.w	D1, Obj_X(A1)                                    ; $0010
		move.w	D2, Obj_Timer(A1)                                ; $002E
		move.l	D3, Obj_Control_Var_00(A1)                       ; $0030
		addi.w	#$0020,d1
		swap	D2
		addq.l	#$04,d3
		jsr	(AllocateObject_Immediate)               ; Offset_0x011DC8
		dbne	D4, Offset_0x0321DA
Offset_0x03221A:
		st	(Earthquake_Flag).w                          ; $FFFFEECC
		clr.w	(Background_Events+$06).w                    ; $FFFFEED8
		move.w	#$0002,(Special_Vint_Routine).w             ; $FFFFEEA6
Offset_0x032228:
		lea	(Horizontal_Scroll_Table+$0100).w,a1        ; $FFFFA900
		lea	$0028(A1),a4
		lea	$0014(A4),a5
		lea	MGz_2_Collapse_Scroll_Delay(PC),a6    ; Offset_0x03270A
		move.w	(Background_Events+$06).w,d0                ; $FFFFEED8
		addq.w	#$01,(Background_Events+$06).w              ; $FFFFEED8
		moveq	#$0A,d1
		moveq	#$09,d2
Offset_0x032244:
		cmp.w	(A6)+,d0
		bcs.s	Offset_0x032250
		addi.l	#$00000500, $0064(A1)
Offset_0x032250:
		move.l	$0064(A1),d3
		add.l	D3,(A5)+
		move.w	-4(A5),d3
		cmpi.w	#$02E0,d3
		bcs.s	Offset_0x032266
		move.w	#$02E0,d3
		subq.w	#$01,d1
Offset_0x032266:
		move.w	(Screen_Pos_Buffer_Y).w,d4                  ; $FFFFEE84
		sub.w	D3,d4
		move.w	D4,(A4)+
		move.w	D4,(A1)
		addq.w	#$04,a1
		dbf	D2, Offset_0x032244
		tst.w	D1
		bne.s	Offset_0x0322AE
		move.w	$002C(A3),a1
		lea	$0079(A1),a1
		move.w	-8(A3),d0
		subq.w	#$03,d0
		moveq	#$02,d1
Offset_0x03228A:
		clr.b	(A1)+
		clr.b	(A1)+
		clr.b	(A1)+
		adda.w	D0,a1
		dbf	D1, Offset_0x03228A
		clr.w	(Earthquake_Flag).w                          ; $FFFFEECC
		clr.l	(Background_Events+$08).w                    ; $FFFFEEDA
		move.w	(Screen_Pos_Buffer_X).w,(Background_Events+$0C).w ; $FFFFEE80, $FFFFEEDE
		move.w	#$0006,(Special_Vint_Routine).w             ; $FFFFEEA6
		addq.w	#$04,(Level_Events_Routine).w               ; $FFFFEEC0
Offset_0x0322AE:
		rts
;-------------------------------------------------------------------------------
MGz_2_Quake:                                                   ; Offset_0x0322B0
		move.w	(Obj_Player_One+Obj_X).w,d0                 ; $FFFFB010
		move.w	(Obj_Player_One+Obj_Y).w,d1                 ; $FFFFB014
		move.w	(Background_Events+$10).w,d2                ; $FFFFEEE2
		jmp	Offset_0x0322C0(pc,d2.w)
;-------------------------------------------------------------------------------
Offset_0x0322C0:
		bra.w	MGz_Quake_0                            ; Offset_0x0322DC
		bra.w	MGz_Quake_1                            ; Offset_0x03233E
		bra.w	MGz_Quake_2                            ; Offset_0x032382
		bra.w	MGz_Quake_3                            ; Offset_0x0323CC
		bra.w	MGz_Quake_4                            ; Offset_0x032434
		bra.w	MGz_Quake_5                            ; Offset_0x03243E
		bra.w	MGz_Quake_6                            ; Offset_0x03245E
;-------------------------------------------------------------------------------
MGz_Quake_0:                                                   ; Offset_0x0322DC
		lea	(Background_Events+$12).w,a5                ; $FFFFEEE4
		lea	MGz_Quake_Array(PC),a1                ; Offset_0x032606
		moveq	#$04,d2
		moveq	#$02,d3
Offset_0x0322E8:
		tst.b	(A5)
		bne.s	Offset_0x032330
		cmp.w	(A1),d0
		bcs.s	Offset_0x032330
		cmp.w	$0002(A1),d0
		bcc.s	Offset_0x032330
		cmp.w	Obj_Flags(A1),d1                                ; $0004
		bcs.s	Offset_0x032330
		cmp.w	Obj_Height(A1),d1                               ; $0006
		bcc.s	Offset_0x032330
		move.w	D2,(Background_Events+$10).w                ; $FFFFEEE2
		move.w	Obj_Priority(A1),d0                             ; $0008
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		move.w	Obj_Art_VRAM(A1),d0                             ; $000A
		cmpi.w	#$0004,d2
		bne.s	Offset_0x032326
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		move.w	D0,(Level_Limits_Max_X).w                   ; $FFFFEE0E
		rts
Offset_0x032326:
		move.w	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		move.w	D0,(Level_Limits_Min_X).w                   ; $FFFFEE0C
		rts
Offset_0x032330:
		lea	Obj_Map(A1),a1                                  ; $000C
		addq.w	#$01,a5
		addq.w	#$04,d2
		dbf	D3, Offset_0x0322E8
		rts
;-------------------------------------------------------------------------------
MGz_Quake_1:                                                   ; Offset_0x03233E
		cmpi.w	#$0780,d0
		bcs.w	Offset_0x032414
		move.w	(Sonic_Level_Limits_Max_X).w,d0             ; $FFFFEE16
		cmp.w	(Camera_X).w,d0                             ; $FFFFEE78
		bhi.s	Offset_0x032380
		move.w	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		move.w	D0,(Level_Limits_Min_X).w                   ; $FFFFEE0C
		st	(Background_Events+$12).w                    ; $FFFFEEE4
		addi.w	#$000C,(Background_Events+$10).w            ; $FFFFEEE2
		st	(Earthquake_Flag).w                          ; $FFFFEECC
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x032380
		move.l	#Obj_0xAF_MGz_Drill_Mobile,(A1)       ; Offset_0x039920
		move.w	#$08E0, Obj_X(A1)                                ; $0010
		move.w	#$0690, Obj_Y(A1)                                ; $0014
Offset_0x032380:
		rts
;-------------------------------------------------------------------------------
MGz_Quake_2:                                                   ; Offset_0x032382
		cmpi.w	#$3200,d0
		bcc.w	Offset_0x032414
		move.w	(Sonic_Level_Limits_Min_X).w,d0             ; $FFFFEE14
		cmp.w	(Camera_X).w,d0                             ; $FFFFEE78
		bcs.s	Offset_0x0323CA
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		move.w	D0,(Level_Limits_Max_X).w                   ; $FFFFEE0E
		st	(Background_Events+$13).w                    ; $FFFFEEE5
		addi.w	#$000C,(Background_Events+$10).w            ; $FFFFEEE2
		st	(Earthquake_Flag).w                          ; $FFFFEECC
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x0323CA
		move.l	#Obj_0xAF_MGz_Drill_Mobile,(A1)       ; Offset_0x039920
		bset	#0, Obj_Flags(A1)                              ; $0004
		move.w	#$3320, Obj_X(A1)                                ; $0010
		move.w	#$0790, Obj_Y(A1)                                ; $0014
Offset_0x0323CA:
		rts
;-------------------------------------------------------------------------------
MGz_Quake_3:                                                   ; Offset_0x0323CC
		cmpi.w	#$3480,d0
		bcc.s	Offset_0x032414
		move.w	(Sonic_Level_Limits_Min_X).w,d0             ; $FFFFEE14
		cmp.w	(Camera_X).w,d0                             ; $FFFFEE78
		bcs.s	Offset_0x032412
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		move.w	D0,(Level_Limits_Max_X).w                   ; $FFFFEE0E
		st	(Background_Events+$14).w                    ; $FFFFEEE6
		addi.w	#$000C,(Background_Events+$10).w            ; $FFFFEEE2
		st	(Earthquake_Flag).w                          ; $FFFFEECC
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x032412
		move.l	#Obj_0xAF_MGz_Drill_Mobile,(A1)       ; Offset_0x039920
		bset	#0, Obj_Flags(A1)                              ; $0004
		move.w	#$3300, Obj_X(A1)                                ; $0010
		move.w	#$0780, Obj_Y(A1)                                ; $0014
Offset_0x032412:
		rts
Offset_0x032414:
		move.w	#$1000,d0
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		move.l	#$00006000,d0
		move.l	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		move.l	D0,(Level_Limits_Min_X).w                   ; $FFFFEE0C
		clr.w	(Background_Events+$10).w                    ; $FFFFEEE2
		rts
;-------------------------------------------------------------------------------
MGz_Quake_4:                                                   ; Offset_0x032434
		cmpi.w	#$0980,(Obj_Player_One+Obj_X).w             ; $FFFFB010
		bcc.s	Offset_0x032468
		rts
;-------------------------------------------------------------------------------
MGz_Quake_5:                                                   ; Offset_0x03243E
		cmpi.w	#$0100,(Obj_Player_One+Obj_Y).w             ; $FFFFB014
		bcc.s	Offset_0x03245C
		cmpi.w	#$2F80,(Obj_Player_One+Obj_X).w             ; $FFFFB010
		bcs.s	Offset_0x03245C
		move.w	#$6000,d0
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		move.w	D0,(Level_Limits_Max_X).w                   ; $FFFFEE0E
		bra.s	Offset_0x032468
Offset_0x03245C:
		rts
;-------------------------------------------------------------------------------
MGz_Quake_6:                                                   ; Offset_0x03245E
		cmpi.w	#$3200,(Obj_Player_One+Obj_X).w             ; $FFFFB010
		bcs.s	Offset_0x032468
		rts
Offset_0x032468:
		move.w	#$1000,d0
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		move.w	D0,(Level_Limits_Max_Y).w                   ; $FFFFEE12
		clr.w	(Background_Events+$10).w                    ; $FFFFEEE2
		rts
;-------------------------------------------------------------------------------
MGz_2_Chunk:                                                   ; Offset_0x03247A
		move.w	(Background_Events+$04).w,d0                ; $FFFFEED6
		jmp	Offset_0x032482(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x032482:
		bra.w	MGz_Chunk_0                            ; Offset_0x032498
		bra.w	MGz_Chunk_1                            ; Offset_0x0324EE
		bra.w	MGz_Chunk_2                            ; Offset_0x03250C
		bra.w	MGz_Chunk_3                            ; Offset_0x03250C
		bra.w	MGz_Chunk_4                            ; Offset_0x03258A
; Offset_0x032496:
		rts
;-------------------------------------------------------------------------------
MGz_Chunk_0:                                                   ; Offset_0x032498
		move.w	(Obj_Player_One+Obj_X).w,d0                 ; $FFFFB010
		move.w	(Obj_Player_One+Obj_Y).w,d1                 ; $FFFFB014
		lea	MGz_Chunk_Array(PC),a1                ; Offset_0x03262A
		moveq	#$04,d2
		moveq	#$02,d3
Offset_0x0324A8:
		cmp.w	(A1),d0
		bcs.s	Offset_0x0324CA
		cmp.w	$0002(A1),d0
		bcc.s	Offset_0x0324CA
		cmp.w	$0004(A1),d1
		bcs.s	Offset_0x0324CA
		cmp.w	$0006(A1),d1
		bcc.s	Offset_0x0324CA
		cmpi.w	#$0004,d2
		bne.s	Offset_0x0324D6
		tst.w	(Earthquake_Flag).w                          ; $FFFFEECC
		bmi.s	Offset_0x0324D6
Offset_0x0324CA:
		lea	$000C(A1),a1
		addq.w	#$04,d2
		dbf	D3, Offset_0x0324A8
		rts
Offset_0x0324D6:
		move.w	D2,(Background_Events+$04).w                ; $FFFFEED6
		clr.w	(Background_Events+$06).w                    ; $FFFFEED8
		clr.w	(Background_Events+$08).w                    ; $FFFFEEDA
		move.w	$0008(A1),(Background_Events+$0A).w         ; $FFFFEEDC
		move.w	$000A(A1),(Background_Events+$0C).w         ; $FFFFEEDE
;-------------------------------------------------------------------------------
MGz_Chunk_1:                                                   ; Offset_0x0324EE
		move.w	(Background_Events+$06).w,d0                ; $FFFFEED8
		cmpi.w	#$005C,d0
		bcs.s	Offset_0x03252A
		clr.w	(Earthquake_Flag).w                          ; $FFFFEECC
		clr.w	(Sonic_Level_Limits_Min_X).w                 ; $FFFFEE14
		clr.w	(Level_Limits_Min_X).w                       ; $FFFFEE0C
		move.w	#$0010,(Background_Events+$04).w            ; $FFFFEED6
		rts
;-------------------------------------------------------------------------------
MGz_Chunk_2:                                                   ; Offset_0x03250C
MGz_Chunk_3:                                                   ; Offset_0x03250C
		move.w	(Background_Events+$06).w,d0                ; $FFFFEED8
		cmpi.w	#$005C,d0
		bcs.s	Offset_0x03252A
		move.w	#$6000,d0
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		move.w	D0,(Level_Limits_Max_X).w                   ; $FFFFEE0E
		move.w	#$0014,(Background_Events+$04).w            ; $FFFFEED6
		rts
Offset_0x03252A:
		subq.w	#$01,(Background_Events+$08).w              ; $FFFFEEDA
		bpl.s	Offset_0x032588
		move.w	#$0006,(Background_Events+$08).w            ; $FFFFEEDA
		move.w	D0,d2
		bsr.s	MGz_Change_Chunk                       ; Offset_0x03259C
		move.w	(Background_Events+$0A).w,d0                ; $FFFFEEDC
		addi.w	#$0080,d0
		sub.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		bcs.s	Offset_0x032588
		cmpi.w	#$01C0,d0
		bcc.s	Offset_0x032588
		move.w	(Background_Events+$0C).w,d0                ; $FFFFEEDE
		lea	MGz_2_Screen_Redraw_Array(PC),a1      ; Offset_0x03264E
		add.w	(A1,d2),d0
		move.w	$02(A1,d2),d2
Offset_0x03255E:
		move.w	(Screen_Pos_Buffer_Y).w,d3                  ; $FFFFEE84
		and.w	(Level_Layout_Wrap_Y).w,d3                  ; $FFFFEEAC
		cmp.w	D3,d0
		bcs.s	Offset_0x032580
		addi.w	#$00F0,d3
		cmp.w	D3,d0
		bcc.s	Offset_0x032580
		move.w	(Background_Events+$0A).w,d1                ; $FFFFEEDC
		moveq	#$08,d6
		swap	D2
		jsr	Setup_Tile_Row_Draw(PC)                ; Offset_0x02F93E
		swap	D2
Offset_0x032580:
		addi.w	#$0010,d0
		dbf	D2, Offset_0x03255E
Offset_0x032588:
		rts
;-------------------------------------------------------------------------------
MGz_Chunk_4:                                                   ; Offset_0x03258A
		cmpi.w	#$2A00,(Obj_Player_One+Obj_X).w             ; $FFFFB010
		bcs.s	Offset_0x03259A
		clr.w	(Background_Events+$04).w                    ; $FFFFEED6
		moveq	#$5C,d0
		bra.s	MGz_Change_Chunk                       ; Offset_0x03259C
Offset_0x03259A:
		rts
;-------------------------------------------------------------------------------
MGz_Change_Chunk:                                              ; Offset_0x03259C
		lea	MGz_2_Chunk_Replace_Array(PC),a1      ; Offset_0x0326AA
		lea	((RAM_Start+$5900)&$FFFFFF),a5       ; $00FF5900
		bsr.s	Offset_0x0325AE
		lea	((RAM_Start+$7500)&$FFFFFF),a5       ; $00FF7500
Offset_0x0325AE:
		lea	(Marble_Garden_2_Dynamic_Chunks),a4   ; Offset_0x1649DA
		adda.w	(A1,d0),a4
		moveq	#$07,d1
Offset_0x0325BA:
		move.l	(A4)+,(A5)+
		move.l	(A4)+,(A5)+
		move.l	(A4)+,(A5)+
		move.l	(A4)+,(A5)+
		dbf	D1, Offset_0x0325BA
		addq.w	#$02,d0
		move.w	D0,(Background_Events+$06).w                ; $FFFFEED8
		rts
;-------------------------------------------------------------------------------
Obj_Earthquake_Tiles_Attributes:                               ; Offset_0x0325CE
		include "data\objects\earthqka.asm"
;-------------------------------------------------------------------------------
MGz_Quake_Array:                                               ; Offset_0x032606
		dc.w	$0780, $07C0, $0580, $0600, $05A0, $07E0, $31C0, $3200
		dc.w	$01C0, $0280, $01E0, $2F60, $3440, $3480, $0680, $0700
		dc.w	$06A0, $32C0
;-------------------------------------------------------------------------------
MGz_Chunk_Array:                                               ; Offset_0x03262A
		dc.w	$0F6C, $0F78, $0538, $0580, $0F00, $0500, $3680, $3700
		dc.w	$02F0, $0380, $3700, $0280, $3000, $3080, $0770, $0800
		dc.w	$3080, $0700
;-------------------------------------------------------------------------------
MGz_2_Screen_Redraw_Array:                                     ; Offset_0x03264E
		dc.w	$0040, $0003, $0050, $0003, $0050, $0004, $0060, $0004
		dc.w	$0060, $0003, $0070, $0002, $0070, $0003, $0080, $0003
		dc.w	$0080, $0003, $0080, $0004, $0080, $0004, $0080, $0004
		dc.w	$0080, $0005, $0090, $0005, $00A0, $0004, $0090, $0006
		dc.w	$0080, $0006, $0090, $0006, $00A0, $0005, $00B0, $0004
		dc.w	$00C0, $0003, $00D0, $0002, $00E0, $0001
;-------------------------------------------------------------------------------
MGz_2_Chunk_Replace_Array:                                     ; Offset_0x0326AA
		dc.w	$0100, $0500, $0180, $0580, $0200, $0600, $0280, $0680
		dc.w	$0300, $0700, $0380, $0780, $0000, $0800, $0000, $0880
		dc.w	$0000, $0900, $0000, $0980, $0000, $0A00, $0000, $0A80
		dc.w	$0000, $0B00, $0000, $0B80, $0000, $0C00, $0000, $0C80
		dc.w	$0000, $0D00, $0000, $0D80, $0000, $0E00, $0000, $0E80
		dc.w	$0000, $0F00, $0000, $0F80, $0000, $1000, $0080, $0480
;-------------------------------------------------------------------------------
MGz_2_Collapse_Scroll_Delay:                                   ; Offset_0x03270A
		dc.w	$000A, $0010, $0002, $0008, $000E, $0006, $0000, $000C
		dc.w	$0012, $0004
;-------------------------------------------------------------------------------
MGz_2_Vertical_Scroll_Array:                                   ; Offset_0x03271E
		dc.w	$3CA0, $0020, $0020, $0020, $0020, $0020, $0020, $0020
		dc.w	$0020, $7FFF
;-------------------------------------------------------------------------------
MGz_2_Events_Init_2:                                           ; Offset_0x032732
		jsr	MGz_2_Clear_Bottom_Background(PC)      ; Offset_0x032968
		move.w	#$0004,(Level_Events_Routine_2).w           ; $FFFFEEC2
		move.w	(Obj_Player_One+Obj_X).w,d0                 ; $FFFFB010
		move.w	(Obj_Player_One+Obj_Y).w,d1                 ; $FFFFB014
		cmpi.w	#$0500,d1
		bcc.s	Offset_0x03276A
		cmpi.w	#$3800,d0
		bcs.s	Offset_0x0327B6
		move.w	#$0004,(Background_Events).w                ; $FFFFEED2
		move.l	#Obj_MGz_2_Move_Bg_Knuckles_Path,d1   ; Offset_0x032A6A
		cmpi.w	#$3A80,d0
		bcs.s	Offset_0x0327AC
		move.w	#$0220,(Background_Events+$02).w            ; $FFFFEED4
		bra.s	Offset_0x0327B6
Offset_0x03276A:
		cmpi.w	#$0800,d1
		bcs.s	Offset_0x032790
		cmpi.w	#$34C0,d0
		bcs.s	Offset_0x0327B6
		move.w	#$0008,(Background_Events).w                ; $FFFFEED2
		move.l	#Obj_MGz_2_Move_Bg_Sonic_Path,d1      ; Offset_0x032A7E
		cmpi.w	#$3800,d0
		bcs.s	Offset_0x0327AC
		move.w	#$01D0,(Background_Events+$02).w            ; $FFFFEED4
		bra.s	Offset_0x0327B6
Offset_0x032790:
		cmpi.w	#$3900,d0
		bcs.s	Offset_0x0327B6
		move.w	#$000C,(Background_Events).w                ; $FFFFEED2
		move.w	#$01D0,(Background_Events+$02).w            ; $FFFFEED4
		st	(Background_Events+$0E).w                    ; $FFFFEEE0
		clr.l	(Horizontal_Scroll_Table+$0038).w            ; $FFFFA838
		bra.s	Offset_0x0327B6
Offset_0x0327AC:
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x0327B6
		move.l	D1,(A1)
Offset_0x0327B6:
		jsr	MGz_2_Deform(PC)                       ; Offset_0x03287A
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		clr.l	(Horizontal_Scroll_Table).w                  ; $FFFFA800
		move.w	D2,(Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
		lea	MGz_2_Draw_Array(PC),a4               ; Offset_0x032B2E
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jsr	Refresh_Plane_Tile_Deform(PC)          ; Offset_0x02FA9A
		lea	MGz_2_Deform_Array(PC),a4             ; Offset_0x032B32
		lea	(Horizontal_Scroll_Table+$0008).w,a5        ; $FFFFA808
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
MGz_2_Events_Run_2:                                            ; Offset_0x0327DE
		move.w	(Level_Events_Routine_2).w,d0               ; $FFFFEEC2
		jmp	Offset_0x0327E6(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x0327E6:
		bra.w	MGz_2_Refresh                          ; Offset_0x0327F2
		bra.w	MGz_2_Normal_2                         ; Offset_0x032800
		bra.w	MGz_2_Refresh_2                        ; Offset_0x03285E
;-------------------------------------------------------------------------------
MGz_2_Refresh:                                                 ; Offset_0x0327F2
		jsr	MGz_2_Clear_Bottom_Background(PC)      ; Offset_0x032968
		clr.l	(Horizontal_Scroll_Table).w                  ; $FFFFA800
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x03283A
;-------------------------------------------------------------------------------
MGz_2_Normal_2:                                                ; Offset_0x032800
		jsr	MGz_2_Event_Trigger(PC)                ; Offset_0x03297A
		bne.s	Offset_0x03283A
		jsr	MGz_2_Deform(PC)                       ; Offset_0x03287A
Offset_0x03280A:
		lea	MGz_2_Draw_Array(PC),a4               ; Offset_0x032B2E
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		moveq	#$20,d6
		moveq	#$02,d5
		jsr	Draw_Background(PC)                    ; Offset_0x02FB74
		lea	MGz_2_Deform_Array(PC),a4             ; Offset_0x032B32
		lea	(Horizontal_Scroll_Table+$0008).w,a5        ; $FFFFA808
		jsr	Apply_Deformation(PC)                  ; Offset_0x02FD7C
		lea	MGz_2_Vertical_Scroll_Array(PC),a4    ; Offset_0x03271E
		lea	(Horizontal_Scroll_Table+$0126).w,a5        ; $FFFFA926
		jsr	Apply_Foreground_Vertical_Scroll(PC)   ; Offset_0x02FEA4
		jsr	Calc_Screen_Pos_Difference(PC)         ; Offset_0x02FF8A
		jmp	Earthquake_Setup(PC)                   ; Offset_0x02FFA4
Offset_0x03283A:
		jsr	MGz_2_Deform(PC)                       ; Offset_0x03287A
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		move.w	D2,(Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x032862
;-------------------------------------------------------------------------------
MGz_2_Refresh_2:                                               ; Offset_0x03285E
		jsr	MGz_2_Deform(PC)                       ; Offset_0x03287A
Offset_0x032862:
		lea	MGz_2_Draw_Array(PC),a4               ; Offset_0x032B2E
		lea	(Horizontal_Scroll_Table-$0004).w,a5        ; $FFFFA7FC
		move.w	(Screen_Pos_Buffer_Y_2).w,d1                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up_Complex(PC) ; Offset_0x02FD00
		bpl.s	Offset_0x03280A
		subq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x03280A
;-------------------------------------------------------------------------------
MGz_2_Deform:                                                  ; Offset_0x03287A
		move.w	(Background_Events).w,d0                    ; $FFFFEED2
		jmp	Offset_0x032882(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x032882:
		bra.w	MGz_2_Deform_0                         ; Offset_0x0328C8
		bra.w	MGz_2_Deform_1                         ; Offset_0x03289E
		bra.w	MGz_2_Deform_2                         ; Offset_0x032894
; Offset_0x03288E:
		move.w	#$0500,d1
		bra.s	Offset_0x0328CA
;-------------------------------------------------------------------------------
MGz_2_Deform_2:                                                ; Offset_0x032894
		move.w	#$08F0,d1
		move.w	#$3200,d2
		bra.s	Offset_0x0328A6
;-------------------------------------------------------------------------------
MGz_2_Deform_1:                                                ; Offset_0x03289E
		move.w	#$01E0,d1
		move.w	#$3580,d2
Offset_0x0328A6:
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		sub.w	D1,d0
		add.w	(Background_Events+$02).w,d0                ; $FFFFEED4
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		sub.w	D2,d0
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		move.w	D0,(Horizontal_Scroll_Table+$0004).w        ; $FFFFA804
		move.w	D0,(Horizontal_Scroll_Table+$0036).w        ; $FFFFA836
		bra.s	Offset_0x0328F6
;-------------------------------------------------------------------------------
MGz_2_Deform_0:                                                ; Offset_0x0328C8
		moveq	#0,d1
Offset_0x0328CA:
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		move.w	(Earthquake_Offset).w,d2                    ; $FFFFEECE
		sub.w	D2,d0
		sub.w	D1,d0
		swap	D0
		clr.w	D0
		asr.l	#$04,d0
		move.l	D0,d1
		add.l	D0,d0
		add.l	D1,d0
		swap	D0
		add.w	D2,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		clr.w	(Screen_Pos_Buffer_X_2).w                    ; $FFFFEE8C
		clr.w	(Horizontal_Scroll_Table+$0004).w            ; $FFFFA804
		clr.w	(Horizontal_Scroll_Table+$0036).w            ; $FFFFA836
Offset_0x0328F6:
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		cmpi.w	#$0008,(Level_Events_Routine).w             ; $FFFFEEC0
		bne.s	Offset_0x032906
		move.w	(Background_Events+$0C).w,d0                ; $FFFFEEDE
Offset_0x032906:
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d1
		asr.l	#$03,d1
		move.l	D1,d2
		asr.l	#$02,d2
		lea	(Horizontal_Scroll_Table+$0036).w,a1        ; $FFFFA836
		moveq	#$07,d3
Offset_0x03291A:
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		dbf	D3, Offset_0x03291A
		tst.w	(Background_Events+$0E).w                    ; $FFFFEEE0
		bne.s	Offset_0x032934
		addi.l	#$00000800,(Horizontal_Scroll_Table+$0038).w ; $FFFFA838
Offset_0x032934:
		move.l	(Horizontal_Scroll_Table+$0038).w,d1        ; $FFFFA838
		lea	(Horizontal_Scroll_Table+$0008).w,a1        ; $FFFFA808
		lea	MGz_2_Deform_Index(PC),a5             ; Offset_0x032B62
		move.l	D2,d0
		asr.l	#$01,d2
		moveq	#$0E,d3
Offset_0x032946:
		move.w	(A5)+,d4
		add.l	D1,d0
		swap	D0
		move.w	D0,(A1,d4)
		swap	D0
		add.l	D2,d0
		dbf	D3, Offset_0x032946
		lea	MGz_2_Deform_Offset(PC),a5            ; Offset_0x032B80
		moveq	#$16,d0
Offset_0x03295E:
		move.w	(A5)+,d1
		add.w	D1,(A1)+
		dbf	D0, Offset_0x03295E
		rts
;-------------------------------------------------------------------------------
MGz_2_Clear_Bottom_Background:                                 ; Offset_0x032968
		move.w	(A3),d0
		addq.w	#$08,d0
		move.w	D0, $0074(A3)
		move.w	D0, $0078(A3)
		move.w	D0, $007C(A3)
		rts
;-------------------------------------------------------------------------------
MGz_2_Event_Trigger:                                           ; Offset_0x03297A
		move.w	(Obj_Player_One+Obj_X).w,d0                 ; $FFFFB010
		move.w	(Obj_Player_One+Obj_Y).w,d1                 ; $FFFFB014
		move.w	(Background_Events).w,d2                    ; $FFFFEED2
		jmp	Offset_0x03298A(pc,d2.w)
;-------------------------------------------------------------------------------
Offset_0x03298A:
		bra.w	Event_Trigger_0                        ; Offset_0x032A18
		bra.w	Event_Trigger_1                        ; Offset_0x0329EA
		bra.w	Event_Trigger_2                        ; Offset_0x0329B2
; Offset_0x032996:
		clr.b	(Background_Collision_Flag).w                ; $FFFFF664
		cmpi.w	#$0800,d1
		bcs.w	Offset_0x032A66
		cmpi.w	#$3A40,d0
		bcs.w	Offset_0x032A66
		move.w	#$0008,(Background_Events).w                ; $FFFFEED2
		rts
;-------------------------------------------------------------------------------
Event_Trigger_2:                                               ; Offset_0x0329B2
		st	(Background_Collision_Flag).w                ; $FFFFF664
		cmpi.w	#$0800,d1
		bcc.s	Offset_0x0329D0
		cmpi.w	#$3900,d0
		bcs.w	Offset_0x032A66
		st	(Background_Events+$0E).w                    ; $FFFFEEE0
		clr.l	(Horizontal_Scroll_Table+$0038).w            ; $FFFFA838
		moveq	#$0C,d0
		bra.s	Offset_0x0329E2
Offset_0x0329D0:
		cmpi.w	#$0900,d1
		bcc.w	 Offset_0x032A66
		cmpi.w	#$34C0,d0
		bcc.w	 Offset_0x032A66
		moveq	#0,d0
Offset_0x0329E2:
		move.w	D0,(Background_Events).w                    ; $FFFFEED2
		moveq	#-$01,d0
		rts
;-------------------------------------------------------------------------------
Event_Trigger_1:                                               ; Offset_0x0329EA
		st	(Background_Collision_Flag).w                ; $FFFFF664
		cmpi.w	#$0100,d1
		bcc.s	Offset_0x0329FE
		cmpi.w	#$3C00,d0
		bcs.s	Offset_0x0329FE
		clr.b	(Background_Collision_Flag).w                ; $FFFFF664
Offset_0x0329FE:
		cmpi.w	#$0080,d1
		bcs.s	Offset_0x032A66
		cmpi.w	#$0180,d1
		bcc.s	Offset_0x032A66
		cmpi.w	#$3800,d0
		bcc.s	Offset_0x032A66
		clr.w	(Background_Events).w                        ; $FFFFEED2
		moveq	#-$01,d0
		rts
;-------------------------------------------------------------------------------
Event_Trigger_0:                                               ; Offset_0x032A18
		clr.b	(Background_Collision_Flag).w                ; $FFFFF664
		cmpi.w	#$0080,d1
		bcs.s	Offset_0x032A66
		cmpi.w	#$0180,d1
		bcc.s	Offset_0x032A38
		cmpi.w	#$3800,d0
		bcs.s	Offset_0x032A66
		moveq	#$04,d0
		move.l	#Obj_MGz_2_Move_Bg_Knuckles_Path,d1   ; Offset_0x032A6A
		bra.s	Offset_0x032A52
Offset_0x032A38:
		cmpi.w	#$0800,d1
		bcs.s	Offset_0x032A66
		cmpi.w	#$0900,d1
		bcc.s	Offset_0x032A66
		cmpi.w	#$34C0,d0
		bcs.s	Offset_0x032A66
		moveq	#$08,d0
		move.l	#Obj_MGz_2_Move_Bg_Sonic_Path,d1      ; Offset_0x032A7E
Offset_0x032A52:
		move.w	D0,(Background_Events).w                    ; $FFFFEED2
		clr.w	(Background_Events+$02).w                    ; $FFFFEED4
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x032A64
		move.l	D1,(A1)
Offset_0x032A64:
		rts
Offset_0x032A66:
		moveq	#0,d0
		rts
;-------------------------------------------------------------------------------
; Obj_MGz_2_Move_Bg_Knuckles_Path:                             ; Offset_0x032A6A
; Obj_MGz_2_Move_Bg_Sonic_Path:                                ; Offset_0x032A7E
		include "data\objects\mgz_mvbg.asm"
;-------------------------------------------------------------------------------
MGz_2_Draw_Array:                                              ; Offset_0x032B2E
		dc.w	$0200, $7FFF
;-------------------------------------------------------------------------------
MGz_2_Deform_Array:                                            ; Offset_0x032B32
		dc.w	$0010, $0010, $0010, $0010, $0010, $0018, $0008, $0010
		dc.w	$0008, $0008, $0010, $0008, $0008, $0008, $0005, $002B
		dc.w	$000C, $0006, $0006, $0008, $0008, $0018, $00D8, $7FFF
;-------------------------------------------------------------------------------
MGz_2_Deform_Index:                                            ; Offset_0x032B62
		dc.w	$001C, $0018, $001A, $000C, $0006, $0014, $0002, $0010
		dc.w	$0016, $0012, $000A, $0000, $0008, $0004, $000E
;-------------------------------------------------------------------------------
MGz_2_Deform_Offset:                                           ; Offset_0x032B80
		dc.w	$FFFB, $FFF8, $0009, $000A, $0002, $FFF4, $0003, $0010
		dc.w	$FFFF, $000D, $FFF1, $0006, $FFF5, $FFFC, $000E, $FFF8
		dc.w	$0010, $0008, $0000, $FFF8, $0010, $0008, $0000
;-------------------------------------------------------------------------------
CNz_1_Events_Init:                                             ; Offset_0x032BAE
CNz_2_Events_Init:                                             ; Offset_0x032BAE
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
CNz_1_Events_Run:                                              ; Offset_0x032BB6
CNz_2_Events_Run:                                              ; Offset_0x032BB6
		tst.w	(Background_Events+$06).w                    ; $FFFFEED8
		beq.s	Offset_0x032BC4
		clr.w	(Background_Events+$06).w                    ; $FFFFEED8
		jmp	Refresh_Plane_Screen_Direct(PC)        ; Offset_0x02FAE0
Offset_0x032BC4:
		jsr	Offset_0x032BCC(PC)
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
Offset_0x032BCC:
		lea	(Background_Events).w,a5                    ; $FFFFEED2
		tst.l	(A5)
		beq.w	Offset_0x032C88
		move.w	(A5)+,d0
		move.w	(A5),d1
		clr.l	-2(A5)
		move.w	D0,d2
		move.w	D1,d3
		asr.w	#$03,d2
		move.w	D2,d4
		asr.w	#$04,d2
		move.w	D3,d5
		asr.w	#$05,d3
		and.w	(Level_Layout_Wrap_Row).w,d3                ; $FFFFEEAE
		move.w	(A3,d3),a4
		moveq	#-$01,d6
		clr.w	D6
		move.b	(A4,d2),d6
		lsl.w	#$07,d6
		andi.w	#$000C,d4
		andi.w	#$0060,d5
		add.w	D4,d6
		add.w	D5,d6
		move.l	D6,a4
		clr.l	(A4)
		clr.l	$0010(A4)
		asr.w	#$02,d0
		andi.w	#$0078,d0
		lsl.w	#$04,d1
		andi.w	#$0E00,d1
		add.w	D1,d0
		add.w	D7,d0
		moveq	#0,d1
		move.w	D0,(A0)+
		move.w	#$0001,(A0)+
		move.l	D1,(A0)+
		move.l	D1,(A0)+
		move.l	D1,(A0)+
		move.l	D1,(A0)+
		addi.w	#$0100,d0
		move.w	D0,(A0)+
		move.w	#$0001,(A0)+
		move.l	D1,(A0)+
		move.l	D1,(A0)+
		move.l	D1,(A0)+
		move.l	D1,(A0)+
		clr.w	(A0)
		move.w	$0018(A3),a4
		lea	$0064(A4),a4
		moveq	#0,d1
		clr.w	(Background_Events+$04).w                    ; $FFFFEED6
		moveq	#$03,d3
Offset_0x032C56:
		lea	(A4),a5
		moveq	#$02,d2
Offset_0x032C5A:
		moveq	#-$01,d0
		clr.w	D0
		move.b	(A5)+,d0
		lsl.w	#$07,d0
		add.w	D1,d0
		move.l	D0,a6
		tst.l	(A6)+
		bne.s	Offset_0x032C88
		tst.l	(A6)+
		bne.s	Offset_0x032C88
		tst.l	(A6)+
		bne.s	Offset_0x032C88
		tst.l	(A6)
		bne.s	Offset_0x032C88
		dbf	D2, Offset_0x032C5A
		addi.w	#$0020,d1
		addi.w	#$0020,(Background_Events+$04).w            ; $FFFFEED6
		dbf	D3, Offset_0x032C56
Offset_0x032C88:
		rts
;-------------------------------------------------------------------------------
CNz_1_Events_Init_2:                                           ; Offset_0x032C8A
CNz_2_Events_Init_2:                                           ; Offset_0x032C8A
		jsr	CNz_Deform(PC)                         ; Offset_0x032CC4
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		moveq	#0,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		lea	CNz_Deform_Array(PC),a4               ; Offset_0x032D2C
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
CNz_1_Events_Run_2:                                            ; Offset_0x032CA4
CNz_2_Events_Run_2:                                            ; Offset_0x032CA4
		jsr	CNz_Deform(PC)                         ; Offset_0x032CC4
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		moveq	#0,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		lea	CNz_Deform_Array(PC),a4               ; Offset_0x032D2C
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
CNz_Deform:                                                    ; Offset_0x032CC4
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		swap	D0
		clr.w	D0
		asr.l	#$04,d0
		move.l	D0,d1
		asr.l	#$01,d1
		add.l	D1,d0
		asr.l	#$02,d1
		add.l	D1,d0
		swap	D0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d1
		asr.l	#$03,d1
		lea	(Horizontal_Scroll_Table+$000A).w,a1        ; $FFFFA80A
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		swap	D0
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		sub.l	D1,d0
		swap	D0
		move.w	D0,(Background_Events+$10).w                ; $FFFFEEE2
		swap	D0
		sub.l	D1,d0
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		sub.l	D1,d0
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		asr.l	#$01,d1
		sub.l	D1,d0
		swap	D0
		move.w	D0, -(A1)
		rts
;-------------------------------------------------------------------------------
CNz_Deform_Array:                                              ; Offset_0x032D2C
		dc.w	$0080, $0030, $0060, $00C0, $7FFF
;-------------------------------------------------------------------------------
Iz_1_Events_Init:                                              ; Offset_0x032D36
		move.w	#$07FF,(Screen_Wrap_Y).w                    ; $FFFFEEAA
		move.w	#$07F0,(Level_Layout_Wrap_Y).w              ; $FFFFEEAC
		move.w	#$003C,(Level_Layout_Wrap_Row).w            ; $FFFFEEAE
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
Iz_1_Events_Run:                                               ; Offset_0x032D50
		move.w	(Level_Events_Routine_2).w,d0               ; $FFFFEEC2
		jmp	Offset_0x032D58(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x032D58:
		bra.w	Iz_1_Init                              ; Offset_0x032D70
		bra.w	Iz_1_Wait_Quake                        ; Offset_0x032D7A
		bra.w	Iz_1_Normal                            ; Offset_0x032D82
		bra.w	Iz_1_Normal                            ; Offset_0x032D82
		bra.w	Iz_1_Normal                            ; Offset_0x032D82
		bra.w	Iz_1_Normal                            ; Offset_0x032D82
;-------------------------------------------------------------------------------
Iz_1_Init:                                                     ; Offset_0x032D70
		move.w	(Earthquake_Offset).w,d0                    ; $FFFFEECE
		add.w	D0,(Screen_Pos_Buffer_X).w                  ; $FFFFEE80
		bra.s	Iz_1_Normal                            ; Offset_0x032D82
;-------------------------------------------------------------------------------
Iz_1_Wait_Quake:                                               ; Offset_0x032D7A
		move.w	(Earthquake_Offset).w,d0                    ; $FFFFEECE
		add.w	D0,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
;-------------------------------------------------------------------------------
Iz_1_Normal:                                                   ; Offset_0x032D82
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
Iz_1_Events_Init_2:                                            ; Offset_0x032D86
		lea	(A3),a1
		moveq	#$07,d0
Offset_0x032D8A:
		move.w	(A1), $0020(A1)
		addq.w	#$04,a1
		dbf	D0, Offset_0x032D8A
		move.w	(Screen_Pos_Buffer_Y).w,(Level_Events_Buffer_0).w ; $FFFFEE84, $FFFFEEB4
		move.w	(Screen_Pos_Buffer_Y).w,(Level_Events_Buffer_1).w ; $FFFFEE84, $FFFFEEB6
		cmpi.w	#$3940,(Screen_Pos_Buffer_X).w              ; $FFFFEE80
		bcc.s	Offset_0x032DE2
		cmpi.w	#$3600,(Screen_Pos_Buffer_X).w              ; $FFFFEE80
		bcs.s	Offset_0x032DB6
		addi.w	#$2800,(Level_Events_Buffer_1).w            ; $FFFFEEB6
Offset_0x032DB6:
		cmpi.w	#$0580,(Screen_Pos_Buffer_Y).w              ; $FFFFEE84
		bcc.s	Offset_0x032DE2
		clr.w	(Background_Events+$16).w                    ; $FFFFEEE8
		jsr	Iz_1_Set_Intro_Pal(PC)                 ; Offset_0x0330B4
		jsr	Iz_1_Intro_Deform(PC)                  ; Offset_0x032FF0
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		move.w	#$1880,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		lea	Iz_1_Intro_Deform_Array(PC),a4        ; Offset_0x03311C
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x032DE2:
		move.w	#$0010,(Level_Events_Routine_2).w           ; $FFFFEEC2
		st	(Background_Events+$16).w                    ; $FFFFEEE8
		jsr	Iz_1_Set_Indoor_Pal(PC)                ; Offset_0x0330EE
		jsr	Iz_1_Deform(PC)                        ; Offset_0x03308E
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
Iz_1_Events_Run_2:                                             ; Offset_0x032E00
		move.w	(Level_Events_Routine_2).w,d0               ; $FFFFEEC2
		jmp	Offset_0x032E08(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x032E08:
		bra.w	Iz_1_Intro                             ; Offset_0x032E20
		bra.w	Iz_1_Snow_Fall                         ; Offset_0x032E66
		bra.w	Iz_1_Refresh                           ; Offset_0x032E92
		bra.w	Iz_1_Refresh_2                         ; Offset_0x032EC2
		bra.w	Iz_1_Normal_2                          ; Offset_0x032EE2
		bra.w	Iz_1_Transition                        ; Offset_0x032F3C
;-------------------------------------------------------------------------------
Iz_1_Intro:                                                    ; Offset_0x032E20
		tst.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		beq.s	Offset_0x032E40
		clr.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		clr.l	(Background_Events).w                        ; $FFFFEED2
		clr.l	(Background_Events+$04).w                    ; $FFFFEED6
		jsr	Iz_1_Big_Snow_Fall(PC)                 ; Offset_0x033046
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x032E86
Offset_0x032E40:
		jsr	Iz_1_Intro_Deform(PC)                  ; Offset_0x032FF0
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		move.w	#$1880,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		lea	Iz_1_Intro_Deform_Array(PC),a4        ; Offset_0x03311C
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jsr	Apply_Deformation(PC)                  ; Offset_0x02FD7C
		jmp	Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------
Iz_1_Snow_Fall:                                                ; Offset_0x032E66
		tst.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		beq.s	Offset_0x032E82
		clr.w	(Level_Events_Buffer_5).w                    ; $FFFFEEC6
		move.w	#$02E0,(Draw_Delayed_Position).w            ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Iz_1_Refresh                           ; Offset_0x032E92
Offset_0x032E82:
		jsr	Iz_1_Big_Snow_Fall(PC)                 ; Offset_0x033046
Offset_0x032E86:
		jsr	LoadTilesAsYouMove_Background(PC)           ; Offset_0x02FB32
		jsr	Plain_Deformation(PC)                  ; Offset_0x02FD42
		jmp	Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------
Iz_1_Refresh:                                                  ; Offset_0x032E92
		move.w	#$1880,d1
		move.w	#$0200,d2
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.w	Plain_Deformation                      ; Offset_0x02FD42
		jsr	Iz_1_Deform(PC)                        ; Offset_0x03308E
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x032EC6
;-------------------------------------------------------------------------------
Iz_1_Refresh_2:                                                ; Offset_0x032EC2
		jsr	Iz_1_Deform(PC)                        ; Offset_0x03308E
Offset_0x032EC6:
		move.w	(Screen_Pos_Buffer_X_2).w,d1                ; $FFFFEE8C
		move.w	(Screen_Pos_Buffer_Y_2).w,d2                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x032F34
		st	(Background_Events+$16).w                    ; $FFFFEEE8
		jsr	Iz_1_Set_Indoor_Pal(PC)                ; Offset_0x0330EE
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x032F34
;-------------------------------------------------------------------------------
Iz_1_Normal_2:                                                 ; Offset_0x032EE2
		cmpi.w	#$6900,(Screen_Pos_Buffer_X).w              ; $FFFFEE80
		bcs.s	Offset_0x032F30
		movem.l	D7/A0/A2/A3, -(sp)
		lea	(Icecap_2_Chunks_2),a1                ; Offset_0x182746
		lea	(RAM_Start+$0B80),a2                   ; $FFFF0B80
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Icecap_2_Blocks_2),a1                ; Offset_0x17FB24
		lea	(Blocks_Mem_Address+$0418).w,a2             ; $FFFF9418
		jsr	(Queue_Kos).l          ; Offset_0x0019AE
		lea	(Icecap_2_Tiles_2),a1                 ; Offset_0x180734
		move.w	#$23E0,d2
		jsr	(Queue_Kos_Module).l                 ; Offset_0x0018A8
		moveq	#$20,d0
		jsr	(LoadPLC).l                              ; Offset_0x0014D0
		movem.l	(sp)+,d7/A0/A2/A3
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
Offset_0x032F30:
		jsr	Iz_1_Deform(PC)                        ; Offset_0x03308E
Offset_0x032F34:
		jsr	LoadTilesAsYouMove_Background(PC)           ; Offset_0x02FB32
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
Iz_1_Transition:                                               ; Offset_0x032F3C
		tst.w	(Kos_decomp_queue_count).w                 ; $FFFFFF0E
		bne.w	Offset_0x032FE8
		move.w	#Iz_Act_2,(Current_ZoneAndAct).w               ; $0501, $FFFFFE10
		clr.b	(Saved_Level_Flag).w                         ; $FFFFFE30
		clr.b	(Saved_Level_Flag_P2).w                      ; $FFFFFEE0
		clr.b	(Dynamic_Resize_Routine).w                   ; $FFFFEE33
		clr.b	(Object_Pos_Routine).w                       ; $FFFFF76C
		clr.b	(Ring_Pos_Routine).w                         ; $FFFFF710
		clr.b	(Boss_Flag).w                                ; $FFFFF7AA
		clr.l	(Animate_Counters).w                         ; $FFFFF7F0
		clr.w	(Animate_Counters+$04).w                     ; $FFFFF7F4
		movem.l	D7/A0/A2/A3, -(sp)
		jsr	(LoadLevelLayout).l                    ; Offset_0x01247C
		jsr	(LoadCollisionIndex).l                 ; Offset_0x0049B2
		moveq	#$15,d0
		jsr	(PalLoad_Now).l                             ; Offset_0x002FBA
		movem.l	(sp)+,d7/A0/A2/A3
		move.w	#$6880,d0
		move.w	#$FF00,d1
		sub.w	D0,(Obj_Player_One+Obj_X).w                 ; $FFFFB010
		sub.w	D1,(Obj_Player_One+Obj_Y).w                 ; $FFFFB014
		sub.w	D0,(Obj_Player_Two+Obj_X).w                 ; $FFFFB05A
		sub.w	D1,(Obj_Player_Two+Obj_Y).w                 ; $FFFFB05E
		jsr	Calc_Objects_X_Y_During_Transition(PC) ; Offset_0x02FFE4
		sub.w	D0,(Camera_X).w                             ; $FFFFEE78
		sub.w	D1,(Camera_Y).w                             ; $FFFFEE7C
		sub.w	D0,(Screen_Pos_Buffer_X).w                  ; $FFFFEE80
		sub.w	D1,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
		move.l	#$00007000,d0
		move.l	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		move.l	D0,(Level_Limits_Min_X).w                   ; $FFFFEE0C
		move.l	#$00000B20,d0
		move.l	D0,(Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
		move.l	D0,(Level_Limits_Min_Y).w                   ; $FFFFEE10
		move.w	#$0FFF,(Screen_Wrap_Y).w                    ; $FFFFEEAA
		move.w	#$0FF0,(Level_Layout_Wrap_Y).w              ; $FFFFEEAC
		move.w	#$007C,(Level_Layout_Wrap_Row).w            ; $FFFFEEAE
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		clr.w	(Level_Events_Routine_2).w                   ; $FFFFEEC2
Offset_0x032FE8:
		jsr	Iz_1_Deform(PC)                        ; Offset_0x03308E
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
Iz_1_Intro_Deform:                                             ; Offset_0x032FF0
		lea	(Level_Events_Buffer_0).w,a1                ; $FFFFEEB4
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		move.w	#$0400,d2
		move.w	#$0800,d3
		jsr	Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
		move.w	(Level_Events_Buffer_1).w,d0                ; $FFFFEEB6
		asr.w	#$07,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		move.w	(Earthquake_Offset).w,d3                    ; $FFFFEECE
		sub.w	D3,d0
		swap	D0
		clr.w	D0
		asr.l	#$05,d0
		move.l	D0,d1
		swap	D0
		add.w	D3,d0
		swap	D0
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		moveq	#$04,d2
		bsr.s	Offset_0x033038
		add.l	D1,d0
		move.l	D1,d2
		asr.l	#$01,d2
		add.l	D2,d1
		moveq	#$08,d2
Offset_0x033038:
		swap	D0
		move.w	D0,(A1)+
		swap	D0
		add.l	D1,d0
		dbf	D2, Offset_0x033038
		rts
;-------------------------------------------------------------------------------
Iz_1_Big_Snow_Fall:                                            ; Offset_0x033046
		cmpi.w	#$FEE0,(Background_Events).w                ; $FFFFEED2
		ble.s	Offset_0x033064
		st	(Earthquake_Flag).w                          ; $FFFFEECC
		addi.l	#$00002400,(Background_Events+$04).w        ; $FFFFEED6
		move.l	(Background_Events+$04).w,d0                ; $FFFFEED6
		sub.l	D0,(Background_Events).w                    ; $FFFFEED2
		bra.s	Offset_0x033070
Offset_0x033064:
		tst.w	(Earthquake_Flag).w                          ; $FFFFEECC
		bpl.s	Offset_0x033070
		move.w	#$0004,(Earthquake_Flag).w                  ; $FFFFEECC
Offset_0x033070:
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		subi.w	#$0460,d0
		add.w	(Background_Events).w,d0                    ; $FFFFEED2
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		subi.w	#$1D40,d0
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		rts
;-------------------------------------------------------------------------------
Iz_1_Deform:                                                   ; Offset_0x03308E
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		asr.w	#$01,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		asr.w	#$01,d0
		move.w	D0,(Background_Events+$12).w                ; $FFFFEEE4
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		asr.w	#$01,d0
		subi.w	#$1D80,d0
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		asr.w	#$01,d0
		move.w	D0,(Background_Events+$10).w                ; $FFFFEEE2
		rts
;-------------------------------------------------------------------------------
Iz_1_Set_Intro_Pal:                                            ; Offset_0x0330B4
		lea	(Palette_Row_3_Offset+$02).w,a1             ; $FFFFED62
		bsr.s	Offset_0x0330BE
		lea	(Palette_Row_3_Data_Target+$02).w,a1        ; $FFFFEDE2
Offset_0x0330BE:
		move.l	#$0EEE0EEC,(A1)+
		move.l	#$0EEA0ECA,(A1)+
		move.l	#$0EC80EA6,(A1)+
		move.l	#$0E860E64,(A1)+
		move.l	#$0E400E00,(A1)+
		move.l	#$0C000000,(A1)+
		move.l	#$0AEC0CEA,(A1)+
		move.w	#$0E80,(A1)
		rts
;-------------------------------------------------------------------------------
Iz_1_Set_Indoor_Pal:                                           ; Offset_0x0330EE
		lea	(Palette_Row_3_Offset+$02).w,a1             ; $FFFFED62
		bsr.s	Offset_0x0330F8
		lea	(Palette_Row_3_Data_Target+$02).w,a1        ; $FFFFEDE2
Offset_0x0330F8:
		move.l	#$0EC00E40,(A1)+
		move.l	#$0E040C00,(A1)+
		move.l	#$06000200,(A1)+
		move.l	#$00000E64,(A1)+
		move.l	#$0E240A02,(A1)+
		move.w	#$0402,(A1)
		rts
;-------------------------------------------------------------------------------
Iz_1_Intro_Deform_Array:                                       ; Offset_0x03311C
		dc.w	$0044, $000C, $000B, $000D, $0018, $0050, $0002, $0006
		dc.w	$0008, $0010, $0018, $0020, $0028, $7FFF
;-------------------------------------------------------------------------------
Iz_2_Events_Init:                                              ; Offset_0x033138
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
Iz_2_Events_Run:                                               ; Offset_0x033140
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
Iz_2_Events_Init_2:                                            ; Offset_0x033144
		move.w	#$0004,(Level_Events_Routine_2).w           ; $FFFFEEC2
		cmpi.w	#$3600,(Screen_Pos_Buffer_X).w              ; $FFFFEE80
		bcc.s	Offset_0x03316A
		cmpi.w	#$0720,(Screen_Pos_Buffer_Y).w              ; $FFFFEE84
		bcc.s	Offset_0x03318A
		cmpi.w	#$1000,(Screen_Pos_Buffer_X).w              ; $FFFFEE80
		bcc.s	Offset_0x03316A
		cmpi.w	#$0580,(Screen_Pos_Buffer_Y).w              ; $FFFFEE84
		bcc.s	Offset_0x03318A
Offset_0x03316A:
		clr.w	(Background_Events+$16).w                    ; $FFFFEEE8
		jsr	Iz_2_Set_Outdoors_Pal(PC)              ; Offset_0x0333B0
		jsr	Iz_2_Out_Deform(PC)                    ; Offset_0x0332C8
		moveq	#0,d0
		moveq	#0,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		lea	Iz_2_Out_Deform_Array(PC),a4          ; Offset_0x033408
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x03318A:
		st	(Background_Events+$16).w                    ; $FFFFEEE8
		jsr	Iz_2_Set_Indoors_Pal(PC)               ; Offset_0x0333DA
		jsr	Iz_2_Set_In_Deform(PC)                 ; Offset_0x033340
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		moveq	#0,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		lea	Iz_2_In_Deform_Array(PC),a4           ; Offset_0x033410
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
Iz_2_Events_Run_2:                                             ; Offset_0x0331AC
		move.w	(Level_Events_Routine_2).w,d0               ; $FFFFEEC2
		jmp	Offset_0x0331B4(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x0331B4:
		bra.w	Iz_2_From_Iz_1                         ; Offset_0x0331C0
		bra.w	Iz_2_Normal                            ; Offset_0x0331CE
		bra.w	Iz_2_Refresh                           ; Offset_0x033292
;-------------------------------------------------------------------------------
Iz_2_From_Iz_1:                                                ; Offset_0x0331C0
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		cmpi.w	#$0580,(Screen_Pos_Buffer_Y).w              ; $FFFFEE84
		bcc.s	Offset_0x0331EC
		bra.s	Offset_0x03324A
;-------------------------------------------------------------------------------
Iz_2_Normal:                                                   ; Offset_0x0331CE
		tst.w	(Background_Events+$16).w                    ; $FFFFEEE8
		bne.s	Offset_0x033226
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		cmpi.w	#$1000,d0
		bcs.s	Offset_0x033216
		cmpi.w	#$3600,d0
		bcc.s	Offset_0x033216
		cmpi.w	#$0720,(Screen_Pos_Buffer_Y).w              ; $FFFFEE84
		bcs.s	Offset_0x033216
Offset_0x0331EC:
		st	(Background_Events+$16).w                    ; $FFFFEEE8
		jsr	Iz_2_Set_Indoors_Pal(PC)               ; Offset_0x0333DA
		jsr	Iz_2_Set_In_Deform(PC)                 ; Offset_0x033340
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.w	Offset_0x0332B6
Offset_0x033216:
		jsr	Iz_2_Out_Deform(PC)                    ; Offset_0x0332C8
Offset_0x03321A:
		lea	Iz_2_Out_Deform_Array(PC),a4          ; Offset_0x033408
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
Offset_0x033226:
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		cmpi.w	#$1900,d0
		bcs.s	Offset_0x033236
		cmpi.w	#$1B80,d0
		bcs.s	Offset_0x033272
Offset_0x033236:
		cmpi.w	#$1000,d0
		bcs.s	Offset_0x033272
		cmpi.w	#$3600,d0
		bcc.s	Offset_0x033272
		cmpi.w	#$0720,(Screen_Pos_Buffer_Y).w              ; $FFFFEE84
		bcc.s	Offset_0x033272
Offset_0x03324A:
		clr.w	(Background_Events+$16).w                    ; $FFFFEEE8
		jsr	Iz_2_Set_Outdoors_Pal(PC)              ; Offset_0x0333B0
		jsr	Iz_2_Out_Deform(PC)                    ; Offset_0x0332C8
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x03329C
Offset_0x033272:
		jsr	Iz_2_Set_In_Deform(PC)                 ; Offset_0x033340
Offset_0x033276:
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		moveq	#0,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		lea	Iz_2_In_Deform_Array(PC),a4           ; Offset_0x033410
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
Iz_2_Refresh:                                                  ; Offset_0x033292
		tst.w	(Background_Events+$16).w                    ; $FFFFEEE8
		bne.s	Offset_0x0332B2
		jsr	Iz_2_Out_Deform(PC)                    ; Offset_0x0332C8
Offset_0x03329C:
		moveq	#0,d1
		move.w	(Screen_Pos_Buffer_Y_2).w,d2                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.w	Offset_0x03321A
		subq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.w	Offset_0x03321A
Offset_0x0332B2:
		jsr	Iz_2_Set_In_Deform(PC)                 ; Offset_0x033340
Offset_0x0332B6:
		moveq	#0,d1
		move.w	(Screen_Pos_Buffer_Y_2).w,d2                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x033276
		subq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x033276
;-------------------------------------------------------------------------------
Iz_2_Out_Deform:                                               ; Offset_0x0332C8
		clr.w	(Screen_Pos_Buffer_Y_2).w                    ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		move.w	(Level_frame_counter).w,d1                    ; $FFFFFE04
		asr.w	#$01,d1
		add.w	D1,d0
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		andi.l	#$007FFFFF,d0
		move.l	D0,d1
		asr.l	#$06,d1
		lea	(Horizontal_Scroll_Table+$0064).w,a1        ; $FFFFA864
		moveq	#$27,d2
Offset_0x0332EE:
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		dbf	D2, Offset_0x0332EE
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d1
		asr.l	#$01,d0
		add.l	D0,d1
		move.l	D1, $0064(A1)
		asr.l	#$02,d0
		move.l	D0,d1
		swap	D0
		move.w	D0,(A1)+
		swap	D0
		add.l	D1,d0
		swap	D0
		move.w	D0,(A1)+
		move.w	(Level_frame_counter).w,d1                    ; $FFFFFE04
		lsr.w	#$02,d1
		andi.w	#$003E,d1
		lea	Default_Background_Deform_Delta(PC),a5 ; Offset_0x031820
		adda.w	D1,a5
		moveq	#$07,d1
Offset_0x033334:
		move.w	(A5)+,d2
		add.w	D0,d2
		move.w	D2,(A1)+
		dbf	D1, Offset_0x033334
		rts
;-------------------------------------------------------------------------------
Iz_2_Set_In_Deform:                                            ; Offset_0x033340
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		subi.w	#$0700,d0
		asr.w	#$02,d0
		addi.w	#$0118,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d1
		asr.l	#$03,d1
		swap	D0
		move.w	D0,(A1)
		move.w	D0, $0010(A1)
		swap	D0
		sub.l	D1,d0
		swap	D0
		move.w	D0, $0002(A1)
		move.w	D0, $000E(A1)
		swap	D0
		sub.l	D1,d0
		swap	D0
		move.w	D0, $0004(A1)
		move.w	D0, $000C(A1)
		swap	D0
		sub.l	D1,d0
		swap	D0
		move.w	D0, $0006(A1)
		move.w	D0, $000A(A1)
		swap	D0
		sub.l	D1,d0
		swap	D0
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		move.w	D0, $0008(A1)
		swap	D0
		sub.l	D1,d0
		swap	D0
		move.w	D0,(Background_Events+$10).w                ; $FFFFEEE2
		rts
;-------------------------------------------------------------------------------
Iz_2_Set_Outdoors_Pal:                                         ; Offset_0x0333B0
		lea	(Palette_Row_3_Offset+$02).w,a1             ; $FFFFED62
		bsr.s	Offset_0x0333BA
		lea	(Palette_Row_3_Data_Target+$02).w,a1        ; $FFFFEDE2
Offset_0x0333BA:
		move.l	#$0EEE0EEA,(A1)+
		move.l	#$0EC80EA4,(A1)+
		move.l	#$0C820C60,(A1)+
		move.l	#$0C400E20,(A1)+
		move.l	#$0A000E00,(A1)
		rts
;-------------------------------------------------------------------------------
Iz_2_Set_Indoors_Pal:                                          ; Offset_0x0333DA
		lea	(Palette_Row_3_Offset+$02).w,a1             ; $FFFFED62
		bsr.s	Offset_0x0333E4
		lea	(Palette_Row_3_Data_Target+$02).w,a1        ; $FFFFEDE2
Offset_0x0333E4:
		move.l	#$0EE20E24,(A1)+
		move.l	#$0E040C02,(A1)+
		move.l	#$06020400,(A1)+
		move.l	#$02000E20,(A1)+
		move.l	#$0E400840,(A1)+
		move.w	#$0600,(A1)
		rts
;-------------------------------------------------------------------------------
Iz_2_Out_Deform_Array:                                         ; Offset_0x033408
		dc.w	$005A, $0026, $8030, $7FFF
;-------------------------------------------------------------------------------
Iz_2_In_Deform_Array:                                          ; Offset_0x033410
		dc.w	$01A0, $0040, $0020, $0018, $0040, $0008, $0008, $0018
		dc.w	$7FFF
;-------------------------------------------------------------------------------
LBz_1_Events_Init:                                             ; Offset_0x033422
		move.w	$0004(A3),d0
		subi.w	#$0076,d0
		move.w	D0, $0074(A3)
		move.w	D0, $0078(A3)
		move.w	D0, $007C(A3)
		lea	(Horizontal_Scroll_Table+$0148).w,a1        ; $FFFFA948
		moveq	#$0D,d0
Offset_0x03343C:
		clr.l	(A1)+
		dbf	D0, Offset_0x03343C
		jsr	LBz_1_Vertical_Scroll(PC)              ; Offset_0x033512
		lea	(Horizontal_Scroll_Table+$0100).w,a1        ; $FFFFA900
		moveq	#$0B,d0
Offset_0x03344C:
		move.w	(A1)+,d1
		and.w	(Level_Layout_Wrap_Y).w,d1                  ; $FFFFEEAC
		move.w	D1,(A1)+
		dbf	D0, Offset_0x03344C
		cmpi.w	#$3B60,(Screen_Pos_Buffer_X).w              ; $FFFFEE80
		bcs.s	Offset_0x033474
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x03346E
		move.l	#Obj_LBz_1_Invisible_Block,(A1)       ; Offset_0x0336A6
Offset_0x03346E:
		move.w	(A3),a5
		jsr	LBz_1_Do_Mod_3(PC)                     ; Offset_0x03364E
Offset_0x033474:
		move.w	(Obj_Player_One+Obj_X).w,d0                 ; $FFFFB010
		move.w	(Obj_Player_One+Obj_Y).w,d1                 ; $FFFFB014
		moveq	#0,d2
		jsr	LBz_1_Check_Layout_Mod(PC)             ; Offset_0x0335CA
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
LBz_1_Events_Run:                                              ; Offset_0x03348A
		move.w	(Earthquake_Offset).w,d0                    ; $FFFFEECE
		add.w	D0,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
		move.w	(Obj_Player_One+Obj_X).w,d0                 ; $FFFFB010
		move.w	(Obj_Player_One+Obj_Y).w,d1                 ; $FFFFB014
		move.w	(Background_Events).w,d2                    ; $FFFFEED2
		bne.s	Offset_0x0334AC
		jsr	LBz_1_Check_Layout_Mod(PC)             ; Offset_0x0335CA
		tst.w	D3
		bmi.s	Offset_0x0334FE
		jmp	Refresh_Plane_Screen_Direct(PC)        ; Offset_0x02FAE0
Offset_0x0334AC:
		lea	(LBz_1_Layout_Mod_Exit_Range-$04)(PC),a1  ; Offset_0x033712
		adda.w	D2,a1
		cmp.w	(A1)+,d0
		bcs.s	Offset_0x0334BC
		cmp.w	(A1)+,d0
		bhi.s	Offset_0x0334BC
		bra.s	Offset_0x0334FE
Offset_0x0334BC:
		clr.w	(Background_Events).w                        ; $FFFFEED2
		lsr.w	#$01,d2
		jsr	(Offset_0x0334CA-$02)(pc,d2.w)
		jmp	Refresh_Plane_Screen_Direct(PC)        ; Offset_0x02FAE0
;-------------------------------------------------------------------------------
Offset_0x0334CA:
		bra.s	LBz_1_Layout_Exit_Mod_1                ; Offset_0x0334D2
		bra.s	LBz_1_Layout_Exit_Mod_2                ; Offset_0x0334DC
		bra.s	LBz_1_Layout_Exit_Mod_3                ; Offset_0x0334E8
		bra.s	LBz_1_Layout_Exit_Mod_4                ; Offset_0x0334F2
;-------------------------------------------------------------------------------
LBz_1_Layout_Exit_Mod_1:                                       ; Offset_0x0334D2
		move.w	(A3),a5
		lea	$0088(A5),a5
		bra.w	LBz_1_Do_Mod_1                         ; Offset_0x033688
;-------------------------------------------------------------------------------
LBz_1_Layout_Exit_Mod_2:                                       ; Offset_0x0334DC
		move.w	$0024(A3),a5
		lea	$008A(A5),a5
		bra.w	LBz_1_Do_Mod_2                         ; Offset_0x033668
;-------------------------------------------------------------------------------
LBz_1_Layout_Exit_Mod_3:                                       ; Offset_0x0334E8
		move.w	(A3),a5
		lea	$0098(A5),a5
		bra.w	LBz_1_Do_Mod_3                         ; Offset_0x03364E
;-------------------------------------------------------------------------------
LBz_1_Layout_Exit_Mod_4:                                       ; Offset_0x0334F2
		move.w	$0030(A3),a5
		lea	$009A(A5),a5
		bra.w	LBz_1_Do_Mod_4                         ; Offset_0x033632
;-------------------------------------------------------------------------------
Offset_0x0334FE:
		jsr	LBz_1_Vertical_Scroll(PC)              ; Offset_0x033512
		lea	LBz_1_Vertical_Scroll_Array(PC),a4    ; Offset_0x0336DE
		lea	(Horizontal_Scroll_Table+$0100).w,a5        ; $FFFFA900
		moveq	#$0F,d6
		moveq	#$0C,d5
		jmp	Draw_Tiles_Vertical(PC)                ; Offset_0x02FC0E
;-------------------------------------------------------------------------------
LBz_1_Vertical_Scroll:                                         ; Offset_0x033512
		tst.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		beq.w	Offset_0x0335A6
		bpl.s	Offset_0x033536
		move.w	#$0001,(Foreground_Events_Y_Counter).w      ; $FFFFEEC4
		move.w	#$0002,(Special_Vint_Routine).w             ; $FFFFEEA6
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x033536
		move.l	#Obj_LBz_1_Invisible_Block,(A1)       ; Offset_0x0336A6
Offset_0x033536:
		lea	(Horizontal_Scroll_Table+$014C).w,a1        ; $FFFFA94C
		lea	LBz_1_Collapse_Scroll_Speed(PC),a5    ; Offset_0x033726
		move.l	$002C(A1),d0
		addi.l	#$00000100, $002C(A1)
		move.w	$0030(A1),d1
		addq.w	#$01, $0030(A1)
		asr.w	#$06,d1
		moveq	#$0A,d2
		moveq	#$09,d3
Offset_0x033558:
		addq.w	#$02,d1
		andi.w	#$000E,d1
		move.w	(A5,d1),d4
		ext.l	D4
		lsl.l	#$04,d4
		move.l	(A1),d5
		sub.l	D4,d5
		sub.l	D0,d5
		swap	D5
		cmpi.w	#$FD00,d5
		bgt.s	Offset_0x03357A
		move.w	#$FD00,d5
		subq.w	#$01,d2
Offset_0x03357A:
		swap	D5
		move.l	D5,(A1)+
		dbf	D3, Offset_0x033558
		tst.w	D2
		bne.s	Offset_0x0335A6
		clr.w	(Earthquake_Flag).w                          ; $FFFFEECC
		clr.w	(Foreground_Events_Y_Counter).w              ; $FFFFEEC4
		move.w	#$0006,(Special_Vint_Routine).w             ; $FFFFEEA6
		move.w	(A3),a5
		jsr	LBz_1_Do_Mod_3(PC)                     ; Offset_0x03364E
		lea	(Horizontal_Scroll_Table+$0148).w,a1        ; $FFFFA948
		moveq	#$0D,d0
Offset_0x0335A0:
		clr.l	(A1)+
		dbf	D0, Offset_0x0335A0
Offset_0x0335A6:
		lea	(Horizontal_Scroll_Table+$0100).w,a1        ; $FFFFA900
		lea	(Horizontal_Scroll_Table+$0130).w,a4        ; $FFFFA930
		lea	(Horizontal_Scroll_Table+$0148).w,a5        ; $FFFFA948
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		moveq	#$0B,d1
Offset_0x0335B8:
		move.w	(A5),d2
		add.w	D0,d2
		move.w	D2,(A1)
		move.w	D2,(A4)+
		addq.w	#$04,a1
		addq.w	#$04,a5
		dbf	D1, Offset_0x0335B8
		rts
;-------------------------------------------------------------------------------
LBz_1_Check_Layout_Mod:                                        ; Offset_0x0335CA
		lea	LBz_1_Layout_Mod_Range(PC),a1         ; Offset_0x0336F6
		moveq	#$03,d3
Offset_0x0335D0:
		lea	(A1),a5
		cmp.w	(A5)+,d0
		bcs.s	Offset_0x0335F2
		cmp.w	(A5)+,d0
		bhi.s	Offset_0x0335F2
		cmp.w	(A5)+,d1
		bcs.s	Offset_0x0335F2
		cmp.w	(A5)+,d1
		bhi.s	Offset_0x0335F2
		tst.w	D2
		bne.s	Offset_0x0335FC
		cmpi.w	#$1580,d0
		bcs.s	Offset_0x0335FC
		cmpi.w	#$0400,d1
		bcs.s	Offset_0x0335FC
Offset_0x0335F2:
		addq.w	#$08,a1
		addq.w	#$04,d2
		dbf	D3, Offset_0x0335D0
		rts
Offset_0x0335FC:
		addq.w	#$04,d2
		move.w	D2,(Background_Events).w                    ; $FFFFEED2
		lsr.w	#$01,d2
		jmp	(Offset_0x033608-$02)(pc,d2.w)
;-------------------------------------------------------------------------------
Offset_0x033608:
		bra.s	LBz_1_Layout_Mod_1                     ; Offset_0x033610
		bra.s	LBz_1_Layout_Mod_2                     ; Offset_0x033618
		bra.s	LBz_1_Layout_Mod_3                     ; Offset_0x033622
		bra.s	LBz_1_Layout_Mod_4                     ; Offset_0x03362A
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_1:                                            ; Offset_0x033610
		move.w	(A3),a5
		lea	$0080(A5),a5
		bra.s	LBz_1_Do_Mod_1                         ; Offset_0x033688
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_2:                                            ; Offset_0x033618
		move.w	$0024(A3),a5
		lea	$0080(A5),a5
		bra.s	LBz_1_Do_Mod_2                         ; Offset_0x033668
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_3:                                            ; Offset_0x033622
		move.w	(A3),a5
		lea	$0094(A5),a5
		bra.s	LBz_1_Do_Mod_3                         ; Offset_0x03364E
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_4:                                            ; Offset_0x03362A
		move.w	$0030(A3),a5
		lea	$0094(A5),a5
;-------------------------------------------------------------------------------
LBz_1_Do_Mod_4:                                                ; Offset_0x033632
		move.w	(A3),a1
		lea	$007A(A1),a1
		move.w	-8(A3),d0
		subq.w	#$06,d0
		moveq	#$05,d1
Offset_0x033640:
		move.l	(A5)+,(A1)+
		move.w	(A5)+,(A1)+
		adda.w	D0,a5
		adda.w	D0,a1
		dbf	D1, Offset_0x033640
		rts
;-------------------------------------------------------------------------------
LBz_1_Do_Mod_3:                                                ; Offset_0x03364E
		move.w	(A3),a1
		lea	$0074(A1),a1
		move.w	-8(A3),d0
		subq.w	#$04,d0
		moveq	#$0B,d1
Offset_0x03365C:
		move.l	(A5)+,(A1)+
		adda.w	D0,a5
		adda.w	D0,a1
		dbf	D1, Offset_0x03365C
		rts
;-------------------------------------------------------------------------------
LBz_1_Do_Mod_2:                                                ; Offset_0x033668
		move.w	(A3),a1
		lea	$0042(A1),a1
		move.w	-8(A3),d0
		subi.w	#$000A,d0
		moveq	#$0D,d1
Offset_0x033678:
		move.l	(A5)+,(A1)+
		move.l	(A5)+,(A1)+
		move.w	(A5)+,(A1)+
		adda.w	D0,a5
		adda.w	D0,a1
		dbf	D1, Offset_0x033678
		rts
;-------------------------------------------------------------------------------
LBz_1_Do_Mod_1:                                                ; Offset_0x033688
		move.w	$0008(A3),a1
		lea	$0026(A1),a1
		move.w	-8(A3),d0
		subq.w	#$08,d0
		moveq	#$08,d1
Offset_0x033698:
		move.l	(A5)+,(A1)+
		move.l	(A5)+,(A1)+
		adda.w	D0,a5
		adda.w	D0,a1
		dbf	D1, Offset_0x033698
		rts
;-------------------------------------------------------------------------------
Obj_LBz_1_Invisible_Block:                                     ; Offset_0x0336A6
		include "data\objects\invblock.asm"
;-------------------------------------------------------------------------------
LBz_1_Vertical_Scroll_Array:                                   ; Offset_0x0336DE
		dc.w	$3B60, $0010, $0010, $0010, $0010, $0010, $0010, $0010
		dc.w	$0010, $0010, $0010, $7FFF
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_Range:                                        ; Offset_0x0336F6
		dc.w	$13E0, $16A0, $0100, $0580
		dc.w	$2160, $2520, $0000, $0700
		dc.w	$3A60, $3BA0, $0000, $0600
		dc.w	$3DE0, $3FA0, $0000, $0300
;-------------------------------------------------------------------------------
LBz_1_Layout_Mod_Exit_Range:                                   ; Offset_0x033716
		dc.w	$1376, $170A, $20F6, $258A
		dc.w	$39F6, $3C0A, $3D76, $400A
;-------------------------------------------------------------------------------
LBz_1_Collapse_Scroll_Speed:                                   ; Offset_0x033726
		dc.w	$01EE, $01F2, $00C7, $01B3, $01B7, $0198, $000E, $0139
;-------------------------------------------------------------------------------
LBz_1_Events_Init_2:                                           ; Offset_0x033736
		jsr	LBZ1_Deform(PC)                       ; Offset_0x033884
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		move.w	D2,(Horizontal_Scroll_Table+$0002).w        ; $FFFFA802
		clr.l	(Horizontal_Scroll_Table+$0004).w            ; $FFFFA804
		lea	LBz_1_Draw_Array(PC),a4               ; Offset_0x0338F2
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jsr	Refresh_Plane_Tile_Deform(PC)          ; Offset_0x02FA9A
		lea	LBz_1_Deform_Array(PC),a4             ; Offset_0x0338F6
		lea	(Horizontal_Scroll_Table+$0008).w,a5        ; $FFFFA808
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
; ===========================================================================
; Offset_0x03375E: LBz_1_Events_Run_2:
LBZ1_RunBackground:
		move.w	(Level_Events_Routine_2).w,d0
		jmp	LBZ1_BackgroundIndex(pc,d0.w)
; ===========================================================================
; Offset_0x033766:
LBZ1_BackgroundIndex:
		bra.w	LBZ1_NormalBackground
		bra.w	LBZ1_LevelTransition
; ===========================================================================
; Offset_0x03376E: LBz_1_Normal:
LBZ1_NormalBackground:
		tst.w	(Level_Events_Buffer_5).w
		beq.s	.normalDeform
		clr.w	(Level_Events_Buffer_5).w
		; The level transition appears to have been programmed for a much earlier build
		; of the game due to several oddities that cause it to break,as documented below
; LBZ1_BeginLoadingAct2:
		movem.l	d7-a0/a2-a3,-(sp)
		lea	(Launch_Base_2_Chunks).l,a1
		lea	(RAM_Start).l,a2
		jsr	(Queue_Kos).l
		lea	(Launch_Base_2_Blocks_2).l,a1
		lea	(Blocks_Mem_Address+$628).w,a2
		jsr	(Queue_Kos).l
		lea	(Launch_Base_2_Tiles_2).l,a1	; load tiles, note these are decompressed into
		move.w	#$2D60,d2			; the wrong location as it should be $2CA0
		jsr	(Queue_Kos_Module).l
		moveq	#$24,d0
		jsr	(LoadPLC).l
		moveq	#$25,d0
		jsr	(LoadPLC).l
		movem.l	(sp)+,d7-a0/a2-a3
		addq.w	#4,(Level_Events_Routine_2).w
; Offset_0x0337C6:
.normalDeform:
		jsr	LBZ1_Deform(pc)
		lea	LBz_1_Draw_Array(pc),a4
		lea	(Horizontal_Scroll_Table).w,a5
		moveq	#$20,d6
		moveq	#2,d5
		jsr	Draw_Background(pc)
		lea	LBz_1_Deform_Array(pc),a4
		lea	(Horizontal_Scroll_Table+8).w,a5
		jsr	Apply_Deformation(pc)
		lea	LBz_1_Vertical_Scroll_Array(pc),a4
		lea	(Horizontal_Scroll_Table+$12E).w,a5
		jsr	Apply_Foreground_Vertical_Scroll(pc)
		jmp	Earthquake_Setup(pc)
; ===========================================================================
; Offset_0x0337F6: LBz_1_Transition:
LBZ1_LevelTransition:
		tst.b	(Kos_modules_left).w
		bne.w	.normalDeform
		move.w	#LBz_Act_2,(Current_ZoneAndAct).w
		clr.b	(Saved_Level_Flag).w
		clr.b	(Saved_Level_Flag_P2).w
		clr.b	(Dynamic_Resize_Routine).w
		clr.b	(Object_Pos_Routine).w
		clr.b	(Ring_Pos_Routine).w
		clr.b	(Boss_Flag).w
		clr.l	(Animate_Counters).w
		clr.w	(Animate_Counters+4).w
		movem.l	d7-a0/a2-a3,-(sp)
		jsr	(LoadLevelLayout).l
		jsr	(LoadCollisionIndex).l
		jsr	(Level_InitWaterLevels).l
		; Since this was written when Act 1 still had water, it does not enable
		; the water VDP flag here
		moveq	#$17,d0
		jsr	(PalLoad_Now).l
		movem.l	(sp)+,d7-a0/a2-a3
		move.w	#$3A00,d0
		; This seems to have been written with an earlier version of the routine
		; in mind as it does not reset camera boundaries
		moveq	#0,d1
		sub.w	d0,(Obj_Player_One+Obj_X).w
		sub.w	d1,(Obj_Player_One+Obj_Y).w
		sub.w	d0,(Obj_Player_Two+Obj_X).w
		sub.w	d1,(Obj_Player_Two+Obj_Y).w
		jsr	Calc_Objects_X_Y_During_Transition(pc)
		sub.w	d0,(Camera_X).w
		sub.w	d1,(Camera_Y).w
		sub.w	d0,(Screen_Pos_Buffer_X).w
		sub.w	d1,(Screen_Pos_Buffer_Y).w
		jsr	Reset_Tile_Offset_Position_Actual(pc)
		clr.w	(Level_Events_Routine_2).w
; Offset_0x033878:
.normalDeform:
		lea	LBz_1_Deform_Array(pc),a4
		lea	(Horizontal_Scroll_Table+8).w,a5
		jmp	Apply_Deformation(pc)
; ===========================================================================
; Offset_0x033884: LBz_1_Deform:
LBZ1_Deform:
		; setup vertical scrolling
		move.w	(Screen_Pos_Buffer_Y).w,d0
		move.w	(Earthquake_Offset).w,d1
		sub.w	d1,d0
		asr.w	#4,d0
		add.w	d1,d0
		move.w	d0,(Screen_Pos_Buffer_Y_2).w
		; setup horizontal scrolling
		move.w	(Screen_Pos_Buffer_X).w,d0
		swap	d0
		clr.w	d0
		asr.l	#4,d0
		move.l	d0,d1
		asr.l	#1,d0
		swap	d0
		move.w	d0,(Background_Events+$10).w
		swap	d0
		swap	d1
		move.w	d1,(Screen_Pos_Buffer_X_2).w
		; the Death Egg and supports
		move.w	d1,(Horizontal_Scroll_Table).w
		move.w	d1,(Horizontal_Scroll_Table+8).w
		swap	d1
		; bushes (or trees?)
		lea	(Horizontal_Scroll_Table+$A).w,a1
		add.l	d0,d1
		add.l	d0,d1
		asr.l	#2,d0
		moveq	#4-1,d2

Offset_0x0338C8:
		swap	d1
		move.w	d1,(a1)+
		swap	d1
		add.l	d0,d1
		dbf	d2,Offset_0x0338C8
		moveq	#$A,d0
		add.w	d0,(Background_Events+$10).w
		add.w	d0,(Screen_Pos_Buffer_X_2).w
		add.w	d0,(Horizontal_Scroll_Table).w
		add.w	d0,(Horizontal_Scroll_Table+8).w
		lea	(Horizontal_Scroll_Table+$A).w,a1
		addq.w	#4,(a1)+
		subq.w	#2,(a1)+
		addq.w	#7,(a1)
		rts
; ===========================================================================
; Offset_0x0338F2:
LBz_1_Draw_Array:
		dc.w	$D0, $7FFF
; Offset_0x0338F6:
LBz_1_Deform_Array:
		dc.w	$D0			; the Death Egg and supports
		dc.w	$18, 8, 8, $7FFF	; bushes/trees
; End of function LBZ1_Deform

;-------------------------------------------------------------------------------
LBz_2_Events_Init:                                             ; Offset_0x033900
		move.w	#$0004,(Level_Events_Routine).w             ; $FFFFEEC0
		bsr.s	LBz_2_Layout_Mod                       ; Offset_0x033936
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
LBz_2_Events_Run:                                              ; Offset_0x033910
		move.w	(Level_Events_Routine).w,d0                 ; $FFFFEEC0
		jmp	Offset_0x033918(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x033918:
		bra.w	LBz_2_From_Transition                  ; Offset_0x033920
		bra.w	LBz_2_Normal                           ; Offset_0x033956
;-------------------------------------------------------------------------------
LBz_2_From_Transition:                                         ; Offset_0x033920
		cmpi.w	#$060A,(Obj_Player_One+Obj_X).w             ; $FFFFB010
		bcs.s	Offset_0x033932
		bsr.s	LBz_2_Layout_Mod                       ; Offset_0x033936
		addq.w	#$04,(Level_Events_Routine).w               ; $FFFFEEC0
		jmp	Refresh_Plane_Screen_Direct(PC)        ; Offset_0x02FAE0
Offset_0x033932:
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
LBz_2_Layout_Mod:                                              ; Offset_0x033936
		move.w	(A3),a5
		lea	$0094(A5),a5
		move.w	(A3),a1
		addq.w	#$06,a1
		move.w	-8(A3),d0
		subq.w	#$06,d0
		moveq	#$05,d1
Offset_0x033948:
		move.l	(A5)+,(A1)+
		move.w	(A5)+,(A1)+
		adda.w	D0,a5
		adda.w	D0,a1
		dbf	D1, Offset_0x033948
		rts
;-------------------------------------------------------------------------------
LBz_2_Normal:                                                  ; Offset_0x033956
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
LBz_2_Events_Init_2:                                           ; Offset_0x03395A
		move.w	#$0008,(Level_Events_Routine_2).w           ; $FFFFEEC2
		jsr	LBz_2_Deform(PC)                       ; Offset_0x0339E4
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		moveq	#0,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		lea	LBz_2_Deform_Array(PC),a4             ; Offset_0x033BDC
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
LBz_2_Events_Run_2:                                            ; Offset_0x03397A
		move.w	(Level_Events_Routine_2).w,d0               ; $FFFFEEC2
		jmp	Offset_0x033982(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x033982:
		bra.w	LBz_2_From_Transition_2                ; Offset_0x03398E
		bra.w	LBz_2_Refresh                          ; Offset_0x0339AE
		bra.w	LBz_2_Normal_2                         ; Offset_0x0339C4
;-------------------------------------------------------------------------------
LBz_2_From_Transition_2:                                       ; Offset_0x03398E
		jsr	LBz_2_Deform(PC)                       ; Offset_0x0339E4
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		addi.w	#$00E0,d0
		and.w	(Level_Layout_Wrap_Y).w,d0                  ; $FFFFEEAC
		move.w	D0,(Draw_Delayed_Position).w                ; $FFFFEEC8
		move.w	#$000F,(Draw_Delayed_Position_Rowcount).w   ; $FFFFEECA
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x0339B2
;-------------------------------------------------------------------------------
LBz_2_Refresh:                                                 ; Offset_0x0339AE
		jsr	LBz_2_Deform(PC)                       ; Offset_0x0339E4
Offset_0x0339B2:
		moveq	#0,d1
		move.w	(Screen_Pos_Buffer_Y_2).w,d2                ; $FFFFEE90
		jsr	Draw_Plane_Vertical_Bottom_Up(PC)      ; Offset_0x02FCC6
		bpl.s	Offset_0x0339C8
		addq.w	#$04,(Level_Events_Routine_2).w             ; $FFFFEEC2
		bra.s	Offset_0x0339C8
;-------------------------------------------------------------------------------
LBz_2_Normal_2:                                                ; Offset_0x0339C4
		jsr	LBz_2_Deform(PC)                       ; Offset_0x0339E4
Offset_0x0339C8:
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		moveq	#0,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		lea	LBz_2_Deform_Array(PC),a4             ; Offset_0x033BDC
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
LBz_2_Deform:                                                  ; Offset_0x0339E4
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		subi.w	#$05F0,d0
		move.w	D0,d1
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d2
		asr.l	#$03,d2
		sub.l	D2,d0
		asr.l	#$02,d2
		sub.l	D2,d0
		swap	D0
		move.w	D0,d2
		addi.w	#$02C0,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		sub.w	D1,d2
		move.w	D2,(Background_Events+$10).w                ; $FFFFEEE2
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		swap	D0
		clr.w	D0
		tst.w	D2
		beq.w	Offset_0x033ACE
		move.l	D0,d1
		move.l	D0,d3
		asr.l	#$06,d3
		move.l	D3,d4
		asr.l	#$03,d4
		sub.l	D4,d3
		moveq	#$1F,d4
		cmpi.w	#$FFC0,d2
		bgt.s	Offset_0x033A4E
		lea	(Horizontal_Scroll_Table+$001E).w,a1        ; $FFFFA81E
Offset_0x033A36:
		swap	D1
		move.w	D1,(A1)+
		swap	D1
		sub.l	D3,d1
		swap	D1
		move.w	D1,(A1)+
		swap	D1
		sub.l	D3,d1
		dbf	D4, Offset_0x033A36
		bra.w	Offset_0x033ACE
Offset_0x033A4E:
		lea	(Horizontal_Scroll_Table+$011E).w,a1        ; $FFFFA91E
Offset_0x033A52:
		swap	D1
		move.w	D1, -(A1)
		swap	D1
		sub.l	D3,d1
		swap	D1
		move.w	D1, -(A1)
		swap	D1
		sub.l	D3,d1
		dbf	D4, Offset_0x033A52
		cmpi.w	#$0040,d2
		bge.s	Offset_0x033ACE
		lea	(Horizontal_Scroll_Table+$009E).w,a1        ; $FFFFA89E
		lea	(A1),a5
		lea	(Water_Surface_Scroll_Data),a6        ; Offset_0x1C8000
		move.w	D2,d1
		bmi.s	Offset_0x033AA6
		move.w	D1,d3
		neg.w   D3
		addi.w	#$0040,d3
		lsl.w	#$06,d3
		adda.w	D3,a6
		subq.w	#$01,d1
		moveq	#0,d3
		lsr.w	#$01,d1
		bcc.s	Offset_0x033A98
Offset_0x033A90:
		move.b	(A6)+,d3
		add.w	D3,d3
		move.w	(A5,d3),(A1)+
Offset_0x033A98:
		move.b	(A6)+,d3
		add.w	D3,d3
		move.w	(A5,d3),(A1)+
		dbf	D1, Offset_0x033A90
		bra.s	Offset_0x033ACE
Offset_0x033AA6:
		move.w	D1,d3
		addi.w	#$0040,d3
		lsl.w	#$06,d3
		adda.w	D3,a6
		neg.w   D1
		subq.w	#$01,d1
		moveq	#0,d3
		lsr.w	#$01,d1
		bcc.s	Offset_0x033AC2
Offset_0x033ABA:
		move.b	(A6)+,d3
		add.w	D3,d3
		move.w	(A5,d3), -(A1)
Offset_0x033AC2:
		move.b	(A6)+,d3
		add.w	D3,d3
		move.w	(A5,d3), -(A1)
		dbf	D1, Offset_0x033ABA
Offset_0x033ACE:
		lea	(Horizontal_Scroll_Table+$01E2).w,a1        ; $FFFFA9E2
		move.l	D0,d1
		asr.l	#$01,d1
		move.l	D1,d3
		asr.l	#$03,d3
		swap	D1
		move.w	D1,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		move.w	D1, -(A1)
		swap	D1
		sub.l	D3,d1
		swap	D1
		move.w	D1,(Background_Events+$12).w                ; $FFFFEEE4
		move.w	D1, -(A1)
		swap	D1
		lea	LBz_2_Underwater_Deform_Array(PC),a5  ; Offset_0x033C1A
		sub.l	D3,d1
		moveq	#$04,d4
Offset_0x033AF8:
		sub.l	D3,d1
		swap	D1
		move.w	(A5)+,d5
Offset_0x033AFE:
		move.w	D1, -(A1)
		move.w	D1, -(A1)
		move.w	D1, -(A1)
		move.w	D1, -(A1)
		dbf	D5, Offset_0x033AFE
		swap	D1
		dbf	D4, Offset_0x033AF8
		moveq	#$3F,d3
		tst.w	D2
		bmi.s	Offset_0x033B1A
		sub.w	D2,d3
		bcs.s	Offset_0x033B28
Offset_0x033B1A:
		swap	D1
		lsr.w	#$01,d3
		bcc.s	Offset_0x033B22
Offset_0x033B20:
		move.w	D1, -(A1)
Offset_0x033B22:
		move.w	D1, -(A1)
		dbf	D3, Offset_0x033B20
Offset_0x033B28:
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		lea	LBz_2_Cloud_Deform_Array(PC),a5       ; Offset_0x033C00
		move.l	D0,d1
		asr.l	#$06,d1
		move.l	D1,d3
		move.l	(Horizontal_Scroll_Table+$01E2).w,d4        ; $FFFFA9E2
		addi.l	#$00000E00,(Horizontal_Scroll_Table+$01E2).w ; $FFFFA9E2
		moveq	#$0C,d5
Offset_0x033B44:
		move.w	(A5)+,d6
		add.l	D4,d1
		swap	D1
		move.w	D1,(A1,d6)
		swap	D1
		add.l	D3,d1
		dbf	D5, Offset_0x033B44
		move.l	D0,d1
		asr.l	#$04,d1
		move.l	D1,d3
		asr.l	#$01,d3
		lea	(Horizontal_Scroll_Table+$001A).w,a1        ; $FFFFA81A
		swap	D1
		move.w	D1,(A1)+
		swap	D1
		add.l	D3,d1
		swap	D1
		move.w	D1,(A1)+
		tst.w	D2
		bpl.s	Offset_0x033B84
		moveq	#$3F,d4
		add.w	D2,d4
		bmi.s	Offset_0x033BA2
		cmpi.w	#$0030,d4
		bcs.s	Offset_0x033B96
		subi.w	#$0030,d4
		bra.s	Offset_0x033B86
Offset_0x033B84:
		moveq	#$0F,d4
Offset_0x033B86:
		moveq	#$17,d5
Offset_0x033B88:
		move.w	D1,(A1)+
		move.w	D1,(A1)+
		dbf	D5, Offset_0x033B88
		swap	D1
		add.l	D3,d1
		swap	D1
Offset_0x033B96:
		lsr.w	#$01,d4
		bcc.s	Offset_0x033B9C
Offset_0x033B9A:
		move.w	D1,(A1)+
Offset_0x033B9C:
		move.w	D1,(A1)+
		dbf	D4, Offset_0x033B9A
Offset_0x033BA2:
		moveq	#$3F,d0
		sub.w	D2,d0
		bmi.s	Offset_0x033BDA
		addi.w	#$0060,d0
		cmpi.w	#$00E0,d0
		bcs.s	Offset_0x033BB6
		move.w	#$00DF,d0
Offset_0x033BB6:
		lea	(Horizontal_Scroll_Table+$01DE).w,a1        ; $FFFFA9DE
		lea	LBz_Water_Bg_Deform_Delta(PC),a5      ; Offset_0x03045C
		move.w	(Level_frame_counter).w,d1                    ; $FFFFFE04
		asr.w	#$01,d1
		andi.w	#$007E,d1
		adda.w	D1,a5
		lsr.w	#$01,d0
		bcc.s	Offset_0x033BD2
Offset_0x033BCE:
		move.w	-(A5),d3
		add.w	D3, -(A1)
Offset_0x033BD2:
		move.w	-(A5),d3
		add.w	D3, -(A1)
		dbf	D0, Offset_0x033BCE
Offset_0x033BDA:
		rts
;-------------------------------------------------------------------------------
LBz_2_Deform_Array:                                            ; Offset_0x033BDC
		dc.w	$00C0, $0040, $0038, $0018, $0028, $0010, $0010, $0010
		dc.w	$0018, $0040, $0020, $0010, $0020, $0070, $0030, $80E0
		dc.w	$0020, $7FFF
;-------------------------------------------------------------------------------
LBz_2_Cloud_Deform_Array:                                      ; Offset_0x033C00
		dc.w	$0016, $000E, $000A, $0014, $000C, $0006, $0018, $0010
		dc.w	$0012, $0002, $0008, $0004, $0000
;-------------------------------------------------------------------------------
LBz_2_Underwater_Deform_Array:                                 ; Offset_0x033C1A
		dc.w	$0007, $0001, $0003, $0001, $0007
;-------------------------------------------------------------------------------
MVz_1_Events_Init:                                             ; Offset_0x033C24
MVz_2_Events_Init:                                             ; Offset_0x033C24
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
MVz_1_Events_Run:                                              ; Offset_0x033C2C
MVz_2_Events_Run:                                              ; Offset_0x033C2C
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
MVz_1_Events_Init_2:                                           ; Offset_0x033C30
MVz_2_Events_Init_2:                                           ; Offset_0x033C30
		jsr	MVz_Deform(PC)                         ; Offset_0x033C5A
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		moveq	#0,d1
		jsr	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
MVz_1_Events_Run_2:                                            ; Offset_0x033C42
MVz_2_Events_Run_2:                                            ; Offset_0x033C42
		jsr	MVz_Deform(PC)                         ; Offset_0x033C5A
		lea	(Screen_Pos_Buffer_Y_2).w,a6                ; $FFFFEE90
		lea	(Screen_Pos_Rounded_Y_2).w,a5               ; $FFFFEE96
		moveq	#0,d1
		moveq	#$20,d6
		jsr	DrawBlockRow(PC)                      ; Offset_0x02F8AA
		jmp	Plain_Deformation(PC)                  ; Offset_0x02FD42
;-------------------------------------------------------------------------------
MVz_Deform:                                                    ; Offset_0x033C5A
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		asr.w	#$01,d0
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		asr.w	#$01,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		rts
;-------------------------------------------------------------------------------
LRz_1_Events_Init:                                             ; Offset_0x033C70
LRz_2_Events_Init:                                             ; Offset_0x033C70
		jsr	Reset_Tile_Offset_Position_Actual(PC)  ; Offset_0x02FEF2
		jmp	Refresh_Plane_Full(PC)                 ; Offset_0x02FA7C
;-------------------------------------------------------------------------------
LRz_1_Events_Run:                                              ; Offset_0x033C78
LRz_2_Events_Run:                                              ; Offset_0x033C78
		move.w	(Earthquake_Offset).w,d0                    ; $FFFFEECE
		add.w	D0,(Screen_Pos_Buffer_Y).w                  ; $FFFFEE84
		jmp	LoadTilesAsYouMove_Foreground(PC)             ; Offset_0x02FB0E
;-------------------------------------------------------------------------------
LRz_1_Events_Init_2:                                           ; Offset_0x033C84
LRz_2_Events_Init_2:                                           ; Offset_0x033C84
		jsr	LRz_Deform(PC)                         ; Offset_0x033CD4
		jsr	Reset_Tile_Offset_Position_Actual_2(PC) ; Offset_0x02FF0E
		clr.l	(Horizontal_Scroll_Table).w                  ; $FFFFA800
		move.w	D2,(Horizontal_Scroll_Table+$0006).w        ; $FFFFA806
		clr.l	(Horizontal_Scroll_Table+$0008).w            ; $FFFFA808
		lea	LRz_Deform_Array(PC),a4               ; Offset_0x033D40
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		jsr	Refresh_Plane_Tile_Deform(PC)          ; Offset_0x02FA9A
		lea	LRz_Deform_Array_2(PC),a4             ; Offset_0x033D46
		lea	(Horizontal_Scroll_Table+$000C).w,a5        ; $FFFFA80C
		jmp	Apply_Deformation(PC)                  ; Offset_0x02FD7C
;-------------------------------------------------------------------------------
LRz_1_Events_Run_2:                                            ; Offset_0x033CB0
LRz_2_Events_Run_2:                                            ; Offset_0x033CB0
		jsr	LRz_Deform(PC)                         ; Offset_0x033CD4
		lea	LRz_Deform_Array(PC),a4               ; Offset_0x033D40
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		moveq	#$20,d6
		moveq	#$03,d5
		jsr	Draw_Background(PC)                    ; Offset_0x02FB74
		lea	LRz_Deform_Array_2(PC),a4             ; Offset_0x033D46
		lea	(Horizontal_Scroll_Table+$000C).w,a5        ; $FFFFA80C
		jsr	Apply_Deformation(PC)                  ; Offset_0x02FD7C
		jmp	Earthquake_Setup(PC)                   ; Offset_0x02FFA4
;-------------------------------------------------------------------------------
LRz_Deform:                                                    ; Offset_0x033CD4
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		move.w	(Earthquake_Offset).w,d1                    ; $FFFFEECE
		sub.w	D1,d0
		asr.w	#$03,d0
		add.w	D1,d0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		swap	D0
		clr.w	D0
		asr.l	#$03,d0
		move.l	D0,d1
		move.l	D0,d2
		asr.l	#$02,d0
		swap	D1
		move.w	D1,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		move.w	D1,(Horizontal_Scroll_Table+$0004).w        ; $FFFFA804
		swap	D1
		sub.l	D0,d1
		swap	D1
		move.w	D1,(Background_Events+$10).w                ; $FFFFEEE2
		swap	D1
		sub.l	D0,d1
		swap	D1
		move.w	D1,(Background_Events+$12).w                ; $FFFFEEE4
		lea	(Horizontal_Scroll_Table+$001C).w,a1        ; $FFFFA81C
		move.l	D2,d1
		moveq	#$07,d3
Offset_0x033D1C:
		swap	D1
		move.w	D1, -(A1)
		swap	D1
		add.l	D0,d1
		dbf	D3, Offset_0x033D1C
		lea	(Horizontal_Scroll_Table+$001C).w,a1        ; $FFFFA81C
		add.l	D0,d2
		add.l	D0,d0
		moveq	#$04,d3
Offset_0x033D32:
		swap	D2
		move.w	D2,(A1)+
		swap	D2
		add.l	D0,d2
		dbf	D3, Offset_0x033D32
		rts
;-------------------------------------------------------------------------------
LRz_Deform_Array:                                              ; Offset_0x033D40
		dc.w	$00B0, $0100, $7FFF
;-------------------------------------------------------------------------------
LRz_Deform_Array_2:                                            ; Offset_0x033D46
		dc.w	$0040, $0020, $0010, $0010, $0010, $0010, $0010, $0100
		dc.w	$0010, $0010, $0010, $0020, $7FFF
;-------------------------------------------------------------------------------
ALz_Events_Init:                                               ; Offset_0x033D60
BPz_Events_Init:                                               ; Offset_0x033D60
DPz_Events_Init:                                               ; Offset_0x033D60
CGz_Events_Init:                                               ; Offset_0x033D60
EMz_Events_Init:                                               ; Offset_0x033D60
		jsr	Update_Camera_P2_2(PC)                 ; Offset_0x02FF2C
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		move.w	D0,(Level_Events_Buffer_0).w                ; $FFFFEEB4
		move.w	D0,(Level_Events_Buffer_1).w                ; $FFFFEEB6
		move.w	(Screen_Pos_Buffer_X_P2).w,d0               ; $FFFFEE68
		move.w	D0,(Level_Events_Buffer_0_P2).w             ; $FFFFEEB8
		move.w	D0,(Level_Events_Buffer_1_P2).w             ; $FFFFEEBA
		moveq	#0,d0
		move.b	(Current_Zone).w,d0                             ; $FFFFFE10
		lsl.w	#$04,d0
		lea	(Competition_Screen_Init_Array-$E0)(PC),a1 ; Offset_0x034050
		adda.w	D0,a1
		move.w	(A1)+,(Screen_Wrap_X).w                     ; $FFFFEEA8
		move.w	(A1)+,(Screen_Wrap_Y).w                     ; $FFFFEEAA
		move.w	(A1)+,(Level_Layout_Wrap_Y).w               ; $FFFFEEAC
		move.w	(A1)+,(Level_Layout_Wrap_Row).w             ; $FFFFEEAE
		move.w	(A1)+,(VRAM_Add).w                          ; $FFFFEEB0
		move.w	(A1)+,d0
		move.w	(A1)+,d2
		move.w	(A1)+,d6
		moveq	#0,d1
		move.w	#$8000,d7
		jmp	Offset_0x02FAC6(PC)
;-------------------------------------------------------------------------------
ALz_Events_Run:                                                ; Offset_0x033DAE
BPz_Events_Run:                                                ; Offset_0x033DAE
DPz_Events_Run:                                                ; Offset_0x033DAE
CGz_Events_Run_Main:                                           ; Offset_0x033DAE
EMz_Events_Run:                                                ; Offset_0x033DAE
		jsr	Update_Camera_P2_2(PC)                 ; Offset_0x02FF2C
		move.w	(Screen_Wrap_X).w,d2                        ; $FFFFEEA8
		addq.w	#$01,d2
		move.w	D2,d3
		lsr.w	#$01,d2
		lea	(Level_Events_Buffer_0).w,a1                ; $FFFFEEB4
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		jsr	Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
		move.w	(Screen_Pos_Buffer_X_P2).w,d0               ; $FFFFEE68
		jmp	Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
;-------------------------------------------------------------------------------
CGz_Events_Run:                                                ; Offset_0x033DD0
		bsr.s	CGz_Events_Run_Main                    ; Offset_0x033DAE
		move.w	(Screen_Wrap_Y).w,d2                        ; $FFFFEEAA
		addq.w	#$01,d2
		move.w	D2,d3
		lsr.w	#$01,d2
		lea	(Background_Events).w,a1                    ; $FFFFEED2
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		jsr	Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
		move.w	(Screen_Pos_Buffer_Y_P2).w,d0               ; $FFFFEE6C
		jmp	Adjust_Background_During_Loop(PC)      ; Offset_0x02FF6C
;-------------------------------------------------------------------------------
ALz_Events_Init_2:                                             ; Offset_0x033DF0
		jsr	ALz_Events_Run_2(PC)                   ; Offset_0x033E66
		bra.s	Competition_Event_Init                 ; Offset_0x033E42
;-------------------------------------------------------------------------------
BPz_Events_Init_2:                                             ; Offset_0x033DF6
		jsr	BPz_Events_Run_2(PC)                   ; Offset_0x033E70
		bra.s	Competition_Event_Init                 ; Offset_0x033E42
;-------------------------------------------------------------------------------
DPz_Events_Init_2:                                             ; Offset_0x033DFC
		jsr	DPz_Events_Run_2(PC)                   ; Offset_0x033EBE
		bra.s	Competition_Event_Init                 ; Offset_0x033E42
;-------------------------------------------------------------------------------
CGz_Events_Init_2:                                             ; Offset_0x033E02
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		move.w	D0,(Background_Events).w                    ; $FFFFEED2
		move.w	D0,(Background_Events+$02).w                ; $FFFFEED4
		move.w	(Screen_Pos_Buffer_Y_P2).w,d0               ; $FFFFEE6C
		move.w	D0,(Background_Events+$04).w                ; $FFFFEED6
		move.w	D0,(Background_Events+$06).w                ; $FFFFEED8
		move.w	#$0005,(Background_Events+$0A).w            ; $FFFFEEDC
		move.w	(Background_Events+$0A).w,d0                ; $FFFFEEDC
		addq.w	#$01,d0
		lsl.w	#$08,d0
		subi.w	#$0070,d0
		move.l	#$00900000,d1
		divu.w	D0,d1
		move.w	D1,(Background_Events+$08).w                ; $FFFFEEDA
		jsr	CGz_Events_Run_2(PC)                   ; Offset_0x033E7A
		bra.s	Competition_Event_Init                 ; Offset_0x033E42
;-------------------------------------------------------------------------------
EMz_Events_Init_2:                                             ; Offset_0x033E3E
		jsr	EMz_Events_Run_2(PC)                   ; Offset_0x033E84
;-------------------------------------------------------------------------------
Competition_Event_Init:                                        ; Offset_0x033E42
		move.l	(Vertical_Scroll_Value_P2).w,(Vertical_Scroll_Value_P2_2).w ; $FFFFF61E, $FFFFEE3A
		moveq	#0,d0
		move.b	(Current_Zone).w,d0                             ; $FFFFFE10
		lsl.w	#$04,d0
		lea	(Competition_Screen_Init_Array-$D4)(PC),a1 ; Offset_0x03405C
		adda.w	D0,a1
		move.w	(A1)+,d2
		move.w	(A1)+,d6
		moveq	#0,d0
		moveq	#0,d1
		move.w	#$A000,d7
		jmp	Offset_0x02FAC6(PC)
;-------------------------------------------------------------------------------
ALz_Events_Run_2:                                              ; Offset_0x033E66
		jsr	ALz_Deform(PC)                         ; Offset_0x033EF8
		lea	ALz_Deform_Array(PC),a4               ; Offset_0x034180
		bra.s	Offset_0x033E8C
;-------------------------------------------------------------------------------
BPz_Events_Run_2:                                              ; Offset_0x033E70
		jsr	BPz_Deform(PC)                         ; Offset_0x033FB6
		lea	BPz_Deform_Array(PC),a4               ; Offset_0x034196
		bra.s	Offset_0x033E8C
;-------------------------------------------------------------------------------
CGz_Events_Run_2:                                              ; Offset_0x033E7A
		jsr	CGz_Deform(PC)                         ; Offset_0x03404C
		lea	CGz_Deform_Array(PC),a4               ; Offset_0x0341A4
		bra.s	Offset_0x033E8C
;-------------------------------------------------------------------------------
EMz_Events_Run_2:                                              ; Offset_0x033E84
		jsr	EMz_Deform(PC)                         ; Offset_0x0340A8
		lea	EMz_Deform_Array(PC),a4               ; Offset_0x0341AE
Offset_0x033E8C:
		lea	(Horizontal_Scroll_Buffer).w,a1             ; $FFFFE000
		move.l	A4,a6
		lea	(Horizontal_Scroll_Table).w,a5              ; $FFFFA800
		move.w	(Screen_Pos_Buffer_Y_2).w,d0                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_X).w,d3                  ; $FFFFEE80
		moveq	#$6B,d1
		jsr	Offset_0x02FD8C(PC)
		move.l	A6,a4
		lea	(Horizontal_Scroll_Table+$0100).w,a5        ; $FFFFA900
		move.w	(Screen_Pos_Buffer_Y_P2_2).w,d0             ; $FFFFEE74
		subq.w	#$04,d0
		move.w	(Screen_Pos_Buffer_X_P2).w,d3               ; $FFFFEE68
		moveq	#$73,d1
		jsr	Offset_0x02FD8C(PC)
		jmp	Update_Vertical_Scroll_Value_P2(PC)    ; Offset_0x02FF3A
;-------------------------------------------------------------------------------
DPz_Events_Run_2:                                              ; Offset_0x033EBE
		jsr	DPz_Deform(PC)                         ; Offset_0x034004
		lea	(Horizontal_Scroll_Buffer).w,a1             ; $FFFFE000
		move.w	(Screen_Pos_Buffer_X).w,d0                  ; $FFFFEE80
		move.w	(Screen_Pos_Buffer_X_2).w,d1                ; $FFFFEE8C
		moveq	#$1A,d2
		bsr.s	Offset_0x033EE2
		move.w	(Screen_Pos_Buffer_X_P2).w,d0               ; $FFFFEE68
		move.w	(Screen_Pos_Buffer_X_P2_2).w,d1             ; $FFFFEE70
		moveq	#$1C,d2
		bsr.s	Offset_0x033EE2
		jmp	Update_Vertical_Scroll_Value_P2(PC)    ; Offset_0x02FF3A
Offset_0x033EE2:
		neg.w   D0
		swap	D0
		neg.w   D1
		move.w	D1,d0
Offset_0x033EEA:
		move.l	D0,(A1)+
		move.l	D0,(A1)+
		move.l	D0,(A1)+
		move.l	D0,(A1)+
		dbf	D2, Offset_0x033EEA
		rts
;-------------------------------------------------------------------------------
ALz_Deform:                                                    ; Offset_0x033EF8
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		bsr.s	Offset_0x033F30
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_Y_P2).w,d0               ; $FFFFEE6C
		bsr.s	Offset_0x033F30
		move.w	D0,(Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
		addq.w	#$03,(Background_Events).w                  ; $FFFFEED2
		addi.l	#$00001000,(Background_Events+$02).w        ; $FFFFEED4
		lea	Default_Background_Deform_Delta(PC),a4 ; Offset_0x031820
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		move.w	(Level_Events_Buffer_1).w,d0                ; $FFFFEEB6
		bsr.s	Offset_0x033F46
		lea	(Horizontal_Scroll_Table+$0100).w,a1        ; $FFFFA900
		move.w	(Level_Events_Buffer_1_P2).w,d0             ; $FFFFEEBA
		bra.s	Offset_0x033F46
Offset_0x033F30:
		subi.w	#$0148,d0
		swap	D0
		clr.w	D0
		move.l	D0,d1
		asr.l	#$02,d1
		sub.l	D1,d0
		swap	D0
		addi.w	#$0048,d0
		rts
Offset_0x033F46:
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0, $0090(A1)
		asr.l	#$03,d0
		lea	$000C(A1),a5
		move.l	D0,d1
		asr.l	#$02,d1
		move.l	D1,d2
		move.l	(Background_Events+$02).w,d3                ; $FFFFEED4
		moveq	#$05,d4
Offset_0x033F62:
		add.l	D3,d1
		swap	D1
		move.w	D1, -(A5)
		swap	D1
		add.l	D2,d1
		dbf	D4, Offset_0x033F62
		movem.w	(A5),d1-D6
		move.w	D2,(A5)+
		move.w	D6,(A5)+
		move.w	D1,(A5)+
		move.w	D4,(A5)+
		move.w	D3,(A5)+
		move.w	D5,(A5)
		lea	$000C(A1),a5
		move.l	D0,d1
		move.l	D1,d2
		asr.l	#$01,d2
		moveq	#$02,d3
Offset_0x033F8C:
		swap	D1
		move.w	D1,(A5)+
		swap	D1
		add.l	D2,d1
		dbf	D3, Offset_0x033F8C
		move.w	(Background_Events).w,d1                    ; $FFFFEED2
		lsr.w	#$03,d1
		andi.w	#$003E,d1
		lea	(A4,d1),a6
		swap	D0
		moveq	#$3E,d1
Offset_0x033FAA:
		move.w	(A6)+,d2
		add.w	D0,d2
		move.w	D2,(A5)+
		dbf	D1, Offset_0x033FAA
		rts
;-------------------------------------------------------------------------------
BPz_Deform:                                                    ; Offset_0x033FB6
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		bsr.s	Offset_0x033FDE
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_Y_P2).w,d0               ; $FFFFEE6C
		bsr.s	Offset_0x033FDE
		move.w	D0,(Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
		lea	(Horizontal_Scroll_Table+$000E).w,a1        ; $FFFFA80E
		move.w	(Level_Events_Buffer_1).w,d0                ; $FFFFEEB6
		bsr.s	Offset_0x033FEA
		lea	(Horizontal_Scroll_Table+$010E).w,a1        ; $FFFFA90E
		move.w	(Level_Events_Buffer_1_P2).w,d0             ; $FFFFEEBA
		bsr.s	Offset_0x033FEA
Offset_0x033FDE:
		subi.w	#$02C8,d0
		asr.w	#$01,d0
		addi.w	#$0090,d0
		rts
Offset_0x033FEA:
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d1
		asr.l	#$03,d1
		moveq	#$06,d2
Offset_0x033FF6:
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		dbf	D2, Offset_0x033FF6
		rts
;-------------------------------------------------------------------------------
DPz_Deform:                                                    ; Offset_0x034004
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		bsr.s	Offset_0x03403A
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_Y_P2).w,d0               ; $FFFFEE6C
		bsr.s	Offset_0x03403A
		addi.w	#$0080,d0
		move.w	D0,(Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
		move.w	(Level_Events_Buffer_1).w,d0                ; $FFFFEEB6
		bsr.s	Offset_0x034044
		move.w	D0,(Screen_Pos_Buffer_X_2).w                ; $FFFFEE8C
		move.w	D1,(Background_Events+$10).w                ; $FFFFEEE2
		move.w	(Level_Events_Buffer_1_P2).w,d0             ; $FFFFEEBA
		bsr.s	Offset_0x034044
		move.w	D0,(Screen_Pos_Buffer_X_P2_2).w             ; $FFFFEE70
		move.w	D1,(Background_Events+$12).w                ; $FFFFEEE4
		rts
Offset_0x03403A:
		subi.w	#$0148,d0
		asr.w	#$04,d0
		addq.w	#$08,d0
		rts
Offset_0x034044:
		asr.w	#$01,d0
		move.w	D0,d1
		asr.w	#$02,d1
		rts
;-------------------------------------------------------------------------------
CGz_Deform:                                                    ; Offset_0x03404C
		move.w	(Background_Events+$02).w,d0                ; $FFFFEED4
		bsr.s	Offset_0x034074
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Background_Events+$06).w,d0                ; $FFFFEED8
		bsr.s	Offset_0x034074
		move.w	D0,(Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
		lea	(Horizontal_Scroll_Table+$000A).w,a1        ; $FFFFA80A
		move.w	(Level_Events_Buffer_1).w,d0                ; $FFFFEEB6
		bsr.s	Offset_0x034084
		lea	(Horizontal_Scroll_Table+$010A).w,a1        ; $FFFFA90A
		move.w	(Level_Events_Buffer_1_P2).w,d0             ; $FFFFEEBA
		bsr.s	Offset_0x034084
Offset_0x034074:
		bmi.s	Offset_0x034080
		move.w	(Background_Events+$08).w,d1                ; $FFFFEEDA
		mulu.w	D1,d0
		swap	D0
		rts
Offset_0x034080:
		moveq	#0,d0
		rts
Offset_0x034084:
		swap	D0
		clr.w	D0
		asr.l	#$01,d0
		move.l	D0,d1
		asr.l	#$02,d1
		moveq	#$03,d2
Offset_0x034090:
		swap	D0
		move.w	D0, -(A1)
		swap	D0
		sub.l	D1,d0
		dbf	D2, Offset_0x034090
		asr.l	#$02,d1
		swap	D1
		addi.w	#$0100,d1
		move.w	D1, -(A1)
		rts
;-------------------------------------------------------------------------------
EMz_Deform:                                                    ; Offset_0x0340A8
		move.w	(Screen_Pos_Buffer_Y).w,d0                  ; $FFFFEE84
		bsr.s	Offset_0x0340D0
		move.w	D0,(Screen_Pos_Buffer_Y_2).w                ; $FFFFEE90
		move.w	(Screen_Pos_Buffer_Y_P2).w,d0               ; $FFFFEE6C
		bsr.s	Offset_0x0340D0
		move.w	D0,(Screen_Pos_Buffer_Y_P2_2).w             ; $FFFFEE74
		lea	(Horizontal_Scroll_Table).w,a1              ; $FFFFA800
		move.w	(Level_Events_Buffer_1).w,d0                ; $FFFFEEB6
		bsr.s	Offset_0x0340E6
		lea	(Horizontal_Scroll_Table+$0100).w,a1        ; $FFFFA900
		move.w	(Level_Events_Buffer_1_P2).w,d0             ; $FFFFEEBA
		bsr.s	Offset_0x0340E6
Offset_0x0340D0:
		subi.w	#$0148,d0
		swap	D0
		clr.w	D0
		move.l	D0,d1
		asr.l	#$02,d1
		sub.l	D1,d0
		swap	D0
		addi.w	#$0048,d0
		rts
Offset_0x0340E6:
		swap	D0
		clr.w	D0
		asr.l	#$03,d0
		move.l	D0,d1
		swap	D0
		move.w	D0, $000E(A1)
		swap	D0
		add.l	D1,d0
		swap	D0
		move.w	D0, $000C(A1)
		move.w	D0, $0010(A1)
		swap	D0
		add.l	D1,d0
		swap	D0
		move.w	D0, $0006(A1)
		move.w	D0, $000A(A1)
		move.w	D0, $0012(A1)
		swap	D0
		add.l	D1,d0
		swap	D0
		move.w	D0,(A1)
		move.w	D0, $0004(A1)
		move.w	D0, $0008(A1)
		swap	D0
		add.l	D1,d0
		swap	D0
		move.w	D0, $0002(A1)
		rts
;-------------------------------------------------------------------------------
Competition_Screen_Init_Array:                                 ; Offset_0x034130
		dc.w	$03FF, $01FF, $01F0, $000C, $0100, $0100, $000F, $0040
		dc.w	$01FF, $03FF, $03F0, $001C, $0080, $0200, $001F, $0020
		dc.w	$03FF, $01FF, $01F0, $000C, $0100, $0100, $000F, $0040
		dc.w	$03FF, $00FF, $00F0, $0004, $0100, $0100, $000F, $0040
		dc.w	$03FF, $01FF, $01F0, $000C, $0100, $0100, $000F, $0040
;-------------------------------------------------------------------------------
ALz_Deform_Array:                                              ; Offset_0x034180
		dc.w	$0018, $0008, $0008, $0008, $0008, $0008, $002E, $0006
		dc.w	$000D, $803F, $7FFF
;-------------------------------------------------------------------------------
BPz_Deform_Array:                                              ; Offset_0x034196
		dc.w	$0088, $0016, $000A, $0028, $0010, $0008, $7FFF
;-------------------------------------------------------------------------------
CGz_Deform_Array:                                              ; Offset_0x0341A4
		dc.w	$0050, $0008, $0010, $0010, $7FFF
;-------------------------------------------------------------------------------
EMz_Deform_Array:                                              ; Offset_0x0341AE
		dc.w	$0010, $0010, $0010, $0010, $0008, $000C, $0024, $0038
		dc.w	$0020, $7FFF
; ===========================================================================
; ---------------------------------------------------------------------------
; Generic level screen routines
; ---------------------------------------------------------------------------
; Offset_0x0341C2: LevelFGSetup_Null:
Level_RefreshScreen:
		jsr	Reset_Tile_Offset_Position_Actual(pc)
		jmp	Refresh_Plane_Full(pc)
; ===========================================================================
; Offset_0x0341CA: LevelFGRun_Null:
Level_RunScreen:
		jmp	LoadTilesAsYouMove_Foreground(pc)
; ===========================================================================
; Offset_0x0341CE: LevelBGSetup_Null:
Level_RefreshBackground:
		jsr	Level_Deform(pc)
		jsr	Reset_Tile_Offset_Position_Actual_2(pc)
		jsr	Refresh_Plane_Full(pc)
		jmp	Plain_Deformation(pc)
; ===========================================================================
; Offset_0x0341DE: LevelBGRun_Null:
Level_RunBackground:
		jsr	Level_Deform(pc)
		jsr	LoadTilesAsYouMove_Background(pc)
		jmp	Plain_Deformation(pc)
; ===========================================================================
; Offset_0x0341EA: Default_Deform:
Level_Deform:
		move.w	(Screen_Pos_Buffer_X).w,d0
		asr.w	#3,d0
		move.w	d0,(Screen_Pos_Buffer_X_2).w
		move.w	(Screen_Pos_Buffer_Y).w,d0
		asr.w	#3,d0
		move.w	d0,(Screen_Pos_Buffer_Y_2).w
		rts
; End of function Level_Deform

; ===========================================================================
; ---------------------------------------------------------------------------
; Trap routine 0x0F
; This was used by SNASM68K for something related to errors, but now just
; points to a bunch of common routines; it *technically* still is present
; in the final, but all the function calls were removed
; ---------------------------------------------------------------------------
; Offset_0x034200:
Trap_0x0F:
		move.l	Trap_Routines_List(pc,d6.w),a6
		jsr	(a6)
		nop
		nop
		move	sr,d5
		move.w	(sp),d6
		andi.w	#$1F,d5
		andi.w	#$FFE0,d6
		or.w	d5,d6
		move.w	d6,(sp)
		nop
		nop
		rte
; ===========================================================================
; Offset_0x034220:
Trap_Routines_List:
		dc.l	Hit_Boss_Flash
		dc.l	Set_Boss_Flag_Timed
		dc.l	Inc_Level_Gradual_Max_X
		dc.l	Add_To_Response_List_And_Display
		dc.l	Add_To_Response_List_And_Display
		dc.l	Check_Player_Collision
		dc.l	MarkObjectGone
		dc.l	Delete_Sprite_Check_X_2
		dc.l	Delete_Sprite_Check_X_3
		dc.l	Delete_Sprite_Check_X_Y
		dc.l	Delete_Sprite_Clear_Respaw_Flag_Check_X
		dc.l	Delete_Sprite_Clear_Respaw_Flag_Check_X_2
		dc.l	Delete_Sprite_Clear_Respaw_Flag_Check_X_3
		dc.l	Delete_Sprite_Clear_Respaw_Flag_Check_X_Y
		dc.l	Delete_Sprite_Slotted_Check_X
		dc.l	Delete_Slotted_Check_X
		dc.l	Check_Delete_Touch_Slotted
		dc.l	Check_Delete_Touch_Slotted_2
		dc.l	Change_Flip_X
		dc.l	Change_Flip_X_With_Velocity
		dc.l	Check_Left_Right_Controller_Shake
		dc.l	Child_Display_Or_Delete
		dc.l	Child_Display_Or_Delete_2
		dc.l	Child_Display_Touch_Or_Delete
		dc.l	Child_Display_Touch_Or_Delete_2
		dc.l	Child_Display_Or_Delete_Remember
		dc.l	Displace_Player_Offset
		dc.l	Child_Display_Or_Flicker_Move
		dc.l	Child_Display_Or_Flicker_Move_2
		dc.l	Child_Display_Touch_Or_Flicker_Move
		dc.l	Child_Display_Touch_Or_Flicker_Move_2
		dc.l	Find_Player
		dc.l	Find_Other_Object
		dc.l	Move_Sprite_Circular_Simple
		dc.l	Move_Sprite_Circular_Simple_Offset
		dc.l	Move_Sprite_At_Angle_Lookup
		dc.l	Run_Object_Wait_Timer_A0
		dc.l	Run_Palette_Rotation_Script
		dc.l	Run_Object_Hit_Floor_D3_A0
		dc.l	Run_Object_Hit_Floor_A0
		dc.l	Obj_Fade_Selected_From_Black
		dc.l	MarkObjectGone_Respawn
		dc.l	Run_Object_Hit_Wall_Right_A0
		dc.l	Run_Object_Hit_Wall_Left_A0
		dc.l	SetupSlottedObjectAttributes
		dc.l	SetupObjectAttributes
		dc.l	SetupObjectAttributes2
		dc.l	SetupObjectAttributes3
		dc.l	Swing_Left_And_Right
		dc.l	Chase_Object
		dc.l	Chase_Object_X_Only
		dc.l	Refresh_Child_Position
		dc.l	Refresh_Child_Position_Adjusted
		dc.l	Find_Player_Eight_Way
		dc.l	Animate_Raw_Get_Faster
		dc.l	Animate_Raw_Get_Faster_A1
		dc.l	Animate_Raw_Get_Slower
		dc.l	Animate_Raw_Get_Slower_A1
		dc.l	Swing_Up_And_Down_Animate_Raw_Wait
		dc.l	Swing_Up_And_Down_Wait
		dc.l	AnimateRaw
		dc.l	Animate_Raw_A1
		dc.l	Animate_Raw_Adjust_Flip_X
		dc.l	Animate_Raw_Adjust_Flip_X_A1
		dc.l	Animate_Raw_Adjust_Flip_Y
		dc.l	Animate_Raw_Adjust_Flip_Y_A1
		dc.l	Animate_Raw_Wait
		dc.l	Swing_Up_And_Down
		dc.l	Swing_Up_And_Down_Count
		dc.l	SetupChildObject
		dc.l	SetupChildObject_Complex
		dc.l	SetupChildObject_Repeat
		dc.l	Load_Child_Object_Link_List_Repeat_A2
		dc.l	Load_Child_Object_Complex_Adjusted_A2
		dc.l	Load_Child_Object_Simple_A2
		dc.l	Set_Indexed_Velocity
		dc.l	Set_Indexed_Velocity_D0
		dc.l	Pal_Load_Line_1
		dc.l	Enemy_Defeat_Score
		dc.l	Go_Delete_Object_A0
		dc.l	Go_Delete_Object_A0_2
		dc.l	Run_Flicker_Move
		dc.l	LoadDynamicPLC
		dc.l	Set_Velocity_X_Track_Player_One
		dc.l	Move_Sprite_Angle_X_Lookup_Offset
		dc.l	Move_Sprite_Angle_Y_Lookup_Offset
		dc.l	SpeedToPos_Animate_Raw
		dc.l	SpeedToPos_Animate_Raw
		dc.l	Move_Light_Gravity_Animate_Raw
		dc.l	Move_Light_Gravity
		dc.l	ObjectFall_Delete_Sprite_Check_X_Y
		dc.l	SpeedToPos_Animate_Raw_Wait
		dc.l	SpeedToPos_Wait
		dc.l	SpeedToPos_Touch_Wait
		dc.l	Delete_Sprite_Timed
		dc.l	Delete_Sprite_Timed_Or_Fall
		dc.l	Delete_Sprite_Timed_Or_Speed
		dc.l	Animate_Raw_Multi_Delay
		dc.l	Animate_Raw_Multi_Delay_A1
		dc.l	Animate_Raw_Multi_Delay_Flip_X
		dc.l	Animate_Raw_Multi_Delay_Flip_X_A1
		dc.l	Animate_Raw_Multi_Delay_Flip_Y
		dc.l	Animate_Raw_Multi_Delay_Flip_Y_A1
		dc.l	Display_Sprite_Wait
		dc.l	Animate_Raw_Multi_Delay_Touch
		dc.l	Go_Delete_Slotted_3
		dc.l	LBz_Robotnik_Ship
		dc.l	QueueDMATransfer
		dc.l	AllocateObjectAfterCurrent
		dc.l	ObjectFall
		dc.l	SpeedToPos
		dc.l	DisplaySprite
		dc.l	Object_HitCeiling
		dc.l	ObjHitFloor
		dc.l	ObjHitFloor_D3
		dc.l	Object_HitWall_Right
		dc.l	Object_HitWall_Left
		dc.l	DeleteObject
		dc.l	MarkObjGone
		dc.l	Obj_Explosion
		dc.l	CalcSine
		dc.l	Obj_Explosions
		dc.l	PlaySound
		dc.l	PlaySound
		dc.l	Solid_Object
		dc.l	Platform_Object
		dc.l	Add_SpriteToCollisionResponseList
		dc.l	PseudoRandomNumber
		dc.l	Add_Points
		dc.l	LoadPLC
		dc.l	Object_Settings_Check_X_Y
		dc.l	MarkObjGone_2
		dc.l	Perform_Scaling
		dc.l	Init_Art_Scaling
		dc.l	Hz_Robotnik_Ship
		dc.l	Refresh_Child_Position_Wait
		dc.l	Refresh_Animate_Raw_Multi_Delay_Touch
		dc.l	Move_Sprite_Angle_Y_Lookup
		dc.l	Child_Get_Priority
		dc.l	Move_0x08_Bytes_A2_A1
		dc.l	Swing_Setup
		dc.l	AllocateObject
		dc.l	Load_Child_Object_A2_2
		dc.l	Animate_Raw_Touch
		dc.l	Move_0x06_Bytes_A2_A1
		dc.l	Animate_Raw_Wait_2
		dc.l	Object_Check_Range
		dc.l	Check_Player_In_Range
		dc.l	Hurt_Player
		dc.l	Animate_Raw_Delete_Sprite_Check_X_Y
		dc.l	Load_Child_Object_Tree_List_Repeated_A2
		dc.l	Animate_Raw_Display_Sprite
		dc.l	ObjectFall_Delete_Sprite_Check_X_Y_2
		dc.l	Animate_Raw_Delete_Sprite_Check_X_Y_2
; ===========================================================================
; Offset_0x034488: Obj_S2_0xB0_Sonic_Sega_Logo: Obj_SegaSonic:
		include	"data/S2_Obj/Sonic on the Sega Screen.asm"
; Offset_0x0346BC: Obj_S2_0xB1_Sonic_Sega_Logo: Obj_SegaTM:
		include	"data/S2_Obj/Object to Hide TM on the Sega Screen.asm"

;===============================================================================
; Rotina executada durante a VBlank
; ->>>
;===============================================================================
VInt_SEGA_Screen:                                              ; Offset_0x034926
		move.w	(VBlank_Subroutine).w,d0                    ; $FFFFF662
		beq.w	Null_Sub_3                             ; Offset_0x034652
		clr.w	(VBlank_Subroutine).w                        ; $FFFFF662
		move.w	Offset_0x03493A-$02(pc,d0.w),d0
		jmp	Offset_0x03493A(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x03493A:
		dc.w	Offset_0x03493E-Offset_0x03493A
		dc.w	Offset_0x034970-Offset_0x03493A
;-------------------------------------------------------------------------------
Offset_0x03493E:
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.l	#$94169300,(A5)
		move.l	#$96859580,(A5)
		move.w	#$977F,(A5)
		move.w	#$5100,(A5)
		move.w	#$0080,(DMA_Trigger).w                      ; $FFFFF640
		move.w	(DMA_Trigger).w,(A5)                        ; $FFFFF640
		lea	Offset_0x0349E8(PC),a1
		move.l	#$49500003,d0
		bra.w	Offset_0x0349AC
;-------------------------------------------------------------------------------
Offset_0x034970:
		lea	(VDP_Control_Port),a5                       ; $00C00004
		move.w	#$8F01,(A5)
		move.l	#$941F93FF,(A5)
		move.w	#$9780,(A5)
		move.l	#$40000083,(A5)
		move.w	#$0000,(VDP_Data_Port)                      ; $00C00000
Offset_0x034992:
		move.w	(A5),d1
		btst	#$01,d1
		bne.s	Offset_0x034992
		move.w	#$8F02,(A5)
		lea	Offset_0x0349F8(PC),a1
		move.l	#$49A00003,d0
		bra.w	Offset_0x0349AC
Offset_0x0349AC:
		lea	(VDP_Data_Port),a6                          ; $00C00000
		move.l	#$01000000,d6
		moveq	#$07,d1
		moveq	#$09,d2
Offset_0x0349BC:
		move.l	D0, $0004(A6)
		move.w	D1,d3
		move.l	A1,a2
Offset_0x0349C4:
		move.w	(A2)+,d4
		bclr	#$0A,d4
		beq.s	Offset_0x0349D0
		bsr.w	Offset_0x0349DE
Offset_0x0349D0:
		move.w	D4,(A6)
		dbf	D3, Offset_0x0349C4
		add.l	D6,d0
		dbf	D2, Offset_0x0349BC
		rts
Offset_0x0349DE:
		moveq	#$28,d5
Offset_0x0349E0:
		move.w	D4,(A6)
		dbf	D5, Offset_0x0349E0
		rts
;-------------------------------------------------------------------------------
Offset_0x0349E8:
		dc.w	$A080, $A081, $A082, $A083, $A084, $A085, $A086, $A487
;-------------------------------------------------------------------------------
Offset_0x0349F8:
		dc.w	$A487, $A086, $A085, $A084, $A083, $A082, $A081, $A080
;===============================================================================
; Rotina executada durante a VBlank
; <<<-
;===============================================================================
Offset_0x034A08:
		dc.b	$12, $04, $04, $02, $02, $02, $02, $00
		dc.b	$00, $00, $00, $00, $00, $00, $00, $04
		dc.b	$04, $06, $0A, $08, $06, $04, $04, $04
		dc.b	$04, $06, $06, $08, $08, $0A, $0A, $0C
		dc.b	$0E, $10, $16, $00
;-------------------------------------------------------------------------------
Sub_Sega_Intro:                                                ; Offset_0x034A2C
		move.w	D1,d2
		andi.w	#$0001,d2
		addq.w	#$01,d2
		lsl.w	#$06,d2
		swap	D2
		move.w	D1,d3
		lsr.w	#$01,d3
		addq.w	#$01,d3
		lsl.w	#$06,d3
		swap	D3
		bsr.w	Offset_0x034A58
		btst	#$01,d0
		beq.w	Null_Sub_3                             ; Offset_0x034652
		btst	#$01,d1
		bne.s	Offset_0x034A56
		move.l	A3,a5
Offset_0x034A56:
		move.l	A5,a2
Offset_0x034A58:
		move.l	A2,a4
		swap	D2
		lea	(A2,d2),a3
		swap	D2
		move.w	D1,d5
		andi.w	#$0001,d5
		bsr.w	Offset_0x034AD2
		btst	#$01,d1
		beq.s	Offset_0x034A94
		swap	D2
		move.w	D2,d4
		swap	D2
		add.w	D4,d4
		move.w	D0,d3
		andi.w	#$0001,d3
		lsl.w	D3,d4
		adda.w	D4,a4
		move.w	D1,d5
		lsr.w	#$01,d5
		swap	D3
		lea	(A4,d3),a5
		swap	D3
		bsr.w	Offset_0x034AEA
Offset_0x034A94:
		btst	#0,d0
		bne.s	Offset_0x034AA0
		btst	#$01,d0
		beq.s	Offset_0x034AD0
Offset_0x034AA0:
		swap	D2
		lea	(A2,d2),a2
		lea	(A2,d2),a3
		swap	D2
		move.w	D1,d5
		andi.w	#$0001,d5
		bsr.w	Offset_0x034AD2
		btst	#$01,d1
		beq.s	Offset_0x034AD0
		move.w	D1,d5
		lsr.w	#$01,d5
		swap	D3
		lea	(A4,d3),a4
		lea	(A4,d3),a5
		swap	D3
		bsr.w	Offset_0x034AEA
Offset_0x034AD0:
		rts
Offset_0x034AD2:
		moveq	#$07,d6
Offset_0x034AD4:
		bsr.w	Offset_0x034B02
		addq.w	#$04,a2
		bsr.w	Offset_0x034B2C
		addq.w	#$04,a3
		dbf	D6, Offset_0x034AD4
		dbf	D5, Offset_0x034AD2
		rts
Offset_0x034AEA:
		moveq	#$07,d6
Offset_0x034AEC:
		bsr.w	Offset_0x034B56
		addq.w	#$04,a4
		bsr.w	Offset_0x034B80
		addq.w	#$04,a5
		dbf	D6, Offset_0x034AEC
		dbf	D5, Offset_0x034AEA
		rts
Offset_0x034B02:
		bsr.w	Offset_0x034B06
Offset_0x034B06:
		move.b	(A1)+,d2
		move.b	D2,d3
		andi.b	#$F0,d2
		move.b	D2,d4
		lsr.b	#$04,d4
		or.b	D2,d4
		move.b	D4,(A2)+
		move.b	D4, $0003(A2)
		andi.b	#$0F,d3
		move.b	D3,d4
		lsl.b	#$04,d4
		or.b	D3,d4
		move.b	D4,(A2)+
		move.b	D4, $0003(A2)
		rts
Offset_0x034B2C:
		bsr.w	Offset_0x034B30
Offset_0x034B30:
		move.b	(A1)+,d2
		move.b	D2,d3
		andi.b	#$F0,d2
		move.b	D2,d4
		lsr.b	#$04,d4
		or.b	D2,d4
		move.b	D4,(A3)+
		move.b	D4, $0003(A3)
		andi.b	#$0F,d3
		move.b	D3,d4
		lsl.b	#$04,d4
		or.b	D3,d4
		move.b	D4,(A3)+
		move.b	D4, $0003(A3)
		rts
Offset_0x034B56:
		bsr.w	Offset_0x034B5A
Offset_0x034B5A:
		move.b	(A1)+,d2
		move.b	D2,d3
		andi.b	#$F0,d2
		move.b	D2,d4
		lsr.b	#$04,d4
		or.b	D2,d4
		move.b	D4,(A4)+
		move.b	D4, $0003(A4)
		andi.b	#$0F,d3
		move.b	D3,d4
		lsl.b	#$04,d4
		or.b	D3,d4
		move.b	D4,(A4)+
		move.b	D4, $0003(A4)
		rts
Offset_0x034B80:
		bsr.w	Offset_0x034B84
Offset_0x034B84:
		move.b	(A1)+,d2
		move.b	D2,d3
		andi.b	#$F0,d2
		move.b	D2,d4
		lsr.b	#$04,d4
		or.b	D2,d4
		move.b	D4,(A5)+
		move.b	D4, $0003(A5)
		andi.b	#$0F,d3
		move.b	D3,d4
		lsl.b	#$04,d4
		or.b	D3,d4
		move.b	D4,(A5)+
		move.b	D4, $0003(A5)
		rts
;-------------------------------------------------------------------------------
; Offset_0x034BAA: Obj_0xC7_Knuckles: ObjC7_CutsceneKnuckles:
		include	"data/objects/C7 - Knuckles in Cutscenes.asm"
Obj_0xC9_Knuckles_Switch:                                      ; Offset_0x035484
		include "data\objects\obj_0xC9.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object CA - Final AIZ Intro with Super Sonic (unused)
; ---------------------------------------------------------------------------
; Offset_0x035AD2: Obj_0xCA_AIz_Super_Sonic_Intro:
ObjCA_AIZPlaneIntro:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	AIZPlaneIntro_Index(pc,d0.w),d1
		jsr	AIZPlaneIntro_Index(pc,d1.w)
		jsr	(LoadSonicDynamicPLC).l
		bsr.w	AIZPlaneIntro_Scroll
		jmp	(DisplaySprite).l
; ===========================================================================
; Offset_0x035AF0:
AIZPlaneIntro_Index:
		dc.w AIZPlaneIntro_Init-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_Wait-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_SwoopDown-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_Wait-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_SonicFallBehind-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_SonicFallBehind2-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_Wait3-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_SonicMove-AIZPlaneIntro_Index
		dc.w Offset_0x035C8E-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_SonicMove2-AIZPlaneIntro_Index
		dc.w Offset_0x035CEC-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_ReachedShores-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_InJungle-AIZPlaneIntro_Index
		dc.w AIZPlaneIntro_UpperCutSonic-AIZPlaneIntro_Index
; ===========================================================================
; Offset_0x035B0C:
AIZPlaneIntro_Init:
		addq.b	#2,Obj_Routine(a0)
		move.l	#Sonic_Mappings,Obj_Map(a0)
		move.w	#$680,Obj_Art_VRAM(a0)
		move.w	#$280,Obj_Priority(a0)
		move.b	#1,Obj_Map_Id(a0)
		move.b	#$40,Obj_Width(a0)
		move.b	#$20,Obj_Width(a0)
		move.w	#$60,Obj_X(a0)
		move.w	#$30,Obj_Y(a0)
		move.w	#$40,Obj_Timer(a0)
		move.l	#AIZPlaneIntro_Tornado,Obj_Child(a0)
		move.w	#8,Obj_Control_Var_10(a0)
		move.w	#$E918,(Level_Events_Buffer_1).w
		move.b	#-1,(Sonic_Previous_Frame).w
		lea	(Obj_Player_One).w,a1
		move.b	#0,Obj_Map_Id(a1)
		move.b	#$53,Obj_Timer(a1)

Offset_0x035B72:
		rts
; ===========================================================================
; Offset_0x035B74:
AIZPlaneIntro_Wait:
		jmp	(Run_Object_Wait_Timer_A0).l
; ===========================================================================
; Offset_0x035B7A:
AIZPlaneIntro_Tornado:
		move.b	#4,Obj_Routine(a0)
		move.w	#$300,Obj_Speed_X(a0)
		move.w	#$600,Obj_Speed_Y(a0)
		lea	AIZPlaneIntro_ObjArray(pc),a2
		jmp	(SetupChildObject).l
; ===========================================================================
; Offset_0x035B96:
AIZPlaneIntro_SwoopDown:
		subi.w	#$18,Obj_Speed_Y(a0)			; slow descent
		beq.s	AIZPlaneIntro_Stationary		; if we have 0 Y-speed, branch
		jmp	(SpeedToPos).l
; ---------------------------------------------------------------------------
; Offset_0x035BA4:
AIZPlaneIntro_Stationary:
		move.b	#6,Obj_Routine(a0)
		move.w	#$5F,Obj_Timer(a0)
		move.l	#AIZPlaneIntro_SonicJumping,Obj_Child(a0)
		rts
; ===========================================================================
; Offset_0x035BBA:
AIZPlaneIntro_SonicJumping:
		move.b	#8,Obj_Routine(a0)
		move.w	#$400,Obj_Speed_X(a0)
		move.w	#-$400,Obj_Speed_Y(a0)
		move.l	#Offset_0x035F48,Obj_Child_Data(a0)
		bset	#3,Obj_Control_Var_08(a0)
		rts
; ===========================================================================
; Offset_0x035BDC:
AIZPlaneIntro_SonicFallBehind:
		subi.w	#$40,Obj_Speed_X(a0)			; decrease Sonic's speed to make him fall behind the Tornado
		jsr	(ObjectFall).l
		cmpi.w	#$130,Obj_Y(a0)				; are we at the ocean surface?
		bcc.s	AIZPlaneIntro_SonicFloating		; if yes, branch
		jmp	(AnimateRaw).l
; ---------------------------------------------------------------------------
; Offset_0x035BF6:
AIZPlaneIntro_SonicFloating:
		move.b	#$A,Obj_Routine(a0)
		move.w	#$130,Obj_Y(a0)
		rts
; ===========================================================================
; Offset_0x035C04:
AIZPlaneIntro_SonicFallBehind2:
		move.w	Obj_X(a0),d0
		subq.w	#4,d0
		cmpi.w	#$40,d0					; are we slightly off-screen?
		bcs.s	AIZPlaneIntro_SonicTransform		; if yes, branch
		move.w	d0,Obj_X(a0)
		rts
; ---------------------------------------------------------------------------
; Offset_0x035C16:
AIZPlaneIntro_SonicTransform:
		move.b	#$C,Obj_Routine(a0)
		move.w	#$40,Obj_X(a0)
		move.w	#5,Obj_Timer(a0)
		move.l	#AIZPlaneIntro_SuperSonic,Obj_Child(a0)
		move.w	#$3F,Obj_Control_Var_0A(a0)
		bra.w	IntroSSWaves_SetSSAnim
; ===========================================================================
; Offset_0x035C3A:
AIZPlaneIntro_SuperSonic:
		move.w	#5,Obj_Timer(a0)
		cmpi.w	#$80,Obj_X(a0)
		bcs.w	Offset_0x035B72
		lea	AIZPlaneIntro_ObjArray3(pc),a2
		jmp	(SetupChildObject).l
; ===========================================================================
; Offset_0x035C54:
AIZPlaneIntro_Wait3:
		subq.w	#1,Obj_Control_Var_0A(a0)
		bpl.w	Offset_0x035B72
		move.b	#$E,Obj_Routine(a0)
		rts
; ---------------------------------------------------------------------------
; Offset_0x035C64:
AIZPlaneIntro_SonicMove:
		bsr.w	PalCycle_SuperSonicIntro
		jsr	(Run_Object_Wait_Timer_A0).l
		move.w	Obj_X(a0),d0
		addq.w	#4,d0
		move.w	d0,Obj_X(a0)
		cmpi.w	#$200,d0				; are we at X-pos $200?
		bcc.s	Offset_0x035C80				; if yes, branch
		rts

Offset_0x035C80:
		move.b	#$10,Obj_Routine(a0)
		move.w	#$1F,Obj_Control_Var_0A(a0)
		rts
; ===========================================================================

Offset_0x035C8E:
		bsr.w	PalCycle_SuperSonicIntro
		jsr	(Run_Object_Wait_Timer_A0).l
		subq.w	#1,Obj_Control_Var_0A(a0)
		bpl.w	Offset_0x035B72
		move.b	#$12,Obj_Routine(a0)
		bset	#2,Obj_Control_Var_08(a0)
		move.w	#$C,Obj_Control_Var_10(a0)
		rts
; ---------------------------------------------------------------------------
; Offset_0x035CB4:
AIZPlaneIntro_SonicMove2:
		bsr.w	PalCycle_SuperSonicIntro
		jsr	(Run_Object_Wait_Timer_A0).l
		move.w	Obj_X(a0),d0
		subi.w	#4,d0
		move.w 	d0,Obj_X(a0)
		cmpi.w	#$120,d0
		bls.s	Offset_0x035CD2
		rts

Offset_0x035CD2:
		move.b	#$14,Obj_Routine(a0)
		bset	#2,Obj_Control_Var_08(a0)
		move.w	#$3F,Obj_Control_Var_0A(a0)
		move.w	#$10,Obj_Control_Var_10(a0)
		rts
; ===========================================================================

Offset_0x035CEC:
		bsr.w	PalCycle_SuperSonicIntro
		jsr	(Run_Object_Wait_Timer_A0).l
		subq.w	#1,Obj_Control_Var_0A(a0)
		bpl.w	Offset_0x035B72
		move.b	#$16,Obj_Routine(a0)
		rts
; ---------------------------------------------------------------------------
; Offset_0x035D06:
AIZPlaneIntro_ReachedShores:
		bsr.w	PalCycle_SuperSonicIntro
		cmpi.w	#$918,(Obj_Player_One+Obj_X).w		; have we reached the shores?
		bcc.s	Offset_0x035D18				; if yes, branch
		jmp	(Run_Object_Wait_Timer_A0).l

Offset_0x035D18:
		move.b	#$18,Obj_Routine(a0)
		lea	AIZPlaneIntro_ObjArray4(pc),a2
		jmp	(Load_Child_Object_Simple_A2).l
; ===========================================================================
; Offset_0x035D28:
AIZPlaneIntro_InJungle:
		bsr.w	PalCycle_SuperSonicIntro
		cmpi.w	#$1240,(Obj_Player_One+Obj_X).w		; are we about to exit the jungle?
		bcc.s	Offset_0x035D36				; if yes, branch
		rts

Offset_0x035D36:
		move.b	#$1A,Obj_Routine(a0)
		subi.w	#$20,Obj_Y(a0)
		rts
;-------------------------------------------------------------------------------
; Offset_0x035D44:
AIZPlaneIntro_UpperCutSonic:
		bsr.w	PalCycle_SuperSonicIntro
		cmpi.w	#$13D0,(Obj_Player_One+Obj_X).w		; is Knuckles about to uppercut Sonic?
		bcc.s	AIZPlaneIntro_DisableSuper		; if yes, branch
		rts
; Offset_0x035D52:
AIZPlaneIntro_DisableSuper:
		lea	(Obj_Player_One).w,a1
		clr.b	Obj_Timer(a1)
		st	(Control_Locked_Flag_P1).w
		move.b	#2,(Super_Sonic_Palette_Status).w
		move.w	#$28,(Super_Sonic_Palette_Frame).w
		jmp	(Go_Delete_Object_A0).l
; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Tornado in the Intro
; ---------------------------------------------------------------------------
; Offset_0x035D70:
Obj_IntroTornado:
		move.l	#Offset_0x035DB0,(a0)
		move.l	#Tornado_Mappings,Obj_Map(a0)
		move.w	#$529,Obj_Art_VRAM(a0)
		move.w	#$280,Obj_Priority(a0)
		move.b	#$40,Obj_Width(a0)
		move.b	#$20,Obj_Width(a0)
		lea	(Art_Tornado).l,a1
		move.w	#$A520,d2
		jsr	(Queue_Kos_Module).l
		lea	AIZPlaneIntro_ObjArray2(pc),a2
		jmp	(SetupChildObject).l
; ---------------------------------------------------------------------------

Offset_0x035DB0:
		move.w	Obj_Child_Ref(a0),a1
		btst	#2,Obj_Control_Var_08(a1)
		beq.s	Offset_0x035DC2
		move.l	#Offset_0x035DD6,(a0)

Offset_0x035DC2:
		btst	#3,Obj_Control_Var_08(a1)
		bne.s	Offset_0x035DD0
		jsr	(Refresh_Child_Position).l

Offset_0x035DD0:
		jmp     (DisplaySprite).l
; ---------------------------------------------------------------------------

Offset_0x035DD6:
		subq.w	#4,Obj_X(a0)
		cmpi.w	#$20,Obj_X(a0)
		bcs.s	Offset_0x035DE8
		jmp	(DisplaySprite).l

Offset_0x035DE8:
		jmp	(Go_Delete_Object_A0).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Tornado Propeller in the Intro
; ---------------------------------------------------------------------------
; Offset_0x035DEE:
Obj_IntroTornadoProp:
		move.l	#Tornado_Mappings,Obj_Map(a0)
		move.w	#$529,Obj_Art_VRAM(a0)
		move.w	#$280,Obj_Priority(a0)
		move.b	#4,Obj_Width(a0)
		move.b	#$C,Obj_Width(a0)
		move.l	#IntroTornadoProp_Animate,(a0)
; Offset_0x035E14:
IntroTornadoProp_Animate:
		lea	(Offset_0x035F52).l,a1
		jsr	(Animate_Raw_A1).l
		jsr	(Refresh_Child_Position).l
		jmp	(Child_Display_Or_Delete).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Tornado Booster in the Intro
; ---------------------------------------------------------------------------
; Offset_0x035E2C:
Obj_IntroTornadoBooster:
		move.l	#Tornado_Mappings,Obj_Map(a0)
		move.w	#$529,Obj_Art_VRAM(a0)
		move.w	#$280,Obj_Priority(a0)
		move.b	#4,Obj_Width(a0)
		move.b	#$C,Obj_Width(a0)
		move.l	#IntroTornadoBooster_Animate,(a0)
; Offset_0x035E52:
IntroTornadoBooster_Animate:
		lea	(Offset_0x035F5A).l,a1
		jsr	(Animate_Raw_A1).l
		jsr	(Refresh_Child_Position).l
		jmp	(Child_Display_Or_Delete).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Super Sonic Waves in the Intro
; ---------------------------------------------------------------------------
; Offset_0x035E6A:
Obj_IntroSuperSonicWaves:
		move.l	#IntroSSWaves_Animate,(a0)
		move.l	#Surfboard_Waves_Mappings,Obj_Map(a0)
		move.w	#$3D1,Obj_Art_VRAM(a0)
		move.w	#$100,Obj_Priority(a0)
		move.b	#$10,Obj_Width(a0)
		bset	#0,Obj_Flags(a0)
		move.w	Obj_Child_Ref(a0),a1
		move.l	#Offset_0x035F5E,Obj_Child_Data(a0)
		move.l	#Go_Delete_Object_A0,Obj_Child(a0)
; Offset_0x035EA4:
IntroSSWaves_Animate:
		move.w	Obj_Child_Ref(a0),a1
		move.w	Obj_Control_Var_10(a1),d0
		sub.w	d0,Obj_X(a0)
		jsr	(Animate_Raw_Multi_Delay)
		jmp	(DisplaySprite).l
; ===========================================================================
; Offset_0x035EBC:
IntroSSWaves_SetSSAnim:
		move.b	#$B5,Obj_Map_Id(a0)
		move.b	#0,(Super_Sonic_Palette_Timer).w
		move.w	#$30,(Super_Sonic_Palette_Frame).w
		move.w	#$7FFF,(Super_Sonic_Frame_Count).w
		rts
; ===========================================================================
; Offset_0x035ED6:
PalCycle_SuperSonicIntro:
		subq.b	#1,(Super_Sonic_Palette_Timer).w
		bpl.s	Offset_0x035F0A
		move.b	#7,(Super_Sonic_Palette_Timer).w
		lea	(Pal_SuperSonic_Cyc).l,a1
		move.w	(Super_Sonic_Palette_Frame).w,d0
		addq.w	#8,(Super_Sonic_Palette_Frame).w
		cmpi.w	#$78,(Super_Sonic_Palette_Frame).w
		bcs.s	Offset_0x035EFE
		move.w	#$30,(Super_Sonic_Palette_Frame).w

Offset_0x035EFE:
		lea	(Palette_Row_0_Offset+4).w,a2
		move.l	(a1,d0.w),(a2)+
		move.w	4(a1,d0.w),(a2)

Offset_0x035F0A:
		rts
; ===========================================================================
; Offset_0x035F0C:
AIZPlaneIntro_Scroll:
		move.w	Obj_Control_Var_10(a0),d1
		move.w	(Level_Events_Buffer_1).w,d0
		bpl.s	Offset_0x035F1E
		add.w	d1,d0
		move.w	d0,(Level_Events_Buffer_1).w
		rts

Offset_0x035F1E:
		add.w	d1,(Obj_Player_One+Obj_X).w
		rts
; End of function AIZPlaneIntro_Scroll

; ===========================================================================
; Offset_0x035F24:
AIZPlaneIntro_ObjArray:
		dc.w	1-1
		dc.l	Obj_IntroTornado
		dc.b	-$22,$2C
; Offset_0x035F2C:
AIZPlaneIntro_ObjArray2:
		dc.w	2-1
		dc.l	Obj_IntroTornadoProp
		dc.b	$38,  4
		dc.l	Obj_IntroTornadoBooster
		dc.b	$18,$18
; Offset_0x035F3A:
AIZPlaneIntro_ObjArray3:
		dc.w	1-1
		dc.l	Obj_IntroSuperSonicWaves
		dc.b	$F8,$18
; Offset_0x035F42:
AIZPlaneIntro_ObjArray4:
		dc.w	0
		dc.l	ObjC7_CutsceneKnuckles

; ===========================================================================

Offset_0x035F48:
		dc.b	$03, $3D, $41, $3E, $41, $3F, $41, $40
		dc.b	$41, $FC
Offset_0x035F52:
		dc.b	$00, $01, $02, $03, $04, $03, $02, $FC
Offset_0x035F5A:
		dc.b	$00, $05, $06, $FC
Offset_0x035F5E:
		dc.b	$00, $01, $01, $02, $02, $03, $03, $03
		dc.b	$04, $02, $05, $02, $F4, $00
; ===========================================================================
; Offset_0x035F6C:
Tornado_Mappings:
		dc.w	Offset_0x035F82-Tornado_Mappings
		dc.w	Offset_0x035FBA-Tornado_Mappings
		dc.w	Offset_0x035FC2-Tornado_Mappings
		dc.w	Offset_0x035FCA-Tornado_Mappings
		dc.w	Offset_0x035FD2-Tornado_Mappings
		dc.w	Offset_0x035FDA-Tornado_Mappings
		dc.w	Offset_0x035FEE-Tornado_Mappings
		dc.w	Offset_0x036002-Tornado_Mappings
		dc.w	Offset_0x036022-Tornado_Mappings
		dc.w	Offset_0x03603C-Tornado_Mappings
		dc.w	Offset_0x036050-Tornado_Mappings
Offset_0x035F82:
		dc.w	$0009
		dc.w	$E009, $0000, $FFC4
		dc.w	$F00E, $0006, $FFC4
		dc.w	$F007, $0012, $FFE4
		dc.w	$E80F, $001A, $FFF4
		dc.w	$080C, $002A, $FFF4
		dc.w	$E80C, $002E, $0014
		dc.w	$F00B, $0032, $0014
		dc.w	$1005, $003E, $001C
		dc.w	$F802, $0042, $002C
Offset_0x035FBA:
		dc.w	$0001
		dc.w	$F402, $0045, $FFFC
Offset_0x035FC2:
		dc.w	$0001
		dc.w	$F402, $0048, $FFFC
Offset_0x035FCA:
		dc.w	$0001
		dc.w	$F402, $004B, $FFFC
Offset_0x035FD2:
		dc.w	$0001
		dc.w	$F402, $004E, $FFFC
Offset_0x035FDA:
		dc.w	$0003
		dc.w	$F80D, $0051, $FFE4
		dc.w	$F809, $0059, $0004
		dc.w	$F80D, $005F, $FFC4
Offset_0x035FEE:
		dc.w	$0003
		dc.w	$F80D, $0051, $FFE4
		dc.w	$F809, $0059, $0004
		dc.w	$F805, $0067, $FFD4
Offset_0x036002:
		dc.w	$0005
		dc.w	$F80D, $006B, $FFC4
		dc.w	$F80D, $086B, $001C
		dc.w	$F809, $0073, $FFE4
		dc.w	$F809, $006F, $0004
		dc.w	$F801, $006F, $FFFC
Offset_0x036022:
		dc.w	$0004
		dc.w	$F80D, $0079, $FFD0
		dc.w	$F80D, $0879, $0010
		dc.w	$F805, $007D, $FFF0
		dc.w	$F805, $007D, $0000
Offset_0x03603C:
		dc.w	$0003
		dc.w	$FC0C, $0081, $FFDC
		dc.w	$FC0C, $0881, $0004
		dc.w	$FC00, $0082, $FFFC
Offset_0x036050:
		dc.w	$0002
		dc.w	$FC08, $0085, $FFE8
		dc.w	$FC08, $0885, $0000

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Robotnik Head in Hydrocity, Marble Garden, Carnival Night,and IceCap
; ---------------------------------------------------------------------------
; Offset_0x03605E: Robotnik_Head:
Obj_RobotnikHead:
		jsr	(Refresh_Child_Position_Adjusted).l
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	RobotnikHead_Index(pc,d0.w),d1
		jsr	RobotnikHead_Index(pc,d1.w)
		jmp	(Child_Display_Or_Delete_2).l
; ===========================================================================
; Offset_0x036078:
RobotnikHead_Index:
		dc.w RobotnikHead_Init-RobotnikHead_Index
		dc.w RobotnikHead_Main-RobotnikHead_Index
		dc.w RobotnikHead_Delete-RobotnikHead_Index
; ===========================================================================
; Offset_0x03607E:
RobotnikHead_Init:
		lea	Robotnik_Head_Setup_Data(pc),a1
		jsr	(SetupObjectAttributes).l
		jsr	(Boss_Test_And_Set_Layer_Flag).l
		move.w	Obj_Child_Ref(a0),a1
		move.w	Obj_Child_Ref(a1),Obj_Height_3(a0)

Offset_0x036098:
		rts
; ===========================================================================
; Offset_0x03609A:
RobotnikHead_Main:
		lea	RobotnikHead_AnimateData(pc),a1
		jsr	(Animate_Raw_A1).l
		move.w	Obj_Height_3(a0),a1
		btst	#7,Obj_Status(a1)	; has Robotnik been defeated?
		bne.s	RobotnikHead_Defeated	; if yes, branch
		btst	#6,Obj_Status(a1)	; has Robotnik been hit?
		beq.s	Offset_0x0360BE		; if not, branch
		move.b	#2,Obj_Map_Id(A0)	; use "hit" frame

Offset_0x0360BE:
		rts
; ---------------------------------------------------------------------------
; Offset_0x0360C0:
RobotnikHead_Defeated:
		move.b	#4,Obj_Routine(a0)
		move.b	#3,Obj_Map_Id(a0)	; use "defeated" frame
		rts
; ===========================================================================
; Offset_0x0360CE:
RobotnikHead_Delete:
		jmp	(Refresh_Child_Position_Adjusted).l

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Robotnik Head in Angel Island
; ---------------------------------------------------------------------------
; Offset_0x0360D4:
Obj_AIZRobotnikHead:
		jsr	(Refresh_Child_Position_Adjusted).l
		jsr	(Boss_Test_And_Set_Layer_Flag).l
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	AIZRobotnikHead_Index(pc,d0.w),d1
		jsr	AIZRobotnikHead_Index(pc,d1.w)
		btst	#6,Obj_Control_Var_08(a0)
		bne.w	Offset_0x036098
		jmp	(Child_Display_Or_Delete_2).l
; ===========================================================================
; Offset_0x0360FE:
AIZRobotnikHead_Index:
		dc.w RobotnikHead_Init-AIZRobotnikHead_Index
		dc.w RobotnikHead_Main-AIZRobotnikHead_Index
		dc.w RobotnikHead_Delete-AIZRobotnikHead_Index

; ===========================================================================
; ---------------------------------------------------------------------------
; Object - Robotnik Head in Flying Duracell
; ---------------------------------------------------------------------------
; Offset_0x036104: FBz_Robotnik_Head:
Obj_FBZRobotnikHead:
		jsr	(Refresh_Child_Position_Adjusted).l
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	FBZRobotnikHead_Index(pc,d0.w),d1
		jsr	FBZRobotnikHead_Index(pc,d1.w)
		jsr	(Child_Get_Priority).l
		jmp	(Child_Display_Or_Delete_2).l
; ===========================================================================
; Offset_0x036124:
FBZRobotnikHead_Index:
		dc.w FBZRobotnikHead_Init-FBZRobotnikHead_Index
		dc.w FBZRobotnikHead_Main-FBZRobotnikHead_Index
		dc.w RobotnikHead_Delete-FBZRobotnikHead_Index
; ===========================================================================
; Offset_0x03612A:
FBZRobotnikHead_Init:
		lea	FBZRobotnikHead_ObjData(pc),a1
		jsr	(SetupObjectAttributes).l
		move.w	Obj_Child_Ref(a0),a1
		move.w	Obj_Child_Ref(a1),Obj_Height_3(a0)
		rts
; ===========================================================================
; Offset_0x036140:
FBZRobotnikHead_Main:
		move.w	Obj_X(a0),d0
		bclr	#0,Obj_Flags(a0)
		cmp.w	(Obj_Player_One+Obj_X).w,d0	; is player to Robotnik's right?
		bcc.s	Offset_0x036156			; if not, branch
		bset	#0,Obj_Flags(a0)		; flip Robotnik's head

Offset_0x036156:
		clr.b	Obj_Map_Id(a0)
		move.w	Obj_Height_3(a0),a1
		; This should be using a1; as a result, the forward-facing
		; Robotnik head goes unused... OOPS
		btst	#2,Obj_Control_Var_08(a0)	; is Robotnik swinging round and round?
		beq.s	Offset_0x03616C			; if yes, branch
		move.b	#1,Obj_Map_Id(a0)		; use "forward" frame

Offset_0x03616C:
		btst	#7,Obj_Status(a1)	; has Robotnik been defeated?
		bne.s	Offset_0x036184		; if yes, branch
		btst	#6,Obj_Status(a1)	; has Robotnik been hit?
		beq.s	Offset_0x036182		; if not, branch
		move.b	#2,Obj_Map_Id(a0)	; use "hit" frame

Offset_0x036182:
		rts
; ---------------------------------------------------------------------------

Offset_0x036184:
		move.b	#4,Obj_Routine(a0)
		move.b	#3,Obj_Map_Id(a0)	; use "defeated" frame
		rts

;===============================================================================
LBz_Robotnik_Ship:                                             ; Offset_0x036192
		jsr	(Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0                              ; $0005
		move.w	Offset_0x0361AC(pc,d0.w),d1
		jsr	Offset_0x0361AC(pc,d1.w)
		jmp	(Child_Display_Or_Delete_2)            ; Offset_0x0424A8
;-------------------------------------------------------------------------------
Offset_0x0361AC:
		dc.w Offset_0x0361B2-Offset_0x0361AC
		dc.w Offset_0x0361BC-Offset_0x0361AC
		dc.w RobotnikHead_Delete-Offset_0x0361AC
;-------------------------------------------------------------------------------
Offset_0x0361B2:
		lea	Robotnik_Head_Setup_Data(PC),a1       ; Offset_0x03652C
		jmp	(SetupObjectAttributes)                      ; Offset_0x041D72
;-------------------------------------------------------------------------------
Offset_0x0361BC:
		lea	RobotnikHead_AnimateData(PC),a1
		jsr	(Animate_Raw_A1)                       ; Offset_0x042092
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x0361E2
		btst	#$06, Obj_Status(A1)                             ; $002A
		beq.s	Offset_0x0361E0
		move.b	#$02, Obj_Map_Id(A0)                             ; $0022
Offset_0x0361E0:
		rts
Offset_0x0361E2:
		move.b	#$04, Obj_Routine(A0)                            ; $0005
		move.b	#$03, Obj_Map_Id(A0)                             ; $0022
		rts
;===============================================================================
AIz_Robotnik_Ship:                                             ; Offset_0x0361F0
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0                              ; $0005
		move.w	Offset_0x03620E(pc,d0.w),d1
		jsr	Offset_0x03620E(pc,d1.w)
		btst	#$06, Obj_Control_Var_08(A0)                     ; $0038
		bne.w	Offset_0x036098
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x03620E:
		dc.w	Offset_0x036216-Offset_0x03620E
		dc.w	Offset_0x036232-Offset_0x03620E
		dc.w	Offset_0x036268-Offset_0x03620E
		dc.w	Offset_0x03629A-Offset_0x03620E
;-------------------------------------------------------------------------------
Offset_0x036216:
		lea	AIz_Flame_Mobile_Setup_Data(PC),a1    ; Offset_0x036544
		jsr	(SetupObjectAttributes)                      ; Offset_0x041D72
		move.b	Obj_Subtype(A0), Obj_Map_Id(A0)           ; $002C, $0022
		lea	(Offset_0x03655E),a2
		jmp	(SetupChildObject)                 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x036232:
		jsr	(Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
		jsr	(Boss_Test_And_Set_Layer_Flag)         ; Offset_0x037A98
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x03624C
		rts
Offset_0x03624C:
		move.b	#$04, Obj_Routine(A0)                            ; $0005
		lea	(Offset_0x041D62),a2
		jsr	(SetupChildObject)                 ; Offset_0x041D9A
		bne.s	Offset_0x036266
		move.b	#$04, Obj_Subtype(A1)                            ; $002C
Offset_0x036266:
		rts
;-------------------------------------------------------------------------------
Offset_0x036268:
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Offset_0x036280
		jsr	(Boss_Test_And_Set_Layer_Flag)         ; Offset_0x037A98
		jmp	(Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
Offset_0x036280:
		move.b	#$06, Obj_Routine(A0)                            ; $0005
		move.b	#$05, Obj_Map_Id(A0)                             ; $0022
		move.w	#$FE00, Obj_Speed_Y(A0)                          ; $001A
		move.w	#$007F, Obj_Timer(A0)                            ; $002E
		rts
;-------------------------------------------------------------------------------
Offset_0x03629A:
		jsr	(ObjectFall)                           ; Offset_0x0110FE
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		bmi.s	Offset_0x0362A8
		rts
Offset_0x0362A8:
		bset	#$05, Obj_Control_Var_08(A0)                     ; $0038
		clr.b	(Boss_Flag).w                                ; $FFFFF7AA
		jmp	(Go_Delete_Object_A0_2)                ; Offset_0x042D4C
;===============================================================================
Hz_Robotnik_Ship:                                              ; Offset_0x0362B8
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0                              ; $0005
		move.w	Offset_0x0362CC(pc,d0.w),d1
		jsr	Offset_0x0362CC(pc,d1.w)
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x0362CC:
		dc.w	Offset_0x036322-Offset_0x0362CC
		dc.w	Offset_0x036344-Offset_0x0362CC
		dc.w	Offset_0x0362D6-Offset_0x0362CC
		dc.w	Offset_0x036394-Offset_0x0362CC
		dc.w	Offset_0x0363CE-Offset_0x0362CC
;-------------------------------------------------------------------------------
Offset_0x0362D6:
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Offset_0x0362E4
		rts
Offset_0x0362E4:
		move.b	#$06, Obj_Routine(A0)                            ; $0005
		move.b	#$05, Obj_Map_Id(A0)                             ; $0022
		rts
;===============================================================================
MGz_Robotnik_Ship:                                             ; Offset_0x0362F2
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0                              ; $0005
		move.w	Offset_0x036312(pc,d0.w),d1
		jsr	Offset_0x036312(pc,d1.w)
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$05, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Offset_0x03631C
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x036312:
		dc.w	Offset_0x036322-Offset_0x036312
		dc.w	Offset_0x036344-Offset_0x036312
		dc.w	Offset_0x036374-Offset_0x036312
		dc.w	Offset_0x036394-Offset_0x036312
		dc.w	Offset_0x0363CE-Offset_0x036312
;-------------------------------------------------------------------------------
Offset_0x03631C:
		jmp	(Go_Delete_Object_A0_2)                ; Offset_0x042D4C
;-------------------------------------------------------------------------------
Offset_0x036322:
		lea	Drill_Mobile_Ship_Setup_Data(PC),a1   ; Offset_0x036544
		jsr	(SetupObjectAttributes)                      ; Offset_0x041D72
		jsr	(Boss_Test_And_Set_Layer_Flag)         ; Offset_0x037A98
		move.b	Obj_Subtype(A0), Obj_Map_Id(A0)           ; $002C, $0022
		lea	(Offset_0x036556),a2
		jmp	(SetupChildObject)                 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x036344:
		jsr	(Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x036358
		rts
Offset_0x036358:
		move.b	#$04, Obj_Routine(A0)                            ; $0005
		lea	(Offset_0x041D62),a2
		jsr	(SetupChildObject)                 ; Offset_0x041D9A
		bne.s	Offset_0x036372
		move.b	#$04, Obj_Subtype(A1)                            ; $002C
Offset_0x036372:
		rts
;-------------------------------------------------------------------------------
Offset_0x036374:
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Offset_0x036386
		jmp	(Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
Offset_0x036386:
		move.b	#$06, Obj_Routine(A0)                            ; $0005
		move.b	#$0A, Obj_Map_Id(A0)                             ; $0022
		rts
;-------------------------------------------------------------------------------
Offset_0x036394:
		move.w	(Camera_Y).w,d0                             ; $FFFFEE7C
		addi.w	#$0040,d0
		cmp.w	Obj_Y(A0),d0                                    ; $0014
		bcc.s	Offset_0x0363A8
		subq.w	#$01, Obj_Y(A0)                                  ; $0014
		rts
Offset_0x0363A8:
		move.b	#$08, Obj_Routine(A0)                            ; $0005
Offset_0x0363AE:
		bset	#0, Obj_Flags(A0)                              ; $0004
		move.w	#$0300, Obj_Speed_X(A0)                          ; $0018
		clr.w	Obj_Speed_Y(A0)                                  ; $001A
		move.w	#$0100, Obj_Timer(A0)                            ; $002E
		lea	LBz_Robotnik_Ship_Data_2(PC),a2       ; Offset_0x03659E
		jmp	(SetupChildObject)                 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x0363CE:
		jsr	(SpeedToPos)                           ; Offset_0x01111E
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		bmi.s	Offset_0x0363DC
		rts
Offset_0x0363DC:
		bset	#$05, Obj_Control_Var_08(A0)                     ; $0038
		clr.b	(Boss_Flag).w                                ; $FFFFF7AA
		jmp	(Go_Delete_Object_A0_2)                ; Offset_0x042D4C
;===============================================================================
CNz_Iz_Robotnik_Ship:                                          ; Offset_0x0363EC
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0                              ; $0005
		move.w	Offset_0x036400(pc,d0.w),d1
		jsr	Offset_0x036400(pc,d1.w)
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x036400:
		dc.w	Offset_0x036322-Offset_0x036400
		dc.w	Offset_0x036344-Offset_0x036400
		dc.w	Offset_0x036374-Offset_0x036400
		dc.w	Offset_0x036394-Offset_0x036400
		dc.w	Offset_0x0363CE-Offset_0x036400
;===============================================================================
FBz_Robotnik_Ship:                                             ; Offset_0x03640A
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0                              ; $0005
		move.w	Offset_0x03641E(pc,d0.w),d1
		jsr	Offset_0x03641E(pc,d1.w)
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x03641E:
		dc.w	Offset_0x03642A-Offset_0x03641E
		dc.w	Offset_0x036446-Offset_0x03641E
		dc.w	Offset_0x03647C-Offset_0x03641E
		dc.w	Offset_0x0364BA-Offset_0x03641E
		dc.w	Offset_0x0364D4-Offset_0x03641E
		dc.w	Offset_0x0363CE-Offset_0x03641E
;-------------------------------------------------------------------------------
Offset_0x03642A:
		lea	FBz_Hang_Mobile_Ship_Setup_Data_2(PC),a1 ; Offset_0x036544
		jsr	(SetupObjectAttributes)                      ; Offset_0x041D72
		move.b	Obj_Subtype(A0), Obj_Map_Id(A0)           ; $002C, $0022
		lea	(FBz_Robotnik_Head_Data),a2           ; Offset_0x036566
		jmp	(SetupChildObject)                 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x036446:
		jsr	(Refresh_Child_Position)               ; Offset_0x042016
		jsr	(Child_Get_Priority)                   ; Offset_0x043230
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x036460
		rts
Offset_0x036460:
		move.b	#$04, Obj_Routine(A0)                            ; $0005
		lea	(Offset_0x041D62),a2
		jsr	(SetupChildObject)                 ; Offset_0x041D9A
		bne.s	Offset_0x03647A
		move.b	#$04, Obj_Subtype(A1)                            ; $002C
Offset_0x03647A:
		rts
;-------------------------------------------------------------------------------
Offset_0x03647C:
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Offset_0x036494
		jsr	(Child_Get_Priority)                   ; Offset_0x043230
		jmp	(Refresh_Child_Position)               ; Offset_0x042016
Offset_0x036494:
		move.b	#$06, Obj_Routine(A0)                            ; $0005
		move.b	#$05, Obj_Map_Id(A0)                             ; $0022
		clr.w	Obj_Speed_X(A0)                                  ; $0018
		move.w	#$FE00, Obj_Speed_Y(A0)                          ; $001A
		move.w	#$002F, Obj_Timer(A0)                            ; $002E
		move.l	#Offset_0x0364C6, Obj_Child(A0)                  ; $0034
		rts
;-------------------------------------------------------------------------------
Offset_0x0364BA:
		jsr	(ObjectFall)                           ; Offset_0x0110FE
		jmp	(Run_Object_Wait_Timer_A0)             ; Offset_0x0423D2
;-------------------------------------------------------------------------------
Offset_0x0364C6:
		move.b	#$08, Obj_Routine(A0)                            ; $0005
		bset	#0, Obj_Flags(A0)                              ; $0004
		rts
;-------------------------------------------------------------------------------
Offset_0x0364D4:
		move.w	(Camera_Y).w,d0                             ; $FFFFEE7C
		addi.w	#$00C0,d0
		cmp.w	Obj_Y(A0),d0                                    ; $0014
		bcc.s	Offset_0x0364E8
		subq.w	#$01, Obj_Y(A0)                                  ; $0014
		rts
Offset_0x0364E8:
		move.b	#$0A, Obj_Routine(A0)                            ; $0005
		bra.w	Offset_0x0363AE
;-------------------------------------------------------------------------------
Offset_0x0364F2:
		lea	Offset_0x036550(PC),a1
		jsr	(SetupObjectAttributes3)                    ; Offset_0x041D7A
		move.l	#Offset_0x036504,(A0)
		rts
;-------------------------------------------------------------------------------
Offset_0x036504:
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Offset_0x036526
		jsr	(Refresh_Child_Position_Adjusted)      ; Offset_0x04203C
		btst	#0,(Vint_runcount+$03).w       ; $FFFFFE0F
		bne.w	Offset_0x036098
		jmp	(DisplaySprite)                        ; Offset_0x011148
Offset_0x036526:
		jmp	(DeleteObject)                         ; Offset_0x011138
;-------------------------------------------------------------------------------
; Offset_0x03652C:
Robotnik_Head_Setup_Data:
		objdata	$280, $10, 8, 0, 0, $52E, Robotnik_Ship_Mappings

; Offset_0x036438: FBz_Robotnik_Head_Setup_Data:
FBZRobotnikHead_ObjData:
		objdata	$280, $10, 8, 0, 0, $410, FBz_Robotnik_Head_Mappings

; Offset_0x036544:
AIz_Flame_Mobile_Setup_Data:
Drill_Mobile_Ship_Setup_Data:
FBz_Hang_Mobile_Ship_Setup_Data_2:
		objdata $280, $1C, $20, 8, 0, $52E, Robotnik_Ship_Mappings
;-------------------------------------------------------------------------------
Offset_0x036550:
		objdata	$280, 8, 4, 6, 0
;-------------------------------------------------------------------------------
Offset_0x036556:
		dc.w	$0000
		dc.l	Obj_RobotnikHead                          ; Offset_0x03605E
		dc.b	$00, $E4
;-------------------------------------------------------------------------------
Offset_0x03655E:
		dc.w	$0000
		dc.l	Obj_AIZRobotnikHead
		dc.b	$00, $E4
;-------------------------------------------------------------------------------
FBz_Robotnik_Head_Data:                                        ; Offset_0x036566
		dc.w	$0000
		dc.l	Obj_FBZRobotnikHead                      ; Offset_0x036104
		dc.b	$00, $E4
;-------------------------------------------------------------------------------
LBz_Robotnik_Ship_Data:                                        ; Offset_0x03656E
		dc.w	$0000
		dc.l	LBz_Robotnik_Ship                      ; Offset_0x036192
		dc.b	$00, $E4
;-------------------------------------------------------------------------------
AIz_Robotnik_Ship_Data ; Flame Mobile                          ; Offset_0x036576
		dc.w	$0000
		dc.l	AIz_Robotnik_Ship                      ; Offset_0x0361F0
		dc.b	$00, $EC
;-------------------------------------------------------------------------------
; Offset_0x03657E: ; Left over ???
		dc.w	$0000
		dc.l	Hz_Robotnik_Ship                       ; Offset_0x0362B8
		dc.b	$00, $00
;-------------------------------------------------------------------------------
MGz_Robotnik_Ship_Data: ; Drill Mobile                         ; Offset_0x036586
		dc.w	$0000
		dc.l	MGz_Robotnik_Ship                      ; Offset_0x0362F2
		dc.b	$FA, $04
;-------------------------------------------------------------------------------
CNz_Iz_Robotnik_Ship_Data: ; Graviton Mobile / Freezer Mobile  ; Offset_0x03658E
		dc.w	$0000
		dc.l	CNz_Iz_Robotnik_Ship                   ; Offset_0x0363EC
		dc.b	$00, $F8
;-------------------------------------------------------------------------------
FBz_Robotnik_Ship_Data: ; Hang Mobile                          ; Offset_0x036596
		dc.w	$0000
		dc.l	FBz_Robotnik_Ship                      ; Offset_0x03640A
		dc.b	$00, $04
;-------------------------------------------------------------------------------
LBz_Robotnik_Ship_Data_2: ; Egg Mobile                         ; Offset_0x03659E
		dc.w	$0000
		dc.l	Offset_0x0364F2
		dc.b	$1E, $00
;-------------------------------------------------------------------------------
; Offset_0x0365A6:
RobotnikHead_AnimateData:	dc.b	5, 0, 1, $FC

;===============================================================================
Obj_0x80_AIz_Fire_Breath:                                      ; Offset_0x0365AA
		include "data\objects\obj_0x80.asm"
Obj_0xAC_AIz_Fire_Breath:                                      ; Offset_0x036AB4
		include "data\objects\obj_0xAC.asm"
Obj_0xA9_AIz_Flame_Mobile:                                     ; Offset_0x0371FA
		include "data\objects\obj_0xA9.asm"
Obj_0xAD_Hz_Big_Shaker:                                        ; Offset_0x037E2C
		include "data\objects\obj_0xAD.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object B5 - Screw Mobile (Egg Vortex)
; ---------------------------------------------------------------------------
; Offset_0x038B14: Obj_0xB5_Hz_Screw_Mobile:
ObjB5_ScrewMobile:
		lea	ScrewMobile_ScreenCoordinates(pc),a1
		jsr	(Check_Camera_In_Range).l
		move.l	#ScrewMobile_LockScreen,(a0)
		move.b	#1,(Boss_Flag).w
		moveq	#signextendB(cmd_FadeOut),d0
		jsr	(Play_Music).l
		move.w	#$78,Obj_BossMusicTimer(a0)
		move.b	#Boss_Snd,Obj_BossMusic(a0)
		move.w	(Level_Limits_Max_Y).w,(Target_Camera_Max_Y).w
		move.w	#$738,(Level_Limits_Max_Y).w
		move.w	#$4100,Obj_LeftLock(a0)
		move.w	#$4150,(Sonic_Level_Limits_Max_X).w
		move.l	#Offset_0x038B7E,Obj_Child(a0)
		moveq	#$6C,d0
		jsr	(LoadPLC).l
		lea	Pal_Hz_Boss(pc),a1
		jmp	(Pal_Load_Line_1).l
; ===========================================================================
; Offset_0x038B70:
ScrewMobile_ScreenCoordinates:
		dc.w	$700, $800, $3FA0, $41D0
; ===========================================================================
; Offset_0x038B78:
ScrewMobile_LockScreen:
		jmp	(Update_Sonic_Level_Limits_X_Y_Play_Music).l
; ===========================================================================

Offset_0x038B7E:
		move.l	#Offset_0x038B86,(a0)

Offset_0x038B84:
		rts
; ===========================================================================

Offset_0x038B86:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	ScrewMobile_Index(pc,d0.w),d1
		jsr	ScrewMobile_Index(pc,d1.w)
		bsr.w	Offset_0x039620
		jmp	(Add_To_Response_List_And_Display).l
; ===========================================================================
; Offset_0x038B9E:
ScrewMobile_Index:
		dc.w ScrewMobile_Init-ScrewMobile_Index
		dc.w ScrewMobile_Descend-ScrewMobile_Index
		dc.w ScrewMobile_BobUpAndDown-ScrewMobile_Index
		dc.w ScrewMobile_BobUpAndDown-ScrewMobile_Index
		dc.w Offset_0x038C70-ScrewMobile_Index
; ===========================================================================
; Offset_0x038BA8:
ScrewMobile_Init:
		lea	Screw_Mobile_Setup_Data(pc),a1
		jsr	(SetupObjectAttributes).l
		move.b	#8,Obj_Boss_Hit(a0)
		move.w	#$80,Obj_Speed_Y(a0)
		move.w	#$AF,Obj_Timer(a0)
		move.l	#ScrewMobile_StopDescending,Obj_Child(a0)
		lea	(Offset_0x0397E2).l,a2
		jsr	(SetupChildObject).l
		bne.s	Offset_0x038BE0
		move.b	#5,Obj_Subtype(a1)

Offset_0x038BE0:
		lea	Offset_0x039780(pc),a2
		jmp	(SetupChildObject).l
; ===========================================================================
; Offset_0x038BEA:
ScrewMobile_Descend:
		jsr	(SpeedToPos).l
		jmp	(Run_Object_Wait_Timer_A0).l
; ===========================================================================
; Offset_0x038BF6:
ScrewMobile_StopDescending:
		move.b	#4,Obj_Routine(a0)
		move.w	#-$100,Obj_Height_3(a0)
		move.w	#$9F,Obj_Child_Data(a0)
		move.w	#$3F,Obj_Timer(a0)
		move.l	#ScrewMobile_FanAttack,Obj_Child(a0)
		jmp	Swing_Setup(pc)
; ===========================================================================
; Offset_0x038C1A:
ScrewMobile_BobUpAndDown:
		jsr	(Swing_Up_And_Down).l
		jsr	(SpeedToPos).l
		jmp	(Run_Object_Wait_Timer_A0).l
; ===========================================================================
; Offset_0x038C2C:
ScrewMobile_FanAttack:
		move.b	#6,Obj_Routine(a0)
		bset	#3,Obj_Control_Var_08(a0)
		move.w	#$1FF,Obj_Timer(a0)
		move.l	#Offset_0x038C48,Obj_Child(a0)
		rts
; ===========================================================================

Offset_0x038C48:
		move.b	#$08, Obj_Routine(A0)					; $0005
		bclr	#$03, Obj_Control_Var_08(A0)			; $0038
		move.w	Obj_Height_3(A0), Obj_Speed_X(A0)		; $0044, $0018
		move.w	#$00BF, Obj_Timer(A0)					; $002E
		move.l	#Offset_0x038C9A, Obj_Child(A0)			; $0034
		move.b	#$08, Obj_Control_Var_09(A0)			; $0039
		rts
;-------------------------------------------------------------------------------
Offset_0x038C70:
		jsr	(Swing_Up_And_Down)			; Offset_0x04232E
		jsr	(SpeedToPos)				 ; Offset_0x01111E
		jsr	(Run_Object_Wait_Timer_A0)			; Offset_0x0423D2
		subq.w	#$01, Obj_Child_Data(A0)				; $0030
		bpl.s	Offset_0x038C98
		neg.w	Obj_Speed_X(A0)					; $0018
		bchg	#00, Obj_Flags(A0)					; $0004
		move.w	#$013F, Obj_Child_Data(A0)				; $0030
Offset_0x038C98:
		rts
;-------------------------------------------------------------------------------
Offset_0x038C9A:
		move.w	#$005F, Obj_Timer(A0)					; $002E
		subq.b	#$01, Obj_Control_Var_09(A0)			; $0039
		bmi.s	Offset_0x038CAE
		bset	#$01, Obj_Control_Var_08(A0)			; $0038
		rts
Offset_0x038CAE:
		move.w	Obj_Speed_X(A0), Obj_Height_3(A0)		; $0018, $0044
		clr.w	Obj_Speed_X(A0)					; $0018
		bra	ScrewMobile_FanAttack
;-------------------------------------------------------------------------------
Offset_0x038CBC:
		move.l	#Offset_0x038CE6,(A0)
		bset	#$04, Obj_Control_Var_08(A0)			; $0038
		move.w	#$007F, Obj_Timer(A0)					; $002E
		move.l	#Offset_0x038D02, Obj_Child(A0)			; $0034
		moveq	#signextendB(cmd_FadeOut),d0					; -$20
		jsr	(Play_Music).l				 ; Offset_0x001176
		moveq	#$0C,d0
		jmp	(Set_Indexed_Velocity)		 ; Offset_0x042D5A
;-------------------------------------------------------------------------------
Offset_0x038CE6:
		jsr	(ObjectFall)				 ; Offset_0x0110FE
		jsr	(Run_Object_Wait_Timer_A0)			; Offset_0x0423D2
		btst	#0,(Vint_runcount+$03).w		; $FFFFFE0F
		beq.w	Offset_0x038B84
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x038D02:
		move.l	#Offset_0x038D28,(A0)
		st	 (Player_Control_Lock_Flag).w		 ; $FFFFFAA8
		clr.b	(Boss_Flag).w				; $FFFFF7AA
		jsr	(Restore_LevelMusic)			; Offset_0x0432CA
		move.w	#$4330,(Target_Camera_Max_X).w			; $FFFFFA92
		lea	(Level_Resize_Max_X),a2			; Offset_0x04261C
		jmp	(Load_Child_Object_Simple_A2)		; Offset_0x041F5A
;-------------------------------------------------------------------------------
Offset_0x038D28:
		tst.b	(Control_Ports_Buffer_Data+$03).w			; $FFFFF607
		bne.s	Offset_0x038D3C
		move.w	(Camera_X).w,(Sonic_Level_Limits_Min_X).w ; $FFFFEE78, $FFFFEE14
		tst.b	(Player_Control_Lock_Flag).w		 ; $FFFFFAA8
		bne.w	Offset_0x038B84
Offset_0x038D3C:
		clr.b	(Player_Control_Lock_Flag).w		 ; $FFFFFAA8
		jsr	(Restore_PlayerControl)			; Offset_0x0432EE
		move.w	#$0000,(Target_Camera_Min_Y).w			; $FFFFFA96
		lea	(Level_Resize_Min_Y),a2			; Offset_0x042628
		jsr	(Load_Child_Object_Simple_A2)		; Offset_0x041F5A
		jmp	(Go_Delete_Object_A0_2)		; Offset_0x042D4C
;-------------------------------------------------------------------------------
Offset_0x038D5E:
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0					; $0005
		move.w	Offset_0x038D7A(PC,d0),d1
		jsr	Offset_0x038D7A(PC,d1)
		jsr	(Refresh_Child_Position)			; Offset_0x042016
		moveq	#0,d0
		jmp	(Child_Display_Touch_Or_Flicker_Move_2) ; Offset_0x042538
;-------------------------------------------------------------------------------
Offset_0x038D7A:
		dc.w	Offset_0x038D84-Offset_0x038D7A
		dc.w	Offset_0x038D8E-Offset_0x038D7A
		dc.w	Offset_0x038DBA-Offset_0x038D7A
		dc.w	Offset_0x038DD8-Offset_0x038D7A
		dc.w	Offset_0x038E04-Offset_0x038D7A
;-------------------------------------------------------------------------------
Offset_0x038D84:
		lea	Offset_0x039734(PC),a1
		jmp	(SetupObjectAttributes3)			; Offset_0x041D7A
;-------------------------------------------------------------------------------
Offset_0x038D8E:
		move.w	Obj_Child_Ref(A0),a1					; $0046
		btst	#$03, Obj_Control_Var_08(A1)			; $0038
		bne.s	Offset_0x038D9C
		rts
Offset_0x038D9C:
		move.b	#$04, Obj_Routine(A0)					; $0005
		move.b	#$A6, Obj_Col_Flags(A0)				; $0028
		move.l	#Offset_0x0397EA, Obj_Child_Data(A0)			; $0030
		move.l	#Offset_0x038DC0, Obj_Child(A0)			; $0034
		rts
;-------------------------------------------------------------------------------
Offset_0x038DBA:
		jmp	(Animate_Raw_Get_Faster)			; Offset_0x042248
;-------------------------------------------------------------------------------
Offset_0x038DC0:
		move.b	#$06, Obj_Routine(A0)					; $0005
		move.l	#Offset_0x0397F1, Obj_Child_Data(A0)			; $0030
		lea	Offset_0x0397B0(PC),a2
		jmp	(SetupChildObject)		 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x038DD8:
		jsr	(AnimateRaw)				; Offset_0x04208E
		move.w	Obj_Child_Ref(A0),a1					; $0046
		btst	#$03, Obj_Control_Var_08(A1)			; $0038
		beq.s	Offset_0x038DEC
		rts
Offset_0x038DEC:
		move.b	#$08, Obj_Routine(A0)					; $0005
		move.l	#Offset_0x0397F7, Obj_Child_Data(A0)			; $0030
		move.l	#Offset_0x038E0A, Obj_Child(A0)			; $0034
		rts
;-------------------------------------------------------------------------------
Offset_0x038E04:
		jmp	(Animate_Raw_Get_Slower)			; Offset_0x0422C8
;-------------------------------------------------------------------------------
Offset_0x038E0A:
		move.b	#$02, Obj_Routine(A0)					; $0005
		clr.b	Obj_Col_Flags(A0)				; $0028
		rts
;-------------------------------------------------------------------------------
Offset_0x038E16:
		move.w	Obj_X(A0), -(sp)				 ; $0010
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0					; $0005
		move.w	Offset_0x038E46(PC,d0),d1
		jsr	Offset_0x038E46(PC,d1)
		move.w	#$001F,d1
		move.w	#$000C,d2
		move.w	#$000C,d3
		move.w	(sp)+,d4
		jsr	(Platform_Object)			 ; Offset_0x013AF6
		bsr	Offset_0x0396B2
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x038E46:
		dc.w	Offset_0x038E52-Offset_0x038E46
		dc.w	Offset_0x038E9A-Offset_0x038E46
		dc.w	Offset_0x038EC6-Offset_0x038E46
		dc.w	Offset_0x038EDE-Offset_0x038E46
		dc.w	Offset_0x038EC6-Offset_0x038E46
		dc.w	Offset_0x038F3C-Offset_0x038E46
;-------------------------------------------------------------------------------
Offset_0x038E52:
		lea	Offset_0x039740(PC),a1
		jsr	(SetupObjectAttributes2)			; Offset_0x041D76
		move.w	(Water_Level_Move).w,d0			; $FFFFF646
		subq.w	#$08,d0
		move.w	D0, Obj_Y(A0)					; $0014
		move.w	D0, Obj_Control_Var_0A(A0)				; $003A
		move.l	#Offset_0x039802, Obj_Child_Data(A0)			; $0030
		move.l	#Offset_0x038EA0, Obj_Child(A0)			; $0034
		lea	Offset_0x0397C0(PC),a2
		jsr	(SetupChildObject)		 ; Offset_0x041D9A
		lea	Offset_0x0397DC(PC),a2
		jsr	(Load_Child_Object_Simple_A2)		; Offset_0x041F5A
		move.w	Obj_Child_Ref(A0),a1					; $0046
		move.w	Obj_Child_Ref(A1), Obj_Height_3(A0)		; $0046, $0044
		rts
;-------------------------------------------------------------------------------
Offset_0x038E9A:
		jmp	(AnimateRaw)				; Offset_0x04208E
;-------------------------------------------------------------------------------
Offset_0x038EA0:
		move.b	#$04, Obj_Routine(A0)					; $0005
		move.l	#Offset_0x03980B, Obj_Child_Data(A0)			; $0030
		move.w	#$FF00, Obj_Speed_Y(A0)				; $001A
		move.l	#Offset_0x038ED6, Obj_Child(A0)			; $0034
		lea	Offset_0x0397B8(PC),a2
		jmp	(SetupChildObject)		 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x038EC6:
		jsr	(SpeedToPos)				 ; Offset_0x01111E
		jsr	(AnimateRaw)				; Offset_0x04208E
		bra	Offset_0x0396FA
;-------------------------------------------------------------------------------
Offset_0x038ED6:
		move.b	#$06, Obj_Routine(A0)					; $0005
		rts
;-------------------------------------------------------------------------------
Offset_0x038EDE:
		jsr	(AnimateRaw)				; Offset_0x04208E
		move.w	Obj_Height_3(A0),a1					; $0044
		btst	#$03, Obj_Control_Var_08(A1)			; $0038
		beq.s	Offset_0x038EF2
		rts
Offset_0x038EF2:
		move.b	#$08, Obj_Routine(A0)					; $0005
		bset	#$03, Obj_Control_Var_08(A0)			; $0038
		move.w	#$0080, Obj_Speed_Y(A0)				; $001A
		move.l	#Offset_0x038F22, Obj_Child(A0)			; $0034
		move.w	#$0080, Obj_Speed_X(A0)				; $0018
		tst.w	Obj_Speed_X(A1)					; $0018
		bpl.s	Offset_0x038F1C
		neg.w	Obj_Speed_X(A0)					; $0018
Offset_0x038F1C:
		rts
;-------------------------------------------------------------------------------
; Offset_0x038F1E:
		bra	Offset_0x0396FA
;-------------------------------------------------------------------------------
Offset_0x038F22:
		move.l	#Offset_0x038F3C,(A0)
		move.w	#$000F, Obj_Timer(A0)					; $002E
		clr.w	Obj_Speed_X(A0)					; $0018
		move.l	#Offset_0x038F64, Obj_Child(A0)			; $0034
		rts
;-------------------------------------------------------------------------------
Offset_0x038F3C:
		move.w	#$001F,d1
		move.w	#$000C,d2
		move.w	#$000C,d3
		move.w	Obj_X(A0),d4					; $0010
		jsr	(Platform_Object)			 ; Offset_0x013AF6
		jsr	(AnimateRaw)				; Offset_0x04208E
		jsr	(Run_Object_Wait_Timer_A0)			; Offset_0x0423D2
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x038F64:
		jsr	(Displace_Player_Offset)			; Offset_0x04315A
		jmp	(Go_Delete_Object_A0_2)		; Offset_0x042D4C
;-------------------------------------------------------------------------------
Offset_0x038F70:
		jsr	(SpeedToPos)				 ; Offset_0x01111E
		jsr	(AnimateRaw)				; Offset_0x04208E
		bsr	Offset_0x0396FA
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x038F86:
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0					; $0005
		move.w	Offset_0x038F9E(PC,d0),d1
		jsr	Offset_0x038F9E(PC,d1)
		bsr	Offset_0x0396E0
		jmp	(Child_Display_Or_Delete_2)			; Offset_0x0424A8
;-------------------------------------------------------------------------------
Offset_0x038F9E:
		dc.w	Offset_0x038FA4-Offset_0x038F9E
		dc.w	Offset_0x038FB8-Offset_0x038F9E
		dc.w	Offset_0x038FE8-Offset_0x038F9E
;-------------------------------------------------------------------------------
Offset_0x038FA4:
		lea	Offset_0x039748(PC),a1
		jsr	(SetupObjectAttributes3)			; Offset_0x041D7A
		move.l	#Offset_0x03980F, Obj_Child_Data(A0)			; $0030
		rts
;-------------------------------------------------------------------------------
Offset_0x038FB8:
		bsr	Offset_0x03944E
		bsr	Offset_0x039418
		bsr	Offset_0x039382
		jsr	(AnimateRaw)				; Offset_0x04208E
		move.w	Obj_Child_Ref(A0),a1					; $0046
		btst	#$03, Obj_Control_Var_08(A1)			; $0038
		bne.s	Offset_0x038FD8
		rts
Offset_0x038FD8:
		move.b	#$04, Obj_Routine(A0)					; $0005
		move.w	Obj_Speed_X(A1), Obj_Speed_X(A0)		; $0018, $0018
		bra	Offset_0x03957A
;-------------------------------------------------------------------------------
Offset_0x038FE8:
		bsr	Offset_0x039382
		move.w	Obj_Speed_X(A1), Obj_Speed_X(A0)		; $0018, $0018
		jsr	(SpeedToPos)				 ; Offset_0x01111E
		jmp	(AnimateRaw)				; Offset_0x04208E
;-------------------------------------------------------------------------------
Offset_0x038FFE:
		lea	Offset_0x03974E(PC),a1
		jsr	(SetupObjectAttributes3)			; Offset_0x041D7A
		move.l	#Offset_0x039022,(A0)
		move.l	#Offset_0x039828, Obj_Child_Data(A0)			; $0030
Offset_0x039016:
		move.w	(Water_Level_Move).w,d0			; $FFFFF646
		subq.w	#$04,d0
		move.w	D0, Obj_Y(A0)					; $0014
		rts
;-------------------------------------------------------------------------------
Offset_0x039022:
		jsr	(AnimateRaw)				; Offset_0x04208E
		moveq	#0,d0
		move.b	Obj_Subtype(A0),d0					; $002C
		move.w	Offset_0x039046(PC,d0),d0
		move.w	Obj_Child_Ref(A0),a1					; $0046
		move.w	Obj_X(A1),d1					; $0010
		add.w	D0,d1
		move.w	D1, Obj_X(A0)					; $0010
		jmp	(Child_Display_Or_Delete_2)			; Offset_0x0424A8
;-------------------------------------------------------------------------------
Offset_0x039046:
		dc.w	$FFFC, $0004
;-------------------------------------------------------------------------------
Offset_0x03904A:
		lea	Offset_0x039754(PC),a1
		jsr	(SetupObjectAttributes2)			; Offset_0x041D76
		move.l	#Animate_Raw_Multi_Delay_Touch,(A0)	; Offset_0x042FAA
		move.l	#Offset_0x03982C, Obj_Child_Data(A0)			; $0030
		move.l	#Go_Delete_Object_A0, Obj_Child(A0) ; Offset_0x042D3E, $0034
		bra.s	Offset_0x039016
;-------------------------------------------------------------------------------
Offset_0x03906C:
		lea	Offset_0x03975C(PC),a1
		jsr	(SetupObjectAttributes)			 ; Offset_0x041D72
		move.l	#Run_Object_Wait_Timer_A0,(A0)		; Offset_0x0423D2
		move.l	#Offset_0x03909A, Obj_Child(A0)			; $0034
		bsr.w	Offset_0x0393D8
		tst.b	Obj_Subtype(A0)					; $002C
		bne.w	Offset_0x038B84
		lea	Offset_0x0397C0(PC),a2
		jmp	(SetupChildObject)		 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x03909A:
		move.l	#Offset_0x0390AA,(A0)
		move.l	#Go_Delete_Object_A0_2, Obj_Child(A0) ; Offset_0x042D4C, $0034
		rts
;-------------------------------------------------------------------------------
Offset_0x0390AA:
		bsr	Offset_0x03959C
		jmp	(Animate_Raw_Multi_Delay_Touch)		; Offset_0x042FAA
;-------------------------------------------------------------------------------
Offset_0x0390B4:
		lea	Offset_0x039774(PC),a1
		jsr	(SetupObjectAttributes)			 ; Offset_0x041D72
		move.l	#Offset_0x039114,(A0)
		jsr	(PseudoRandomNumber).l			; Offset_0x001AFA
		andi.w	#$00FF,d0
		ext.w	D0
		add.w	D0, Obj_X(A0)					; $0010
		swap	D0
		move.w	(Water_Level_Move).w,d1			; $FFFFF646
		andi.w	#$001F,d0
		add.w	D0,d1
		move.w	D1, Obj_Y(A0)					; $0014
		andi.w	#$0003,d0
		move.b	D0, Obj_Map_Id(A0)					; $0022
		lsl.w	#$02,d0
		move.l	Offset_0x039104(PC,d0), Obj_Child_Data(A0)	 ; $0030
		move.w	#$001F, Obj_Timer(A0)					; $002E
		move.l	#Offset_0x03912E, Obj_Child(A0)			; $0034
		rts
;-------------------------------------------------------------------------------
Offset_0x039104:
		dc.l	Offset_0x038AE4
		dc.l	Offset_0x038AE8
		dc.l	Offset_0x038AEC
		dc.l	Offset_0x038AF0
;-------------------------------------------------------------------------------
Offset_0x039114:
		move.w	Obj_Child_Ref(A0),a3					; $0046
		bsr	Offset_0x0395F6
		jsr	(AnimateRaw)				; Offset_0x04208E
		jsr	(Run_Object_Wait_Timer_A0)			; Offset_0x0423D2
		jmp	(Child_Display_Or_Delete_2)			; Offset_0x0424A8
;-------------------------------------------------------------------------------
Offset_0x03912E:
		move.l	#Offset_0x039140,(A0)
		move.l	Obj_Child_Data(A0),a1				 ; $0030
		move.b	$0001(A1), Obj_Map_Id(A0)				; $0022
		rts
;-------------------------------------------------------------------------------
Offset_0x039140:
		move.w	Obj_Child_Ref(A0),a3					; $0046
		btst	#$03, Obj_Control_Var_08(A3)			; $0038
		bne.s	Offset_0x039156
		bsr	Offset_0x0395F6
		jmp	(Child_Display_Or_Delete_2)			; Offset_0x0424A8
Offset_0x039156:
		move.l	#Offset_0x039114,(A0)
		move.w	#$001F, Obj_Timer(A0)					; $002E
		move.l	#Go_Delete_Object_A0, Obj_Child(A0) ; Offset_0x042D3E, $0034
		rts
;-------------------------------------------------------------------------------
Offset_0x03916C:
		moveq	#0,d0
		move.b	Obj_Routine(A0),d0					; $0005
		move.w	Offset_0x039180(PC,d0),d1
		jsr	Offset_0x039180(PC,d1)
		jmp	(Child_Display_Touch_Or_Delete)		; Offset_0x042472
;-------------------------------------------------------------------------------
Offset_0x039180:
		dc.w	Offset_0x03918E-Offset_0x039180
		dc.w	Offset_0x0391A8-Offset_0x039180
		dc.w	Offset_0x0391EC-Offset_0x039180
		dc.w	Offset_0x039220-Offset_0x039180
		dc.w	Offset_0x03928E-Offset_0x039180
		dc.w	Offset_0x0392B6-Offset_0x039180
		dc.w	Offset_0x0392DC-Offset_0x039180
;-------------------------------------------------------------------------------
Offset_0x03918E:
		lea	Offset_0x03973A(PC),a1
		jsr	(SetupObjectAttributes3)			; Offset_0x041D7A
		move.b	#$08, Obj_Height_2(A0)				 ; $001E
		bsr	Offset_0x03935C
		jmp	(Refresh_Child_Position_Adjusted)	 ; Offset_0x04203C
;-------------------------------------------------------------------------------
Offset_0x0391A8:
		jsr	(Refresh_Child_Position_Adjusted)	 ; Offset_0x04203C
		move.w	Obj_Child_Ref(A0),a1					; $0046
		btst	#$01, Obj_Control_Var_08(A1)			; $0038
		bne.s	Offset_0x0391BC
		rts
Offset_0x0391BC:
		move.b	#$04, Obj_Routine(A0)					; $0005
		tst.b	Obj_Subtype(A0)					; $002C
		beq.s	Offset_0x0391CA
		rts
Offset_0x0391CA:
		move.b	#$06, Obj_Routine(A0)					; $0005
		move.w	#$0003, Obj_Timer(A0)					; $002E
		move.l	#Offset_0x039262, Obj_Child(A0)			; $0034
		move.b	#$01, Obj_Control_Var_10(A0)			; $0040
		move.b	#0, Obj_Control_Var_11(A0)			; $0041
		rts
;-------------------------------------------------------------------------------
Offset_0x0391EC:
		jsr	(Refresh_Child_Position_Adjusted)	 ; Offset_0x04203C
		move.w	Obj_Child_Ref(A0),a1					; $0046
		btst	#$01, Obj_Control_Var_08(A1)			; $0038
		beq.s	Offset_0x039200
		rts
;-------------------------------------------------------------------------------
Offset_0x039200:
		move.b	#$06, Obj_Routine(A0)					; $0005
		subq.b	#$02, Obj_Subtype(A0)					; $002C
		move.w	#$0007, Obj_Timer(A0)					; $002E
		move.l	#Offset_0x03923C, Obj_Child(A0)			; $0034
		bsr	Offset_0x03935C
		bra	Offset_0x039370
Offset_0x039220:
		move.b	Obj_Control_Var_10(A0),d0				; $0040
		add.b	D0, Obj_Control_Var_12(A0)				; $0042
		move.b	Obj_Control_Var_11(A0),d0				; $0041
		add.b	D0, Obj_Control_Var_13(A0)				; $0043
		jsr	(Refresh_Child_Position_Adjusted)	 ; Offset_0x04203C
		jmp	(Run_Object_Wait_Timer_A0)			; Offset_0x0423D2
;-------------------------------------------------------------------------------
Offset_0x03923C:
		move.b	#$02, Obj_Routine(A0)					; $0005
		tst.b	Obj_Subtype(A0)					; $002C
		bne.s	Offset_0x039260
		lea	Offset_0x0397A0(PC),a2
		jsr	(Load_Child_Object_A2_2)			; Offset_0x041F86
		bne.s	Offset_0x039260
		move.w	Obj_Child_Ref(A0), Obj_Child_Ref(A1)	 ; $0046, $0046
		move.b	#$04, Obj_Subtype(A1)					; $002C
Offset_0x039260:
		rts
;-------------------------------------------------------------------------------
Offset_0x039262:
		move.b	#$08, Obj_Routine(A0)					; $0005
		move.l	#Offset_0x0392C4, Obj_Child(A0)			; $0034
		move.w	#$0100, Obj_Speed_X(A0)				; $0018
		move.w	Obj_Child_Ref(A0),a1					; $0046
		bclr	#$01, Obj_Control_Var_08(A1)			; $0038
		btst	#0, Obj_Flags(A1)					; $0004
		beq.s	Offset_0x03928C
		neg.w	Obj_Speed_X(A0)					; $0018
Offset_0x03928C:
		rts
;-------------------------------------------------------------------------------
Offset_0x03928E:
		move.w	Obj_Y(A0),d0					; $0014
		cmp.w	(Water_Level_Move).w,d0			; $FFFFF646
		bcc.s	Offset_0x0392A6
		jsr	(Move_Light_Gravity)			; Offset_0x0426C2
		jsr	(Run_Object_Hit_Floor_A0)			; Offset_0x0423E0
		rts
Offset_0x0392A6:
		move.b	#$0A, Obj_Routine(A0)					; $0005
		lea	Offset_0x0397CE(PC),a2
		jmp	(SetupChildObject)		 ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x0392B6:
		jsr	(Move_Light_Gravity)			; Offset_0x0426C2
		jsr	(Run_Object_Hit_Floor_A0)			; Offset_0x0423E0
		rts
;-------------------------------------------------------------------------------
Offset_0x0392C4:
		move.b	#$0C, Obj_Routine(A0)					; $0005
		move.l	#Offset_0x0397FD, Obj_Child_Data(A0)			; $0030
		move.l	#Offset_0x0392E2, Obj_Child(A0)			; $0034
		rts
Offset_0x0392DC:
		jmp	(Animate_Raw_Get_Faster)			; Offset_0x042248
;-------------------------------------------------------------------------------
Offset_0x0392E2:
		lea	Offset_0x0397D6(PC),a2
		jsr	(Load_Child_Object_Simple_A2)		; Offset_0x041F5A
		lea	Offset_0x0397A8(PC),a2
		jsr	(SetupChildObject)		 ; Offset_0x041D9A
		jmp	(Go_Delete_Object_A0)			; Offset_0x042D3E
;-------------------------------------------------------------------------------
Offset_0x0392FC:
		lea	Offset_0x03972E(PC),a1
		jsr	(SetupObjectAttributes3)			; Offset_0x041D7A
		move.l	#Offset_0x03930E,(A0)
		rts
;-------------------------------------------------------------------------------
Offset_0x03930E:
		jsr	(Refresh_Child_Position_Adjusted)	 ; Offset_0x04203C
		moveq	#0,d0
		jmp	(Child_Display_Or_Flicker_Move_2)	 ; Offset_0x04250E
;-------------------------------------------------------------------------------
Jawz_Explosion:						; Offset_0x03931C
		lea	Jawz_Explosion_Setup_Data(PC),a1	 ; Offset_0x039768
		jsr	(SetupObjectAttributes)			 ; Offset_0x041D72
		move.l	#Offset_0x039342,(A0)
		move.l	#Offset_0x0398F8, Obj_Child_Data(A0)			; $0030
		move.l	#Go_Delete_Object_A0, Obj_Child(A0) ; Offset_0x042D3E, $0034
		jmp	(Add_To_Response_List_And_Display)	; Offset_0x042450
;-------------------------------------------------------------------------------
Offset_0x039342:
		jsr	(AnimateRaw)				; Offset_0x04208E
		cmpi.b	#$03, Obj_Map_Id(A0)					; $0022
		bcc.s	Offset_0x039356
		jsr	(Add_SpriteToCollisionResponseList)		; Offset_0x00A540
Offset_0x039356:
		jmp	(DisplaySprite)				; Offset_0x011148
;-------------------------------------------------------------------------------
Offset_0x03935C:
		moveq	#0,d0
		move.b	Obj_Subtype(A0),d0					; $002C
		move.w	Offset_0x03936A(PC,d0), Obj_Priority(A0)		; $0008
		rts
;-------------------------------------------------------------------------------
Offset_0x03936A:
		dc.w	$0200, $0180, $0100
;-------------------------------------------------------------------------------
Offset_0x039370:
		moveq	#0,d0
		move.b	Obj_Subtype(A0),d0					; $002C
		move.w	Offset_0x03937E(PC,d0), Obj_Control_Var_10(A0)	; $0040
		rts
;-------------------------------------------------------------------------------
Offset_0x03937E:
		dc.w	$0101, $0100
;-------------------------------------------------------------------------------
Offset_0x039382:
		move.w	Obj_Child_Ref(A0),a1					; $0046
		moveq	#0,d0
		move.b	Obj_Control_Var_09(A1),d0				; $0039
		cmp.b	Obj_Control_Var_09(A0),d0				; $0039
		beq.s	Offset_0x0393B2
		move.b	D0, Obj_Control_Var_09(A0)				; $0039
		move.b	(Offset_0x0393B4+$01)(PC,d0),d1
		ext.w	D1
		move.w	(Water_Level_Move).w,d2			; $FFFFF646
		add.w	D1,d2
		move.w	D2, Obj_Y(A0)					; $0014
		lsl.w	#$02,d0
		move.l	(Offset_0x0393BC+$04)(PC,d0), Obj_Child_Data(A0); $0030
		clr.b	Obj_Ani_Time(A0)				 ; $0024
Offset_0x0393B2:
		rts
;-------------------------------------------------------------------------------
Offset_0x0393B4:
		dc.b	$F8, $F8, $F0, $E8, $E0, $D8, $D8, $00
;-------------------------------------------------------------------------------
Offset_0x0393BC:
		dc.l	Offset_0x03980F
		dc.l	Offset_0x03980F
		dc.l	Offset_0x039814
		dc.l	Offset_0x039819
		dc.l	Offset_0x03981E
		dc.l	Offset_0x039823
		dc.l	Offset_0x039823
;-------------------------------------------------------------------------------
Offset_0x0393D8:
		moveq	#0,d0
		move.b	Obj_Subtype(A0),d0					; $002C
		move.w	D0, Obj_Timer(A0)				; $002E
		move.w	Offset_0x0393FA(PC,d0),d1
		move.w	(Water_Level_Move).w,d2			; $FFFFF646
		add.w	D1,d2
		move.w	D2, Obj_Y(A0)					; $0014
		add.w	D0,d0
		move.l	Offset_0x039404(PC,d0), Obj_Child_Data(A0)	 ; $0030
		rts
;-------------------------------------------------------------------------------
Offset_0x0393FA:
		dc.w	$FFF8, $FFE8, $FFD8, $FFC8, $FFB8
;-------------------------------------------------------------------------------
Offset_0x039404:
		dc.l	Offset_0x039835
		dc.l	Offset_0x03986C
		dc.l	Offset_0x03989B
		dc.l	Offset_0x0398C2
		dc.l	Offset_0x0398E1
;-------------------------------------------------------------------------------
Offset_0x039418:
		move.w	Obj_X(A0),d0					; $0010
		move.w	(Water_Level_Move).w,d1			; $FFFFF646
		addq.w	#$08,d1
		move.l	#$00020000,d2
		lea	(Obj_Player_One).w,a1				; $FFFFB000
		bsr.w	Offset_0x039434
		lea	(Obj_Player_Two).w,a1				; $FFFFB04A
Offset_0x039434:
		tst.b	Obj_Timer(A1)					; $002E
		bne.s	Offset_0x03944C
		cmp.w	Obj_Y(A1),d1					; $0014
		bcc.s	Offset_0x03944C
		cmp.w	Obj_X(A1),d0					; $0010
		bcc.s	Offset_0x039448
		neg.l	D2
Offset_0x039448:
		add.l	D2, Obj_X(A1)					; $0010
Offset_0x03944C:
		rts
;-------------------------------------------------------------------------------
Offset_0x03944E:
		move.w	Obj_Child_Ref(A0),a1					; $0046
		moveq	#0,d0
		move.b	Obj_Control_Var_09(A1),d0				; $0039
		lsl.w	#$02,d0
		lea	Offset_0x039518(PC),a1
		lea	(A1,d0),a1
		moveq	#$42,d4
		lea	(Obj_Player_One).w,a2				; $FFFFB000
		bsr.w	Offset_0x039472
		moveq	#$43,d4
		lea	(Obj_Player_Two).w,a2				; $FFFFB04A
Offset_0x039472:
		cmpi.b	#$04, Obj_Routine(A2)					; $0005
		beq.w	Offset_0x039508
		tst.b	Obj_Timer(A2)					; $002E
		beq.s	Offset_0x039488
		tst.b	(A0,d4)
		bne.s	Offset_0x0394C2
Offset_0x039488:
		move.w	Obj_Y(A0),d0					; $0014
		move.w	Obj_Y(A2),d2					; $0014
		add.w	(A1),d0
		cmp.w	D0,d2
		bcs.w	Offset_0x039556
		add.w	$0002(A1),d0
		cmp.w	D0,d2
		bcc.w	Offset_0x039556
		move.w	Obj_X(A0),d0					; $0010
		move.w	Obj_X(A2),d2					; $0010
		sub.w	D2,d0
		addi.w	#$0010,d0
		cmpi.w	#$0020,d0
		bcc.w	Offset_0x039556
		tst.b	Obj_Timer(A2)					; $002E
		bne.s	Offset_0x0394C2
		bsr.w	Offset_0x039530
Offset_0x0394C2:
		move.w	Obj_Y(A0),d0					; $0014
		move.w	Obj_Y(A2),d2					; $0014
		add.w	(A1)+,d0
		cmp.w	D0,d2
		bcs.w	Offset_0x039558
		move.w	Obj_X(A2),d0					; $0010
		move.w	Obj_Speed_X(A2),d1					; $0018
		move.w	#$0080,d2
		sub.w	Obj_X(A0),d0					; $0010
		cmpi.w	#$FFEE,d0
		ble.s	Offset_0x039558
		cmpi.w	#$0012,d0
		bge.s	Offset_0x039558
		tst.w	D0
		bmi.s	Offset_0x0394F4
		neg.w	D2
Offset_0x0394F4:
		add.w	D2,d1
		move.w	D1, Obj_Speed_X(A2)					; $0018
		ext.l	D1
		lsl.l	#$08,d1
		add.l	D1, Obj_X(A2)					; $0010
		subq.w	#$02, Obj_Y(A2)					; $0014
		rts
Offset_0x039508:
		jsr	(Displace_Player_Offset)			; Offset_0x04315A
		clr.b	(A0,d4)
		clr.b	Obj_Timer(A2)					; $002E
		rts
;-------------------------------------------------------------------------------
Offset_0x039518:
		dc.w	$FFE8, $0048, $FFE0, $0058, $FFD8, $0068, $FFD0, $0078
		dc.w	$FFC8, $0088, $FFB8, $0088
;-------------------------------------------------------------------------------
Offset_0x039530:
		st	 (A0,d4)
		bset	#$01, Obj_Status(A2)					; $002A
		move.b	#$01, Obj_Timer(A2)					; $002E
		move.b	#$18, Obj_Ani_Number(A2)				; $0020
		clr.b	Obj_Control_Var_0D(A2)				 ; $003D
		clr.w	Obj_Speed_X(A2)					; $0018
		clr.w	Obj_Speed_Y(A2)					; $001A
		clr.w	Obj_Inertia(A2)					; $001C
Offset_0x039556:
		rts
Offset_0x039558:
		clr.b	(A0,d4)
		bset	#$01, Obj_Status(A2)					; $002A
		clr.b	Obj_Timer(A2)					; $002E
		move.b	#0, Obj_Routine(A2)					; $0005
		move.b	#$02, Obj_Ani_Number(A2)				; $0020
		move.w	#$FE00, Obj_Speed_Y(A2)				; $001A
		rts
;-------------------------------------------------------------------------------
Offset_0x03957A:
		tst.b	Obj_Control_Var_12(A0)				 ; $0042
		beq.s	Offset_0x03958A
		clr.b	Obj_Control_Var_12(A0)				 ; $0042
		lea	(Obj_Player_One).w,a2				; $FFFFB000
		bsr.s	Offset_0x039558
Offset_0x03958A:
		tst.b	Obj_Control_Var_13(A0)				 ; $0043
		beq.s	Offset_0x03959A
		clr.b	Obj_Control_Var_13(A0)				 ; $0043
		lea	(Obj_Player_Two).w,a2				; $FFFFB04A
		bsr.s	Offset_0x039558
Offset_0x03959A:
		rts
;-------------------------------------------------------------------------------
Offset_0x03959C:
		cmpi.b	#$30, Obj_Ani_Frame(A0)				; $0023
		bcc.s	Offset_0x0395EC
		lea	Offset_0x0395EE(PC),a1
		lea	(Obj_Player_One).w,a2				; $FFFFB000
		bsr.w	Offset_0x0395B8
		lea	Offset_0x0395EE(PC),a1
		lea	(Obj_Player_Two).w,a2				; $FFFFB04A
Offset_0x0395B8:
		tst.b	Obj_Timer(A2)					; $002E
		bne.s	Offset_0x0395EC
		move.w	Obj_X(A0),d0					; $0010
		move.w	Obj_X(A2),d1					; $0010
		add.w	(A1)+,d0
		cmp.w	D0,d1
		bcs.s	Offset_0x0395EC
		add.w	(A1)+,d0
		cmp.w	D0,d1
		bcc.s	Offset_0x0395EC
		move.w	Obj_Y(A0),d0					; $0014
		move.w	Obj_Y(A2),d1					; $0014
		add.w	(A1)+,d0
		cmp.w	D0,d1
		bcs.s	Offset_0x0395EC
		add.w	(A1)+,d0
		cmp.w	D0,d1
		bcc.s	Offset_0x0395EC
		move.w	#$F800, Obj_Speed_Y(A2)				; $001A
Offset_0x0395EC:
		rts
;-------------------------------------------------------------------------------
Offset_0x0395EE:
		dc.w	$FFF4, $0018, $FFC8, $0040
;-------------------------------------------------------------------------------
Offset_0x0395F6:
		move.w	Obj_Child_Ref(A0),a1					; $0046
		move.w	Obj_X(A0),d0					; $0010
		move.w	Obj_Speed_X(A0),d1					; $0018
		move.w	#$0080,d2
		sub.w	Obj_X(A1),d0					; $0010
		tst.w	D0
		bmi.s	Offset_0x039610
		neg.w	D2
Offset_0x039610:
		add.w	D2,d1
		move.w	D1, Obj_Speed_X(A0)					; $0018
		ext.l	D1
		lsl.l	#$08,d1
		add.l	D1, Obj_X(A0)					; $0010
		rts
;-------------------------------------------------------------------------------
Offset_0x039620:
		tst.l	(A0)
		beq.s	Offset_0x039676
		tst.b	Obj_Col_Flags(A0)				; $0028
		bne.s	Offset_0x039676
		tst.b	Obj_Boss_Hit(A0)				 ; $0029
		beq.s	Offset_0x039678
		tst.b	Obj_Ani_Number(A0)					; $0020
		bne.s	Offset_0x039644
		move.b	#$20, Obj_Ani_Number(A0)				; $0020
		moveq	#Boss_Hit_Sfx,d0					; $7C
		jsr	(Play_Music).l				 ; Offset_0x001176
Offset_0x039644:
		bset	#$06, Obj_Status(A0)					; $002A
		moveq	#0,d0
		btst	#0, Obj_Ani_Number(A0)				; $0020
		bne.s	Offset_0x039656
		addq.w	#$06,d0
Offset_0x039656:
		lea	Offset_0x0396A0(PC),a1
		lea	Offset_0x0396A6(PC,d0),a2
		jsr	(Move_0x06_Bytes_A2_A1)		; Offset_0x043260
		subq.b	#$01, Obj_Ani_Number(A0)				; $0020
		bne.s	Offset_0x039676
		bclr	#$06, Obj_Status(A0)					; $002A
		move.b	Obj_Ani_Time_2(A0), Obj_Col_Flags(A0)	; $0025, $0028
Offset_0x039676:
		rts
Offset_0x039678:
		move.l	#Display_Sprite_Wait,(A0)			; Offset_0x042F8E
		clr.b	(Update_HUD_timer).w			; $FFFFFE1E
		bset	#$07, Obj_Status(A0)					; $002A
		clr.b	Obj_Col_Flags(A0)				; $0028
		clr.b	Obj_Boss_Hit(A0)				 ; $0029
		move.w	#$003F, Obj_Timer(A0)					; $002E
		move.l	#Offset_0x038CBC, Obj_Child(A0)			; $0034
		rts
;-------------------------------------------------------------------------------
Offset_0x0396A0:
		dc.w	(Palette_Row_1_Offset+$14)				; $ED34
		dc.w	(Palette_Row_1_Offset+$16)				; $ED36
		dc.w	(Palette_Row_1_Offset+$1C)				; $ED3C
;-------------------------------------------------------------------------------
Offset_0x0396A6:
		dc.w	$0006, $0020, $0624, $0EEE, $0EEE, $0EEE
;-------------------------------------------------------------------------------
Offset_0x0396B2:
		move.w	Obj_Height_3(A0),a1					; $0044
		btst	#$07, Obj_Status(A1)					; $002A
		beq.s	Offset_0x0396DE
		bset	#$07, Obj_Status(A0)					; $002A
		move.l	#Offset_0x038F70,(A0)
		move.w	#$0100, Obj_Speed_Y(A0)				; $001A
		move.l	#Go_Delete_Object_A0_2, Obj_Child(A0) ; Offset_0x042D4C, $0034
		jsr	(Displace_Player_Offset)			; Offset_0x04315A
Offset_0x0396DE:
		rts
;-------------------------------------------------------------------------------
Offset_0x0396E0:
		move.w	Obj_Child_Ref(A0),a1					; $0046
		btst	#$07, Obj_Status(A1)					; $002A
		beq.s	Offset_0x0396F8
		bset	#$07, Obj_Status(A0)					; $002A
		move.b	#$04, Obj_Routine(A0)					; $0005
Offset_0x0396F8:
		rts
;-------------------------------------------------------------------------------
Offset_0x0396FA:
		move.w	Obj_Control_Var_0A(A0),d0				; $003A
		sub.w	Obj_Y(A0),d0					; $0014
		bcs.s	Offset_0x03971C
		andi.w	#$00F0,d0
		lsr.w	#$04,d0
		move.b	D0, Obj_Control_Var_09(A0)				; $0039
		tst.w	Obj_Speed_Y(A0)					; $001A
		bpl.s	Offset_0x03971A
		cmpi.b	#$05,d0
		bcc.s	Offset_0x03971C
Offset_0x03971A:
		rts
Offset_0x03971C:
		move.l	Obj_Child(A0),a2				; $0034
		jmp	(A2)
;-------------------------------------------------------------------------------
Screw_Mobile_Setup_Data:						; Offset_0x039722
		dc.l	Screw_Mobile_Mappings			; Offset_0x11044C
		dc.w	$A36B, $0100
		dc.b	$2C, $1C, $00, $21
;-------------------------------------------------------------------------------
Offset_0x03972E:
		dc.w	$0200
		dc.b	$0C, $04, $01, $00
;-------------------------------------------------------------------------------
Offset_0x039734:
		dc.w	$0200
		dc.b	$1C, $04, $02, $00
;-------------------------------------------------------------------------------
Offset_0x03973A:
		dc.w	$0200
		dc.b	$1C, $04, $06, $00
;-------------------------------------------------------------------------------
Offset_0x039740:
		dc.w	$836B, $0080
		dc.b	$14, $0C, $17, $00
;-------------------------------------------------------------------------------
Offset_0x039748:
		dc.w	$0080
		dc.b	$14, $30, $0D, $00
;-------------------------------------------------------------------------------
Offset_0x03974E:
		dc.w	$0000
		dc.b	$10, $04, $1A, $00
;-------------------------------------------------------------------------------
Offset_0x039754:
		dc.w	$836B, $0080
		dc.b	$0C, $08, $18, $00
;-------------------------------------------------------------------------------
Offset_0x03975C:
		dc.l	Screw_Mobile_Mappings			; Offset_0x11044C
		dc.w	$836B, $0100
		dc.b	$0C, $10, $08, $00
;-------------------------------------------------------------------------------
Jawz_Explosion_Setup_Data:					; Offset_0x039768
		dc.l	Object_Hit_Mappings			; Offset_0x013EF2
		dc.w	$85A0, $0080
		dc.b	$0C, $0C, $00, $8B
;-------------------------------------------------------------------------------
Offset_0x039774:
		dc.l	Sonic_Underwater_Mappings			; Offset_0x025872
		dc.w	$845C, $0280
		dc.b	$10, $10, $00, $00
;-------------------------------------------------------------------------------
Offset_0x039780:
		dc.w	$0004
		dc.l	Offset_0x03916C
		dc.b	$23, $12
		dc.l	Offset_0x03916C
		dc.b	$1B, $0A
		dc.l	Offset_0x03916C
		dc.b	$13, $0A
		dc.l	Offset_0x0392FC
		dc.b	$00, $1C
		dc.l	Offset_0x038D5E
		dc.b	$00, $24
;-------------------------------------------------------------------------------
Offset_0x0397A0:
		dc.w	$0000
		dc.l	Offset_0x03916C
		dc.b	$13, $0A
;-------------------------------------------------------------------------------
Offset_0x0397A8:
		dc.w	$0000
		dc.l	Jawz_Explosion				; Offset_0x03931C
		dc.w	$0000
;-------------------------------------------------------------------------------
Offset_0x0397B0:
		dc.w	$0000
		dc.l	Offset_0x038E16
		dc.b	$00, $00
;-------------------------------------------------------------------------------
Offset_0x0397B8:
		dc.w	$0000
		dc.l	Offset_0x038F86
		dc.b	$00, $00
;-------------------------------------------------------------------------------
Offset_0x0397C0:
		dc.w	$0001
		dc.l	Offset_0x038FFE
		dc.b	$FC, $00
		dc.l	Offset_0x038FFE
		dc.b	$04, $00
;-------------------------------------------------------------------------------
Offset_0x0397CE:
		dc.w	$0000
		dc.l	Offset_0x03904A
		dc.b	$00, $00
;-------------------------------------------------------------------------------
Offset_0x0397D6:
		dc.w	$0004
		dc.l	Offset_0x03906C
;-------------------------------------------------------------------------------
Offset_0x0397DC:
		dc.w	$0013
		dc.l	Offset_0x0390B4
;-------------------------------------------------------------------------------
Offset_0x0397E2:
		dc.w	$0000
		dc.l	Hz_Robotnik_Ship				; Offset_0x0362B8
		dc.b	$00, $0C
;-------------------------------------------------------------------------------
Offset_0x0397EA:
		dc.b	$07, $08, $02, $03, $04, $05, $FC
;-------------------------------------------------------------------------------
Offset_0x0397F1:
		dc.b	$00, $02, $03, $04, $05, $FC
;-------------------------------------------------------------------------------
Offset_0x0397F7:
		dc.b	$07, $02, $03, $04, $05, $FC
;-------------------------------------------------------------------------------
Offset_0x0397FD:
		dc.b	$05, $08, $06, $07, $FC
;-------------------------------------------------------------------------------
Offset_0x039802:
		dc.b	$03, $17, $17, $22, $16, $21, $15, $20
		dc.b	$F4
;-------------------------------------------------------------------------------
Offset_0x03980B:
		dc.b	$03, $15, $20, $FC
;-------------------------------------------------------------------------------
Offset_0x03980F:
		dc.b	$03, $0D, $0F, $11, $FC
;-------------------------------------------------------------------------------
Offset_0x039814:
		dc.b	$03, $24, $25, $26, $FC
;-------------------------------------------------------------------------------
Offset_0x039819:
		dc.b	$03, $27, $28, $29, $FC
;-------------------------------------------------------------------------------
Offset_0x03981E:
		dc.b	$03, $2A, $2B, $2C, $FC
;-------------------------------------------------------------------------------
Offset_0x039823:
		dc.b	$03, $2D, $2E, $2F, $FC
;-------------------------------------------------------------------------------
Offset_0x039828:
		dc.b	$01, $1A, $23, $FC
;-------------------------------------------------------------------------------
Offset_0x03982C:
		dc.b	$18, $02, $18, $02, $30, $03, $19, $04
		dc.b	$F4
;-------------------------------------------------------------------------------
Offset_0x039835:
		dc.b	$08, $00, $08, $00, $1B, $00, $09, $00
		dc.b	$1C, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0B, $02
		dc.b	$1E, $02, $0C, $03, $1F, $03, $F4
;-------------------------------------------------------------------------------
Offset_0x03986C:
		dc.b	$08, $00, $08, $00, $1B, $00, $09, $00
		dc.b	$1C, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0B, $02
		dc.b	$1E, $02, $0C, $03, $1F, $03, $F4
;-------------------------------------------------------------------------------
Offset_0x03989B:
		dc.b	$08, $00, $08, $00, $1B, $00, $09, $00
		dc.b	$1C, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0B, $02
		dc.b	$1E, $02, $0C, $03, $1F, $03, $F4
;-------------------------------------------------------------------------------
Offset_0x0398C2:
		dc.b	$08, $00, $08, $00, $1B, $00, $09, $00
		dc.b	$1C, $00, $0A, $00, $1D, $00, $0A, $00
		dc.b	$1D, $00, $0A, $00, $1D, $00, $0B, $02
		dc.b	$1E, $02, $0C, $03, $1F, $03, $F4
;-------------------------------------------------------------------------------
Offset_0x0398E1:
		dc.b	$08, $00, $08, $00, $1B, $00, $09, $00
		dc.b	$1C, $00, $0A, $00, $1D, $00, $0B, $02
		dc.b	$1E, $02, $0C, $03, $1F, $03, $F4
;-------------------------------------------------------------------------------
Offset_0x0398F8:
		dc.b	$07, $00, $00, $01, $02, $03, $04, $F4
;-------------------------------------------------------------------------------
Pal_Hz_Boss:							; Offset_0x039900
		dc.w	$0000, $0EEE, $0000, $0000, $0000, $00EE, $0088, $0000
		dc.w	$008E, $004E, $0006, $0020, $0E84, $0A24, $0624, $0044

Obj_0xAF_MGz_Drill_Mobile:                                     ; Offset_0x039920
		include "data\objects\obj_0xAF.asm"
Obj_0xB0_MGz_Drill_Mobile:                                     ; Offset_0x039C7E
		include "data\objects\obj_0xB0.asm"
Obj_0xB1_MGz_Drill_Mobile:                                     ; Offset_0x039F9E
		include "data\objects\obj_0xB1.asm"
Obj_0x8E_CNz_Bowling_Spin:                                     ; Offset_0x03B01A
		include "data\objects\obj_0x8E.asm"
Obj_0x8D_CNz_Graviton_Mobile:                                  ; Offset_0x03B9A0
		include "data\objects\obj_0x8D.asm"
Obj_0x8F_FBz_Gapsule:                                          ; Offset_0x03C27C
		include "data\objects\obj_0x8F.asm"
Obj_0xB6_Barrier_Eggman:                                       ; Offset_0x03CE96
		include "data\objects\obj_0xB6.asm"
Obj_0xB4_FBz_Hang_Mobile:                                      ; Offset_0x03D4DE
		include "data\objects\obj_0xB4.asm"
Obj_0xB3_Iz_Big_Icedus:                                        ; Offset_0x03DCB0
		include "data\objects\obj_0xB3.asm"
Obj_0xB2_Iz_Freezer_Mobile:                                    ; Offset_0x03E48C
		include "data\objects\obj_0xB2.asm"
Obj_0x85_LBz_Twin_Hammer:                                      ; Offset_0x03EC12
		include "data\objects\obj_0x85.asm"
Obj_0x86_LBz_Beam_Rocket:                                      ; Offset_0x03F11A
		include "data\objects\obj_0x86.asm"
Obj_0x8C_LBz_Ball_Shooter:                                     ; Offset_0x03FE88
		include "data\objects\obj_0x8C.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 84 - Hey Ho (Mushroom Valley Miniboss)
; ---------------------------------------------------------------------------
; Offset_0x040704: Obj_0x84_MVz_Hey_Ho:
Obj84_HeyHo:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	HeyHo_Index(pc,d0.w),d1
		jsr	HeyHo_Index(pc,d1.w)
		jmp	(DisplaySprite).l
; ===========================================================================
; Offset_0x040718:
HeyHo_Index:	dc.w HeyHo_Init-HeyHo_Index
		dc.w HeyHo_Main-HeyHo_Index
; ===========================================================================
; Offset_0x04071C:
HeyHo_Init:
		lea	HeyHo_ObjData(pc),a1
		jsr	SetupObjectAttributes(pc)
		move.l	#Offset_0x040840,Obj_Child_Data(a0)
		lea	HeyHo_ObjArray(pc),a2
		jmp	SetupChildObject(pc)

Offset_0x040734:
		rts
; ===========================================================================
; Offset_0x040736:
HeyHo_Main:
		jmp	Animate_Raw_Multi_Delay(pc)
; ===========================================================================

Offset_0x04073A:
		lea	HeyHo_ObjData2(pc),a1
		jsr	SetupObjectAttributes2(pc)
		move.l	#Offset_0x04074A,(a0)
		rts
; ===========================================================================

Offset_0x04074A:
		btst	#0,(Vint_runcount+3).w
		bne.w	Offset_0x040734
		bsr.w	Offset_0x040760
		jsr	Refresh_Child_Position_Adjusted(pc)
		jmp	Child_Display_Touch_Or_Delete(pc)
; ---------------------------------------------------------------------------

Offset_0x040760:
		move.w	Obj_Child_Ref(a0),a1
		moveq	#0,d0
		move.b	Obj_Map_Id(a1),d0
		move.b	HeyHo_MapFrames(pc,d0.w),Obj_Map_Id(a0)
		add.w	d0,d0
		move.w	d0,d1
		lea	HeyHo_Priority(pc,d0.w),a2
		move.w	(a2)+,Obj_Priority(a0)
		add.w	d1,d1
		add.b	Obj_Subtype(a0),d1
		lea	HeyHo_Position(pc,d1.w),a2
		move.w	(a2)+,Obj_Control_Var_12(a0)
		rts

; ===========================================================================
; Offset_0x04078C:
HeyHo_MapFrames:
		dc.b	$14, $14, $14, $14, $14, $15, $14, $14
		dc.b	$14, $14, $14, $14, $14, $14, $14, $14
		dc.b	$14, $14, $14, $14
; ---------------------------------------------------------------------------
; Offset_0x0407A0:
HeyHo_Position:
		dc.b	$0B, $1C, $01, $1C, $0B, $1C, $01, $1C
		dc.b	$0B, $1C, $01, $1C, $0B, $1C, $01, $1C
		dc.b	$F8, $1C, $FF, $1C, $E8, $12, $EF, $12
		dc.b	$F8, $1C, $FF, $1C, $EF, $1C, $F6, $1C
		dc.b	$F8, $1C, $FF, $1C, $EF, $1C, $F6, $1C
		dc.b	$F8, $1C, $0B, $1C, $F8, $1B, $0B, $1B
		dc.b	$F8, $1C, $0B, $1C, $F8, $1C, $0B, $1C
		dc.b	$F8, $1C, $FF, $1C, $F0, $1C, $F7, $1C
		dc.b	$EF, $1C, $F6, $1C, $F8, $1C, $0B, $1C
		dc.b	$0C, $1C, $06, $1C, $0B, $1C, $01, $1C
; ---------------------------------------------------------------------------
; Offset_0x0407F0:
HeyHo_Priority:
		dc.w	$300,$300,$300,$300,$300,$300,$300,$300
		dc.w	$300,$300,$200,$200,$200,$200,$300,$300
		dc.w	$300,$200,$300,$300

; ===========================================================================
; Offset_0x040818: Hey_Ho_Setup_Data:
HeyHo_ObjData:
		objdata	$280, $20, $20,  0, 0, $A380, Hey_Ho_Mappings
; Offset_0x040824: Hey_Ho_Setup_Data_2:
HeyHo_ObjData2:
		objdata	$300, $20, $20, $14, 0, $8380

; Offset_0x04082C:
HeyHo_ObjArray:
		dc.w	$0001
		dc.l	Offset_0x04073A
		dc.b	$00, $00
		dc.l	Offset_0x04073A
		dc.b	$00, $00

; ---------------------------------------------------------------------------
; Offset_0x04083A:
		dc.b	$07, $00, $01, $02, $03, $FC
; ---------------------------------------------------------------------------

Offset_0x040840:
		dc.b	$04, $27, $04, $01, $06, $01, $08, $01
		dc.b	$0B, $01, $0C, $27, $0A, $01, $08, $01
		dc.b	$06, $01, $04, $27, $06, $01, $08, $01
		dc.b	$0C, $27, $0A, $02, $0E, $03, $0F, $07
		dc.b	$10, $07, $0F, $07, $10, $07, $0F, $07
		dc.b	$10, $31, $09, $01, $07, $01, $FC, $00
; ---------------------------------------------------------------------------
; Offset_0x040870:
Hey_Ho_Mappings:
		dc.w	Offset_0x04089C-Hey_Ho_Mappings
		dc.w	Offset_0x040934-Hey_Ho_Mappings
		dc.w	Offset_0x0409CC-Hey_Ho_Mappings
		dc.w	Offset_0x040A64-Hey_Ho_Mappings
		dc.w	Offset_0x040AFC-Hey_Ho_Mappings
		dc.w	Offset_0x040B64-Hey_Ho_Mappings
		dc.w	Offset_0x040BCC-Hey_Ho_Mappings
		dc.w	Offset_0x040C2E-Hey_Ho_Mappings
		dc.w	Offset_0x040C90-Hey_Ho_Mappings
		dc.w	Offset_0x040CE0-Hey_Ho_Mappings
		dc.w	Offset_0x040D30-Hey_Ho_Mappings
		dc.w	Offset_0x040D80-Hey_Ho_Mappings
		dc.w	Offset_0x040DD0-Hey_Ho_Mappings
		dc.w	Offset_0x040E14-Hey_Ho_Mappings
		dc.w	Offset_0x040E64-Hey_Ho_Mappings
		dc.w	Offset_0x040EA8-Hey_Ho_Mappings
		dc.w	Offset_0x040EEC-Hey_Ho_Mappings
		dc.w	Offset_0x040F30-Hey_Ho_Mappings
		dc.w	Offset_0x040F6E-Hey_Ho_Mappings
		dc.w	Offset_0x040FE2-Hey_Ho_Mappings
		dc.w	Offset_0x041068-Hey_Ho_Mappings
		dc.w	Offset_0x041070-Hey_Ho_Mappings
Offset_0x04089C:
		dc.w	$0019
		dc.w	$1804, $006F, $0002
		dc.w	$2009, $0071, $FFFA
		dc.w	$F80A, $004C, $0002
		dc.w	$0804, $0055, $000A
		dc.w	$1009, $0057, $0002
		dc.w	$0805, $0063, $000A
		dc.w	$F001, $00D4, $FFFB
		dc.w	$F005, $00CE, $FFF2
		dc.w	$F005, $00CA, $FFF2
		dc.w	$E804, $00D8, $FFF2
		dc.w	$E80F, $0011, $FFF4
		dc.w	$F002, $0021, $FFEC
		dc.w	$0801, $0024, $FFEC
		dc.w	$080D, $0026, $FFF4
		dc.w	$1804, $0067, $FFE2
		dc.w	$2009, $0069, $FFDA
		dc.w	$F80A, $004C, $FFE2
		dc.w	$0804, $0055, $FFEA
		dc.w	$1009, $0057, $FFE2
		dc.w	$0805, $0063, $FFEA
		dc.w	$100B, $008D, $FFCA
		dc.w	$3009, $0099, $FFCA
		dc.w	$2600, $0077, $FFF2
		dc.w	$2600, $0077, $0012
		dc.w	$0005, $00DA, $0003
Offset_0x040934:
		dc.w	$0019
		dc.w	$1904, $006F, $0002
		dc.w	$2109, $0071, $FFFA
		dc.w	$F80A, $004C, $0002
		dc.w	$0904, $0055, $000A
		dc.w	$1109, $0057, $0002
		dc.w	$0905, $0063, $000A
		dc.w	$F001, $00D4, $FFFB
		dc.w	$F005, $00CE, $FFF2
		dc.w	$F005, $00CA, $FFF2
		dc.w	$E804, $00D8, $FFF2
		dc.w	$E80F, $0011, $FFF4
		dc.w	$F002, $0021, $FFEC
		dc.w	$0801, $0024, $FFEC
		dc.w	$080D, $0026, $FFF4
		dc.w	$1904, $0067, $FFE2
		dc.w	$2109, $0069, $FFDA
		dc.w	$F80A, $004C, $FFE2
		dc.w	$0904, $0055, $FFEA
		dc.w	$1109, $0057, $FFE2
		dc.w	$0905, $0063, $FFEA
		dc.w	$110B, $008D, $FFCA
		dc.w	$3109, $0099, $FFCA
		dc.w	$2700, $0077, $FFF2
		dc.w	$2700, $0077, $0012
		dc.w	$0005, $00DA, $0003
Offset_0x0409CC:
		dc.w	$0019
		dc.w	$1A04, $006F, $0002
		dc.w	$2209, $0071, $FFFA
		dc.w	$F80A, $004C, $0002
		dc.w	$0A04, $0055, $000A
		dc.w	$1209, $0057, $0002
		dc.w	$0905, $0063, $000A
		dc.w	$F001, $00D4, $FFFB
		dc.w	$F005, $00CE, $FFF2
		dc.w	$F005, $00CA, $FFF2
		dc.w	$E804, $00D8, $FFF2
		dc.w	$E80F, $0011, $FFF4
		dc.w	$F002, $0021, $FFEC
		dc.w	$0801, $0024, $FFEC
		dc.w	$080D, $0026, $FFF4
		dc.w	$1A04, $0067, $FFE2
		dc.w	$2209, $0069, $FFDA
		dc.w	$F80A, $004C, $FFE2
		dc.w	$0A04, $0055, $FFEA
		dc.w	$1209, $0057, $FFE2
		dc.w	$0905, $0063, $FFEA
		dc.w	$120B, $008D, $FFCA
		dc.w	$3209, $0099, $FFCA
		dc.w	$2800, $0077, $FFF2
		dc.w	$2800, $0077, $0012
		dc.w	$0005, $00DA, $0003
Offset_0x040A64:
		dc.w	$0019
		dc.w	$1B04, $006F, $0002
		dc.w	$2309, $0071, $FFFA
		dc.w	$F80A, $004C, $0002
		dc.w	$0B04, $0055, $000A
		dc.w	$1309, $0057, $0002
		dc.w	$0905, $0063, $000A
		dc.w	$F001, $00D4, $FFFB
		dc.w	$F005, $00CE, $FFF2
		dc.w	$F005, $00CA, $FFF2
		dc.w	$E804, $00D8, $FFF2
		dc.w	$E80F, $0011, $FFF4
		dc.w	$F002, $0021, $FFEC
		dc.w	$0801, $0024, $FFEC
		dc.w	$080D, $0026, $FFF4
		dc.w	$1B04, $0067, $FFE2
		dc.w	$2309, $0069, $FFDA
		dc.w	$F80A, $004C, $FFE2
		dc.w	$0B04, $0055, $FFEA
		dc.w	$1309, $0057, $FFE2
		dc.w	$0905, $0063, $FFEA
		dc.w	$130B, $008D, $FFCA
		dc.w	$3309, $0099, $FFCA
		dc.w	$2900, $0077, $FFF2
		dc.w	$2900, $0077, $0012
		dc.w	$0005, $00DA, $0003
Offset_0x040AFC:
		dc.w	$0011
		dc.w	$F008, $0082, $0000
		dc.w	$F80D, $0085, $0000
		dc.w	$F005, $0078, $FFF0
		dc.w	$0009, $007C, $FFE8
		dc.w	$E00E, $00E3, $FFB8
		dc.w	$F808, $00EF, $FFC0
		dc.w	$F000, $00E2, $FFD8
		dc.w	$F100, $00E2, $FFE0
		dc.w	$F200, $00E2, $FFE8
		dc.w	$E805, $00BC, $0003
		dc.w	$FC00, $00C8, $000B
		dc.w	$E80E, $002E, $FFE8
		dc.w	$F005, $003A, $0008
		dc.w	$0001, $003E, $FFF0
		dc.w	$000E, $0040, $FFF8
		dc.w	$0005, $00DA, $FFF0
		dc.w	$0005, $00DA, $FFF7
Offset_0x040B64:
		dc.w	$0011
		dc.w	$F008, $0082, $0000
		dc.w	$F80D, $0085, $0000
		dc.w	$F005, $0078, $FFF0
		dc.w	$0009, $007C, $FFE8
		dc.w	$E00E, $00E3, $FFB8
		dc.w	$F808, $00EF, $FFC0
		dc.w	$F000, $00E2, $FFD8
		dc.w	$F100, $00E2, $FFE0
		dc.w	$F200, $00E2, $FFE8
		dc.w	$E805, $00BC, $0003
		dc.w	$F800, $00C8, $0011
		dc.w	$E80E, $002E, $FFE8
		dc.w	$F005, $003A, $0008
		dc.w	$0001, $003E, $FFF0
		dc.w	$000E, $0040, $FFF8
		dc.w	$0005, $00DE, $FFED
		dc.w	$0005, $00DE, $FFF4
Offset_0x040BCC:
		dc.w	$0010
		dc.w	$F308, $0082, $0008
		dc.w	$FB0D, $0085, $0008
		dc.w	$F305, $0078, $FFF8
		dc.w	$0309, $007C, $FFF0
		dc.w	$E805, $00BC, $0003
		dc.w	$F800, $00C8, $0011
		dc.w	$E50E, $00E3, $FFC8
		dc.w	$FD08, $00EF, $FFD0
		dc.w	$F500, $00E2, $FFE8
		dc.w	$F600, $00E2, $FFF0
		dc.w	$E80E, $002E, $FFE8
		dc.w	$F005, $003A, $0008
		dc.w	$0001, $003E, $FFF0
		dc.w	$000E, $0040, $FFF8
		dc.w	$0005, $00DA, $FFF0
		dc.w	$0005, $00DA, $FFF7
Offset_0x040C2E:
		dc.w	$0010
		dc.w	$F308, $0082, $FFFF
		dc.w	$FB0D, $0085, $FFFF
		dc.w	$F305, $0078, $FFEF
		dc.w	$0309, $007C, $FFE7
		dc.w	$E805, $00C4, $FFFA
		dc.w	$F800, $00C8, $0008
		dc.w	$E50E, $00E3, $FFBF
		dc.w	$FD08, $00EF, $FFC7
		dc.w	$F500, $00E2, $FFDF
		dc.w	$F600, $00E2, $FFE7
		dc.w	$E80E, $002E, $FFDF
		dc.w	$F005, $003A, $FFFF
		dc.w	$0001, $003E, $FFE7
		dc.w	$000E, $0040, $FFEF
		dc.w	$0005, $00DA, $FFE7
		dc.w	$0005, $00DA, $FFEE
Offset_0x040C90:
		dc.w	$000D
		dc.w	$E80E, $00E3, $FFE8
		dc.w	$0008, $00EF, $FFF0
		dc.w	$F800, $00E2, $0008
		dc.w	$F805, $0078, $0010
		dc.w	$0809, $007C, $0008
		dc.w	$E805, $00BC, $0003
		dc.w	$F800, $00C8, $0011
		dc.w	$E80E, $002E, $FFE8
		dc.w	$F005, $003A, $0008
		dc.w	$0001, $003E, $FFF0
		dc.w	$000E, $0040, $FFF8
		dc.w	$0005, $00DA, $FFF0
		dc.w	$0005, $00DA, $FFF7
Offset_0x040CE0:
		dc.w	$000D
		dc.w	$E80E, $00E3, $FFDF
		dc.w	$0008, $00EF, $FFE7
		dc.w	$F800, $00E2, $FFFF
		dc.w	$F805, $0078, $0007
		dc.w	$0809, $007C, $FFFF
		dc.w	$E805, $00C4, $FFFA
		dc.w	$F800, $00C8, $0008
		dc.w	$E80E, $002E, $FFDF
		dc.w	$F005, $003A, $FFFF
		dc.w	$0001, $003E, $FFE7
		dc.w	$000E, $0040, $FFEF
		dc.w	$0005, $00DA, $FFE7
		dc.w	$0005, $00DA, $FFEE
Offset_0x040D30:
		dc.w	$000D
		dc.w	$F80A, $004C, $0008
		dc.w	$0005, $00DA, $FFF0
		dc.w	$0005, $00DA, $0003
		dc.w	$E80B, $0000, $FFE8
		dc.w	$0808, $000C, $FFE8
		dc.w	$1004, $000F, $FFF0
		dc.w	$E80B, $0800, $0000
		dc.w	$0808, $080C, $0000
		dc.w	$1004, $080F, $0000
		dc.w	$F80A, $004C, $FFE4
		dc.w	$FE0A, $00AD, $0000
		dc.w	$0609, $00B6, $0018
		dc.w	$EB00, $00C9, $FFFC
Offset_0x040D80:
		dc.w	$000D
		dc.w	$F70A, $004C, $0008
		dc.w	$FF05, $00DA, $FFF0
		dc.w	$FF05, $00DA, $0003
		dc.w	$E70B, $0000, $FFE8
		dc.w	$0708, $000C, $FFE8
		dc.w	$0F04, $000F, $FFF0
		dc.w	$E70B, $0800, $0000
		dc.w	$0708, $080C, $0000
		dc.w	$0F04, $080F, $0000
		dc.w	$F70A, $004C, $FFE4
		dc.w	$FD0A, $00AD, $0000
		dc.w	$0509, $00B6, $0018
		dc.w	$EA00, $00C9, $FFFC
Offset_0x040DD0:
		dc.w	$000B
		dc.w	$0005, $00DA, $FFF0
		dc.w	$0005, $00DA, $0003
		dc.w	$E80B, $0000, $FFE8
		dc.w	$0808, $000C, $FFE8
		dc.w	$1004, $000F, $FFF0
		dc.w	$E80B, $0800, $0000
		dc.w	$0808, $080C, $0000
		dc.w	$1004, $080F, $0000
		dc.w	$F80A, $004C, $FFE0
		dc.w	$F80A, $084C, $0008
		dc.w	$EB00, $00C9, $FFFC
Offset_0x040E14:
		dc.w	$000D
		dc.w	$0005, $00DA, $FFF0
		dc.w	$0005, $00DA, $0003
		dc.w	$E80B, $0000, $FFE8
		dc.w	$0808, $000C, $FFE8
		dc.w	$1004, $000F, $FFF0
		dc.w	$E80B, $0800, $0000
		dc.w	$0808, $080C, $0000
		dc.w	$1004, $080F, $0000
		dc.w	$F80A, $004C, $FFE0
		dc.w	$F80A, $084C, $0008
		dc.w	$FE0A, $00AD, $0000
		dc.w	$0609, $00B6, $0018
		dc.w	$EB00, $00C9, $FFFC
Offset_0x040E64:
		dc.w	$000B
		dc.w	$F80A, $004C, $0008
		dc.w	$E805, $00BC, $0003
		dc.w	$F800, $00C8, $0011
		dc.w	$E80E, $002E, $FFE8
		dc.w	$F005, $003A, $0008
		dc.w	$0001, $003E, $FFF0
		dc.w	$000E, $0040, $FFF8
		dc.w	$FE0A, $00AD, $000D
		dc.w	$0609, $00B6, $001F
		dc.w	$0005, $00DA, $FFF0
		dc.w	$0005, $00DA, $FFF7
Offset_0x040EA8:
		dc.w	$000B
		dc.w	$F80A, $004C, $FFF8
		dc.w	$0005, $0063, $FFFF
		dc.w	$E805, $00C0, $FFFB
		dc.w	$E80E, $002E, $FFE0
		dc.w	$F005, $003A, $0000
		dc.w	$0001, $003E, $FFE8
		dc.w	$000E, $0040, $FFF0
		dc.w	$FE0A, $00AD, $0006
		dc.w	$0609, $00B6, $001E
		dc.w	$0005, $00DA, $FFE8
		dc.w	$0005, $00DA, $FFEF
Offset_0x040EEC:
		dc.w	$000B
		dc.w	$F80A, $004C, $FFF6
		dc.w	$0005, $0063, $FFFD
		dc.w	$FE0A, $00AD, $0005
		dc.w	$0609, $00B6, $001D
		dc.w	$E805, $00C4, $FFFA
		dc.w	$E80E, $002E, $FFDF
		dc.w	$F005, $003A, $FFFF
		dc.w	$0001, $003E, $FFE7
		dc.w	$000E, $0040, $FFEF
		dc.w	$0005, $00DA, $FFE7
		dc.w	$0005, $00DA, $FFEE
Offset_0x040F30:
		dc.w	$000A
		dc.w	$F80A, $004C, $FFE4
		dc.w	$0005, $00DA, $FFF0
		dc.w	$0005, $00DA, $0003
		dc.w	$E80B, $0000, $FFE8
		dc.w	$0808, $000C, $FFE8
		dc.w	$1004, $000F, $FFF0
		dc.w	$E80B, $0800, $0000
		dc.w	$0808, $080C, $0000
		dc.w	$1004, $080F, $0000
		dc.w	$F80A, $084C, $0004
Offset_0x040F6E:
		dc.w	$0013
		dc.w	$1804, $006F, $FFF9
		dc.w	$2009, $0071, $FFF1
		dc.w	$0804, $0055, $0001
		dc.w	$1009, $0057, $FFF9
		dc.w	$F80A, $004C, $FFF9
		dc.w	$0805, $0063, $0000
		dc.w	$E80E, $082E, $FFF8
		dc.w	$F005, $083A, $FFE8
		dc.w	$0001, $083E, $0008
		dc.w	$000E, $0840, $FFE8
		dc.w	$1804, $0067, $FFE1
		dc.w	$2009, $0069, $FFD9
		dc.w	$0804, $0055, $FFE9
		dc.w	$1009, $0057, $FFE1
		dc.w	$F80A, $004C, $FFE1
		dc.w	$100B, $008D, $FFD3
		dc.w	$3009, $0099, $FFD3
		dc.w	$0005, $00DA, $0004
		dc.w	$0005, $00DA, $FFFE
Offset_0x040FE2:
		dc.w	$0016
		dc.w	$1804, $006F, $0002
		dc.w	$2009, $0071, $FFFA
		dc.w	$F80A, $004C, $0002
		dc.w	$0804, $0055, $000A
		dc.w	$1009, $0057, $0002
		dc.w	$0805, $0063, $000A
		dc.w	$F001, $00D4, $FFFB
		dc.w	$E80F, $0011, $FFF4
		dc.w	$F002, $0021, $FFEC
		dc.w	$0801, $0024, $FFEC
		dc.w	$080D, $0026, $FFF4
		dc.w	$1804, $0067, $FFE2
		dc.w	$2009, $0069, $FFDA
		dc.w	$F80A, $004C, $FFE2
		dc.w	$0804, $0055, $FFEA
		dc.w	$1009, $0057, $FFE2
		dc.w	$0805, $0063, $FFEA
		dc.w	$100B, $008D, $FFCA
		dc.w	$3009, $0099, $FFCA
		dc.w	$2600, $0077, $FFF2
		dc.w	$2600, $0077, $0012
		dc.w	$0005, $00DA, $0003
Offset_0x041068:
		dc.w	$0001
		dc.w	$F406, $009F, $FFF8
Offset_0x041070:
		dc.w	$0002
		dc.w	$F404, $00A5, $FFFC
		dc.w	$FC09, $00A7, $FFF4

Obj_0x98_Sz_Guardian:                                          ; Offset_0x04107E
		include "data\objects\obj_0x98.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object C5 - Hidden Moniters
; ---------------------------------------------------------------------------
; Offset_0x04178A: Obj_0xC5_Hidden_Monitors:
ObjC5_HiddenMonitor:
		lea	HiddenMonitor_ObjData(pc),a1
		jsr	SetupObjectAttributes(pc)
		move.l	#HiddenMonitor_Main,(a0)
		move.b	#$F,Obj_Height_2(a0)
		move.b	#$F,Obj_Width_2(a0)
		move.b	#$46,Obj_Col_Flags(a0)
		move.b	Obj_Subtype(a0),Obj_Ani_Number(a0)
		rts
; ===========================================================================
; Offset_0x0417B2:
HiddenMonitor_Main:
		move.w	(Obj_End_Panel_Mem_Address).w,a1
		cmpi.l	#Obj_End_Panel,(a1)
		bne.s	Offset_0x0417FC
		btst	#0,Obj_Control_Var_08(a1)
		beq.s	Offset_0x0417FC
		move.w	Obj_X(a0),d0
		move.w	Obj_X(a1),d1
		lea	Offset_0x041802(pc),a2
		add.w	(a2)+,d0
		cmp.w	d0,d1
		bcs.s	Offset_0x0417FC
		add.w	(a2)+,d0
		cmp.w	d0,d1
		bcc.s	Offset_0x0417FC
		bclr	#0,Obj_Control_Var_08(a1)
		move.l	#Obj01_Monitors,(a0)
		move.b	#2,Obj_Routine(a0)
		move.b	#4,Obj_Control_Var_0C(a0)
		move.w	#-$400,Obj_Speed_Y(a0)

Offset_0x0417FC:
		jmp     (MarkObjGone).l
; ===========================================================================

Offset_0x041802:	dc.w	-$E,$1C

; Offset_0x041806: Hidden_Monitors_Setup_Data:
HiddenMonitor_ObjData:
		objdata	$180, $E, $10, 0, 0, $4C4, Monitors_Mappings

Obj_End_Panel:                                                 ; Offset_0x041812
		include "data\objects\endpanel.asm"
;===============================================================================
After_Boss_Clean_Up:                                           ; Offset_0x041ACA
		moveq	#0,d0
		lea	(Current_ZoneAndAct).w,a1                             ; $FFFFFE10
		move.b	(A1)+,d0
		add.b	D0,d0
		add.b	(A1)+,d0
		add.b	D0,d0
		move.w	Offset_0x041AE0(pc,d0.w),d0
		jmp	Offset_0x041AE0(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x041AE0:
		dc.w	AIz_After_Boss-Offset_0x041AE0         ; Offset_0x041AFC
		dc.w	AIz_After_Boss-Offset_0x041AE0         ; Offset_0x041AFC
		dc.w	Hz_After_Boss-Offset_0x041AE0          ; Offset_0x041B10
		dc.w	Hz_After_Boss-Offset_0x041AE0          ; Offset_0x041B10
		dc.w	MGz_After_Boss-Offset_0x041AE0         ; Offset_0x041B12
		dc.w	MGz_After_Boss-Offset_0x041AE0         ; Offset_0x041B12
		dc.w	CNz_After_Boss-Offset_0x041AE0         ; Offset_0x041B1C
		dc.w	CNz_After_Boss-Offset_0x041AE0         ; Offset_0x041B1C
		dc.w	FBz_After_Boss-Offset_0x041AE0         ; Offset_0x041B1C
		dc.w	FBz_After_Boss-Offset_0x041AE0         ; Offset_0x041B1C
		dc.w	Iz_1_After_Boss-Offset_0x041AE0        ; Offset_0x041B1C
		dc.w	Iz_2_After_Boss-Offset_0x041AE0        ; Offset_0x041B1E
		dc.w	LBz_After_Boss-Offset_0x041AE0         ; Offset_0x041B28
		dc.w	LBz_After_Boss-Offset_0x041AE0         ; Offset_0x041B28
;-------------------------------------------------------------------------------
AIz_After_Boss:                                                ; Offset_0x041AFC
		lea	Pal_AIz_After_Boss(PC),a1             ; Offset_0x041B2A
		jsr	(Pal_Load_Line_1)                      ; Offset_0x04314C
		lea	PLC_AIz_After_Boss(PC),a1             ; Offset_0x041B4A
		jmp	(LoadPLC_Direct).l                           ; Offset_0x001502
;-------------------------------------------------------------------------------
Hz_After_Boss:                                                 ; Offset_0x041B10
		rts
;-------------------------------------------------------------------------------
MGz_After_Boss:                                                ; Offset_0x041B12
		lea	PLC_MGz_After_Boss(PC),a1             ; Offset_0x041B90
		jmp	(LoadPLC_Direct).l                           ; Offset_0x001502
;-------------------------------------------------------------------------------
CNz_After_Boss:                                                ; Offset_0x041B1C
FBz_After_Boss:                                                ; Offset_0x041B1C
Iz_1_After_Boss:                                               ; Offset_0x041B1C
		rts
;-------------------------------------------------------------------------------
Iz_2_After_Boss:                                               ; Offset_0x041B1E
		lea	Pal_Iz_2_After_Boss(PC),a1            ; Offset_0x041B70
		jmp	(Pal_Load_Line_1)                      ; Offset_0x04314C
;-------------------------------------------------------------------------------
LBz_After_Boss:                                                ; Offset_0x041B28
		rts
;-------------------------------------------------------------------------------
Pal_AIz_After_Boss:                                            ; Offset_0x041B2A
		dc.w	$0000, $0EEE, $0EC0, $0E60, $0C22, $00EE, $0088, $060A
		dc.w	$008E, $002E, $0844, $0020, $0EAA, $0A66, $0ECC, $0044
;-------------------------------------------------------------------------------
PLC_AIz_After_Boss:                                            ; Offset_0x041B4A
		dc.w	(((PLC_AB_00_End-PLC_AB_00)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_00:
		dc.l	Art_Monitors                           ; Offset_0x1071DA
		dc.w	$9880
		dc.l	Art_AIz_Miscellaneous                  ; Offset_0x12D84E
		dc.w	$5E00
		dc.l	Art_AIz_Swinging_Vine                  ; Offset_0x12C9AA
		dc.w	$8440
		dc.l	Art_AIz_Background_Tree                ; Offset_0x12CC34
		dc.w	$87E0
		dc.l	Art_Oxygen_Bubbles                     ; Offset_0x1080F8
		dc.w	$8B80
		dc.l	Art_Switch                             ; Offset_0x1067F6
		dc.w	$8AC0
PLC_AB_00_End:
;-------------------------------------------------------------------------------
Pal_Iz_2_After_Boss:                                           ; Offset_0x041B70
		dc.w	$0000, $0EEE, $0EC0, $0E60, $0C22, $00EE, $0088, $008E
		dc.w	$002C, $0822, $0000, $0020, $0CAA, $0866, $0644, $0044
;-------------------------------------------------------------------------------
PLC_MGz_After_Boss:                                            ; Offset_0x041B90
		dc.w	(((PLC_AB_01_End-PLC_AB_01)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_01:
		dc.l	Art_Monitors                           ; Offset_0x1071DA
		dc.w	$9880
		dc.l	Art_Spikes_Springs                     ; Offset_0x108E64
		dc.w	$9280
PLC_AB_01_End:
;-------------------------------------------------------------------------------
; Offset_0x041B9E: ; Left Over ???
		dc.w	(((PLC_AB_02_End-PLC_AB_02)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_02:
		dc.l	Art_Monitors                           ; Offset_0x1071DA
		dc.w	$9880
PLC_AB_02_End:
;-------------------------------------------------------------------------------
PLC_AIz_MGz_Boss_Defeated:                                     ; Offset_0x041BA6
		dc.w	(((PLC_AB_03_End-PLC_AB_03)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_03:
		dc.l	Art_Explosion                          ; Offset_0x108528
		dc.w	$B400
		dc.l	Art_Squirrel                           ; Offset_0x10B3DC
		dc.w	$B000
		dc.l	Art_Blue_Bird                          ; Offset_0x10B00A
		dc.w	$B240
PLC_AB_03_End:
;-------------------------------------------------------------------------------
PLC_After_Knuckles_LBz_1:                                      ; Offset_0x041BBA
		dc.w	(((PLC_AB_04_End-PLC_AB_04)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_04:
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
PLC_AB_04_End:
;-------------------------------------------------------------------------------
PLC_Flame_Mobile_Explosion:                                    ; Offset_0x041BC2
		dc.w	(((PLC_AB_05_End-PLC_AB_05)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_AB_05:
		dc.l	Art_Explosion                          ; Offset_0x108528
		dc.w	$B400
PLC_AB_05_End:
;===============================================================================
Obj_Explosions:                                                ; Offset_0x041BCA
		include "data\objects\explosns.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to setup an object's graphics, size,and collision using
; a set of data, rather than individual instructions
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x041D72: Object_Settings:
SetupObjectAttributes:
		move.l	(a1)+,Obj_Map(a0)
; Offset_0x041D76: Object_Settings_2:
SetupObjectAttributes2:
		move.w	(a1)+,Obj_Art_VRAM(a0)
; Offset_0x041D7A: Object_Settings_3:
SetupObjectAttributes3:
		move.w	(a1)+,Obj_Priority(a0)
		move.b	(a1)+,Obj_Width(a0)
		move.b	(a1)+,Obj_Height(a0)
		move.b	(a1)+,Obj_Map_Id(a0)
		move.b	(a1)+,Obj_Col_Flags(a0)
		bset	#2,Obj_Flags(a0)
		addq.b	#2,Obj_Routine(a0)
; Offset_0x041D98: Exit_Object_Settings:
SetupObjectAttributes_End:
		rts
; End of function SetupObjectAttributes


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to setup a child object
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x041D9A: Load_Child_Object_A2:
SetupChildObject:
		moveq	#0,d2
		move.w	(a2)+,d6

Offset_0x041D9E:
		jsr	(AllocateObjectAfterCurrent).l
		bne.s	Offset_0x041DE8
		move.w	a0,Obj_Child_Ref(a1)			; load parent RAM address into $46

		move.l	Obj_Map(a0),Obj_Map(a1)
		; not sure why this is also a longword, given that VRAM is stored as a word
		move.l	Obj_Art_VRAM(a0),Obj_Art_VRAM(a1)	; mappings and VRAM offset copied from parent object
		move.l	(a2)+,(a1)				; object address
		move.b	d2,Obj_Subtype(a1)			; index of child object
		move.w	Obj_X(a0),d0
		move.b	(a2)+,d1				; x positional offset
		move.b	d1,Obj_Control_Var_12(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,Obj_X(a1)				; apply offset to new x position
		move.w	Obj_Y(a0),d0
		move.b	(a2)+,d1				; y positional offset
		move.b	d1,Obj_Control_Var_13(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,Obj_Y(a1)				; apply offset to new y position
		addq.w	#2,d2
		dbf	d6,Offset_0x041D9E
		moveq	#0,d0

Offset_0x041DE8:
		rts
; End of function SetupChildObject


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to setup a child object, now taking into account velocity
; and other variables
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x041DEA: Load_Child_Object_Complex_A2:
SetupChildObject_Complex:
		moveq	#0,d2
		move.w	(a2)+,d6

Offset_0x041DEE:
		jsr	(AllocateObjectAfterCurrent).l
		bne.s	Offset_0x041E4C
		move.w	a0,Obj_Child_Ref(a1)

		move.l	Obj_Map(A0),Obj_Map(a1)
		move.l	Obj_Art_VRAM(A0),Obj_Art_VRAM(a1)
		move.l	(a2)+,(a1)
		move.l	(a2)+,Obj_Control_Var_0E(a1)
		move.l	(a2)+,Obj_Control_Var_00(a1)
		move.l	(a2)+,Obj_Control_Var_04(a1)
		move.b	d2,Obj_Subtype(a1)
		move.w	Obj_X(a0),d0
		move.b	(a2)+,d1
		move.b	d1,Obj_Control_Var_12(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,Obj_X(a1)
		move.w	Obj_Y(a0),d0
		move.b	(a2)+,d1
		move.b	d1,Obj_Control_Var_13(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,Obj_Y(a1)
		move.w	(a2)+,Obj_Speed_X(a1)
		move.w	(a2)+,Obj_Speed_Y(a1)
		addq.w	#2,d2
		dbf	d6,Offset_0x041DEE
		moveq	#0,d0

Offset_0x041E4C:
		rts
; End of function SetupChildObject_Complex


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to setup several identical child objects
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x041E4E: Load_Child_Object_Repeat_A2:
SetupChildObject_Repeat:
		moveq	#0,d2
		move.w	(a2)+,d6

Offset_0x041E52:
		move.l	a2,a3
		jsr	(AllocateObjectAfterCurrent).l
		bne.s	Offset_0x041E9E
		move.w	a0,Obj_Child_Ref(a1)

		move.l	Obj_Map(a0),Obj_Map(a1)
		move.l	Obj_Art_VRAM(a0),Obj_Art_VRAM(a1)
		move.l	(a3)+,(a1)
		move.b	d2,Obj_Subtype(a1)
		move.w	Obj_X(a0),d0
		move.b	(a3)+,d1
		move.b	d1,Obj_Control_Var_12(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,Obj_X(a1)
		move.w	Obj_Y(a0),d0
		move.b	(a3)+,d1
		move.b	d1,Obj_Control_Var_13(a1)
		ext.w	d1
		add.w	d1,d0
		move.w	d0,Obj_Y(a1)
		addq.w	#2,d2
		dbf	d6,Offset_0x041E52
		moveq	#0,d0

Offset_0x041E9E:
		rts
; End of function SetupChildObject_Repeat


;===============================================================================
Load_Child_Object_Link_List_Repeat_A2:                         ; Offset_0x041EA0
		move.l	A0,a3
		moveq	#0,d2
		move.w	(A2)+,d6
Offset_0x041EA6:
		jsr	(AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
		bne.s	Offset_0x041EDE
		move.w	A3, Obj_Child_Ref(A1)                            ; $0046
		move.w	A1, Obj_Height_3(A3)                             ; $0044
		move.l	A1,a3
		move.l	Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
		move.l	Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
		move.l	(A2),(A1)
		move.b	D2, Obj_Subtype(A1)                              ; $002C
		move.w	Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
		addq.w	#$02,d2
		dbf	D6, Offset_0x041EA6
		moveq	#0,d0
Offset_0x041EDE:
		rts
;===============================================================================
Load_Child_Object_Complex_Adjusted_A2:                         ; Offset_0x041EE0
		moveq	#0,d2
		move.w	(A2)+,d6
Offset_0x041EE4:
		jsr	(AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
		bne.s	Offset_0x041F58
		move.w	A0, Obj_Child_Ref(A1)                            ; $0046
		move.l	Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
		move.l	Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
		move.l	(A2)+,(A1)
		move.l	(A2)+, Obj_Control_Var_0E(A1)                    ; $003E
		move.l	(A2)+, Obj_Control_Var_00(A1)                    ; $0030
		move.l	(A2)+, Obj_Control_Var_04(A1)                    ; $0034
		move.b	D2, Obj_Subtype(A1)                              ; $002C
		move.w	Obj_X(A0),d0                                    ; $0010
		move.b	(A2)+,d1
		move.b	D1, Obj_Control_Var_12(A1)                       ; $0042
		ext.w	D1
		btst	#0, Obj_Flags(A0)                              ; $0004
		beq.s	Offset_0x041F24
		neg.w   D1
Offset_0x041F24:
		add.w	D1,d0
		move.w	D0, Obj_X(A1)                                    ; $0010
		move.w	Obj_Y(A0),d0                                    ; $0014
		move.b	(A2)+,d1
		move.b	D1, Obj_Control_Var_13(A1)                       ; $0043
		ext.w	D1
		add.w	D1,d0
		move.w	D0, Obj_Y(A1)                                    ; $0014
		move.w	(A2)+,d1
		btst	#0, Obj_Flags(A0)                              ; $0004
		beq.s	Offset_0x041F48
		neg.w   D1
Offset_0x041F48:
		move.w	D1, Obj_Speed_X(A1)                              ; $0018
		move.w	(A2)+, Obj_Speed_Y(A1)                           ; $001A
		addq.w	#$02,d2
		dbf	D6, Offset_0x041EE4
		moveq	#0,d0
Offset_0x041F58:
		rts
;===============================================================================
Load_Child_Object_Simple_A2:                                   ; Offset_0x041F5A
		moveq	#0,d2
		move.w	(A2)+,d6
Offset_0x041F5E:
		jsr	(AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
		bne.s	Offset_0x041F84
		move.w	A0, Obj_Child_Ref(A1)                            ; $0046
		move.l	(A2),(A1)
		move.b	D2, Obj_Subtype(A1)                              ; $002C
		move.w	Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
		addq.w	#$02,d2
		dbf	D6, Offset_0x041F5E
		moveq	#0,d0
Offset_0x041F84:
		rts
;===============================================================================
Load_Child_Object_A2_2:                                        ; Offset_0x041F86
		moveq	#0,d2
		move.w	(A2)+,d6
Offset_0x041F8A:
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x041FD4
		move.w	A0, Obj_Child_Ref(A1)                            ; $0046
		move.l	Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
		move.l	Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
		move.l	(A2)+,(A1)
		move.b	D2, Obj_Subtype(A1)                              ; $002C
		move.w	Obj_X(A0),d0                                    ; $0010
		move.b	(A2)+,d1
		move.b	D1, Obj_Control_Var_12(A1)                       ; $0042
		ext.w	D1
		add.w	D1,d0
		move.w	D0, Obj_X(A1)                                    ; $0010
		move.w	Obj_Y(A0),d0                                    ; $0014
		move.b	(A2)+,d1
		move.b	D1, Obj_Control_Var_13(A1)                       ; $0043
		ext.w	D1
		add.w	D1,d0
		move.w	D0, Obj_Y(A1)                                    ; $0014
		addq.w	#$02,d2
		dbf	D6, Offset_0x041F8A
		moveq	#0,d0
Offset_0x041FD4:
		rts
;===============================================================================
Load_Child_Object_Tree_List_Repeated_A2:                       ; Offset_0x041FD6
		move.l	A0,a3
		moveq	#0,d2
		move.w	(A2)+,d6
Offset_0x041FDC:
		jsr	(AllocateObjectAfterCurrent)                  ; Offset_0x011DE0
		bne.s	Offset_0x042014
		move.w	A3, Obj_Child_Ref(A1)                            ; $0046
		move.w	A0, Obj_Height_3(A1)                             ; $0044
		move.l	A1,a3
		move.l	Obj_Map(A0), Obj_Map(A1)                  ; $000C, $000C
		move.l	Obj_Art_VRAM(A0), Obj_Art_VRAM(A1)        ; $000A, $000A
		move.l	(A2),(A1)
		move.b	D2, Obj_Subtype(A1)                              ; $002C
		move.w	Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
		addq.w	#$02,d2
		dbf	D6, Offset_0x041FDC
		moveq	#0,d0
Offset_0x042014
		rts
;===============================================================================
Refresh_Child_Position:                                        ; Offset_0x042016
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		move.w	Obj_X(A1),d0                                    ; $0010
		move.b	Obj_Control_Var_12(A0),d1                       ; $0042
		ext.w	D1
		add.w	D1,d0
		move.w	D0, Obj_X(A0)                                    ; $0010
		move.w	Obj_Y(A1),d0                                    ; $0014
		move.b	Obj_Control_Var_13(A0),d1                       ; $0043
		ext.w	D1
		add.w	D1,d0
		move.w	D0, Obj_Y(A0)                                    ; $0014
		rts
;===============================================================================
Refresh_Child_Position_Adjusted:                               ; Offset_0x04203C
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		move.w	Obj_X(A1),d0                                    ; $0010
		move.b	Obj_Control_Var_12(A0),d1                       ; $0042
		ext.w	D1
		bclr	#0, Obj_Flags(A0)                              ; $0004
		btst	#0, Obj_Flags(A1)                              ; $0004
		beq.s	Offset_0x042060
		neg.w   D1
		bset	#0, Obj_Flags(A0)                              ; $0004
Offset_0x042060:
		add.w	D1,d0
		move.w	D0, Obj_X(A0)                                    ; $0010
		move.w	Obj_Y(A1),d0                                    ; $0014
		move.b	Obj_Control_Var_13(A0),d1                       ; $0043
		ext.w	D1
		bclr	#$01, Obj_Flags(A0)                              ; $0004
		btst	#$01, Obj_Flags(A1)                              ; $0004
		beq.s	Offset_0x042086
		neg.w   D1
		bset	#$01, Obj_Flags(A0)                              ; $0004
Offset_0x042086:
		add.w	D1,d0
		move.w	D0, Obj_Y(A0)                                    ; $0014
		rts


; ---------------------------------------------------------------------------
; Subroutine to animate a sprite, but using raw animation data
; (without a table to call)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x04208E: Animate_Raw:
AnimateRaw:
		move.l	Obj_Control_Var_00(a0),a1	; load referenced animation script

; Offset_0x042092:
Animate_Raw_A1:
		subq.b	#1,Obj_Ani_Time(a0)	; subtract 1 from frame duration
		bpl.s	.animWait		; if time remains, branch
		moveq	#0,d0
		move.b	Obj_Ani_Frame(a0),d0	; load current frame number
		addq.w	#1,d0
		move.b	d0,Obj_Ani_Frame(a0)	; next frame number
		moveq	#0,d1
		move.b	1(a1,d0.w),d1		; read sprite number from script
		bmi.s	AnimateRaw_Scripts	; if animation is complete, branch
		move.b	(a1),Obj_Ani_Time(a0)	; load frame duration
		move.b	d1,Obj_Map_Id(a0)	; load sprite number
; Offset_0x0420B4:
.animWait:
		rts
; ---------------------------------------------------------------------------
; Offset_0x0420B6:
AnimateRaw_Scripts:
		neg.b   d1
		jsr	AnimateRaw_Index-4(pc,d1.w)
		clr.b	Obj_Ani_Frame(A0)
		rts
; ===========================================================================
; Offset_0x0420C2:
AnimateRaw_Index:
		bra.w	AnimateRaw_Restart
		bra.w	AnimateRaw_Jump
		bra.w	AnimateRaw_CustomCode
; ===========================================================================
; Offset_0x0420CE: Animate_Raw_Jump:
AnimateRaw_Jump:
		move.b	2(a1,d0.w),d1
		ext.w	d1
		lea	(a1,d1.w),a1
		move.l	a1,Obj_Control_Var_00(a0)
; Offset_0x0420DC: Animate_Raw_Restart:
AnimateRaw_Restart:
		move.b	1(a1),Obj_Map_Id(a0)
		move.b	(a1),Obj_Ani_Time(a0)
		rts
; ===========================================================================
; Uses SST variable $34 to jump to a unique ROM location once the animation
; is finished; pretty unique...
; Offset_0x0420E8: Animate_Raw_Custom_Code:
AnimateRaw_CustomCode:
		clr.b	Obj_Ani_Time(a0)
		move.l	Obj_Control_Var_04(a0),a1
		jmp	(a1)
; End of function AnimateRaw


;===============================================================================
Animate_Raw_Adjust_Flip_X:                                     ; Offset_0x0420F2
		move.l	Obj_Control_Var_00(A0),a1                       ; $0030
Animate_Raw_Adjust_Flip_X_A1:                                  ; Offset_0x0420F6
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x042124
		moveq	#0,d0
		move.b	Obj_Ani_Frame(A0),d0                            ; $0023
		addq.w	#$01,d0
		move.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		moveq	#0,d1
		move.b	$01(A1,d0),d1
		bmi.s	AnimateRaw_Scripts
		bclr	#$06,d1
		beq.s	Offset_0x04211C
		bchg	#00, Obj_Flags(A0)                               ; $0004
Offset_0x04211C:
		move.b	(A1), Obj_Ani_Time(A0)                           ; $0024
		move.b	D1, Obj_Map_Id(A0)                               ; $0022
Offset_0x042124:
		rts
;===============================================================================
Animate_Raw_Adjust_Flip_Y:                                     ; Offset_0x042126
		move.l	Obj_Control_Var_00(A0),a1                       ; $0030
Animate_Raw_Adjust_Flip_Y_A1:                                  ; Offset_0x04212A
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x04215A
		moveq	#0,d0
		move.b	Obj_Ani_Frame(A0),d0                            ; $0023
		addq.w	#$01,d0
		move.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		moveq	#0,d1
		move.b	$01(A1,d0),d1
		bmi.w	AnimateRaw_Scripts
		bclr	#$06,d1
		beq.s	Offset_0x042152
		bchg	#01, Obj_Flags(A0)                               ; $0004
Offset_0x042152:
		move.b	(A1), Obj_Ani_Time(A0)                           ; $0024
		move.b	D1, Obj_Map_Id(A0)                               ; $0022
Offset_0x04215A:
		rts
;===============================================================================
Animate_Raw_Multi_Delay:                                       ; Offset_0x04215C
		move.l	Obj_Control_Var_00(A0),a1                       ; $0030
Animate_Raw_Multi_Delay_A1:                                    ; Offset_0x042160
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x042188
		moveq	#0,d0
		move.b	Obj_Ani_Frame(A0),d0                            ; $0023
		addq.w	#$02,d0
		move.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		moveq	#0,d1
		move.b	(A1,d0),d1
		bmi.s	Offset_0x04218C
		move.b	D1, Obj_Map_Id(A0)                               ; $0022
		move.b	$01(A1,d0), Obj_Ani_Time(A0)                    ; $0024
		moveq	#$01,d2
		rts
Offset_0x042188:
		moveq	#0,d2
		rts
Offset_0x04218C:
		neg.b   D1
		jsr	Offset_0x042198-$04(pc,d1.w)
		clr.b	Obj_Ani_Frame(A0)                                ; $0023
		rts
;-------------------------------------------------------------------------------
Offset_0x042198:
		bra.w	Offset_0x0421B2
		bra.w	Offset_0x0421A4
		bra.w	Offset_0x0421C0
;-------------------------------------------------------------------------------
Offset_0x0421A4:
		move.b	$01(A1,d0),d1
		ext.w	D1
		lea	(A1,d1),a1
		move.l	A1, Obj_Control_Var_00(A0)                       ; $0030
;-------------------------------------------------------------------------------
Offset_0x0421B2:
		move.b	(A1), Obj_Map_Id(A0)                             ; $0022
		move.b	$0001(A1), Obj_Ani_Time(A0)                      ; $0024
		moveq	#$01,d2
		rts
;-------------------------------------------------------------------------------
Offset_0x0421C0:
		clr.b	Obj_Ani_Time(A0)                                 ; $0024
		move.l	Obj_Control_Var_04(A0),a1                       ; $0034
		jsr	(A1)
		moveq	#-$01,d2
		rts
;===============================================================================
Animate_Raw_Multi_Delay_Flip_X:                                ; Offset_0x0421CE
		move.l	Obj_Control_Var_00(A0),a1                       ; $0030
Animate_Raw_Multi_Delay_Flip_X_A1:                             ; Offset_0x0421D2
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x042206
		moveq	#0,d0
		move.b	Obj_Ani_Frame(A0),d0                            ; $0023
		addq.w	#$02,d0
		move.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		moveq	#0,d1
		move.b	(A1,d0),d1
		bmi.s	Offset_0x04218C
		bclr	#$06,d1
		beq.s	Offset_0x0421F8
		bchg	#00, Obj_Flags(A0)                               ; $0004
Offset_0x0421F8:
		move.b	D1, Obj_Map_Id(A0)                               ; $0022
		move.b	$01(A1,d0), Obj_Ani_Time(A0)                    ; $0024
		moveq	#$01,d2
		rts
Offset_0x042206:
		moveq	#0,d2
		rts
;===============================================================================
Animate_Raw_Multi_Delay_Flip_Y:                                ; Offset_0x04220A
		move.l	Obj_Control_Var_00(A0),a1                       ; $0030
Animate_Raw_Multi_Delay_Flip_Y_A1:                             ; Offset_0x04220E
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x042244
		moveq	#0,d0
		move.b	Obj_Ani_Frame(A0),d0                            ; $0023
		addq.w	#$02,d0
		move.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		moveq	#0,d1
		move.b	(A1,d0),d1
		bmi.w	Offset_0x04218C
		bclr	#$06,d1
		beq.s	Offset_0x042236
		bchg	#01, Obj_Flags(A0)                               ; $0004
Offset_0x042236:
		move.b	D1, Obj_Map_Id(A0)                               ; $0022
		move.b	$01(A1,d0), Obj_Ani_Time(A0)                    ; $0024
		moveq	#$01,d2
		rts
Offset_0x042244:
		moveq	#0,d2
		rts
;===============================================================================
Animate_Raw_Get_Faster:                                        ; Offset_0x042248
		move.l	Obj_Control_Var_00(A0),a1                       ; $0030
Animate_Raw_Get_Faster_A1:                                     ; Offset_0x04224C
		bset	#$05, Obj_Control_Var_08(A0)                     ; $0038
		bne.s	Offset_0x04225C
		move.b	(A1), Obj_Timer(A0)                              ; $002E
		clr.b	Obj_Player_Status(A0)                            ; $002F
Offset_0x04225C:
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x042294
		move.b	Obj_Timer(A0),d2                                ; $002E
		moveq	#0,d0
		move.b	Obj_Ani_Frame(A0),d0                            ; $0023
		addq.b	#$01,d0
		move.b	$02(A1,d0),d1
		bpl.s	Offset_0x042284
		moveq	#0,d0
		move.b	$0002(A1),d1
		tst.b	D2
		beq.s	Offset_0x042298
		subq.b	#$01,d2
		move.b	D2, Obj_Timer(A0)                                ; $002E
Offset_0x042284:
		move.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		move.b	D1, Obj_Map_Id(A0)                               ; $0022
		move.b	D2, Obj_Ani_Time(A0)                             ; $0024
		moveq	#$01,d2
		rts
Offset_0x042294:
		moveq	#0,d2
		rts
Offset_0x042298:
		move.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		move.b	D1, Obj_Map_Id(A0)                               ; $0022
		move.b	D2, Obj_Ani_Time(A0)                             ; $0024
		move.b	Obj_Player_Status(A0),d0                        ; $002F
		addq.b	#$01,d0
		move.b	D0, Obj_Player_Status(A0)                        ; $002F
		cmp.b	$0001(A1),d0
		bcs.s	Offset_0x0422C4
		bclr	#$05, Obj_Control_Var_08(A0)                     ; $0038
		clr.b	Obj_Player_Status(A0)                            ; $002F
		move.l	Obj_Control_Var_04(A0),a2                       ; $0034
		jsr	(A2)
Offset_0x0422C4:
		moveq	#-$01,d2
		rts
;===============================================================================
Animate_Raw_Get_Slower:                                        ; Offset_0x0422C8
		move.l	Obj_Control_Var_00(A0),a1                       ; $0030
Animate_Raw_Get_Slower_A1:                                     ; Offset_0x0422CC
		bset	#$05, Obj_Control_Var_08(A0)                     ; $0038
		bne.s	Offset_0x0422D8
		clr.w	Obj_Timer(A0)                                    ; $002E
Offset_0x0422D8:
		subq.b	#$01, Obj_Ani_Time(A0)                           ; $0024
		bpl.s	Offset_0x04230C
		move.b	Obj_Timer(A0),d2                                ; $002E
		moveq	#0,d0
		move.b	Obj_Ani_Frame(A0),d0                            ; $0023
		addq.b	#$01,d0
		move.b	$01(A1,d0),d1
		bpl.s	Offset_0x0422F8
		moveq	#0,d0
		move.b	$0001(A1),d1
		addq.b	#$01,d2
Offset_0x0422F8:
		move.b	D0, Obj_Ani_Frame(A0)                            ; $0023
		move.b	D1, Obj_Map_Id(A0)                               ; $0022
		move.b	D2, Obj_Ani_Time(A0)                             ; $0024
		cmp.b	(A1),d2
		bcc.s	Offset_0x04230E
		move.b	D2, Obj_Timer(A0)                                ; $002E
Offset_0x04230C:
		rts
Offset_0x04230E:
		move.b	Obj_Player_Status(A0),d0                        ; $002F
		addq.b	#$01,d0
		move.b	D0, Obj_Player_Status(A0)                        ; $002F
		cmp.b	$0001(A1),d0
		bcs.s	Offset_0x04230C
		bclr	#$05, Obj_Control_Var_08(A0)                     ; $0038
		clr.b	Obj_Player_Status(A0)                            ; $002F
		move.l	Obj_Control_Var_04(A0),a2                       ; $0034
		jmp	(A2)
;===============================================================================
Swing_Up_And_Down:                                             ; Offset_0x04232E
		move.w	Obj_Control_Var_10(A0),d0                       ; $0040
		move.w	Obj_Speed_Y(A0),d1                              ; $001A
		move.w	Obj_Control_Var_0E(A0),d2                       ; $003E
		moveq	#0,d3
		btst	#0, Obj_Control_Var_08(A0)                     ; $0038
		bne.s	Offset_0x04235A
		neg.w   D0
		add.w	D0,d1
		neg.w   D2
		cmp.w	D2,d1
		bgt.s	Offset_0x04236C
		bset	#0, Obj_Control_Var_08(A0)                     ; $0038
		neg.w   D0
		neg.w   D2
		moveq	#$01,d3
Offset_0x04235A:
		add.w	D0,d1
		cmp.w	D2,d1
		blt.s	Offset_0x04236C
		bclr	#0, Obj_Control_Var_08(A0)                     ; $0038
		neg.w   D0
		add.w	D0,d1
		moveq	#$01,d3
Offset_0x04236C:
		move.w	D1, Obj_Speed_Y(A0)                              ; $001A
		rts
;===============================================================================
Swing_Left_And_Right:                                          ; Offset_0x042372
		move.w	Obj_Control_Var_0C(A0),d0                       ; $003C
		move.w	Obj_Speed_X(A0),d1                              ; $0018
		move.w	Obj_Control_Var_0A(A0),d2                       ; $003A
		moveq	#0,d3
		btst	#$03, Obj_Control_Var_08(A0)                     ; $0038
		bne.s	Offset_0x04239E
		neg.w   D0
		add.w	D0,d1
		neg.w   D2
		cmp.w	D2,d1
		bgt.s	Offset_0x0423B0
		bset	#$03, Obj_Control_Var_08(A0)                     ; $0038
		neg.w   D0
		neg.w   D2
		moveq	#$01,d3
Offset_0x04239E:
		add.w	D0,d1
		cmp.w	D2,d1
		blt.s	Offset_0x0423B0
		bclr	#$03, Obj_Control_Var_08(A0)                     ; $0038
		neg.w   D0
		add.w	D0,d1
		moveq	#$01,d3
Offset_0x0423B0:
		move.w	D1, Obj_Speed_X(A0)                              ; $0018
		rts
;===============================================================================
Swing_Up_And_Down_Count:                                       ; Offset_0x0423B6
		bsr.w	Swing_Up_And_Down                      ; Offset_0x04232E
		tst.w	D3
		beq.s	Offset_0x0423D0
		move.b	Obj_Control_Var_09(A0),d2                       ; $0039
		subq.b	#$01,d2
		move.b	D2, Obj_Control_Var_09(A0)                       ; $0039
		bmi.s	Offset_0x0423CE
		moveq	#0,d0
		rts
Offset_0x0423CE:
		moveq	#$01,d0
Offset_0x0423D0:
		rts
;===============================================================================
Run_Object_Wait_Timer_A0:                                      ; Offset_0x0423D2
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		bmi.s	Run_Object_Time_Out                    ; Offset_0x0423DA
		rts
Run_Object_Time_Out:                                           ; Offset_0x0423DA
		move.l	Obj_Child(A0),a1                                ; $0034
		jmp	(A1)
;===============================================================================
Run_Object_Hit_Floor_A0:                                       ; Offset_0x0423E0
		jsr	(ObjHitFloor)                          ; Offset_0x009D84
		tst.w	D1
		bmi.s	Run_Object_Hit_Floor                   ; Offset_0x0423EE
		beq.s	Run_Object_Hit_Floor                   ; Offset_0x0423EE
		rts
Run_Object_Hit_Floor:                                          ; Offset_0x0423EE
		add.w	D1, Obj_Y(A0)                                    ; $0014
		move.l	Obj_Child(A0),a1                                ; $0034
		jmp	(A1)
;===============================================================================
Run_Object_Hit_Floor_D3_A0:                                    ; Offset_0x0423F8
		move.w	Obj_Speed_X(A0),d3                              ; $0018
		ext.l	D3
		lsl.l	#$08,d3
		add.l	Obj_X(A0),d3                                    ; $0010
		swap	D3
		jsr	(ObjHitFloor_D3)                       ; Offset_0x009D88
		cmpi.w	#$FFFF,d1
		blt.s	Run_Object_Hit_Floor_D3                ; Offset_0x04241E
		cmpi.w	#$000C,d1
		bge.s	Run_Object_Hit_Floor_D3                ; Offset_0x04241E
		add.w	D1, Obj_Y(A0)                                    ; $0014
		rts
Run_Object_Hit_Floor_D3:                                       ; Offset_0x04241E
		move.l	Obj_Child(A0),a1                                ; $0034
		jmp	(A1)
;===============================================================================
Run_Object_Hit_Wall_Right_A0:                                  ; Offset_0x042424
		jsr	(Object_HitWall_Right)                 ; Offset_0x009EEE
		tst.w	D1
		bmi.s	Run_Object_Hit_Wall_Right              ; Offset_0x042430
		rts
Run_Object_Hit_Wall_Right:                                     ; Offset_0x042430
		add.w	D1, Obj_X(A0)                                    ; $0010
		move.l	Obj_Child(A0),a1                                ; $0034
		jmp	(A1)
;===============================================================================
Run_Object_Hit_Wall_Left_A0:                                   ; Offset_0x04243A
		jsr	(Object_HitWall_Left)                  ; Offset_0x00A138
		tst.w	D1
		bmi.s	Run_Object_Hit_Wall_Left               ; Offset_0x042446
		rts
Run_Object_Hit_Wall_Left:                                      ; Offset_0x042446
		add.w	D1, Obj_X(A0)                                    ; $0010
		move.l	Obj_Child(A0),a1                                ; $0034
		jmp	(A1)
;===============================================================================
Add_To_Response_List_And_Display:                              ; Offset_0x042450
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Child_Display_Or_Delete:                                       ; Offset_0x04245C
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Child_Delete                           ; Offset_0x04246E
		jmp	(DisplaySprite)                        ; Offset_0x011148
Child_Delete:                                                  ; Offset_0x04246E
		bra.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
;===============================================================================
Child_Display_Touch_Or_Delete:                                 ; Offset_0x042472
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Child_Delete_2                         ; Offset_0x04248A
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
Child_Delete_2:                                                ; Offset_0x04248A
		bra.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
;===============================================================================
Child_Display_Or_Delete_Remember:                              ; Offset_0x04248E
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Delete_Remember                        ; Offset_0x0424A0
		jmp	(DisplaySprite)                        ; Offset_0x011148
Delete_Remember                                                ; Offset_0x0424A0
		bsr.w	Remove_From_Tracking_Slot              ; Offset_0x042BFA
		bra.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
;===============================================================================
Child_Display_Or_Delete_2:                                     ; Offset_0x0424A8
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Child_Delete_3                         ; Offset_0x0424BA
		jmp	(DisplaySprite)                        ; Offset_0x011148
Child_Delete_3:                                                ; Offset_0x0424BA
		bra.w	Go_Delete_Object_A0_2                  ; Offset_0x042D4C
;===============================================================================
Child_Display_Touch_Or_Delete_2:                               ; Offset_0x0424BE
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Offset_0x0424DE
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Offset_0x0424D8
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
Offset_0x0424D8:
		jmp	(DisplaySprite)                        ; Offset_0x011148
Offset_0x0424DE:
		bra.w	Go_Delete_Object_A0_2                  ; Offset_0x042D4C
;===============================================================================
Child_Display_Or_Flicker_Move:                                 ; Offset_0x0424E2
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Run_Flicker_Move                       ; Offset_0x0424F4
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Run_Flicker_Move:                                              ; Offset_0x0424F4
		bset	#$07, Obj_Status(A0)                             ; $002A
		move.l	#Obj_Flicker_Move,(A0)                ; Offset_0x042AFE
		clr.b	Obj_Col_Flags(A0)                                ; $0028
		bsr.w	Set_Indexed_Velocity                   ; Offset_0x042D5A
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Child_Display_Or_Flicker_Move_2:                               ; Offset_0x04250E
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Run_Flicker_Move                       ; Offset_0x0424F4
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Child_Display_Touch_Or_Flicker_Move:                           ; Offset_0x042520
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$07, Obj_Status(A1)                             ; $002A
		bne.s	Run_Flicker_Move                       ; Offset_0x0424F4
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Child_Display_Touch_Or_Flicker_Move_2:                         ; Offset_0x042538
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$04, Obj_Control_Var_08(A1)                     ; $0038
		bne.s	Run_Flicker_Move                       ; Offset_0x0424F4
		btst	#$07, Obj_Status(A1)                             ; $002A
		beq.s	Offset_0x042558
		bset	#$07, Obj_Status(A0)                             ; $002A
		jmp	(DisplaySprite)                        ; Offset_0x011148
Offset_0x042558:
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Inc_Level_Gradual_Max_X:                                       ; Offset_0x042564
		move.w	(Sonic_Level_Limits_Max_X).w,d0             ; $FFFFEE16
		move.l	Obj_Control_Var_00(A0),d1                       ; $0030
		addi.l	#$00004000,d1
		move.l	D1, Obj_Control_Var_00(A0)                       ; $0030
		swap	D1
		add.w	D1,d0
		cmp.w	(Target_Camera_Max_X).w,d0                  ; $FFFFFA92
		bcc.s	Offset_0x042586
		move.w	D0,(Sonic_Level_Limits_Max_X).w             ; $FFFFEE16
		rts
Offset_0x042586:
		move.w	(Target_Camera_Max_X).w,(Sonic_Level_Limits_Max_X).w ; $FFFFFA92, $FFFFEE16
;-------------------------------------------------------------------------------
J_Delete_Object:                                               ; Offset_0x04258C
		jmp	(DeleteObject)                         ; Offset_0x011138
;===============================================================================
Inc_Level_Gradual_Min_X:                                       ; Offset_0x042592
		move.w	(Sonic_Level_Limits_Min_X).w,d0             ; $FFFFEE14
		move.l	Obj_Control_Var_00(A0),d1                       ; $0030
		addi.l	#$00004000,d1
		move.l	D1, Obj_Control_Var_00(A0)                       ; $0030
		swap	D1
		sub.w	D1,d0
		cmp.w	(Target_Camera_Min_X).w,d0                  ; $FFFFFA94
		ble.s	Offset_0x0425B4
		move.w	D0,(Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
		rts
Offset_0x0425B4:
		move.w	(Target_Camera_Min_X).w,(Sonic_Level_Limits_Min_X).w ; $FFFFFA94, $FFFFEE14
		jmp	(DeleteObject)                         ; Offset_0x011138
;===============================================================================
Inc_Level_Gradual_Min_Y:                                       ; Offset_0x0425C0
		move.w	(Sonic_Level_Limits_Min_Y).w,d0             ; $FFFFEE18
		move.l	Obj_Control_Var_00(A0),d1                       ; $0030
		addi.l	#$00004000,d1
		move.l	D1, Obj_Control_Var_00(A0)                       ; $0030
		swap	D1
		sub.w	D1,d0
		cmp.w	(Target_Camera_Min_Y).w,d0                  ; $FFFFFA96
		ble.s	Offset_0x0425E2
		move.w	D0,(Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
		rts
Offset_0x0425E2:
		move.w	(Target_Camera_Min_Y).w,(Sonic_Level_Limits_Min_Y).w ; $FFFFFA96, $FFFFEE18
		jmp	(DeleteObject)                         ; Offset_0x011138
;===============================================================================
Inc_Level_Gradual_Max_Y:                                       ; Offset_0x0425EE
		move.w	(Sonic_Level_Limits_Max_Y).w,d0             ; $FFFFEE1A
		move.l	Obj_Control_Var_00(A0),d1                       ; $0030
		addi.l	#$00004000,d1
		move.l	D1, Obj_Control_Var_00(A0)                       ; $0030
		swap	D1
		add.w	D1,d0
		cmp.w	(Target_Camera_Max_Y).w,d0                  ; $FFFFFA98
		bgt.s	Offset_0x042610
		move.w	D0,(Sonic_Level_Limits_Max_Y).w             ; $FFFFEE1A
		rts
Offset_0x042610:
		move.w	(Target_Camera_Max_Y).w,(Sonic_Level_Limits_Max_Y).w ; $FFFFFA98, $FFFFEE1A
		jmp	(DeleteObject)                         ; Offset_0x011138
;===============================================================================
Level_Resize_Max_X:                                            ; Offset_0x04261C
		dc.w	$0000
		dc.l	Inc_Level_Gradual_Max_X                ; Offset_0x042564
;===============================================================================
Level_Resize_Min_X:                                            ; Offset_0x042622
		dc.w	$0000
		dc.l	Inc_Level_Gradual_Min_X                ; Offset_0x042592
;===============================================================================
Level_Resize_Min_Y:                                            ; Offset_0x042628
		dc.w	$0000
		dc.l	Inc_Level_Gradual_Min_Y                ; Offset_0x0425C0
;===============================================================================
Level_Resize_Max_Y:                                            ; Offset_0x04262E
		dc.w	$0000
		dc.l	Inc_Level_Gradual_Max_Y                ; Offset_0x0425EE
;===============================================================================
Find_Player:                                                   ; Offset_0x042634
		moveq	#0,d0
		moveq	#0,d1
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		move.w	Obj_X(A0),d2                                    ; $0010
		sub.w	Obj_X(A1),d2                                    ; $0010
		bpl.s	Offset_0x04264A
		neg.w   D2
		addq.w	#$02,d0
Offset_0x04264A:
		lea	(Obj_Player_Two).w,a2                       ; $FFFFB04A
		move.w	Obj_X(A0),d3                                    ; $0010
		sub.w	Obj_X(A2),d3                                    ; $0010
		bpl.s	Offset_0x04265C
		neg.w   D3
		addq.w	#$02,d1
Offset_0x04265C:
		cmp.w	D3,d2
		bls.s	Offset_0x042666
		move.l	A2,a1
		move.w	D1,d0
		move.w	D3,d2
Offset_0x042666:
		moveq	#0,d1
		move.w	Obj_Y(A0),d3                                    ; $0014
		sub.w	Obj_Y(A1),d3                                    ; $0014
		bpl.s	Offset_0x042676
		neg.w   D3
		addq.w	#$02,d1
Offset_0x042676:
		rts
;===============================================================================
Change_Flip_X:                                                 ; Offset_0x042678
		bclr	#0, Obj_Flags(A0)                              ; $0004
		tst.w	D0
		beq.s	Offset_0x042688
		bset	#0, Obj_Flags(A0)                              ; $0004
Offset_0x042688:
		rts
;===============================================================================
Change_Flip_X_With_Velocity:                                   ; Offset_0x04268A
		bclr	#0, Obj_Flags(A0)                              ; $0004
		tst.w	Obj_Speed_X(A0)                                  ; $0018
		bmi.s	Offset_0x04269C
		bset	#0, Obj_Flags(A0)                              ; $0004
Offset_0x04269C:
		rts
;===============================================================================
Find_Other_Object:                                             ; Offset_0x04269E
		moveq	#0,d0
		moveq	#0,d1
		move.w	Obj_X(A0),d2                                    ; $0010
		sub.w	Obj_X(A1),d2                                    ; $0010
		bpl.s	Offset_0x0426B0
		neg.w   D2
		addq.w	#$02,d0
Offset_0x0426B0:
		moveq	#0,d1
		move.w	Obj_Y(A0),d3                                    ; $0014
		sub.w	Obj_Y(A1),d3                                    ; $0014
		bpl.s	Offset_0x0426C0
		neg.w   D3
		addq.w	#$02,d1
Offset_0x0426C0:
		rts
;===============================================================================
Move_Light_Gravity:                                            ; Offset_0x0426C2
		moveq	#$20,d1
		move.w	Obj_Speed_X(A0),d0                              ; $0018
		ext.l	D0
		lsl.l	#$08,d0
		add.l	D0, Obj_X(A0)                                    ; $0010
		move.w	Obj_Speed_Y(A0),d0                              ; $001A
		add.w	D1, Obj_Speed_Y(A0)                              ; $001A
		ext.l	D0
		lsl.l	#$08,d0
		add.l	D0, Obj_Y(A0)                                    ; $0014
		rts
;===============================================================================
Move_Sprite_Circular_Simple:                                   ; Offset_0x0426E2
		move.b	Obj_Control_Var_0C(A0),d0                       ; $003C
		jsr	(CalcSine).l                             ; Offset_0x001B20
		asr.w	D2,d0
		asr.w	D2,d1
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		move.w	Obj_X(A1),d2                                    ; $0010
		move.w	Obj_Y(A1),d3                                    ; $0014
		add.w	D0,d2
		add.w	D1,d3
		move.w	D2, Obj_X(A0)                                    ; $0010
		move.w	D3, Obj_Y(A0)                                    ; $0014
		rts
;===============================================================================
Move_Sprite_Circular_Simple_Offset:                            ; Offset_0x04270A
		move.b	Obj_Control_Var_0C(A0),d0                       ; $003C
		jsr	(CalcSine).l                             ; Offset_0x001B20
		asr.w	D2,d0
		asr.w	D2,d1
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		move.w	Obj_X(A1),d2                                    ; $0010
		move.w	Obj_Y(A1),d3                                    ; $0014
		move.b	Obj_Control_Var_12(A0),d4                       ; $0042
		ext.w	D4
		add.w	D4,d2
		move.b	Obj_Control_Var_13(A0),d4                       ; $0043
		ext.w	D4
		add.w	D4,d3
		add.w	D0,d2
		add.w	D1,d3
		move.w	D2, Obj_X(A0)                                    ; $0010
		move.w	D3, Obj_Y(A0)                                    ; $0014
		rts
;===============================================================================
Move_Sprite_At_Angle_Lookup:                                   ; Offset_0x042742
		moveq	#0,d0
		move.b	Obj_Control_Var_0C(A0),d0                       ; $003C
		move.w	D0,d1
		andi.w	#$003F,d0
		lsr.w	#$05,d1
		andi.w	#$0006,d1
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		lea	Obj_Control_Var_10(A2),a3                       ; $0040
		move.w	Obj_X(A1),d2                                    ; $0010
		move.w	Obj_Y(A1),d3                                    ; $0014
		move.w	D0,d4
		not.w   D4
		move.w	At_Angle_Lookup_List(pc,d1.w),d1       ; Offset_0x04277A
		jsr	At_Angle_Lookup_List(pc,d1.w)           ; Offset_0x04277A
		move.w	D2, Obj_X(A0)                                    ; $0010
		move.w	D3, Obj_Y(A0)                                    ; $0014
		rts
;-------------------------------------------------------------------------------
At_Angle_Lookup_List:                                          ; Offset_0x04277A
		dc.w	At_Angle_0x00_To_0x3F-At_Angle_Lookup_List ; Offset_0x042782
		dc.w	At_Angle_0x40_To_0x7F-At_Angle_Lookup_List ; Offset_0x042792
		dc.w	At_Angle_0x80_To_0xBF-At_Angle_Lookup_List ; Offset_0x0427A4
		dc.w	At_Angle_0xC0_To_0xFF-At_Angle_Lookup_List ; Offset_0x0427BA
;-------------------------------------------------------------------------------
At_Angle_0x00_To_0x3F:                                         ; Offset_0x042782
		moveq	#0,d1
		move.b	(A2,d0),d1
		add.w	D1,d2
		move.b	(A3,d4),d1
		add.w	D1,d3
		rts
;-------------------------------------------------------------------------------
At_Angle_0x40_To_0x7F:                                         ; Offset_0x042792
		moveq	#0,d1
		move.b	(A3,d4),d1
		add.w	D1,d2
		move.b	(A2,d0),d1
		neg.w   D1
		add.w	D1,d3
		rts
;-------------------------------------------------------------------------------
At_Angle_0x80_To_0xBF:                                         ; Offset_0x0427A4
		moveq	#0,d1
		move.b	(A2,d0),d1
		neg.w   D1
		add.w	D1,d2
		moveq	#0,d1
		move.b	(A3,d4),d1
		neg.w   D1
		add.w	D1,d3
		rts
;-------------------------------------------------------------------------------
At_Angle_0xC0_To_0xFF:                                         ; Offset_0x0427BA
		moveq	#0,d1
		move.b	(A3,d4),d1
		neg.w   D1
		add.w	D1,d2
		moveq	#0,d1
		move.b	(A2,d0),d1
		add.w	D1,d3
		rts
;===============================================================================
Move_Sprite_Angle_Y_Lookup:                                    ; Offset_0x0427CE
		moveq	#0,d0
		move.b	Obj_Control_Var_0C(A0),d0                       ; $003C
		move.w	D0,d1
		andi.w	#$003F,d0
		lsr.w	#$05,d1
		andi.w	#$0006,d1
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		lea	Obj_Control_Var_10(A2),a3                       ; $0040
		move.w	Obj_Y(A1),d3                                    ; $0014
		move.w	D0,d4
		not.w   D4
		move.w	Offset_0x042800(pc,d1.w),d1
		jsr	Offset_0x042800(pc,d1.w)
		add.w	D1,d3
		move.w	D3, Obj_Y(A0)                                    ; $0014
		rts
;-------------------------------------------------------------------------------
Offset_0x042800:
		dc.w	Offset_0x042808-Offset_0x042800
		dc.w	Offset_0x042810-Offset_0x042800
		dc.w	Offset_0x04281A-Offset_0x042800
		dc.w	Offset_0x042824-Offset_0x042800
;-------------------------------------------------------------------------------
Offset_0x042808:
		moveq	#0,d1
		move.b	(A3,d4),d1
		rts
;-------------------------------------------------------------------------------
Offset_0x042810:
		moveq	#0,d1
		move.b	(A2,d0),d1
		neg.w   D1
		rts
;-------------------------------------------------------------------------------
Offset_0x04281A:
		moveq	#0,d1
		move.b	(A3,d4),d1
		neg.w   D1
		rts
;-------------------------------------------------------------------------------
Offset_0x042824:
		moveq	#0,d1
		move.b	(A2,d0),d1
		rts
;===============================================================================
Move_Sprite_Angle_X_Lookup_Offset:                             ; Offset_0x04282C
		moveq	#0,d0
		move.b	Obj_Control_Var_0C(A0),d0                       ; $003C
		move.b	D0,d1
		rol.b	#$03,d1
		andi.w	#$0006,d1
		move.w	Offset_0x042842(pc,d1.w),d2
		jmp	Offset_0x042842(pc,d2.w)
;-------------------------------------------------------------------------------
Offset_0x042842:
		dc.w	Offset_0x04284A-Offset_0x042842
		dc.w	Offset_0x042852-Offset_0x042842
		dc.w	Offset_0x04285E-Offset_0x042842
		dc.w	Offset_0x04286E-Offset_0x042842
;-------------------------------------------------------------------------------
Offset_0x04284A:
		move.b	(A1,d0),d1
		bra.w	Offset_0x04287E
;-------------------------------------------------------------------------------
Offset_0x042852:
		moveq	#$7F,d1
		sub.w	D0,d1
		move.b	(A1,d1),d1
		bra.w	Offset_0x04287E
;-------------------------------------------------------------------------------
Offset_0x04285E:
		move.w	D0,d1
		andi.w	#$003F,d1
		move.b	(A1,d1),d1
		neg.w   D1
		bra.w	Offset_0x04287E
;-------------------------------------------------------------------------------
Offset_0x04286E:
		move.w	#$00FF,d1
		sub.w	D0,d1
		move.b	(A1,d1),d1
		neg.w   D1
		bra.w	Offset_0x04287E
;-------------------------------------------------------------------------------
Offset_0x04287E:
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		move.w	Obj_X(A1),d2                                    ; $0010
		move.b	Obj_Control_Var_12(A0),d3                       ; $0042
		ext.w	D3
		add.w	D3,d2
		add.w	D1,d2
		move.w	D2, Obj_X(A0)                                    ; $0010
		move.w	Obj_Y(A1),d2                                    ; $0014
		move.b	Obj_Control_Var_13(A0),d3                       ; $0043
		ext.w	D3
		add.w	D3,d2
		move.w	D2, Obj_Y(A0)                                    ; $0014
		rts
;===============================================================================
Move_Sprite_Angle_Y_Lookup_Offset:                             ; Offset_0x0428A6
		moveq	#0,d0
		move.b	Obj_Control_Var_0C(A0),d0                       ; $003C
		move.b	D0,d1
		rol.b	#$03,d1
		andi.w	#$0006,d1
		move.w	Offset_0x0428BC(pc,d1.w),d2
		jmp	Offset_0x0428BC(pc,d2.w)
;-------------------------------------------------------------------------------
Offset_0x0428BC:
		dc.w	Offset_0x0428C4-Offset_0x0428BC
		dc.w	Offset_0x0428CC-Offset_0x0428BC
		dc.w	Offset_0x0428D8-Offset_0x0428BC
		dc.w	Offset_0x0428E8-Offset_0x0428BC
;-------------------------------------------------------------------------------
Offset_0x0428C4:
		move.b	(A1,d0),d1
		bra.w	Offset_0x0428F8
;-------------------------------------------------------------------------------
Offset_0x0428CC:
		moveq	#$7F,d1
		sub.w	D0,d1
		move.w	(A1,d1),d1
		bra.w	Offset_0x0428F8
;-------------------------------------------------------------------------------
Offset_0x0428D8:
		move.w	D0,d1
		andi.w	#$003F,d1
		move.w	(A1,d1),d1
		neg.w   D1
		bra.w	Offset_0x0428F8
;-------------------------------------------------------------------------------
Offset_0x0428E8:
		move.w	#$00FF,d1
		sub.w	D0,d1
		move.w	(A1,d1),d1
		neg.w   D1
		bra.w	Offset_0x0428F8
;-------------------------------------------------------------------------------
Offset_0x0428F8:
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		move.w	Obj_X(A1),d2                                    ; $0010
		move.b	Obj_Control_Var_12(A0),d3                       ; $0042
		ext.w	D3
		add.w	D3,d2
		move.w	D2, Obj_X(A0)                                    ; $0010
		move.w	Obj_Y(A1),d2                                    ; $0014
		move.b	Obj_Control_Var_13(A0),d3                       ; $0043
		ext.w	D3
		add.w	D3,d2
		add.w	D1,d2
		move.w	D2, Obj_Y(A0)                                    ; $0014
		rts
;===============================================================================
Delete_Sprite_Timed:                                           ; Offset_0x042920
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		bmi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Delete_Sprite_Timed_Or_Fall:                                   ; Offset_0x04292E
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		bmi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		jsr	(ObjectFall)                           ; Offset_0x0110FE
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Delete_Sprite_Timed_Or_Speed:                                  ; Offset_0x042942
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		bmi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		jsr	(SpeedToPos)                           ; Offset_0x01111E
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Delete_Sprite_Timed_Or_Move_Light_Gravity:                     ; Offset_0x042956
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		bmi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		jsr	(Move_Light_Gravity)                   ; Offset_0x0426C2
		bra.w	Add_To_Response_List_And_Display       ; Offset_0x042450
;===============================================================================
Set_Boss_Flag_Timed:                                           ; Offset_0x042968
		subq.w	#$01, Obj_Timer(A0)                              ; $002E
		bmi.s	Offset_0x042970
		rts
Offset_0x042970:
		move.b	#$01,(Boss_Flag).w                          ; $FFFFF7AA
		bra.w	Go_Delete_Object_A0_2                  ; Offset_0x042D4C
;===============================================================================
Hit_Boss_Flash:                                                ; Offset_0x04297A
		lea	(Palette_Row_1_Offset+$02).w,a1             ; $FFFFED22
		moveq	#0,d0
		tst.w	(A1)
		bne.s	Offset_0x042988
		move.w	#$0EEE,d0
Offset_0x042988:
		move.w	D0,(A1)
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to setup a bunch of (sub)object data using a table
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x04298C: Object_Settings_Slotted:
SetupSlottedObjectAttributes:
		moveq	#0,d0
		move.w	(a1)+,d1			; max objects that can be made
		move.w	d1,d2
		move.w	(a1)+,d3
		move.w	(a1)+,d4
		moveq	#0,d5
		move.w	(a1)+,d5
		lea	(Slotted_Objects_Bits).w,a2
		adda.w	d5,a2
		move.b	(a2),d5
		beq.s	.createObject
; Offset_0x0429A4:
.loop:
		lsr.b	#1,d5				; check slot with each bit
		bcc.s	.createObject			; if the slot is clear, create object
		addq.w	#1,d0
		add.w	d4,d3
		dbf	d1,.loop			; repeat until full
		moveq	#0,d0
		move.l	d0,(a0)
		move.l	d0,Obj_X(a0)
		move.l	d0,Obj_Y(a0)
		move.b	d0,Obj_Subtype(a0)
		move.b	d0,Obj_Flags(a0)
		move.w	d0,Obj_Status(a0)		; destroy object if there are no open slots
		addq.w	#8,sp
		rts
; ---------------------------------------------------------------------------
; Offset_0x0429CC:
.createObject:
		bset	d0,(a2)				; activate slot
		move.b	d0,Obj_Control_Var_0B(a0)
		move.w	a2,Obj_Control_Var_0C(a0)	; keep track of address and bit number
		move.w	d3,Obj_Art_VRAM(a0)
		move.l	(a1)+,Obj_Map(a0)
		move.w	(a1)+,Obj_Priority(a0)
		move.b	(a1)+,Obj_Width(a0)
		move.b	(a1)+,Obj_Height(a0)
		move.b	(a1)+,Obj_Map_Id(a0)
		move.b	(a1)+,Obj_Col_Flags(a0)
		bset	#2,Obj_Status(a0)		; turn object slotting on
		move.b	#-1,Obj_Control_Var_0A(a0)	; reset DPLC frame
		bset	#2,Obj_Flags(a0)		; use screen coordinates
		addq.b	#2,Obj_Routine(a0)
		rts
; End of function SetupSlottedObjectAttributes


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to dynamically reload an object's DPLC in a2
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x042A0A: Load_Dynamic_PLC_A2:
LoadDynamicPLC:
		moveq	#0,d0
		move.b	Obj_Map_Id(a0),d0		; get frame number

		cmp.b	Obj_Control_Var_0A(A0),d0
		beq.s	Offset_0x042A56			; if frame is unchanged, skip loading new PLCs
		move.b	d0,Obj_Control_Var_0A(a0)

		move.l	(a2)+,a3
		move.w	Obj_Art_VRAM(a0),d4		; get source address of art

		andi.w	#$7FF,d4			; isolate tile location offset
		lsl.w	#5,d4				; convert to VRAM address
		move.l	(a2)+,a2			; get address of DPLC script
		add.w	d0,d0
		adda.w	(a2,d0.w),a2			; apply offset to script
		move.w	(a2)+,d5			; get number of DMA transactions
		moveq	#0,d3
; Offset_0x042A32: Loop_Load_Art:
.loop:
		move.w	(a2)+,d3
		move.l	d3,d1
		; This is an optimization that isolates the lower 4 bits, meaning that
		; it only needs to multiply by two to get the proper art offset,at the
		; cost of making any art past a 64 KB boundary inaccessable
		; (source: Liliam Bronze, Sonic 3 Unlocked)
		andi.w	#$FFF0,d1
		add.w	d1,d1
		add.l	a3,d1				; get final source address of art
		move.w	d4,d2				; destination VRAM address
		andi.w	#$F,d3
		addq.w	#1,d3
		lsl.w	#4,d3				; d3 is the total number of words to transfer (maximum 16 tiles per transaction)
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,.loop

Offset_0x042A56:
		rts
; End of function LoadDynamicPLC


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to delete an object when it moves off-screen
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Offset_0x042A58: Delete_Sprite_Check_X:
MarkObjectGone:
		move.w	Obj_X(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0
		cmpi.w	#$280,d0
		bhi.s	MarkObjectGone_Respawn
		jmp	(DisplaySprite).l
; ---------------------------------------------------------------------------
; Offset_0x042A70: Delete_Sprite_Clear_Respaw_Flag:
MarkObjectGone_Respawn:
		move.w	Obj_Respaw_Ref(a0),d0
		beq.s	Offset_0x042A7C
		move.w	d0,a2
		bclr	#7,(a2)

Offset_0x042A7C:
		bset	#7,Obj_Status(a0)
		move.l	#DeleteObject,(a0)
		rts
; End of function MarkObjectGone

;===============================================================================
Delete_Sprite_Check_X_2:                                       ; Offset_0x042A8A
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.s	Delete_Sprite_Clear_Respaw_Flag_2      ; Offset_0x042AA2
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Delete_Sprite_Clear_Respaw_Flag_2:                             ; Offset_0x042AA2
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Offset_0x042AAE
		move.w	D0,a2
		bclr	#$07,(A2)
Offset_0x042AAE:
		bset	#$04, Obj_Control_Var_08(A0)                     ; $0038
		move.l	#DeleteObject,(A0)                    ; Offset_0x011138
		rts
;===============================================================================
Delete_Sprite_Check_X_3:                                       ; Offset_0x042ABC
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.s	MarkObjectGone_Respawn        ; Offset_0x042A70
		rts
;===============================================================================
Delete_Sprite_Check_X_Y:                                       ; Offset_0x042AD0
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	(Camera_Y).w,d0                             ; $FFFFEE7C
		addi.w	#$0080,d0
		cmpi.w	#$0200,d0
		bhi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Obj_Flicker_Move:                                              ; Offset_0x042AFE
		jsr	(ObjectFall)                           ; Offset_0x0110FE
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	(Camera_Y).w,d0                             ; $FFFFEE7C
		addi.w	#$0080,d0
		cmpi.w	#$0200,d0
		bhi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		btst	#0,(Vint_runcount+$03).w       ; $FFFFFE0F
		beq.w	SetupObjectAttributes_End                   ; Offset_0x041D98
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Delete_Sprite_Clear_Respaw_Flag_Check_X:                       ; Offset_0x042B3C
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	MarkObjectGone_Respawn        ; Offset_0x042A70
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Delete_Sprite_Clear_Respaw_Flag_Check_X_2                      ; Offset_0x042B5C
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Delete_Sprite_Clear_Respaw_Flag_2      ; Offset_0x042AA2
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Delete_Sprite_Clear_Respaw_Flag_Check_X_3:                     ; Offset_0x042B7C
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	MarkObjectGone_Respawn        ; Offset_0x042A70
		jmp	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
;===============================================================================
Delete_Sprite_Clear_Respaw_Flag_Check_X_Y:                     ; Offset_0x042B96
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		move.w	Obj_Y(A0),d0                                    ; $0014
		sub.w	(Camera_Y).w,d0                             ; $FFFFEE7C
		addi.w	#$0080,d0
		cmpi.w	#$0200,d0
		bhi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Delete_Sprite_Slotted_Check_X:                                 ; Offset_0x042BCA
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.s	Go_Delete_Slotted                      ; Offset_0x042BE2
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Go_Delete_Slotted:                                             ; Offset_0x042BE2
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Go_Delete_Slotted_2                    ; Offset_0x042BEE
		move.w	D0,a2
		bclr	#$07,(A2)
Go_Delete_Slotted_2:                                           ; Offset_0x042BEE
		move.l	#DeleteObject,(A0)                    ; Offset_0x011138
		bset	#$07, Obj_Status(A0)                             ; $002A
;-------------------------------------------------------------------------------
Remove_From_Tracking_Slot:                                     ; Offset_0x042BFA
		move.b	Obj_Control_Var_0B(A0),d0                       ; $003B
		move.w	Obj_Control_Var_0C(A0),a1                       ; $003C
		bclr	D0,(A1)
		rts
;===============================================================================
Delete_Slotted_Check_X:                                        ; Offset_0x042C06
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.s	Go_Delete_Slotted                      ; Offset_0x042BE2
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Check_Delete_Touch_Slotted:                                    ; Offset_0x042C1E
		tst.b	Obj_Status(A0)                                   ; $002A
		bmi.s	Go_Delete_Slotted_3                    ; Offset_0x042C42
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.s	Go_Delete_Slotted                      ; Offset_0x042BE2
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Go_Delete_Slotted_3:                                           ; Offset_0x042C42
		move.l	#DeleteObject,(A0)                    ; Offset_0x011138
		bra.s	Remove_From_Tracking_Slot              ; Offset_0x042BFA
;===============================================================================
Check_Delete_Touch_Slotted_2:                                  ; Offset_0x042C4A
		tst.b	Obj_Status(A0)                                   ; $002A
		bmi.s	Go_Delete_Slotted_3                    ; Offset_0x042C42
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Slotted                      ; Offset_0x042BE2
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
; Delete_Sprite_Check_X_4:                                     ; Offset_0x042C70
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
; Delete_Sprite_Check_X_5:                                     ; Offset_0x042C8A
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Object_A0                    ; Offset_0x042D3E
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
; Delete_Sprite_Check_X_6:                                     ; Offset_0x042CAA
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Object_A0_2                  ; Offset_0x042D4C
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
; Delete_Sprite_Touch_Check_X:                                 ; Offset_0x042CC4
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Object_A0_2                  ; Offset_0x042D4C
		jsr	(Add_SpriteToCollisionResponseList)       ; Offset_0x00A540
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
; Delete_Sprite_Remove_Tracking_List_Check_X:                  ; Offset_0x042CE4
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.s	Offset_0x042CFC
		jmp	(DisplaySprite)                        ; Offset_0x011148
Offset_0x042CFC:
		move.l	#DeleteObject,(A0)                    ; Offset_0x011138
		bset	#$07, Obj_Status(A0)                             ; $002A
		bra.w	Remove_From_Tracking_Slot              ; Offset_0x042BFA
;===============================================================================
Display_Sprite_Check_X:                                        ; Offset_0x042D0C
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.s	Offset_0x042CFC
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Display_Sprite_Check_X_2:                                      ; Offset_0x042D24
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.w	Go_Delete_Object_A0_2                  ; Offset_0x042D4C
		jmp	(DisplaySprite)
;===============================================================================
Go_Delete_Object_A0:                                           ; Offset_0x042D3E
		move.l	#DeleteObject,(A0)                    ; Offset_0x011138
		bset	#$07, Obj_Status(A0)                             ; $002A
		rts
;===============================================================================
Go_Delete_Object_A0_2:                                         ; Offset_0x042D4C
		move.l	#DeleteObject,(A0)                    ; Offset_0x011138
		bset	#$04, Obj_Control_Var_08(A0)                     ; $0038
		rts
;===============================================================================
Set_Indexed_Velocity:                                          ; Offset_0x042D5A
		moveq	#0,d1
		move.b	Obj_Subtype(A0),d1                              ; $002C
		add.w	D1,d1
		add.w	D1,d0
Set_Indexed_Velocity_D0:                                       ; Offset_0x042D64
		lea	Offset_0x042D7E(pc,d0.w),a1
		move.w	(A1)+, Obj_Speed_X(A0)                           ; $0018
		move.w	(A1)+, Obj_Speed_Y(A0)                           ; $001A
		btst	#0, Obj_Flags(A0)                              ; $0004
		beq.s	Offset_0x042D7C
		neg.w   Obj_Speed_X(A0)                                  ; $0018
Offset_0x042D7C:
		rts
;-------------------------------------------------------------------------------
Offset_0x042D7E:
		dc.w	$FF00, $FF00, $0100, $FF00, $FE00, $FE00, $0200, $FE00
		dc.w	$FD00, $FE00, $0300, $FE00, $FE00, $FE00, $0000, $FE00
		dc.w	$FC00, $FD00, $0400, $FD00, $0300, $FD00, $FC00, $FD00
		dc.w	$0400, $FD00, $FE00, $FE00, $0200, $FE00, $0000, $FF00
		dc.w	$FF00, $FF00
;===============================================================================
Find_Player_Eight_Way:                                         ; Offset_0x042DC2
		bsr.w	Find_Player                            ; Offset_0x042634
		cmp.w	D2,d3
		beq.s	Offset_0x042E18
		bhi.s	Offset_0x042DF2
		swap	D3
		clr.w	D3
		divu.w	D2,d3
		tst.w	D0
		beq.s	Offset_0x042DE4
		cmpi.w	#$8000,d2
		bcs.s	Offset_0x042E34
		tst.w	D0
		beq.s	Offset_0x042E30
		bra.w	Offset_0x042E38
Offset_0x042DE4:
		cmpi.w	#$8000,d2
		bcs.s	Offset_0x042E44
		tst.w	D1
		bne.s	Offset_0x042E40
		bra.w	Offset_0x042E48
Offset_0x042DF2:
		swap	D2
		clr.w	D2
		divu.w	D3,d2
		tst.w	D1
		bne.s	Offset_0x042E0A
		cmpi.w	#$8000,d2
		bcs.s	Offset_0x042E2C
		tst.w	D0
		bne.s	Offset_0x042E30
		bra.w	Offset_0x042E48
Offset_0x042E0A:
		cmpi.w	#$8000,d2
		bcs.s	Offset_0x042E3C
		tst.w	D0
		bne.s	Offset_0x042E38
		bra.w	Offset_0x042E40
Offset_0x042E18:
		tst.w	D0
		beq.s	Offset_0x042E24
		tst.w	D1
		beq.s	Offset_0x042E30
		bra.w	Offset_0x042E38
Offset_0x042E24:
		tst.w	D1
		bne.s	Offset_0x042E40
		bra.w	Offset_0x042E48
Offset_0x042E2C:
		moveq	#0,d4
		rts
Offset_0x042E30:
		moveq	#$01,d4
		rts
Offset_0x042E34:
		moveq	#$02,d4
		rts
Offset_0x042E38:
		moveq	#$03,d4
		rts
Offset_0x042E3C:
		moveq	#$04,d4
		rts
Offset_0x042E40:
		moveq	#$05,d4
		rts
Offset_0x042E44:
		moveq	#$06,d4
		rts
Offset_0x042E48:
		moveq	#$07,d4
		rts
;===============================================================================
Set_Velocity_X_Track_Player_One:                               ; Offset_0x042E4C
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		bsr.w	Find_Other_Object                      ; Offset_0x04269E
		bclr	#0, Obj_Flags(A0)                              ; $0004
		tst.w	D0
		beq.s	Offset_0x042E66
		neg.w   D4
		bset	#0, Obj_Flags(A0)                              ; $0004
Offset_0x042E66:
		move.w	D4, Obj_Speed_X(A0)                              ; $0018
		rts
;===============================================================================
Chase_Object:                                                  ; Offset_0x042E6C
		move.w	D0,d2
		neg.w   D2
		move.w	D1,d3
		move.w	Obj_X(A0),d4                                    ; $0010
		cmp.w	Obj_X(A1),d4                                    ; $0010
		seq     D5
		beq.s	Offset_0x042E94
		bcs.s	Offset_0x042E82
		neg.w   D1
Offset_0x042E82:
		move.w	Obj_Speed_X(A0),d4                              ; $0018
		add.w	D1,d4
		cmp.w	D2,d4
		blt.s	Offset_0x042E94
		cmp.w	D0,d4
		bgt.s	Offset_0x042E94
		move.w	D4, Obj_Speed_X(A0)                              ; $0018
Offset_0x042E94:
		move.w	Obj_Y(A0),d4                                    ; $0014
		cmp.w	Obj_Y(A1),d4                                    ; $0014
		beq.s	Offset_0x042EB6
		bcs.s	Offset_0x042EA2
		neg.w   D3
Offset_0x042EA2:
		move.w	Obj_Speed_Y(A0),d4                              ; $001A
		add.w	D3,d4
		cmp.w	D2,d4
		blt.s	Offset_0x042EB4
		cmp.w	D0,d4
		bgt.s	Offset_0x042EB4
		move.w	D4, Obj_Speed_Y(A0)                              ; $001A
Offset_0x042EB4:
		rts
Offset_0x042EB6:
		tst.b	D5
		beq.s	Offset_0x042EB4
		clr.w	Obj_Speed_X(A0)                                  ; $0018
		clr.w	Obj_Speed_Y(A0)                                  ; $001A
		rts
;===============================================================================
Chase_Object_X_Only:                                           ; Offset_0x042EC4
		move.w	D0,d2
		neg.w   D2
		move.w	Obj_X(A0),d3                                    ; $0010
		cmp.w	Obj_X(A1),d3                                    ; $0010
		bcs.s	Offset_0x042ED4
		neg.w   D1
Offset_0x042ED4:
		move.w	Obj_Speed_X(A0),d3                              ; $0018
		add.w	D1,d3
		cmp.w	D2,d3
		blt.s	Offset_0x042EE6
		cmp.w	D0,d3
		bgt.s	Offset_0x042EE6
		move.w	D3, Obj_Speed_X(A0)                              ; $0018
Offset_0x042EE6:
		rts
;===============================================================================
Obj_Fade_Selected_From_Black:                                  ; Offset_0x042EE8
		move.l	#Offset_0x042EFA,(A0)
		move.b	#$07, Obj_Control_Var_09(A0)                     ; $0039
		move.b	#$03, Obj_Player_Status(A0)                      ; $002F
Offset_0x042EFA:
		subq.b	#$01, Obj_Timer(A0)                              ; $002E
		bmi.s	Offset_0x042F02
		rts
Offset_0x042F02:
		subq.b	#$01, Obj_Control_Var_09(A0)                     ; $0039
		bmi.w	J_Delete_Object                        ; Offset_0x04258C
		move.b	Obj_Player_Status(A0), Obj_Timer(A0)      ; $002F, $002E
		lea	(Palette_Row_1_Offset).w,a1                 ; $FFFFED20
		lea	(Palette_Row_1_Data_Target).w,a2            ; $FFFFEDA0
		moveq	#$0E,d4
		moveq	#-$20,d5
		moveq	#$1F,d6
Offset_0x042F1E:
		bsr.w	Inc_Color_Obj                          ; Offset_0x042F28
		dbf	D6, Offset_0x042F1E
		rts
Inc_Color_Obj:                                                 ; Offset_0x042F28
		move.b	(A1),d0
		and.b	D4,d0
		move.b	(A2)+,d1
		and.b	D4,d1
		cmp.b	D1,d0
		bcc.s	Offset_0x042F36
		addq.b	#$02,d0
Offset_0x042F36:
		move.b	D0,(A1)+
		move.b	(A1),d0
		move.b	D0,d1
		and.b	D5,d0
		move.b	(A2)+,d2
		move.b	D2,d3
		and.b	D5,d2
		cmp.b	D2,d0
		bcc.s	Offset_0x042F4C
		addi.b	#$20,d0
Offset_0x042F4C:
		and.b	D4,d1
		and.b	D4,d3
		cmp.b	D3,d1
		bcc.s	Offset_0x042F56
		addq.b	#$02,d1
Offset_0x042F56:
		or.b	D0,d1
		move.b	D1,(A1)+
		rts
;===============================================================================
ObjectFall_Animate_Raw:                                        ; Offset_0x042F5C
		jsr	(ObjectFall)                           ; Offset_0x0110FE
		jmp	AnimateRaw(PC)                        ; Offset_0x04208E
;===============================================================================
SpeedToPos_Animate_Raw:                                        ; Offset_0x042F66
		jsr	(SpeedToPos)                           ; Offset_0x01111E
		jmp	AnimateRaw(PC)                        ; Offset_0x04208E
;===============================================================================
Move_Light_Gravity_Animate_Raw:                                ; Offset_0x042F70
		jsr	Move_Light_Gravity(PC)                 ; Offset_0x0426C2
		jmp	AnimateRaw(PC)                        ; Offset_0x04208E
;===============================================================================
Swing_Up_And_Down_Animate_Raw_Wait:                            ; Offset_0x042F78
		jsr	Swing_Up_And_Down(PC)                  ; Offset_0x04232E
;-------------------------------------------------------------------------------
SpeedToPos_Animate_Raw_Wait:                                   ; Offset_0x042F7C
		jsr	(SpeedToPos)                           ; Offset_0x01111E
;-------------------------------------------------------------------------------
Animate_Raw_Wait:                                              ; Offset_0x042F82
		jsr	AnimateRaw(PC)                        ; Offset_0x04208E
		jmp	Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
;===============================================================================
Refresh_Child_Position_Wait:                                   ; Offset_0x042F8A
		jsr	Refresh_Child_Position(PC)             ; Offset_0x042016
;-------------------------------------------------------------------------------
Display_Sprite_Wait:                                           ; Offset_0x042F8E
		jsr	Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
SpeedToPos_Touch_Wait:                                         ; Offset_0x042F98
		jsr	(SpeedToPos)                           ; Offset_0x01111E
		jsr	Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
		jmp	Add_To_Response_List_And_Display(PC)   ; Offset_0x042450
;===============================================================================
Refresh_Animate_Raw_Multi_Delay_Touch:                         ; Offset_0x042FA6
		jsr	Refresh_Child_Position(PC)             ; Offset_0x042016
;-------------------------------------------------------------------------------
Animate_Raw_Multi_Delay_Touch:                                 ; Offset_0x042FAA
		jsr	Animate_Raw_Multi_Delay(PC)            ; Offset_0x04215C
		jmp	Add_To_Response_List_And_Display(PC)   ; Offset_0x042450
;===============================================================================
Animate_Raw_Delete_Sprite_Check_X_Y:                           ; Offset_0x042FB2
		jsr	AnimateRaw(PC)                        ; Offset_0x04208E
;-------------------------------------------------------------------------------
ObjectFall_Delete_Sprite_Check_X_Y:                            ; Offset_0x042FB6
		jsr	(ObjectFall)                           ; Offset_0x0110FE
		jmp	Delete_Sprite_Check_X_Y(PC)            ; Offset_0x042AD0
;===============================================================================
Animate_Raw_Delete_Sprite_Check_X_Y_2:                         ; Offset_0x042FC0
		jsr	AnimateRaw(PC)                        ; Offset_0x04208E
;-------------------------------------------------------------------------------
ObjectFall_Delete_Sprite_Check_X_Y_2:                          ; Offset_0x042FC4
		jsr	(ObjectFall)                           ; Offset_0x0110FE
		jmp	Delete_Sprite_Clear_Respaw_Flag_Check_X_Y(PC) ; Offset_0x042B96
;===============================================================================
SpeedToPos_Wait:                                               ; Offset_0x042FCE
		jsr	(SpeedToPos)                           ; Offset_0x01111E
		jmp	Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
;===============================================================================
Swing_Up_And_Down_Wait:                                        ; Offset_0x042FD8
		jsr	Swing_Up_And_Down(PC)                  ; Offset_0x04232E
		jsr	(SpeedToPos)                           ; Offset_0x01111E
		jmp	Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
;===============================================================================
Animate_Raw_Touch:                                             ; Offset_0x042FE6
		jsr	AnimateRaw(PC)                        ; Offset_0x04208E
		jmp	Add_To_Response_List_And_Display(PC)   ; Offset_0x042450
;===============================================================================
Animate_Raw_Display_Sprite:                                    ; Offset_0x042FEE
		jsr	AnimateRaw(PC)                        ; Offset_0x04208E
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
SpeedToPos_Animate_Raw_Wait_2:                                 ; Offset_0x042FF8
		jsr	(SpeedToPos)                           ; Offset_0x01111E
		jsr	AnimateRaw(PC)                        ; Offset_0x04208E
		jmp	Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
;===============================================================================
J_DisplaySprite:                                               ; Offset_0x043006
		jmp	(DisplaySprite)                        ; Offset_0x011148
;===============================================================================
Animate_Raw_Wait_2:                                            ; Offset_0x04300C
		jsr	AnimateRaw(PC)                        ; Offset_0x04208E
		jmp	Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
;===============================================================================
J_Add_To_Response_List_And_Display:                            ; Offset_0x043014
		jmp	Add_To_Response_List_And_Display(PC)   ; Offset_0x042450
;===============================================================================
Enemy_Defeat_Score:                                            ; Offset_0x043018
		bset	#$07, Obj_Status(A0)                             ; $002A
		move.w	Obj_Height_3(A0),a1                             ; $0044
		moveq	#0,d0
		move.w	(Enemy_Hit_Chain_Count).w,d0                ; $FFFFF7D0
		addq.w	#$02,(Enemy_Hit_Chain_Count).w              ; $FFFFF7D0
		cmpi.w	#$0006,d0
		bcs.s	Offset_0x043034
		moveq	#$06,d0
Offset_0x043034:
		move.w	D0, Obj_Control_Var_0E(A0)                       ; $003E
		move.w	Enemy_Defeat_Score_Points(pc,d0.w),d0  ; Offset_0x043094
		cmpi.w	#$0020,(Enemy_Hit_Chain_Count).w            ; $FFFFF7D0
		bcs.s	Offset_0x04304E
		move.w	#$03E8,d0
		move.w	#$000A, Obj_Control_Var_0E(A0)                   ; $003E
Offset_0x04304E:
		move.w	A1,a3
		jsr	(Add_Points).l                           ; Offset_0x007AEC
		move.l	#Obj_Explosion,(A0)                      ; Offset_0x013D7C
		move.b	#0, Obj_Routine(A0)                            ; $0005
		tst.w	Obj_Speed_Y(A1)                                  ; $001A
		bmi.s	Offset_0x04307C
		move.w	Obj_Y(A1),d0                                    ; $0014
		cmp.w	Obj_Y(A0),d0                                    ; $0014
		bcc.s	Offset_0x043088
		neg.w   Obj_Speed_Y(A1)                                  ; $001A
		jmp	(DisplaySprite)                        ; Offset_0x011148
Offset_0x04307C:
		addi.w	#$0100, Obj_Speed_Y(A0)                          ; $001A
		jmp	(DisplaySprite)                        ; Offset_0x011148
Offset_0x043088:
		subi.w	#$0100, Obj_Speed_Y(A0)                          ; $001A
		jmp	(DisplaySprite)                        ; Offset_0x011148
;-------------------------------------------------------------------------------
Enemy_Defeat_Score_Points:                                     ; Offset_0x043094
		dc.w	$000A  ;  100
		dc.w	$0014  ;  200
		dc.w	$0032  ;  500
		dc.w	$0064  ; 1000
;===============================================================================
Check_Left_Right_Controller_Shake:                             ; Offset_0x04309C
		subq.b	#$01, Obj_Control_Var_0D(A0)                     ; $003D
		bpl.s	Offset_0x0430AE
		move.b	#$05, Obj_Control_Var_0C(A0)                     ; $003C
		move.b	#$3C, Obj_Control_Var_0D(A0)                     ; $003D
Offset_0x0430AE:
		move.w	Obj_Control_Var_0E(A0),a2                       ; $003E
		move.w	(A2),d0
		andi.w	#$000C,d0
		beq.s	Offset_0x0430D2
		move.w	Obj_Control_Var_0A(A0),d1                       ; $003A
		move.w	D0, Obj_Control_Var_0A(A0)                       ; $003A
		andi.w	#$000C,d1
		eor.w	D1,d0
		beq.s	Offset_0x0430D2
		subq.b	#$01, Obj_Control_Var_0C(A0)                     ; $003C
		bmi.s	Offset_0x0430D2
		moveq	#0,d0
Offset_0x0430D2:
		rts
;===============================================================================
Check_Player_Collision:                                        ; Offset_0x0430D4
		move.b	Obj_Col_Prop(A0),d0                             ; $0029
		beq.s	Offset_0x0430FC
		clr.b	Obj_Col_Prop(A0)                                 ; $0029
		move.w	Obj_Child_Ref(A0),d1                            ; $0046
		beq.s	Offset_0x0430EC
		move.w	D1,a1
		bset	#0, Obj_Control_Var_08(A1)                     ; $0038
Offset_0x0430EC:
		andi.w	#$0003,d0
		add.w	D0,d0
		move.w	(Offset_0x0430FE-$02)(pc,d0.w),a1
		move.w	A1, Obj_Height_3(A0)                             ; $0044
		moveq	#$01,d1
Offset_0x0430FC:
		rts
;-------------------------------------------------------------------------------
Offset_0x0430FE:
		dc.w	Obj_Player_One                                   ; $B000
		dc.w	Obj_Player_Two                                   ; $B04A
		dc.w	Obj_Player_One                                   ; $B000
;===============================================================================
Check_Player_In_Range:                                         ; Offset_0x043104
		moveq	#0,d0
		lea	(Obj_Player_Two).w,a2                       ; $FFFFB04A
		move.w	Obj_X(A2),d1                                    ; $0010
		move.w	Obj_Y(A2),d2                                    ; $0014
		move.w	Obj_X(A0),d3                                    ; $0010
		move.w	Obj_Y(A0),d4                                    ; $0014
		add.w	(A1)+,d3
		move.w	D3,d5
		add.w	(A1)+,d5
		add.w	(A1)+,d4
		move.w	D4,d6
		add.w	(A1)+,d6
		bsr.w	Offset_0x043138
		swap	D0
		lea	(Obj_Player_One).w,a2                       ; $FFFFB000
		move.w	Obj_X(A2),d1                                    ; $0010
		move.w	Obj_Y(A2),d2                                    ; $0014
Offset_0x043138:
		cmp.w	D3,d1
		bcs.s	Offset_0x04314A
		cmp.w	D5,d1
		bcc.s	Offset_0x04314A
		cmp.w	D4,d2
		bcs.s	Offset_0x04314A
		cmp.w	D6,d2
		bcc.s	Offset_0x04314A
		move.w	A2,d0
Offset_0x04314A:
		rts
;===============================================================================
Pal_Load_Line_1:                                               ; Offset_0x04314C
		lea	(Palette_Row_1_Offset).w,a2                 ; $FFFFED20
		moveq	#$07,d0
Offset_0x043152:
		move.l	(A1)+,(A2)+
		dbf	D0, Offset_0x043152
		rts
;===============================================================================
Displace_Player_Offset:                                        ; Offset_0x04315A
		move.b	Obj_Status(A0),d0                               ; $002A
		andi.b	#$18,d0
		beq.s	Offset_0x043194
		bclr	#$03, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x04317C
		lea	(Obj_Player_One).w,a1                       ; $FFFFB000
		bclr	#$03, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
Offset_0x04317C:
		bclr	#$04, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x043194
		lea	(Obj_Player_Two).w,a1                       ; $FFFFB04A
		bclr	#$04, Obj_Status(A1)                             ; $002A
		bset	#$01, Obj_Status(A1)                             ; $002A
Offset_0x043194:
		rts
;===============================================================================
Run_Palette_Rotation_Script:                                   ; Offset_0x043196
		lea	(Palette_Rotation_Data).w,a1                ; $FFFFFADE
Offset_0x04319A:
		move.w	(A1),d0
		beq.s	Offset_0x0431DE
		subq.b	#$01, $0002(A1)
		bpl.s	Offset_0x0431CE
		move.l	$0004(A1),a2
		move.w	(A2),a3
		lea	(A2,d0),a4
		move.w	(A4),d1
		bpl.s	Offset_0x0431B6
		bsr.w	Offset_0x0431D2
Offset_0x0431B6:
		moveq	#0,d2
		move.b	$0002(A2),d2
Offset_0x0431BC:
		move.w	(A4)+,(A3)+
		dbf	D2, Offset_0x0431BC
		move.w	(A4)+,d0
		move.b	D0, $0002(A1)
		move.l	A4,d0
		sub.l	A2,d0
		move.w	D0,(A1)
Offset_0x0431CE:
		addq.w	#$08,a1
		bra.s	Offset_0x04319A
Offset_0x0431D2:
		move.b	$0003(A2),d2
		bne.s	Offset_0x0431E0
		moveq	#$04,d0
		lea	(A2,d0),a4
Offset_0x0431DE:
		rts
Offset_0x0431E0:
		neg.w   D1
		jmp	Offset_0x0431E6-$08(pc,d1.w)
;-------------------------------------------------------------------------------
Offset_0x0431E6:
		bra.w	Offset_0x0431EE
		bra.w	Offset_0x043210
;-------------------------------------------------------------------------------
Offset_0x0431EE:
		addq.b	#$01, $0003(A1)
		cmp.b	$0003(A1),d2
		bhi.s	Offset_0x043208
		move.w	$0002(A4),d2
		adda.w	D2,a2
		move.l	A2, $0004(A1)
		move.w	(A2),a3
		clr.w	$0002(A1)
Offset_0x043208:
		moveq	#$04,d0
		lea	(A2,d0),a4
		rts
;-------------------------------------------------------------------------------
Offset_0x043210:
		addq.b	#$01, $0003(A1)
		cmp.b	$0003(A1),d2
		bls.s	Offset_0x043222
		moveq	#$04,d0
		lea	(A2,d0),a4
		rts
Offset_0x043222:
		move.l	(Palette_Rotation_Custom).w,a2              ; $FFFFFADA
		move.l	A1, -(sp)
		jsr	(A2)
		move.l	(sp)+,a1
		addq.w	#$04, sp
		bra.s	Offset_0x0431CE
;===============================================================================
Child_Get_Priority:                                            ; Offset_0x043230
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		bclr	#$07, Obj_Art_VRAM(A0)                           ; $000A
		btst	#$07, Obj_Art_VRAM(A1)                           ; $000A
		beq.s	Offset_0x043248
		bset	#$07, Obj_Art_VRAM(A0)                           ; $000A
Offset_0x043248:
		move.w	Obj_Priority(A1), Obj_Priority(A0)        ; $0008, $0008
		rts
;===============================================================================
Move_0x0E_Bytes_A2_A1:                                         ; Offset_0x043250
		move.w	(A1)+,a3
		move.w	(A2)+,(A3)+
		move.w	(A1)+,a3
		move.w	(A2)+,(A3)+
		move.w	(A1)+,a3
		move.w	(A2)+,(A3)+
Move_0x08_Bytes_A2_A1:                                         ; Offset_0x04325C
		move.w	(A1)+,a3
		move.w	(A2)+,(A3)+
Move_0x06_Bytes_A2_A1:                                         ; Offset_0x043260
		move.w	(A1)+,a3
		move.w	(A2)+,(A3)+
Move_0x04_Bytes_A2_A1:                                         ; Offset_0x043264
		move.w	(A1)+,a3
		move.w	(A2)+,(A3)+
		move.w	(A1)+,a3
		move.w	(A2)+,(A3)+
		rts
;===============================================================================
Object_Check_Range:                                            ; Offset_0x04326E
		move.l	#Null_Mappings, Obj_Map(A0)     ; Offset_0x0432C8, $000C
		bset	#$02, Obj_Flags(A0)                              ; $0004
		move.b	#$20, Obj_Width(A0)                              ; $0007
		move.b	#$20, Obj_Height(A0)                             ; $0006
		move.l	(sp)+, Obj_Control_Var_04(A0)                    ; $0034
		move.l	#Offset_0x043292,(A0)
Offset_0x043292:
		tst.b	Obj_Flags(A0)                                    ; $0004
		bmi.s	Offset_0x0432C2
		move.w	Obj_X(A0),d0                                    ; $0010
		andi.w	#$FF80,d0
		sub.w	(Camera_X_Left).w,d0                        ; $FFFFF7DA
		cmpi.w	#$0280,d0
		bhi.s	Offset_0x0432B0
		jmp	(DisplaySprite)                        ; Offset_0x011148
Offset_0x0432B0:
		move.w	Obj_Respaw_Ref(A0),d0                           ; $0048
		beq.s	Offset_0x0432BC
		move.w	D0,a2
		bclr	#$07,(A2)
Offset_0x0432BC:
		jmp	(DeleteObject)                         ; Offset_0x011138
Offset_0x0432C2:
		move.l	Obj_Control_Var_04(A0),(A0)                     ; $0034
		rts
;-------------------------------------------------------------------------------
Null_Mappings:                                                 ; Offset_0x0432C8
		dc.w	Null_Mappings-Null_Mappings


; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to restore level music
; ---------------------------------------------------------------------------
; Offset_0x0432CA: Level_Load_Music:
Restore_LevelMusic:
		moveq	#0,d0
		lea	(Current_ZoneAndAct).w,a1
		move.b	(a1)+,d0
		add.b	d0,d0
		add.b	(a1),d0
		move.b	Level_PlayList(pc,d0.w),d0
		jmp	(PlaySound).l
; ===========================================================================
; Offset_0x0432E0:
Level_PlayList:
		dc.b	mus_AIZ1
		dc.b	mus_AIZ2
		dc.b	mus_HCZ1
		dc.b	mus_HCZ2
		dc.b	mus_MGZ1
		dc.b	mus_MGZ2
		dc.b	mus_CNZ1
		dc.b	mus_CNZ2
		dc.b	mus_FBZ1
		dc.b	mus_FBZ2
		dc.b	mus_ICZ1
		dc.b	mus_ICZ2
		dc.b	mus_LBZ1
		dc.b	mus_LBZ2
; End of function Restore_LevelMusic

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to restore control to the player
; ---------------------------------------------------------------------------
; Offset_0x0432EE: Restore_Player_Control:
Restore_PlayerControl:
		lea	(Obj_Player_One).w,a1
; Offset_0x0432F2: Restore_Player_Control_A1:
Restore_PlayerControl2:
		clr.b	Obj_Player_Control(a1)
		bset	#1,Obj_Status(a1)
		clr.b	Obj_Player_Control(a1)
		rts
; End of function Restore_PlayerControl

;===============================================================================
Obj_Load_End_Level_Art:                                        ; Offset_0x043302
		move.l	#J_Run_Object_Wait_Timer_A0,(A0)      ; Offset_0x043340
		st	(Player_Control_Lock_Flag).w                 ; $FFFFFAA8
		bset	#$04, Obj_Control_Var_08(A0)                     ; $0038
		move.w	#$007F, Obj_Timer(A0)                            ; $002E
		move.l	#Offset_0x043344, Obj_Child(A0)                  ; $0034
		moveq	#signextendB(cmd_FadeOut),d0                                  ; -$20
		jsr	(PlaySound).l                           ; Offset_0x001176
		lea	PLC_End_Level_Art(PC),a1              ; Offset_0x043332
		jmp	(LoadPLC_Direct).l                           ; Offset_0x001502
;-------------------------------------------------------------------------------
PLC_End_Level_Art:                                             ; Offset_0x043332
		dc.w	(((PLC_EL_00_End-PLC_EL_00)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_EL_00:
		dc.l	Art_End_Panel_Post                     ; Offset_0x126E6A
		dc.w	$D3C0
		dc.l	Art_Monitors                           ; Offset_0x1071DA
		dc.w	$9880
PLC_EL_00_End:                                                 ; Offset_0x04333E
;-------------------------------------------------------------------------------
J_Run_Object_Wait_Timer_A0                                     ; Offset_0x043340
		jmp	Run_Object_Wait_Timer_A0(PC)           ; Offset_0x0423D2
;-------------------------------------------------------------------------------
Offset_0x043344:
		move.l	#Offset_0x043364,(A0)
		clr.b	(Boss_Flag).w                                ; $FFFFF7AA
		jsr	Restore_LevelMusic(PC)                   ; Offset_0x0432CA
		lea	Offset_0x04335E(PC),a2
		jsr	Load_Child_Object_Simple_A2(PC)        ; Offset_0x041F5A
		jmp	After_Boss_Clean_Up(PC)                ; Offset_0x041ACA
;-------------------------------------------------------------------------------
Offset_0x04335E:
		dc.w	$0000
		dc.l	Obj_End_Panel                          ; Offset_0x041812
;-------------------------------------------------------------------------------
Offset_0x043364:
		tst.b	(Player_Control_Lock_Flag).w                 ; $FFFFFAA8
		bne.w	SetupObjectAttributes_End                   ; Offset_0x041D98
		move.l	#Offset_0x043376,(A0)
		jmp	Restore_PlayerControl(PC)             ; Offset_0x0432EE
;-------------------------------------------------------------------------------
Offset_0x043376:
		tst.b	(End_Level_Flag).w                           ; $FFFFFAAA
		beq.w	SetupObjectAttributes_End                   ; Offset_0x041D98
		jsr	Level_Transition_Size_Load(PC)         ; Offset_0x043458
		jmp	(DeleteObject)                         ; Offset_0x011138
;===============================================================================
Displace_Player_Offset_Delete_Object                           ; Offset_0x043388
		jsr	Displace_Player_Offset(PC)             ; Offset_0x04315A
		jmp	(DeleteObject)
;===============================================================================
Check_Camera_In_Range:                                         ; Offset_0x043392
		move.w	(Camera_Y).w,d0                             ; $FFFFEE7C
		cmp.w	(A1)+,d0
		bcs.s	Offset_0x0433AE
		cmp.w	(A1)+,d0
		bhi.s	Offset_0x0433AE
		move.w	(Camera_X).w,d1                             ; $FFFFEE78
		cmp.w	(A1)+,d1
		bcs.s	Offset_0x0433AE
		cmp.w	(A1)+,d1
		bhi.s	Offset_0x0433AE
		move.l	(sp),(A0)
		rts
Offset_0x0433AE:
		jsr	(MarkObjGone_3)                        ; Offset_0x011B3E
		addq.w	#$04, sp
		rts
;===============================================================================
Update_Sonic_Level_Limits_X_Y:                                 ; Offset_0x0433B8
		move.w	(Camera_X).w,(Sonic_Level_Limits_Min_X).w ; $FFFFEE78, $FFFFEE14
		move.w	(Level_Limits_Max_Y).w,d0                   ; $FFFFEE12
		cmp.w	(Sonic_Level_Limits_Max_Y).w,d0             ; $FFFFEE1A
		bcs.s	Offset_0x0433DC
		move.w	D0,(Sonic_Level_Limits_Min_Y).w             ; $FFFFEE18
		move.w	Obj_Control_Var_0A(A0),d0                       ; $003A
		cmp.w	(Camera_X).w,d0                             ; $FFFFEE78
		bhi.s	Offset_0x0433DC
		move.l	Obj_Control_Var_04(A0),a1                       ; $0034
		jsr	(A1)
Offset_0x0433DC:
		rts
;===============================================================================
; Offset_0x0433DE:
Update_Sonic_Level_Limits_X_Y_Play_Music:
		btst	#0,Obj_Control_Var_08(a0)
		bne.s	Offset_0x0433FC
		subq.w	#1,Obj_BossMusicTimer(a0)
		bpl.s	Offset_0x0433FC
		move.b	Obj_BossMusic(a0),d0
		jsr	(PlaySound).l
		bset	#0,Obj_Control_Var_08(a0)

Offset_0x0433FC:
		btst	#1,Obj_Control_Var_08(a0)
		bne.s	Offset_0x043418
		move.w	(Level_Limits_Max_Y).w,d0
		cmp.w	(Sonic_Level_Limits_Max_Y).w,d0
		bhi.s	Offset_0x043418
		move.w	d0,(Sonic_Level_Limits_Min_Y).w
		bset	#1,Obj_Control_Var_08(a0)

Offset_0x043418:
		btst	#2,Obj_Control_Var_08(a0)
		bne.s	Offset_0x043436
		move.w	(Camera_X).w,(Sonic_Level_Limits_Min_X).w
		move.w	Obj_LeftLock(a0),d0
		cmp.w	(Camera_X).w,d0
		bhi.s	Offset_0x043436
		bset	#2,Obj_Control_Var_08(a0)

Offset_0x043436:
		move.b	Obj_Control_Var_08(a0),d0
		andi.b	#7,d0
		cmpi.b	#7,d0
		bne.w	SetupObjectAttributes_End
		clr.b	Obj_Control_Var_08(a0)
		clr.w	Obj_LeftLock(a0)
		clr.b	Obj_BossMusic(a0)
		move.l	Obj_Child(a0),a1
		jmp	(a1)
; End of function Update_Sonic_Level_Limits_X_Y_Play_Music

;===============================================================================
Level_Transition_Size_Load:                                    ; Offset_0x043458
		moveq	#0,d0
		move.b	(Current_Zone).w,d0                             ; $FFFFFE10
		lsl.w	#$04,d0
		lea	(LevelSizes),a1                 ; Offset_0x011ECA
		lea	$08(A1,d0),a1
		move.w	(A1)+,(Target_Camera_Min_X).w               ; $FFFFFA94
		move.w	(A1)+,(Target_Camera_Max_X).w               ; $FFFFFA92
		move.w	(A1)+,(Target_Camera_Min_Y).w               ; $FFFFFA96
		move.w	(A1)+,(Level_Limits_Max_Y).w                ; $FFFFEE12
		lea	Offset_0x043482(PC),a2
		jmp	SetupChildObject(PC)               ; Offset_0x041D9A
;-------------------------------------------------------------------------------
Offset_0x043482:
		dc.w	$0001
		dc.l	Inc_Level_Gradual_Max_X                ; Offset_0x042564
		dc.w	$0000
		dc.l	Inc_Level_Gradual_Min_Y                ; Offset_0x0425C0
		dc.w	$0000
;===============================================================================
Obj_0xC6_Egg_Prison:                                           ; Offset_0x043490
		include "data\objects\obj_0xC6.asm"
;===============================================================================
Object_Settings_Check_X_Y:                                     ; Offset_0x043B1E
		move.l	Obj_Control_Var_0E(A0),a1                       ; $003E
		jsr	SetupObjectAttributes(PC)                    ; Offset_0x041D72
		move.l	#Offset_0x043B32,(A0)
		jmp	(Delete_Sprite_Clear_Respaw_Flag_Check_X_Y) ; Offset_0x042B96
;-------------------------------------------------------------------------------
Offset_0x043B32:
		move.l	Obj_Child(A0),a1                                ; $0034
		jsr	(A1)
		jmp	(Delete_Sprite_Clear_Respaw_Flag_Check_X_Y) ; Offset_0x042B96
;===============================================================================
Obj_0x81_AIz_Bloominator:                                      ; Offset_0x043B3E
		include "data\objects\obj_0x81.asm"
Obj_0x82_AIz_Rhinobot:                                         ; Offset_0x043C2A
		include "data\objects\obj_0x82.asm"
Obj_0x83_AIz_Monkey_Dude:                                      ; Offset_0x043F1C
		include "data\objects\obj_0x83.asm"
Obj_0x9F_AIz_Catakiller_Jr:                                    ; Offset_0x044490
		include "data\objects\obj_0x9F.asm"
Obj_0x99_Hz_Jawz:                                              ; Offset_0x04465C
		include "data\objects\obj_0x99.asm"
Obj_0x9A_Hz_Blastoid:                                          ; Offset_0x0446D0
		include "data\objects\obj_0x9A.asm"
Obj_0x9B_Hz_Buggernaut:                                        ; Offset_0x0447A6
		include "data\objects\obj_0x9B.asm"
Obj_0x9C_Hz_Turbo_Spiker:                                      ; Offset_0x044946
		include "data\objects\obj_0x9C.asm"
Obj_0x9D_Hz_Mega_Chopper:                                      ; Offset_0x044CC8
		include "data\objects\obj_0x9D.asm"
Obj_0x9E_Hz_Pointdexter:                                       ; Offset_0x044F90
		include "data\objects\obj_0x9E.asm"
Obj_0xA3_MGz_Bubbles:                                          ; Offset_0x04504A
		include "data\objects\obj_0xA3.asm"
Obj_0xA4_MGz_Tunnelbot:                                        ; Offset_0x04515C
		include "data\objects\obj_0xA4.asm"
Obj_0xC4_MGz_Tunnelbot:                                        ; Offset_0x045262
		include "data\objects\obj_0xC4.asm"
Obj_0xA5_MGz_Spiker:                                           ; Offset_0x045864
		include "data\objects\obj_0xA5.asm"
Obj_0xA6_MGz_Mantis:                                           ; Offset_0x045B26
		include "data\objects\obj_0xA6.asm"
Obj_0xA0_CNz_Clamer:                                           ; Offset_0x045C7A
		include "data\objects\obj_0xA0.asm"
Obj_0xA1_CNz_Sparkle:                                          ; Offset_0x045E4A
		include "data\objects\obj_0xA1.asm"
Obj_0xA2_CNz_Batbot:                                           ; Offset_0x046004
		include "data\objects\obj_0xA2.asm"
Obj_0xA7_FBz_Blaster:                                          ; Offset_0x04611C
		include "data\objects\obj_0xA7.asm"
Obj_0xA8_FBz_Techno_Squeek:                                    ; Offset_0x046392
		include "data\objects\obj_0xA8.asm"
Obj_0xB9_Iz_Platform:                                          ; Offset_0x04663E
		include "data\objects\obj_0xB9.asm"
; Obj_0xBA_Iz_Breakable_Wall:                                  ; Offset_0x04694C
		include "data\objects\obj_0xBA.asm"
;-------------------------------------------------------------------------------
; Rotinas usada pelo objeto 0xB9
; ->>>
;-------------------------------------------------------------------------------
Obj_0xB9_Sub_0x0469D4:                                         ; Offset_0x0469D4
		lea	Platform_Setup_Data_2(PC),a1          ; Offset_0x046ABE
		jsr	SetupObjectAttributes(PC)                    ; Offset_0x041D72
		move.l	#Offset_0x0469E8,(A0)
		jmp	(MarkObjGone)                          ; Offset_0x011AF2
;-------------------------------------------------------------------------------
Offset_0x0469E8:
		move.w	Obj_Child_Ref(A0),a1                            ; $0046
		btst	#$03, Obj_Status(A1)                             ; $002A
		beq.s	Offset_0x0469FA
		move.l	#ObjectFall_Delete_Sprite_Check_X_Y,(A0) ; Offset_0x042FB6
Offset_0x0469FA:
		jmp	(MarkObjGone)                          ; Offset_0x011AF2
;-------------------------------------------------------------------------------
; Rotinas usada pelo objeto 0xB9
; <<<-
;-------------------------------------------------------------------------------
Obj_0xC8_Iz_Trampoline_Support:                                ; Offset_0x046A00
		include "data\objects\obj_0xC8.asm"
;-------------------------------------------------------------------------------
; Rotinas usada pelo objeto 0xB9
; ->>>
;-------------------------------------------------------------------------------
Obj_0xB9_Sub_0x046A2A:                                         ; Offset_0x046A2A
		cmpi.w	#$F400,d0
		blt.s	Offset_0x046A3A
		cmpi.w	#$0C00,d0
		bgt.s	Offset_0x046A3A
		move.w	D0, Obj_Speed_X(A0)                              ; $0018
Offset_0x046A3A:
		rts
Offset_0x046A3C:
		move.w	Obj_Speed_Y(A0),d0                              ; $001A
		addi.w	#$0038,d0
		cmpi.w	#$F400,d0
		blt.s	Offset_0x046A54
		cmpi.w	#$0C00,d0
		bgt.s	Offset_0x046A54
		move.w	D0, Obj_Speed_Y(A0)                              ; $001A
Offset_0x046A54:
		rts
Offset_0x046A56:
		move.b	Obj_Angle(A0),d3                                ; $0026
		lsr.b	#$03,d3
		andi.w	#$000E,d3
		move.w	Obj_Speed_X(A0),d1                              ; $0018
		bpl.s	Offset_0x046A68
		neg.w   D1
Offset_0x046A68:
		move.w	Offset_0x046A70(pc,d3.w),d0
		jmp	Offset_0x046A70(pc,d0.w)
;-------------------------------------------------------------------------------
Offset_0x046A70:
		dc.w	Offset_0x046A80-Offset_0x046A70
		dc.w	Offset_0x046A86-Offset_0x046A70
		dc.w	Offset_0x046A8E-Offset_0x046A70
		dc.w	Offset_0x046A86-Offset_0x046A70
		dc.w	Offset_0x046A80-Offset_0x046A70
		dc.w	Offset_0x046A86-Offset_0x046A70
		dc.w	Offset_0x046A8E-Offset_0x046A70
		dc.w	Offset_0x046A86-Offset_0x046A70
;-------------------------------------------------------------------------------
Offset_0x046A80:
		clr.w	Obj_Speed_Y(A0)                                  ; $001A
		rts
;-------------------------------------------------------------------------------
Offset_0x046A86:
		lsr.w	#$01,d1
		move.w	D1, Obj_Speed_Y(A0)                              ; $001A
		rts
;-------------------------------------------------------------------------------
Offset_0x046A8E:
		move.w	D1, Obj_Speed_Y(A0)                              ; $001A
		rts
;-------------------------------------------------------------------------------
Obj_0xB9_Sub_0x046A94:                                         ; Offset_0x046A94
		clr.b	(Fast_Vertical_Scroll_Flag).w                ; $FFFFEE39
		btst	#$03, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x046AA4
		st	(Fast_Vertical_Scroll_Flag).w                ; $FFFFEE39
Offset_0x046AA4:
		rts
;-------------------------------------------------------------------------------
; Rotinas usada pelo objeto 0xB9
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Dados usados pelos objetos 0xB9, 0xBA e 0xC8
; ->>>
;-------------------------------------------------------------------------------
Platform_Setup_Data: ; Usado pelo objeto 0xB9                  ; Offset_0x046AA6
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$43B6, $0280
		dc.b	$20, $14, $00, $00
;-------------------------------------------------------------------------------
Trampoline_Support_Setup_Data: ; Usado pelo objeto 0xC8        ; Offset_0x046AB2
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$437D, $0280
		dc.b	$10, $10, $1E, $00
;-------------------------------------------------------------------------------
Platform_Setup_Data_2: ; Usado pelo objeto 0xB9                ; Offset_0x046ABE
		dc.l	Crushing_Column_Mappings               ; Offset_0x110938
		dc.w	$4001, $0280
		dc.b	$10, $0C, $08, $00
;-------------------------------------------------------------------------------
Breakable_Wall_Setup_Data: ; Usado pelo objeto 0xBA            ; Offset_0x046ACA
		dc.l	Crushing_Column_Mappings               ; Offset_0x110938
		dc.w	$4001, $0280
		dc.b	$20, $40, $06, $00
;-------------------------------------------------------------------------------
Platform_Setup_Data_3: ; Usado pelo objeto 0xB9                ; Offset_0x046AD6
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$C3B6, $0080
		dc.b	$08, $08, $23, $00
;-------------------------------------------------------------------------------
Breakable_Wall_Setup_Data_2: ; Usado pelo objeto 0xBA          ; Offset_0x046AE2
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$C347, $0080
		dc.b	$0C, $0C, $1C, $00
;-------------------------------------------------------------------------------
Offset_0x046AEE:  ; Usado pelo objeto 0xB9
		dc.w	$0005
		dc.l	Offset_0x0468B4
;-------------------------------------------------------------------------------
Offset_0x046AF4: ; Usado pelo objeto 0xBA
		dc.w	$0008
		dc.l	Offset_0x0468EC
;-------------------------------------------------------------------------------
Offset_0x046AFA: ; Usado pelo objeto 0xB9
		dc.w	$0000
		dc.l	Obj_0xB9_Sub_0x0469D4                  ; Offset_0x0469D4
		dc.b	$F0, $10
;-------------------------------------------------------------------------------
Offset_0x046B02: ; Usado pelo objeto 0xB9
		dc.b	$02, $23, $13, $24, $14, $FC
;-------------------------------------------------------------------------------
Offset_0x046B08: ; Usado pelo objeto 0xBA
		dc.b	$02, $1C, $1D, $25, $26, $FC
;-------------------------------------------------------------------------------
; Dados usados pelos objetos 0xB9, 0xBA e 0xC8
; <<<-
;-------------------------------------------------------------------------------
Obj_0xB8_Iz_Crushing_Column:                                   ; Offset_0x046B0E
		include "data\objects\obj_0xB8.asm"
Obj_0xBB_Iz_Freezer:                                           ; Offset_0x046CF2
		include "data\objects\obj_0xBB.asm"
Obj_0xBC_Iz_Segmented_Column:                                  ; Offset_0x04719E
		include "data\objects\obj_0xBC.asm"
Obj_0xBD_Iz_Swinging_Platform:                                 ; Offset_0x047336
		include "data\objects\obj_0xBD.asm"
Obj_0xBE_Iz_Stalactite:                                        ; Offset_0x0477C6
		include "data\objects\obj_0xBE.asm"
Obj_0xC0_Iz_Ice_Spikes:                                        ; Offset_0x0478D2
		include "data\objects\obj_0xC0.asm"
Obj_0xBF_Iz_Ice_Cube:                                          ; Offset_0x04798A
		include "data\objects\obj_0xBF.asm"
Obj_0xC1_Iz_Ice_Spiked_Ball:                                   ; Offset_0x047AD0
		include "data\objects\obj_0xC1.asm"
Obj_0xC2_Iz_Snow_Pile:                                         ; Offset_0x047B4E
		include "data\objects\obj_0xC2.asm"
Obj_0xC3_Iz_Trampoline:                                        ; Offset_0x047D46
		include "data\objects\obj_0xC3.asm"
Obj_0xAA_Iz_Penguinator:                                       ; Offset_0x047F8A
		include "data\objects\obj_0xAA.asm"
Obj_0xAB_Iz_Star_Pointer:                                      ; Offset_0x0482D2
		include "data\objects\obj_0xAB.asm"
Obj_0x87_LBz_Snale_Blaster:                                    ; Offset_0x048436
		include "data\objects\obj_0x87.asm"
Obj_0x88_LBz_Ribot:                                            ; Offset_0x048756
		include "data\objects\obj_0x88.asm"
Obj_0x89_LBz_Orbinaut:                                         ; Offset_0x048A94
		include "data\objects\obj_0x89.asm"
Obj_0x8A_LBz_Corkey:                                           ; Offset_0x048BCE
		include "data\objects\obj_0x8A.asm"
Obj_0x8B_LBz_Flybot_767:                                       ; Offset_0x048DF8
		include "data\objects\obj_0x8B.asm"
Obj_0xAE_LBz_Robotnik:                                         ; Offset_0x048FAC
		include "data\objects\obj_0xAE.asm"
Obj_0xB7_LBz_Egg_Mobile:                                       ; Offset_0x0493CC
		include "data\objects\obj_0xB7.asm"
Obj_0x93_MVz_Madmole:                                          ; Offset_0x0495CC
		include "data\objects\obj_0x93.asm"
Obj_0x94_MVz_Mushmeanie:                                       ; Offset_0x0499BC
		include "data\objects\obj_0x94.asm"
Obj_0x95_MVz_Dragonfly:                                        ; Offset_0x049B24
		include "data\objects\obj_0x95.asm"
Obj_0x96_MVz_Butterdroid:                                      ; Offset_0x049DCA
		include "data\objects\obj_0x96.asm"
Obj_0x97_MVz_Cluckoid:                                         ; Offset_0x049E50
		include "data\objects\obj_0x97.asm"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 90 - Fireworm (from LRZ)
; ---------------------------------------------------------------------------
; Offset_0x049FB6: Obj_0x90_LRz_Fireworm:
Obj90_Fireworm:
		jsr	(Object_Check_Range).l
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	Fireworm_Index(pc,d0.w),d1
		jsr	Fireworm_Index(pc,d1.w)
		jmp	(MarkObjectGone).l
; ===========================================================================
; Offset_0x049FD0:
Fireworm_Index:	dc.w Fireworm_Init-Fireworm_Index
		dc.w Fireworm_Main-Fireworm_Index
		dc.w Fireworm_Action-2-Fireworm_Index
; ===========================================================================
; Offset_0x049FD6:
Fireworm_Init:
		lea	Fireworm_Setup_Data(pc),a1
		jmp	(SetupObjectAttributes).l
; ===========================================================================
; Offset_0x049FE0:
Fireworm_Main:
		jsr	(Find_Player).l
		cmpi.w	#$80,d2
		bcs.s	Offset_0x049FEE
		rts
; ---------------------------------------------------------------------------

Offset_0x049FEE:
		move.b	#4,Obj_Routine(a0)
		lea	Offset_0x04A256(pc),a2
		jsr	(SetupChildObject).l
		bne.s	Offset_0x04A006
		move.b	Obj_Subtype(a0),Obj_Subtype(a1)

Offset_0x04A006:
		rts
; ---------------------------------------------------------------------------
		rts
; ===========================================================================
; Offset_0x04A008:
Fireworm_Action:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	Fireworm_Index2(pc,d0.w),d1
		jsr	Fireworm_Index2(pc,d1.w)
		lea	Fireworm_PLC_Data(pc),a2
		jsr	(LoadDynamicPLC).l
		jmp	(Display_Sprite_Check_X).l
; ===========================================================================
; Offset_0x04A028:
Fireworm_Index2:
		dc.w Fireworm_Init2-Fireworm_Index2
		dc.w Fireworm_TrackSonic-Fireworm_Index2
		dc.w Fireworm_Move-Fireworm_Index2
		dc.w Fireworm_BobUpAndDown-Fireworm_Index2
		dc.w Fireworm_TurnAround-Fireworm_Index2
; ===========================================================================
; Offset_0x04A032:
Fireworm_Init2:
		lea	Fireworm_Setup_Data_2(pc),a1
		jsr	(SetupSlottedObjectAttributes)
; Offset_0x04A03C:
Fireworm_TrackSonic:
		jmp	(Run_Object_Wait_Timer_A0).l	; this was seemingly added to crash the game if it loads...
		move.b	#4,Obj_Routine(a0)
		move.w	#3,Obj_Timer(a0)
		move.l	#Fireworm_LoadChild,Obj_Child(a0)
		move.w	#-$100,d4
		jmp	(Set_Velocity_X_Track_Player_One).l
; ===========================================================================
; Offset_0x04A060:
Fireworm_Move:
		jsr	(SpeedToPos).l
		jmp	(Run_Object_Wait_Timer_A0).l
; ===========================================================================
; Offset_0x04A06C:
Fireworm_LoadChild:
		move.b	#1,Obj_Map_Id(a0)
		lea	Offset_0x04A25E(pc),a2
		jsr	(SetupChildObject).l

Offset_0x04A07C:
		move.b	#6,Obj_Routine(a0)
		move.w	#-$100,Obj_Control_Var_12(a0)
		move.l	#Offset_0x04A280, Obj_Child_Data(A0)

Offset_0x04A090:
		move.b	#8,Obj_Control_Var_09(a0)

Offset_0x04A096:
		; also referenced by Caterkiller Jr.
		move.w	#$80,d0
		move.w	d0,Obj_Control_Var_0E(a0)
		move.w	d0,Obj_Speed_Y(a0)
		move.w	#8,Obj_Control_Var_10(a0)
		bclr	#0,Obj_Control_Var_08(a0)
		rts
; ===========================================================================
; Offset_0x04A0B0:
Fireworm_BobUpAndDown:
		jsr	(Swing_Up_And_Down_Count).l
		bne.s	Offset_0x04A0C4
		jsr	(SpeedToPos).l
		jmp	(Animate_Raw_Multi_Delay).l
; ---------------------------------------------------------------------------

Offset_0x04A0C4:
		move.b	#8,Obj_Routine(a0)
		move.w	Obj_Speed_X(a0),Obj_Height_3(a0)
		move.w	Obj_Control_Var_12(a0),Obj_Speed_Y(a0)
		neg.w	Obj_Control_Var_12(a0)
		clr.w	Obj_Timer(a0)
		clr.b	Obj_Ani_Frame(a0)
		clr.b	Obj_Ani_Time(a0)
		rts
; ===========================================================================
; Offset_0x04A0E8:
Fireworm_TurnAround:
		lea	Offset_0x04A28D(pc),a1
		jsr	(Animate_Raw_Multi_Delay_Flip_X_A1).l
		addq.w	#1,Obj_Timer(a0)
		tst.w	Obj_Height_3(a0)
		bmi.s	Fireworm_TurnRight

; Fireworm_TurnLeft:
		move.w	Obj_Speed_X(a0),d0
		subi.w	#$10,d0
		cmpi.w	#-$100,d0
		ble.s	Offset_0x04A12C
		move.w	d0,Obj_Speed_X(a0)
		jmp	(SpeedToPos).l
; ---------------------------------------------------------------------------
; Offset_0x04A114:
Fireworm_TurnRight:
		move.w	Obj_Speed_X(a0),d0
		addi.w	#$10,d0
		cmpi.w	#$100,d0
		bge.s	Offset_0x04A12C
		move.w	d0,Obj_Speed_X(a0)
		jmp	(SpeedToPos).l
; ---------------------------------------------------------------------------

Offset_0x04A12C:
		move.b	#6,Obj_Routine(a0)
		clr.b	Obj_Ani_Frame(a0)
		clr.b	Obj_Ani_Time(a0)
		bra.w	Offset_0x04A090
; ===========================================================================
; Now do the same for the main body
; Offset_0x04A13E:
Fireworm_Body:
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	FirewormBody_Index(pc,d0.w),d1
		jsr	FirewormBody_Index(pc,d1.w)
		moveq	#0,d0
		jmp	(Child_Display_Touch_Or_Flicker_Move).l
; ===========================================================================
; Offset_0x04A154:
FirewormBody_Index:
		dc.w FirewormBody_Init-FirewormBody_Index
		dc.w FirewormBody_Wait-FirewormBody_Index
		dc.w FirewormBody_Wait-FirewormBody_Index
		dc.w Fireworm_BobUpAndDown-FirewormBody_Index
		dc.w Fireworm_TurnAround-FirewormBody_Index
; ===========================================================================
; Offset_0x04A15E:
FirewormBody_Init:
		lea	Fireworm_Setup_Data_3(pc),a1
		jsr	(SetupObjectAttributes).l
		moveq	#0,d0
		move.b	Obj_Subtype(a0),d0
		move.w	FirewormBody_Timers(pc,d0.w),Obj_Timer(a0)
		move.l	#Offset_0x04A19C,Obj_Child(a0)
		move.w	Obj_Child_Ref(a0),a1
		move.w	Obj_Speed_X(a1),Obj_Speed_X(a0)
		move.b	Obj_Flags(a1),Obj_Flags(a0)
		rts
; ---------------------------------------------------------------------------
; This effectively sets their position through how long it takes for them
; to spawn from the tunnel the Fireworm comes from.
; Offset_0x04A18E:
FirewormBody_Timers:
		dc.w	$B, $16, $21, $2C
; ===========================================================================
; Offset_0x04A196:
FirewormBody_Wait:
		jmp	(Run_Object_Wait_Timer_A0).l
; ---------------------------------------------------------------------------

Offset_0x04A19C:
		lea	Offset_0x04A278(PC),a2
		jsr	(SetupChildObject)
		bra.w	Offset_0x04A07C
; ===========================================================================
; Offset_0x04A1AA:
Fireworm_Flame:
		jsr	(Refresh_Child_Position_Adjusted).l
		moveq	#0,d0
		move.b	Obj_Routine(a0),d0
		move.w	FirewormFlame_Index(pc,d0.w),d1
		jsr	FirewormFlame_Index(pc,d1.w)
		jmp	(Child_Display_Touch_Or_Delete).l
; ===========================================================================
; Offset_0x04A1C4:
FirewormFlame_Index:
		dc.w FirewormFlame_Init-FirewormFlame_Index
		dc.w FirewormFlame_Animate-FirewormFlame_Index
		dc.w FirewormFlame_Wait-FirewormFlame_Index
; ===========================================================================
; Offset_0x04A1CA:
FirewormFlame_Init:
		lea	Fireworm_Setup_Data_4(pc),a1
		jsr	(SetupObjectAttributes3).l
		move.l	#Offset_0x04A296,Obj_Child_Data(a0)
		move.l	#Offset_0x04A1EC,Obj_Child(a0)
		rts
; ===========================================================================
; Offset_0x04A1E6:
FirewormFlame_Animate:
		jmp	(AnimateRaw).l
; ---------------------------------------------------------------------------

Offset_0x04A1EC:
		move.b	#4,Obj_Routine(a0)
		move.b	#7,Obj_Map_Id(a0)
		jsr	(PseudoRandomNumber).l
		andi.w	#$3F,d0
		move.w	d0,Obj_Timer(a0)
		move.l	#Offset_0x04A216,Obj_Child(a0)
		rts
; ===========================================================================
; Offset_0x04A210:
FirewormFlame_Wait:
		jmp	(Run_Object_Wait_Timer_A0).l
; ---------------------------------------------------------------------------

Offset_0x04A216:
		move.b	#2,Obj_Routine(a0)
		move.l	#Offset_0x04A1EC,Obj_Child(a0)
		rts

; ===========================================================================
; Offset_0x04A226:
Fireworm_Setup_Data:
		objdata	$280, $C, $C, 0, 0, $E518, Fireworm_Segments_Mappings
; Offset_0x04A232:
Fireworm_Setup_Data_2:
		dc.w	$0003, $A580, $0009, $0000
		dc.l	Fireworm_Mappings
		objdata	$180, $C, $C, 0, $B
; Offset_0x04A244:
Fireworm_Setup_Data_3:
		objdata	$200, 8, 8, 1, $87, $A518, Fireworm_Segments_Mappings
; Offset_0x04A250:
Fireworm_Setup_Data_4:
		objdata	$180, 8, 8, 3, $98
;-------------------------------------------------------------------------------
Offset_0x04A256:
		dc.w	$0000
		dc.l	Fireworm_Action
		dc.b	$00, $00
;-------------------------------------------------------------------------------
Offset_0x04A25E:
		dc.w	$0003
		dc.l	Fireworm_Body
		dc.b	$00, $00
		dc.l	Fireworm_Body
		dc.b	$00, $00
		dc.l	Fireworm_Body
		dc.b	$00, $00
		dc.l	Fireworm_Body
		dc.b	$00, $00
;-------------------------------------------------------------------------------
Offset_0x04A278:
		dc.w	$0000
		dc.l	Fireworm_Flame
		dc.b	$00, $F2
;-------------------------------------------------------------------------------
Fireworm_PLC_Data:							; Offset_0x04A280
		;dc.l	Art_Fireworm
		;dc.l	Fireworm_Dyn_Script			; Offset_0x10E2C4
;-------------------------------------------------------------------------------
Offset_0x04A280:
		dc.b	$01, $03, $01, $06, $02, $08, $03, $01
		dc.b	$F8, $0A, $03, $7F, $FC
;-------------------------------------------------------------------------------
Offset_0x04A28D:
		dc.b	$03, $07, $02, $07, $42, $07, $03, $7F
		dc.b	$FC
;-------------------------------------------------------------------------------
Offset_0x04A296:
		dc.b	$03, $04, $04, $05, $06, $F4

Obj_0x91_LRz_Iwamodock:                                        ; Offset_0x04A29C
		include "data\objects\obj_0x91.asm"
Obj_0x92_LRz_Toxomister:                                       ; Offset_0x04A400
		include "data\objects\obj_0x92.asm"

;===============================================================================
; Carga dos gr�ficos das fases
; Cada fase usa seis grupos de LongWord sendo que o primeiro byte dos dois
; primeiros grupos representam um ponteiro para a lista de carga dos gr�ficos
; das fases e o primeiro byte do �ltimo grupo representa um ponteiro para a
; lista de carga das paletas das fases.
; ->>>
;===============================================================================
TilesMainTable:                                                ; Offset_0x04A77E
		dc.l	($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0A<<$18)|Angel_Island_1_Blocks       ; Offset_0x13B830
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks_2     ; Offset_0x143D96

		dc.l	($0C<<$18)|Angel_Island_2_Tiles        ; Offset_0x1496B8
		dc.l	($0C<<$18)|Angel_Island_2_Tiles_2      ; Offset_0x14A1BA
		dc.l	($0B<<$18)|Angel_Island_2_Blocks       ; Offset_0x148128
		dc.l	($0B<<$18)|Angel_Island_2_Blocks_2     ; Offset_0x1489A8
		dc.l	($00<<$18)|Angel_Island_2_Chunks       ; Offset_0x14EA6E
		dc.l	($00<<$18)|Angel_Island_2_Chunks_2     ; Offset_0x14EA6E

		dc.l	($0E<<$18)|Hydrocity_1_Tiles           ; Offset_0x152F7E
		dc.l	($0F<<$18)|Hydrocity_1_Tiles_2         ; Offset_0x1546F0
		dc.l	($0C<<$18)|Hydrocity_1_Blocks          ; Offset_0x152B8E
		dc.l	($0C<<$18)|Hydrocity_1_Blocks_2        ; Offset_0x153E60
		dc.l	($00<<$18)|Hydrocity_1_Chunks          ; Offset_0x153B70
		dc.l	($00<<$18)|Hydrocity_1_Chunks_2        ; Offset_0x156742

		dc.l	($10<<$18)|Hydrocity_2_Tiles           ; Offset_0x152F7E
		dc.l	($11<<$18)|Hydrocity_2_Tiles_2         ; Offset_0x158DF2
		dc.l	($0D<<$18)|Hydrocity_2_Blocks          ; Offset_0x152B8E
		dc.l	($0D<<$18)|Hydrocity_2_Blocks_2        ; Offset_0x158562
		dc.l	($00<<$18)|Hydrocity_2_Chunks          ; Offset_0x153B70
		dc.l	($00<<$18)|Hydrocity_2_Chunks_2        ; Offset_0x15AC74

		dc.l	($12<<$18)|Marble_Garden_1_Tiles       ; Offset_0x15D0A4
		dc.l	($12<<$18)|Marble_Garden_1_Tiles_2     ; Offset_0x161F56
		dc.l	($0E<<$18)|Marble_Garden_1_Blocks      ; Offset_0x15C744
		dc.l	($0E<<$18)|Marble_Garden_1_Blocks_2    ; Offset_0x161C56
		dc.l	($00<<$18)|Marble_Garden_1_Chunks      ; Offset_0x15F926
		dc.l	($00<<$18)|Marble_Garden_1_Chunks_2    ; Offset_0x162628

		dc.l	($14<<$18)|Marble_Garden_2_Tiles       ; Offset_0x15D0A4
		dc.l	($14<<$18)|Marble_Garden_2_Tiles_2     ; Offset_0x1632A8
		dc.l	($0F<<$18)|Marble_Garden_2_Blocks      ; Offset_0x15C744
		dc.l	($0F<<$18)|Marble_Garden_2_Blocks_2    ; Offset_0x162E58
		dc.l	($00<<$18)|Marble_Garden_2_Chunks      ; Offset_0x15F926
		dc.l	($00<<$18)|Marble_Garden_2_Chunks_2    ; Offset_0x16403A

		dc.l	($16<<$18)|Carnival_Night_1_Tiles      ; Offset_0x166A9A
		dc.l	($17<<$18)|Carnival_Night_1_Tiles_2    ; Offset_0x166A9A
		dc.l	($10<<$18)|Carnival_Night_1_Blocks     ; Offset_0x165A5A
		dc.l	($10<<$18)|Carnival_Night_1_Blocks_2   ; Offset_0x165A5A
		dc.l	($00<<$18)|Carnival_Night_1_Chunks     ; Offset_0x169CBC
		dc.l	($00<<$18)|Carnival_Night_1_Chunks_2   ; Offset_0x169CBC

		dc.l	($18<<$18)|Carnival_Night_2_Tiles      ; Offset_0x166A9A
		dc.l	($19<<$18)|Carnival_Night_2_Tiles_2    ; Offset_0x166A9A
		dc.l	($11<<$18)|Carnival_Night_2_Blocks     ; Offset_0x165A5A
		dc.l	($11<<$18)|Carnival_Night_2_Blocks_2   ; Offset_0x165A5A
		dc.l	($00<<$18)|Carnival_Night_2_Chunks     ; Offset_0x169CBC
		dc.l	($00<<$18)|Carnival_Night_2_Chunks_2   ; Offset_0x169CBC

		dc.l	($1A<<$18)|Flying_Battery_1_Tiles      ; Offset_0x16DB1C
		dc.l	($1A<<$18)|Flying_Battery_1_Tiles_2    ; Offset_0x16DB1C
		dc.l	($12<<$18)|Flying_Battery_1_Blocks     ; Offset_0x16CDCC
		dc.l	($12<<$18)|Flying_Battery_1_Blocks_2   ; Offset_0x16CDCC
		dc.l	($00<<$18)|Flying_Battery_1_Chunks     ; Offset_0x1705EE
		dc.l	($00<<$18)|Flying_Battery_1_Chunks_2   ; Offset_0x1705EE

		dc.l	($1C<<$18)|Flying_Battery_2_Tiles      ; Offset_0x173E9E
		dc.l	($1C<<$18)|Flying_Battery_2_Tiles_2    ; Offset_0x173E9E
		dc.l	($13<<$18)|Flying_Battery_2_Blocks     ; Offset_0x17315E
		dc.l	($13<<$18)|Flying_Battery_2_Blocks_2   ; Offset_0x17315E
		dc.l	($00<<$18)|Flying_Battery_2_Chunks     ; Offset_0x176ED0
		dc.l	($00<<$18)|Flying_Battery_2_Chunks_2   ; Offset_0x176ED0

		dc.l	($1E<<$18)|Icecap_1_Tiles              ; Offset_0x179CF0
		dc.l	($1E<<$18)|Icecap_1_Tiles_2            ; Offset_0x17BF62
		dc.l	($14<<$18)|Icecap_1_Blocks             ; Offset_0x179A00
		dc.l	($14<<$18)|Icecap_1_Blocks_2           ; Offset_0x17B412
		dc.l	($00<<$18)|Icecap_1_Chunks             ; Offset_0x17B102
		dc.l	($00<<$18)|Icecap_1_Chunks_2           ; Offset_0x17DEF4

		dc.l	($20<<$18)|Icecap_2_Tiles              ; Offset_0x179CF0
		dc.l	($20<<$18)|Icecap_2_Tiles_2            ; Offset_0x180734
		dc.l	($15<<$18)|Icecap_2_Blocks             ; Offset_0x179A00
		dc.l	($15<<$18)|Icecap_2_Blocks_2           ; Offset_0x17FB24
		dc.l	($00<<$18)|Icecap_2_Chunks             ; Offset_0x17B102
		dc.l	($00<<$18)|Icecap_2_Chunks_2           ; Offset_0x182746

		dc.l	($22<<$18)|Launch_Base_1_Tiles         ; Offset_0x185206
		dc.l	($22<<$18)|Launch_Base_1_Tiles_2       ; Offset_0x186688
		dc.l	($16<<$18)|Launch_Base_1_Blocks        ; Offset_0x184196
		dc.l	($16<<$18)|Launch_Base_1_Blocks_2      ; Offset_0x184646
		dc.l	($00<<$18)|Launch_Base_1_Chunks        ; Offset_0x18872A
		dc.l	($00<<$18)|Launch_Base_1_Chunks_2      ; Offset_0x18872A

		dc.l	($24<<$18)|Launch_Base_2_Tiles         ; Offset_0x185206
		dc.l	($25<<$18)|Launch_Base_2_Tiles_2       ; Offset_0x18D03A
		dc.l	($17<<$18)|Launch_Base_2_Blocks        ; Offset_0x184196
		dc.l	($17<<$18)|Launch_Base_2_Blocks_2      ; Offset_0x18B6DA
		dc.l	($00<<$18)|Launch_Base_2_Chunks        ; Offset_0x190A3E
		dc.l	($00<<$18)|Launch_Base_2_Chunks_2      ; Offset_0x190A3E

		dc.l	($26<<$18)|Mushroom_Valley_1_Tiles     ; Offset_0x193C2E
		dc.l	($26<<$18)|Mushroom_Valley_1_Tiles_2   ; Offset_0x193C2E
		dc.l	($18<<$18)|Mushroom_Valley_1_Blocks    ; Offset_0x193C2E
		dc.l	($18<<$18)|Mushroom_Valley_1_Blocks_2  ; Offset_0x193C2E
		dc.l	($00<<$18)|Mushroom_Valley_1_Chunks    ; Offset_0x193C2E
		dc.l	($00<<$18)|Mushroom_Valley_1_Chunks_2  ; Offset_0x193C2E

		dc.l	($28<<$18)|Mushroom_Valley_2_Tiles     ; Offset_0x193C2E
		dc.l	($28<<$18)|Mushroom_Valley_2_Tiles_2   ; Offset_0x193C2E
		dc.l	($19<<$18)|Mushroom_Valley_2_Blocks    ; Offset_0x193C2E
		dc.l	($19<<$18)|Mushroom_Valley_2_Blocks_2  ; Offset_0x193C2E
		dc.l	($00<<$18)|Mushroom_Valley_2_Chunks    ; Offset_0x193C2E
		dc.l	($00<<$18)|Mushroom_Valley_2_Chunks_2  ; Offset_0x193C2E

		dc.l	($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($2E<<$18)|Lava_Reef_1_Tiles           ; Offset_0x193C2E
		dc.l	($2E<<$18)|Lava_Reef_1_Tiles_2         ; Offset_0x193C2E
		dc.l	($1C<<$18)|Lava_Reef_1_Blocks          ; Offset_0x193C2E
		dc.l	($1C<<$18)|Lava_Reef_1_Blocks_2        ; Offset_0x193C2E
		dc.l	($00<<$18)|Lava_Reef_1_Chunks          ; Offset_0x193C2E
		dc.l	($00<<$18)|Lava_Reef_1_Chunks_2        ; Offset_0x193C2E

		dc.l	($30<<$18)|Lava_Reef_2_Tiles           ; Offset_0x193C2E
		dc.l	($30<<$18)|Lava_Reef_2_Tiles_2         ; Offset_0x193C2E
		dc.l	($1D<<$18)|Lava_Reef_2_Blocks          ; Offset_0x193C2E
		dc.l	($1D<<$18)|Lava_Reef_2_Blocks_2        ; Offset_0x193C2E
		dc.l	($00<<$18)|Lava_Reef_2_Chunks          ; Offset_0x193C2E
		dc.l	($00<<$18)|Lava_Reef_2_Chunks_2        ; Offset_0x193C2E

		dc.l	($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($42<<$18)|Azure_Lake_Tiles            ; Offset_0x1946EE
		dc.l	($42<<$18)|Azure_Lake_Tiles            ; Offset_0x1946EE
		dc.l	($26<<$18)|Azure_Lake_Blocks           ; Offset_0x193C2E
		dc.l	($26<<$18)|Azure_Lake_Blocks           ; Offset_0x193C2E
		dc.l	($00<<$18)|Azure_Lake_Chunks           ; Offset_0x1974A0
		dc.l	($00<<$18)|Azure_Lake_Chunks           ; Offset_0x1974A0

		dc.l	($42<<$18)|Azure_Lake_Tiles            ; Offset_0x1946EE
		dc.l	($42<<$18)|Azure_Lake_Tiles            ; Offset_0x1946EE
		dc.l	($27<<$18)|Azure_Lake_Blocks           ; Offset_0x193C2E
		dc.l	($27<<$18)|Azure_Lake_Blocks           ; Offset_0x193C2E
		dc.l	($00<<$18)|Azure_Lake_Chunks           ; Offset_0x1974A0
		dc.l	($00<<$18)|Azure_Lake_Chunks           ; Offset_0x1974A0

		dc.l	($43<<$18)|Balloon_Park_Tiles          ; Offset_0x198400
		dc.l	($43<<$18)|Balloon_Park_Tiles          ; Offset_0x198400
		dc.l	($28<<$18)|Balloon_Park_Blocks         ; Offset_0x197B30
		dc.l	($28<<$18)|Balloon_Park_Blocks         ; Offset_0x197B30
		dc.l	($00<<$18)|Balloon_Park_Chunks         ; Offset_0x19A3E2
		dc.l	($00<<$18)|Balloon_Park_Chunks         ; Offset_0x19A3E2

		dc.l	($43<<$18)|Balloon_Park_Tiles          ; Offset_0x198400
		dc.l	($43<<$18)|Balloon_Park_Tiles          ; Offset_0x198400
		dc.l	($29<<$18)|Balloon_Park_Blocks         ; Offset_0x197B30
		dc.l	($29<<$18)|Balloon_Park_Blocks         ; Offset_0x197B30
		dc.l	($00<<$18)|Balloon_Park_Chunks         ; Offset_0x19A3E2
		dc.l	($00<<$18)|Balloon_Park_Chunks         ; Offset_0x19A3E2

		dc.l	($44<<$18)|Desert_Palace_Tiles         ; Offset_0x19B4B2
		dc.l	($44<<$18)|Desert_Palace_Tiles         ; Offset_0x19B4B2
		dc.l	($34<<$18)|Desert_Palace_Blocks        ; Offset_0x19AAD2
		dc.l	($34<<$18)|Desert_Palace_Blocks        ; Offset_0x19AAD2
		dc.l	($00<<$18)|Desert_Palace_Chunks        ; Offset_0x19CFA4
		dc.l	($00<<$18)|Desert_Palace_Chunks        ; Offset_0x19CFA4

		dc.l	($44<<$18)|Desert_Palace_Tiles         ; Offset_0x19B4B2
		dc.l	($44<<$18)|Desert_Palace_Tiles         ; Offset_0x19B4B2
		dc.l	($34<<$18)|Desert_Palace_Blocks        ; Offset_0x19AAD2
		dc.l	($34<<$18)|Desert_Palace_Blocks        ; Offset_0x19AAD2
		dc.l	($00<<$18)|Desert_Palace_Chunks        ; Offset_0x19CFA4
		dc.l	($00<<$18)|Desert_Palace_Chunks        ; Offset_0x19CFA4

		dc.l	($45<<$18)|Chrome_Gadget_Tiles         ; Offset_0x19DD24
		dc.l	($45<<$18)|Chrome_Gadget_Tiles         ; Offset_0x19DD24
		dc.l	($35<<$18)|Chrome_Gadget_Blocks        ; Offset_0x19D5D4
		dc.l	($35<<$18)|Chrome_Gadget_Blocks        ; Offset_0x19D5D4
		dc.l	($00<<$18)|Chrome_Gadget_Chunks        ; Offset_0x1A02C6
		dc.l	($00<<$18)|Chrome_Gadget_Chunks        ; Offset_0x1A02C6

		dc.l	($45<<$18)|Chrome_Gadget_Tiles         ; Offset_0x19DD24
		dc.l	($45<<$18)|Chrome_Gadget_Tiles         ; Offset_0x19DD24
		dc.l	($35<<$18)|Chrome_Gadget_Blocks        ; Offset_0x19D5D4
		dc.l	($35<<$18)|Chrome_Gadget_Blocks        ; Offset_0x19D5D4
		dc.l	($00<<$18)|Chrome_Gadget_Chunks        ; Offset_0x1A02C6
		dc.l	($00<<$18)|Chrome_Gadget_Chunks        ; Offset_0x1A02C6

		dc.l	($46<<$18)|Endless_Mine_Tiles          ; Offset_0x1A1236
		dc.l	($46<<$18)|Endless_Mine_Tiles          ; Offset_0x1A1236
		dc.l	($36<<$18)|Endless_Mine_Blocks         ; Offset_0x1A0786
		dc.l	($36<<$18)|Endless_Mine_Blocks         ; Offset_0x1A0786
		dc.l	($00<<$18)|Endless_Mine_Chunks         ; Offset_0x1A3E68
		dc.l	($00<<$18)|Endless_Mine_Chunks         ; Offset_0x1A3E68

		dc.l	($46<<$18)|Endless_Mine_Tiles          ; Offset_0x1A1236
		dc.l	($46<<$18)|Endless_Mine_Tiles          ; Offset_0x1A1236
		dc.l	($36<<$18)|Endless_Mine_Blocks         ; Offset_0x1A0786
		dc.l	($36<<$18)|Endless_Mine_Blocks         ; Offset_0x1A0786
		dc.l	($00<<$18)|Endless_Mine_Chunks         ; Offset_0x1A3E68
		dc.l	($00<<$18)|Endless_Mine_Chunks         ; Offset_0x1A3E68

		dc.l	($47<<$18)|BS_Gumball_Machine_Tiles    ; Offset_0x1A4938
		dc.l	($47<<$18)|BS_Gumball_Machine_Tiles    ; Offset_0x1A4938
		dc.l	($33<<$18)|BS_Gumball_Machine_Blocks   ; Offset_0x1A4578
		dc.l	($33<<$18)|BS_Gumball_Machine_Blocks   ; Offset_0x1A4578
		dc.l	($00<<$18)|BS_Gumball_Machine_Chunks   ; Offset_0x1A52AA
		dc.l	($00<<$18)|BS_Gumball_Machine_Chunks   ; Offset_0x1A52AA

		dc.l	($47<<$18)|BS_Gumball_Machine_Tiles    ; Offset_0x1A4938
		dc.l	($47<<$18)|BS_Gumball_Machine_Tiles    ; Offset_0x1A4938
		dc.l	($33<<$18)|BS_Gumball_Machine_Blocks   ; Offset_0x1A4578
		dc.l	($33<<$18)|BS_Gumball_Machine_Blocks   ; Offset_0x1A4578
		dc.l	($00<<$18)|BS_Gumball_Machine_Chunks   ; Offset_0x1A52AA
		dc.l	($00<<$18)|BS_Gumball_Machine_Chunks   ; Offset_0x1A52AA

		dc.l	($47<<$18)|BS_Glowing_Spheres_Tiles    ; Offset_0x1A589A
		dc.l	($47<<$18)|BS_Glowing_Spheres_Tiles    ; Offset_0x1A589A
		dc.l	($37<<$18)|BS_Glowing_Spheres_Blocks   ; Offset_0x1A55FA
		dc.l	($37<<$18)|BS_Glowing_Spheres_Blocks   ; Offset_0x1A55FA
		dc.l	($00<<$18)|BS_Glowing_Spheres_Chunks   ; Offset_0x1A680C
		dc.l	($00<<$18)|BS_Glowing_Spheres_Chunks   ; Offset_0x1A680C

		dc.l	($47<<$18)|BS_Glowing_Spheres_Tiles    ; Offset_0x1A589A
		dc.l	($47<<$18)|BS_Glowing_Spheres_Tiles    ; Offset_0x1A589A
		dc.l	($37<<$18)|BS_Glowing_Spheres_Blocks   ; Offset_0x1A55FA
		dc.l	($37<<$18)|BS_Glowing_Spheres_Blocks   ; Offset_0x1A55FA
		dc.l	($00<<$18)|BS_Glowing_Spheres_Chunks   ; Offset_0x1A680C
		dc.l	($00<<$18)|BS_Glowing_Spheres_Chunks   ; Offset_0x1A680C

		dc.l	($47<<$18)|BS_Slot_Machine_Tiles       ; Offset_0x1A77CC
		dc.l	($47<<$18)|BS_Slot_Machine_Tiles       ; Offset_0x1A77CC
		dc.l	($38<<$18)|BS_Slot_Machine_Blocks      ; Offset_0x1A6B0C
		dc.l	($38<<$18)|BS_Slot_Machine_Blocks      ; Offset_0x1A6B0C
		dc.l	($00<<$18)|BS_Slot_Machine_Chunks      ; Offset_0x1AA46E
		dc.l	($00<<$18)|BS_Slot_Machine_Chunks      ; Offset_0x1AA46E

		dc.l	($47<<$18)|BS_Slot_Machine_Tiles       ; Offset_0x1A77CC
		dc.l	($47<<$18)|BS_Slot_Machine_Tiles       ; Offset_0x1A77CC
		dc.l	($38<<$18)|BS_Slot_Machine_Blocks      ; Offset_0x1A6B0C
		dc.l	($38<<$18)|BS_Slot_Machine_Blocks      ; Offset_0x1A6B0C
		dc.l	($00<<$18)|BS_Slot_Machine_Chunks      ; Offset_0x1AA46E
		dc.l	($00<<$18)|BS_Slot_Machine_Chunks      ; Offset_0x1AA46E

		dc.l	($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0A<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0A<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0A<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96

		dc.l	($0C<<$18)|Angel_Island_1_Tiles        ; Offset_0x13D750
		dc.l	($0C<<$18)|Angel_Island_1_Tiles_2      ; Offset_0x13E552
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($0B<<$18)|Angel_Island_1_Blocks_2     ; Offset_0x13BA30
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
		dc.l	($00<<$18)|Angel_Island_1_Chunks       ; Offset_0x143D96
; ===========================================================================
; ---------------------------------------------------------------------------
; A table of pattern load cues (PLCs) or pattern load requests (PLRs), which
; themselves are a list of what graphics to load at a specific VRAM address
; ---------------------------------------------------------------------------
; Offset_0x04ABFE:
ArtLoadCues:
PLCptr_Main1:		dc.w PLC_Default-ArtLoadCues
PLCptr_Main2:		dc.w PLC_Default_Sonic-ArtLoadCues
PLCptr_Main3:		dc.w PLC_Default_Flickies-ArtLoadCues
PLCptr_GameOver:	dc.w PLC_Game_Over_Time_Over-ArtLoadCues
		dc.w	PLC_Act_1_Clear-ArtLoadCues            ; Offset_0x04AD46 ; $04
		dc.w	PLC_Default_2P-ArtLoadCues             ; Offset_0x04AD4E ; $05
		dc.w	PLC_Default_2P-ArtLoadCues             ; Offset_0x04AD4E ; $06
		dc.w	PLC_Art_Scaled_Test-ArtLoadCues        ; Offset_0x04AD62 ; $07
		dc.w	PLC_Art_Scaled_Test-ArtLoadCues        ; Offset_0x04AD62 ; $08
		dc.w	PLC_Art_Scaled_Test-ArtLoadCues        ; Offset_0x04AD62 ; $09
		dc.w	PLC_AIz_1-ArtLoadCues                  ; Offset_0x04AD6A ; $0A
		dc.w	PLC_AIz_2-ArtLoadCues                  ; Offset_0x04AD7E ; $0B
		dc.w	PLC_AIz_3-ArtLoadCues                  ; Offset_0x04AD9E ; $0C
		dc.w	PLC_AIz_3-ArtLoadCues                  ; Offset_0x04AD9E ; $0D
		dc.w	PLC_Hz_1-ArtLoadCues                   ; Offset_0x04ADBE ; $0E
		dc.w	PLC_Hz_2-ArtLoadCues                   ; Offset_0x04ADEA ; $0F
		dc.w	PLC_Hz_3-ArtLoadCues                   ; Offset_0x04ADF2 ; $10
		dc.w	PLC_Hz_4-ArtLoadCues                   ; Offset_0x04AE1E ; $11
		dc.w	PLC_MGz_1-ArtLoadCues                  ; Offset_0x04AE32 ; $12
		dc.w	PLC_MGz_1-ArtLoadCues                  ; Offset_0x04AE32 ; $13
		dc.w	PLC_MGz_2-ArtLoadCues                  ; Offset_0x04AE4C ; $14
		dc.w	PLC_MGz_2-ArtLoadCues                  ; Offset_0x04AE4C ; $15
		dc.w	PLC_CNz-ArtLoadCues                    ; Offset_0x04AE66 ; $16
		dc.w	PLC_CNz-ArtLoadCues                    ; Offset_0x04AE66 ; $17
		dc.w	PLC_CNz-ArtLoadCues                    ; Offset_0x04AE66 ; $18
		dc.w	PLC_CNz-ArtLoadCues                    ; Offset_0x04AE66 ; $19
		dc.w	PLC_FBz-ArtLoadCues                    ; Offset_0x04AE7A ; $1A
		dc.w	PLC_FBz-ArtLoadCues                    ; Offset_0x04AE7A ; $1B
		dc.w	PLC_FBz-ArtLoadCues                    ; Offset_0x04AE7A ; $1C
		dc.w	PLC_FBz-ArtLoadCues                    ; Offset_0x04AE7A ; $1D
		dc.w	PLC_Iz_1-ArtLoadCues                   ; Offset_0x04AE82 ; $1E
		dc.w	PLC_Iz_1-ArtLoadCues                   ; Offset_0x04AE82 ; $1F
		dc.w	PLC_Iz_2-ArtLoadCues                   ; Offset_0x04AE9C ; $20
		dc.w	PLC_Iz_2-ArtLoadCues                   ; Offset_0x04AE9C ; $21
		dc.w	PLC_LBz_1-ArtLoadCues                  ; Offset_0x04AEB6 ; $22
		dc.w	PLC_LBz_1-ArtLoadCues                  ; Offset_0x04AEB6 ; $23
		dc.w	PLC_LBz_2-ArtLoadCues                  ; Offset_0x04AEC4 ; $24
		dc.w	PLC_LBz_3-ArtLoadCues                  ; Offset_0x04AED2 ; $25
		dc.w	PLC_MVz-ArtLoadCues                    ; Offset_0x04AEDA ; $26
		dc.w	PLC_MVz-ArtLoadCues                    ; Offset_0x04AEDA ; $27
		dc.w	PLC_MVz-ArtLoadCues                    ; Offset_0x04AEDA ; $28
		dc.w	PLC_MVz-ArtLoadCues                    ; Offset_0x04AEDA ; $29
		dc.w	PLC_2A_To_2D-ArtLoadCues               ; Offset_0x04AEDA ; $2A
		dc.w	PLC_2A_To_2D-ArtLoadCues               ; Offset_0x04AEDA ; $2B
		dc.w	PLC_2A_To_2D-ArtLoadCues               ; Offset_0x04AEDA ; $2C
		dc.w	PLC_2A_To_2D-ArtLoadCues               ; Offset_0x04AEDA ; $2D
		dc.w	PLC_LRz_1-ArtLoadCues                  ; Offset_0x04AEE8 ; $2E
		dc.w	PLC_LRz_1-ArtLoadCues                  ; Offset_0x04AEE8 ; $2F
		dc.w	PLC_LRz_2-ArtLoadCues                  ; Offset_0x04AEFC ; $30
		dc.w	PLC_LRz_2-ArtLoadCues                  ; Offset_0x04AEFC ; $31
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $32
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $33
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $34
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $35
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $36
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $37
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $38
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $39
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3A
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3B
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3C
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3D
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3E
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $3F
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $40
		dc.w	PLC_32_To_41-ArtLoadCues               ; Offset_0x04AEFC ; $41
		dc.w	PLC_ALz-ArtLoadCues                    ; Offset_0x04AF0A ; $42
		dc.w	PLC_BPz-ArtLoadCues                    ; Offset_0x04AF3C ; $43
		dc.w	PLC_DPz-ArtLoadCues                    ; Offset_0x04AF74 ; $44
		dc.w	PLC_CGz-ArtLoadCues                    ; Offset_0x04AFAC ; $45
		dc.w	PLC_EMz-ArtLoadCues                    ; Offset_0x04AFE4 ; $46
		dc.w	PLC_Bonus_Stage-ArtLoadCues            ; Offset_0x04B01C ; $47
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $48
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $49
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4A
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4B
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4C
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4D
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4E
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $4F
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $50
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $51
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $52
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $53
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $54
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $55
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $56
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $57
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $58
		dc.w	PLC_48_To_59-ArtLoadCues               ; Offset_0x04B030 ; $59
		dc.w	PLC_AIz_Mini_Boss-ArtLoadCues          ; Offset_0x04B030 ; $5A
		dc.w	PLC_Hz_Mini_Boss-ArtLoadCues           ; Offset_0x04B04A ; $5B
		dc.w	PLC_5C-ArtLoadCues                     ; Offset_0x04B058 ; $5C
		dc.w	PLC_CNz_Mini_Boss-ArtLoadCues          ; Offset_0x04B058 ; $5D
		dc.w	PLC_FBz_Mini_Boss-ArtLoadCues          ; Offset_0x04B066 ; $5E
		dc.w	PLC_Iz_Mini_Boss-ArtLoadCues           ; Offset_0x04B086 ; $5F
		dc.w	PLC_LBz_Mini_Boss-ArtLoadCues          ; Offset_0x04B094 ; $60
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $61
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $62
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $63
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $64
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $65
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $66
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $67
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $68
		dc.w	PLC_61_To_69-ArtLoadCues               ; Offset_0x04B0AE ; $69
		dc.w	PLC_FBz_Barrier_Eggman-ArtLoadCues     ; Offset_0x04B0AE ; $6A
		dc.w	PLC_AIz_Final_Boss-ArtLoadCues         ; Offset_0x04B0C8 ; $6B
		dc.w	PLC_Hz_Final_Boss-ArtLoadCues          ; Offset_0x04B0DC ; $6C
		dc.w	PLC_MGz_Final_Boss-ArtLoadCues         ; Offset_0x04B102 ; $6D
		dc.w	PLC_CNz_Final_Boss-ArtLoadCues         ; Offset_0x04B11C ; $6E
		dc.w	PLC_FBz_Final_Boss-ArtLoadCues         ; Offset_0x04B136 ; $6F
		dc.w	PLC_Iz_Final_Boss-ArtLoadCues          ; Offset_0x04B15C ; $70
		dc.w	PLC_LBz_Final_Boss-ArtLoadCues         ; Offset_0x04B176 ; $71
		dc.w	Offset_0x04B18A-ArtLoadCues
		dc.w	Offset_0x04B18A-ArtLoadCues
		dc.w	Offset_0x04B18A-ArtLoadCues
		dc.w	Offset_0x04B18A-ArtLoadCues
		dc.w	Offset_0x04B18A-ArtLoadCues
		dc.w	Offset_0x04B18A-ArtLoadCues
		dc.w	Offset_0x04B19E-ArtLoadCues
		dc.w	Offset_0x04B19E-ArtLoadCues
		dc.w	Offset_0x04B19E-ArtLoadCues
		dc.w	Offset_0x04B19E-ArtLoadCues

; macro for a pattern load cue header
; must be on the same line as a label that has a corresponding _End label later
plcheader macro {INTLABEL}
__LABEL__ label *
	dc.w	(((__LABEL___End - __LABEL___Begin)/6)-1)
__LABEL___Begin label *
	endm

; macro for a pattern load cue
plc macro toVRAMaddr,fromROMaddr
	dc.l	fromROMaddr
	dc.w	(toVRAMaddr&$7FF)<<5
	endm

; ===========================================================================
; ---------------------------------------------------------------------------
; PATTERN LOAD CUES
; Standard 1 - loaded for every level
; ---------------------------------------------------------------------------

PLC_Default:	plcheader
		plc	$7D4,Art_Head_Up_Display_Sonic
		plc	$6BC,Art_Main_Head_Up_Display_Rings
		plc	$5E4,Art_Enemy_Points_Star_Post
		plc	$4C4,Art_Monitors
PLC_Default_End:

; ---------------------------------------------------------------------------
; PATTERN LOAD CUES
; Standard 2 - loaded for every level (duplicate of Standard 1)
; ---------------------------------------------------------------------------

PLC_Default_Sonic:	plcheader
		plc	$4C4,Art_Monitors
		plc	$6BC,Art_Main_Head_Up_Display_Rings
		plc	$5E4,Art_Enemy_Points_Star_Post
		plc	$7D4,Art_Head_Up_Display_Sonic
PLC_Default_Sonic_End:

; ---------------------------------------------------------------------------
; PATTERN LOAD CUES
; Standard 3 - loaded for every level
; ---------------------------------------------------------------------------

PLC_Default_Flickies:	plcheader
		plc	$5A0,Art_Explosion
		plc	$580,Art_Squirrel
		plc	$592,Art_Blue_Bird
PLC_Default_Flickies_End:

;-------------------------------------------------------------------------------
PLC_Game_Over_Time_Over:                                       ; Offset_0x04AD3E
		dc.w	(((PLC_03_End-PLC_03)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_03:
		dc.l	Art_Game_Over_Time_Over                ; Offset_0x108396
		dc.w	$F380
PLC_03_End:
;-------------------------------------------------------------------------------
PLC_Act_1_Clear:                                               ; Offset_0x04AD46
		dc.w	(((PLC_04_End-PLC_04)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_04:
		dc.l	Art_End_Panel                          ; Offset_0x107956
		dc.w	$A000
PLC_04_End:
;-------------------------------------------------------------------------------
PLC_Default_2P:                                                ; Offset_0x04AD4E
		dc.w	(((PLC_05_End-PLC_05)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_05:
		dc.l	Art_V_Springs_Spikes_2P                ; Offset_0x136848
		dc.w	$7220
		dc.l	Art_H_Springs_Switch_2P                ; Offset_0x1366D4
		dc.w	$75A0
		dc.l	Art_Items_2P                           ; Offset_0x136A3A
		dc.w	$78C0
PLC_05_End:
;-------------------------------------------------------------------------------
PLC_Art_Scaled_Test:                                           ; Offset_0x04AD62
		dc.w	(((PLC_07_End-PLC_07)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_07:
		dc.l	Art_Scaled_Spheres                     ; Offset_0x10B68E
		dc.w	$9C00
PLC_07_End:
;-------------------------------------------------------------------------------
PLC_AIz_1:                                                     ; Offset_0x04AD6A
		dc.w	(((PLC_0A_End-PLC_0A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0A:
		dc.l	Art_Intro_Water_Waves                  ; Offset_0x1035F8
		dc.w	$7A20
		dc.l	Art_Intro_Small_Water_Waves            ; Offset_0x103B38
		dc.w	$A520
		dc.l	Art_Surfboard                          ; Offset_0x103DD0
		dc.w	$B0A0
PLC_0A_End:
;-------------------------------------------------------------------------------
PLC_AIz_2:                                                     ; Offset_0x04AD7E
		dc.w	(((PLC_0B_End-PLC_0B)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0B:
		dc.l	Art_AIz_Swinging_Vine                  ; Offset_0x12C9AA
		dc.w	$8440
		dc.l	Art_AIz_Slide_Rope                     ; Offset_0x12CB10
		dc.w	$6480
		dc.l	Art_AIz_Rocks_And_Tree                 ; Offset_0x12CD7E
		dc.w	$6660
		dc.l	Art_AIz_Cork_Floor                     ; Offset_0x12D5C6
		dc.w	$79E0
		dc.l	Art_Oxygen_Bubbles                     ; Offset_0x1080F8
		dc.w	$8B80
PLC_0B_End:
;-------------------------------------------------------------------------------
PLC_AIz_3:                                                     ; Offset_0x04AD9E
		dc.w	(((PLC_0C_End-PLC_0C)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0C:
		dc.l	Art_AIz_Miscellaneous                  ; Offset_0x12D84E
		dc.w	$5E00
		dc.l	Art_AIz_Swinging_Vine                  ; Offset_0x12C9AA
		dc.w	$8440
		dc.l	Art_AIz_Background_Tree                ; Offset_0x12CC34
		dc.w	$87E0
		dc.l	Art_Oxygen_Bubbles                     ; Offset_0x1080F8
		dc.w	$8B80
		dc.l	Art_Switch                             ; Offset_0x1067F6
		dc.w	$8AC0
PLC_0C_End:
;-------------------------------------------------------------------------------
PLC_Hz_1:                                                      ; Offset_0x04ADBE
		dc.w	(((PLC_0E_End-PLC_0E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0E:
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8740
		dc.l	Art_Oxygen_Bubbles                     ; Offset_0x1080F8
		dc.w	$8B80
		dc.l	Art_Hz_Miscellaneous                   ; Offset_0x12EE76
		dc.w	$7940
		dc.l	Art_Hz_Switch                          ; Offset_0x12EDC2
		dc.w	$84C0
		dc.l	Art_Hz_Water_Rush                      ; Offset_0x12F436
		dc.w	$6F40
		dc.l	Art_Hz_Water_Surface                   ; Offset_0x12ECA2
		dc.w	$85C0
		dc.l	Art_Hz_Spiked_Ball                     ; Offset_0x12EBDA
		dc.w	$87C0
PLC_0E_End:
;-------------------------------------------------------------------------------
PLC_Hz_2:                                                      ; Offset_0x04ADEA
		dc.w	(((PLC_0F_End-PLC_0F)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_0F:
		dc.l	Art_Buggernaut                         ; Offset_0x11667C
		dc.w	$8A60
PLC_0F_End:
;-------------------------------------------------------------------------------
PLC_Hz_3:                                                      ; Offset_0x04ADF2
		dc.w	(((PLC_10_End-PLC_10)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_10:
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8740
		dc.l	Art_Oxygen_Bubbles                     ; Offset_0x1080F8
		dc.w	$8B80
		dc.l	Art_Hz_Miscellaneous                   ; Offset_0x12EE76
		dc.w	$7940
		dc.l	Art_Hz_Switch                          ; Offset_0x12EDC2
		dc.w	$84C0
		dc.l	Art_Hz_Water_Surface                   ; Offset_0x12ECA2
		dc.w	$85C0
		dc.l	Art_Hz_Spiked_Ball                     ; Offset_0x12EBDA
		dc.w	$87C0
		dc.l	Art_Hz_Sliding_Tube                    ; Offset_0x130C24
		dc.w	$6B80
PLC_10_End:
;-------------------------------------------------------------------------------
PLC_Hz_4:                                                      ; Offset_0x04AE1E
		dc.w	(((PLC_11_End-PLC_11)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_11:
		dc.l	Art_Hz_Block_Wall                      ; Offset_0x1330E4
		dc.w	$6A00
		dc.l	Art_Hz_Bridge_And_Blocks               ; Offset_0x13113A
		dc.w	$0500
		dc.l	Art_Buggernaut                         ; Offset_0x11667C
		dc.w	$8A60
PLC_11_End:
;-------------------------------------------------------------------------------
PLC_MGz_1:                                                     ; Offset_0x04AE32
		dc.w	(((PLC_12_End-PLC_12)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_12:
		dc.l	Art_MGz_Wheel_And_Miscellaneous        ; Offset_0x1331FE
		dc.w	$6BE0
		dc.l	Art_MGz_Spiked_Platform_And_Miscellaneous ; Offset_0x133C3C
		dc.w	$7FE0
		dc.l	Art_MGz_Direction_Indicators           ; Offset_0x13424C
		dc.w	$8A20
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8F00
PLC_12_End:
;-------------------------------------------------------------------------------
PLC_MGz_2:                                                     ; Offset_0x04AE4C
		dc.w	(((PLC_14_End-PLC_14)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_14:
		dc.l	Art_MGz_Wheel_And_Miscellaneous        ; Offset_0x1331FE
		dc.w	$6BE0
		dc.l	Art_MGz_Spiked_Platform_And_Miscellaneous ; Offset_0x133C3C
		dc.w	$7FE0
		dc.l	Art_MGz_Direction_Indicators           ; Offset_0x13424C
		dc.w	$8A20
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8F00
PLC_14_End:
;-------------------------------------------------------------------------------
PLC_CNz:                                                       ; Offset_0x04AE66
		dc.w	(((PLC_16_End-PLC_16)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_16:
		dc.l	Art_CNz_Balloons_Bumpers_And_Miscellaneous ; Offset_0x134486
		dc.w	$6A20
		dc.l	Art_Oxygen_Bubbles                     ; Offset_0x1080F8
		dc.w	$8B80
		dc.l	Art_CNz_Platform                       ; Offset_0x135244
		dc.w	$8600
PLC_16_End:
;-------------------------------------------------------------------------------
PLC_FBz:                                                       ; Offset_0x04AE7A
		dc.w	(((PLC_1A_End-PLC_1A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_1A:
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8740
PLC_1A_End:
;-------------------------------------------------------------------------------
PLC_Iz_1:                                                      ; Offset_0x04AE82
		dc.w	(((PLC_1E_End-PLC_1E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_1E:
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8740
		dc.l	Art_Switch                             ; Offset_0x1067F6
		dc.w	$8AC0
		dc.l	Art_Iz_Ice_Platform_And_Miscellaneous  ; Offset_0x11DD52
		dc.w	$76C0
		dc.l	Art_Iz_Ice_Rock_And_Miscellaneous      ; Offset_0x11E976
		dc.w	$68E0
PLC_1E_End:
;-------------------------------------------------------------------------------
PLC_Iz_2:                                                      ; Offset_0x04AE9C
		dc.w	(((PLC_20_End-PLC_20)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_20:
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8740
		dc.l	Art_Switch                             ; Offset_0x1067F6
		dc.w	$8AC0
		dc.l	Art_Iz_Ice_Platform_And_Miscellaneous  ; Offset_0x11DD52
		dc.w	$76C0
		dc.l	Art_Iz_SnowSlip_And_Miscellaneous      ; Offset_0x11EDF8
		dc.w	$6FA0
PLC_20_End:
;-------------------------------------------------------------------------------
PLC_LBz_1:                                                     ; Offset_0x04AEB6
		dc.w	(((PLC_22_End-PLC_22)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_22:
		dc.l	Art_LBz_Miscellaneous                  ; Offset_0x1353AE
		dc.w	$7860
		dc.l	Art_LBz_Tube_Elevator                  ; Offset_0x135ECC
		dc.w	$8AA0
PLC_22_End:
;-------------------------------------------------------------------------------
PLC_LBz_2:                                                     ; Offset_0x04AEC4
		dc.w	(((PLC_24_End-PLC_24)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_24:
		dc.l	Art_LBz_Miscellaneous                  ; Offset_0x1353AE
		dc.w	$7860
		dc.l	Art_Oxygen_Bubbles                     ; Offset_0x1080F8
		dc.w	$8B80
PLC_24_End:
;-------------------------------------------------------------------------------
PLC_LBz_3:                                                     ; Offset_0x04AED2
		dc.w	(((PLC_25_End-PLC_25)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_25:
		dc.l	Art_LBz_Spin_Launcher_And_Miscellaneous ; Offset_0x136150
		dc.w	$5D40
PLC_25_End:
;-------------------------------------------------------------------------------
PLC_2A_To_2D:                                                  ; Offset_0x04AEDA
;-------------------------------------------------------------------------------
PLC_MVz:                                                       ; Offset_0x04AEDA
		dc.w	(((PLC_26_End-PLC_26)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_26:
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8740
		dc.l	Art_Spikes_Springs                     ; Offset_0x108E64
		dc.w	$9280
PLC_26_End:
;-------------------------------------------------------------------------------
PLC_LRz_1:                                                     ; Offset_0x04AEE8
		dc.w	(((PLC_2E_End-PLC_2E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_2E:
		dc.l	Art_LRz_Rocks                          ; Offset_0x13658C
		dc.w	$8000
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8740
		dc.l	Art_Spikes_Springs                     ; Offset_0x108E64
		dc.w	$9280
PLC_2E_End:
;-------------------------------------------------------------------------------
PLC_32_To_41:
;-------------------------------------------------------------------------------
PLC_LRz_2:                                                     ; Offset_0x04AEFC
		dc.w	(((PLC_30_End-PLC_30)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_30:
		dc.l	Art_Diagonal_Spring                    ; Offset_0x106AC8
		dc.w	$8740
		dc.l	Art_Spikes_Springs                     ; Offset_0x108E64
		dc.w	$9280
PLC_30_End:
;-------------------------------------------------------------------------------
PLC_ALz:                                                       ; Offset_0x04AF0A
		dc.w	(((PLC_42_End-PLC_42)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_42:
		dc.l	Art_Dust_2P                            ; Offset_0x0858E0
		dc.w	$FC00
		dc.l	Art_Goal_Marker_2P                     ; Offset_0x136F1E
		dc.w	$D780
		dc.l	Art_Head_up_display_Sprites_2P         ; Offset_0x137096
		dc.w	$C000
		dc.l	Art_Lap_Numbers_2P                     ; Offset_0x1376F0
		dc.w	$E000
		dc.l	Art_Point_And_Arrows_2P                ; Offset_0x137BB0
		dc.w	$EBC0
		dc.l	Art_V_Springs_Spikes_2P                ; Offset_0x136848
		dc.w	$7220
		dc.l	Art_H_Springs_Switch_2P                ; Offset_0x1366D4
		dc.w	$75A0
		dc.l	Art_Items_2P                           ; Offset_0x136A3A
		dc.w	$78C0
PLC_42_End:
;-------------------------------------------------------------------------------
PLC_BPz:                                                       ; Offset_0x04AF3C
		dc.w	(((PLC_43_End-PLC_43)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_43:
		dc.l	Art_BPz_Ballons_And_Miscellaneous      ; Offset_0x137C4A
		dc.w	$6000
		dc.l	Art_Dust_2P                            ; Offset_0x0858E0
		dc.w	$FC00
		dc.l	Art_Goal_Marker_2P                     ; Offset_0x136F1E
		dc.w	$D780
		dc.l	Art_Head_up_display_Sprites_2P         ; Offset_0x137096
		dc.w	$C000
		dc.l	Art_Lap_Numbers_2P                     ; Offset_0x1376F0
		dc.w	$E000
		dc.l	Art_Point_And_Arrows_2P                ; Offset_0x137BB0
		dc.w	$EBC0
		dc.l	Art_V_Springs_Spikes_2P                ; Offset_0x136848
		dc.w	$7220
		dc.l	Art_H_Springs_Switch_2P                ; Offset_0x1366D4
		dc.w	$75A0
		dc.l	Art_Items_2P                           ; Offset_0x136A3A
		dc.w	$78C0
PLC_43_End:
;-------------------------------------------------------------------------------
PLC_DPz:                                                       ; Offset_0x04AF74
		dc.w	(((PLC_44_End-PLC_44)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_44:
		dc.l	Art_DPz_Sand_And_Miscellaneous         ; Offset_0x138494
		dc.w	$5000
		dc.l	Art_Dust_2P                            ; Offset_0x0858E0
		dc.w	$FC00
		dc.l	Art_Goal_Marker_2P                     ; Offset_0x136F1E
		dc.w	$D780
		dc.l	Art_Head_up_display_Sprites_2P         ; Offset_0x137096
		dc.w	$C000
		dc.l	Art_Lap_Numbers_2P                     ; Offset_0x1376F0
		dc.w	$E000
		dc.l	Art_Point_And_Arrows_2P                ; Offset_0x137BB0
		dc.w	$EBC0
		dc.l	Art_V_Springs_Spikes_2P                ; Offset_0x136848
		dc.w	$7220
		dc.l	Art_H_Springs_Switch_2P                ; Offset_0x1366D4
		dc.w	$75A0
		dc.l	Art_Items_2P                           ; Offset_0x136A3A
		dc.w	$78C0
PLC_44_End:
;-------------------------------------------------------------------------------
PLC_CGz:                                                       ; Offset_0x04AFAC
		dc.w	(((PLC_45_End-PLC_45)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_45:
		dc.l	Art_CGz_Platform_And_Miscellaneous     ; Offset_0x1391AA
		dc.w	$6000
		dc.l	Art_Dust_2P                            ; Offset_0x0858E0
		dc.w	$FC00
		dc.l	Art_Goal_Marker_2P                     ; Offset_0x136F1E
		dc.w	$D780
		dc.l	Art_Head_up_display_Sprites_2P         ; Offset_0x137096
		dc.w	$C000
		dc.l	Art_Lap_Numbers_2P                     ; Offset_0x1376F0
		dc.w	$E000
		dc.l	Art_Point_And_Arrows_2P                ; Offset_0x137BB0
		dc.w	$EBC0
		dc.l	Art_V_Springs_Spikes_2P                ; Offset_0x136848
		dc.w	$7220
		dc.l	Art_H_Springs_Switch_2P                ; Offset_0x1366D4
		dc.w	$75A0
		dc.l	Art_Items_2P                           ; Offset_0x136A3A
		dc.w	$78C0
PLC_45_End:
;-------------------------------------------------------------------------------
PLC_EMz:                                                       ; Offset_0x04AFE4
		dc.w	(((PLC_46_End-PLC_46)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_46:
		dc.l	Art_EMz_Rock_And_Miscellaneous         ; Offset_0x13951E
		dc.w	$6000
		dc.l	Art_Dust_2P                            ; Offset_0x0858E0
		dc.w	$FC00
		dc.l	Art_Goal_Marker_2P                     ; Offset_0x136F1E
		dc.w	$D780
		dc.l	Art_Head_up_display_Sprites_2P         ; Offset_0x137096
		dc.w	$C000
		dc.l	Art_Lap_Numbers_2P                     ; Offset_0x1376F0
		dc.w	$E000
		dc.l	Art_Point_And_Arrows_2P                ; Offset_0x137BB0
		dc.w	$EBC0
		dc.l	Art_V_Springs_Spikes_2P                ; Offset_0x136848
		dc.w	$7220
		dc.l	Art_H_Springs_Switch_2P                ; Offset_0x1366D4
		dc.w	$75A0
		dc.l	Art_Items_2P                           ; Offset_0x136A3A
		dc.w	$78C0
PLC_46_End:
;-------------------------------------------------------------------------------
PLC_Bonus_Stage:                                               ; Offset_0x04B01C
		dc.w	(((PLC_47_End-PLC_47)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_47:
		dc.l	Art_V_Springs_Spikes_2P                ; Offset_0x136848
		dc.w	$7220
		dc.l	Art_H_Springs_Switch_2P                ; Offset_0x1366D4
		dc.w	$75A0
		dc.l	Art_Items_2P                           ; Offset_0x136A3A
		dc.w	$78C0
PLC_47_End:
;-------------------------------------------------------------------------------
PLC_48_To_59:                                                  ; Offset_0x04B030
;-------------------------------------------------------------------------------
PLC_AIz_Mini_Boss:                                             ; Offset_0x04B030
		dc.w	(((PLC_5A_End-PLC_5A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5A:
		dc.l	Art_Fire_Breath                        ; Offset_0x110E8E
		dc.w	$7E20
		dc.l	Art_Fire_Breath_Small                  ; Offset_0x11343E
		dc.w	$8960
		dc.l	Art_Fire_Breath_Flames                 ; Offset_0x124854
		dc.w	$8B20
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
PLC_5A_End:
;-------------------------------------------------------------------------------
PLC_Hz_Mini_Boss:                                              ; Offset_0x04B04A
		dc.w	(((PLC_5B_End-PLC_5B)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5B:
		dc.l	Art_Big_Shaker                         ; Offset_0x11469C
		dc.w	$6080
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
PLC_5B_End:
;-------------------------------------------------------------------------------
PLC_5C:                                                        ; Offset_0x04B058
;-------------------------------------------------------------------------------
PLC_CNz_Mini_Boss:
		dc.w	(((PLC_5D_End-PLC_5D)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5D:
		dc.l	Art_Bowling_Spin                       ; Offset_0x11A78C
		dc.w	$A0E0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
PLC_5D_End:
;-------------------------------------------------------------------------------
PLC_FBz_Mini_Boss:                                             ; Offset_0x04B066
		dc.w	(((PLC_5E_End-PLC_5E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5E:
		dc.l	Art_Gapsule                            ; Offset_0x11C8F4
		dc.w	$A5C0
		dc.l	Art_Egg_Prison                         ; Offset_0x126E84
		dc.w	$89C0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
		dc.l	Art_Squirrel                           ; Offset_0x10B3DC
		dc.w	$85C0
		dc.l	Art_Blue_Bird                          ; Offset_0x10B00A
		dc.w	$8800
PLC_5E_End:
;-------------------------------------------------------------------------------
PLC_Iz_Mini_Boss:                                              ; Offset_0x04B086
		dc.w	(((PLC_5F_End-PLC_5F)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_5F:
		dc.l	Art_Big_Icedus                         ; Offset_0x11FF66
		dc.w	$9AE0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
PLC_5F_End:
;-------------------------------------------------------------------------------
PLC_LBz_Mini_Boss:                                             ; Offset_0x04B094
		dc.w	(((PLC_60_End-PLC_60)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_60:
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_Twin_Hammer_Box                    ; Offset_0x124066
		dc.w	$88C0
		dc.l	Art_Twin_Hammer                        ; Offset_0x1215F2
		dc.w	$8380
		dc.l	Art_LBz_Knuckles_Bomb                  ; Offset_0x1244C6
		dc.w	$94A0
PLC_60_End:
;-------------------------------------------------------------------------------
PLC_61_To_69:                                                  ; Offset_0x04B0AE
;-------------------------------------------------------------------------------
PLC_FBz_Barrier_Eggman:                                        ; Offset_0x04B0AE
		dc.w	(((PLC_6A_End-PLC_6A)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6A:
		dc.l	Art_Laser_Beam                         ; Offset_0x11CEBA
		dc.w	$A5C0
		dc.l	Art_FBz_Robotnik_Stand                 ; Offset_0x1258F0
		dc.w	$8CC0
		dc.l	Art_FBz_Robotnik                       ; Offset_0x125D06
		dc.w	$9AE0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
PLC_6A_End:
;-------------------------------------------------------------------------------
PLC_AIz_Final_Boss:                                            ; Offset_0x04B0C8
		dc.w	(((PLC_6B_End-PLC_6B)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6B:
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
		dc.l	Art_Egg_Prison                         ; Offset_0x126E84
		dc.w	$9AE0
PLC_6B_End:
;-------------------------------------------------------------------------------
PLC_Hz_Final_Boss:                                             ; Offset_0x04B0DC
		dc.w	(((PLC_6C_End-PLC_6C)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6C:
		dc.l	Art_Screw_Mobile                       ; Offset_0x11553A
		dc.w	$6D60
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
		dc.l	Art_Explosion                          ; Offset_0x108528
		dc.w	$B400
		dc.l	Art_Oxygen_Bubbles                     ; Offset_0x1080F8
		dc.w	$8B80
		dc.l	Art_Egg_Prison                         ; Offset_0x126E84
		dc.w	$9AE0
PLC_6C_End:
;-------------------------------------------------------------------------------
PLC_MGz_Final_Boss:                                            ; Offset_0x04B102
		dc.w	(((PLC_6D_End-PLC_6D)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6D:
		dc.l	Art_Drill_Mobile                       ; Offset_0x11753E
		dc.w	$5A00
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
		dc.l	Art_Egg_Prison                         ; Offset_0x126E84
		dc.w	$9AE0
PLC_6D_End:
;-------------------------------------------------------------------------------
PLC_CNz_Final_Boss:                                            ; Offset_0x04B11C
		dc.w	(((PLC_6E_End-PLC_6E)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6E:
		dc.l	Art_Graviton_Mobile                    ; Offset_0x11AC48
		dc.w	$8600
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
		dc.l	Art_Egg_Prison                         ; Offset_0x126E84
		dc.w	$9AE0
PLC_6E_End:
;-------------------------------------------------------------------------------
PLC_FBz_Final_Boss:                                            ; Offset_0x04B136
		dc.w	(((PLC_6F_End-PLC_6F)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_6F:
		dc.l	Art_Hang_Mobile                        ; Offset_0x11D3BC
		dc.w	$7C00
		dc.l	Art_FBz_Robotnik_Faces                 ; Offset_0x12567E
		dc.w	$8200
		dc.l	Art_FBz_Boss_Flames                    ; Offset_0x124DA6
		dc.w	$8A80
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
		dc.l	Art_Egg_Prison                         ; Offset_0x126E84
		dc.w	$9AE0
PLC_6F_End:
;-------------------------------------------------------------------------------
PLC_Iz_Final_Boss:                                             ; Offset_0x04B15C
		dc.w	(((PLC_70_End-PLC_70)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_70:
		dc.l	Art_Freezer_Mobile                     ; Offset_0x11F1B8
		dc.w	$54C0
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
		dc.l	Art_Egg_Prison                         ; Offset_0x126E84
		dc.w	$9AE0
PLC_70_End:
;-------------------------------------------------------------------------------
PLC_LBz_Final_Boss:                                            ; Offset_0x04B176
		dc.w	(((PLC_71_End-PLC_71)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_71:
		dc.l	Art_Beam_Rocket                        ; Offset_0x121946
		dc.w	$7540
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
PLC_71_End:
;-------------------------------------------------------------------------------
Offset_0x04B18A:
		dc.w	(((PLC_72_End-PLC_72)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_72:
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
		dc.l	Art_FBz_Robotnik                       ; Offset_0x125D06
		dc.w	$9AE0
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
PLC_72_End:
;-------------------------------------------------------------------------------
Offset_0x04B19E:
		dc.w	(((PLC_78_End-PLC_78)/$06)-$01) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
PLC_78:
		dc.l	Art_Twin_Hammer_Box                    ; Offset_0x124066
		dc.w	$88C0
		dc.l	Art_Robotnik_In_Egg_Mobile             ; Offset_0x125122
		dc.w	$A5C0
PLC_78_End:
		dc.l	Art_Boss_Explosion                     ; Offset_0x124504
		dc.w	$9520
;===============================================================================
; Carga dos gr�ficos das fases
; <<<-
;===============================================================================

;===============================================================================
; Rotina usada para depurar o jogo
; ->>>
;===============================================================================
Debug_Mode:                                                    ; Offset_0x04B1B2
		moveq	#0,d0
		move.b	(Debug_placement_mode).w,d0                ; $FFFFFE08
		move.w	Offset_0x04B1C0(pc,d0.w),d1
		jmp	Offset_0x04B1C0(pc,d1.w)
;-------------------------------------------------------------------------------
Offset_0x04B1C0:
		dc.w	Offset_0x04B1C4-Offset_0x04B1C0
		dc.w	Offset_0x04B24C-Offset_0x04B1C0
;-------------------------------------------------------------------------------
Offset_0x04B1C4:
		addq.b	#$02,(Debug_placement_mode).w              ; $FFFFFE08
		move.l	Obj_Map(A0),(Debug_Player_Obj_Map).w ; $000C, $FFFFFFCA
		move.w	Obj_Art_VRAM(A0),(Debug_Player_Obj_Art_VRAM).w ; $000A, $FFFFFFCE
		move.w	(Screen_Wrap_Y).w,d0                        ; $FFFFEEAA
		and.w	D0,(Obj_Player_One+Obj_Y).w                 ; $FFFFB014
		and.w	D0,(Camera_Y).w                             ; $FFFFEE7C
		clr.b	(Sonic_Scroll_Lock_Flag).w                   ; $FFFFEE0A
		clr.w	(Sonic_Wind_Flag).w                          ; $FFFFF7C8
		bclr	#$06, Obj_Status(A0)                             ; $002A
		beq.s	Offset_0x04B20A
		move.l	A0,a1
		jsr	(ResumeMusic)                         ; Offset_0x00F89E
		move.w	#$0600,(Sonic_Max_Speed).w                  ; $FFFFF760
		move.w	#$000C,(Sonic_Acceleration).w               ; $FFFFF762
		move.w	#$0080,(Sonic_Deceleration).w               ; $FFFFF764
Offset_0x04B20A:
		move.b	#0, Obj_Map_Id(A0)                             ; $0022
		move.b	#0, Obj_Ani_Number(A0)                         ; $0020
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0                             ; $FFFFFE10
		ror.b	#$01,d0
		lsr.w	#$06,d0
		andi.w	#$007E,d0
		lea	(Debug_Index).l,a2                      ; Offset_0x04B418
		adda.w	(A2,d0),a2
		move.w	(A2)+,d6
		cmp.b	(Debug_object).w,d6              ; $FFFFFE06
		bhi.s	Offset_0x04B23C
		move.b	#0,(Debug_object).w            ; $FFFFFE06
Offset_0x04B23C:
		bsr.w	Offset_0x04B3F6
		move.b	#$0C,(Debug_Accel_Timer).w            ; $FFFFFE0A
		move.b	#$01,(Debug_Speed).w            ; $FFFFFE0B
;-------------------------------------------------------------------------------
Offset_0x04B24C:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0                             ; $FFFFFE10
		ror.b	#$01,d0
		lsr.w	#$06,d0
		andi.w	#$007E,d0
		lea	(Debug_Index).l,a2                      ; Offset_0x04B418
		adda.w	(A2,d0),a2
		move.w	(A2)+,d6
		bsr.w	Offset_0x04B270
		jmp	(DisplaySprite)                        ; Offset_0x011148
Offset_0x04B270:
		moveq	#0,d4
		move.w	#$0001,d1
		move.b	(Control_Ports_Buffer_Data+$01).w,d4        ; $FFFFF605
		andi.w	#$000F,d4
		bne.s	Offset_0x04B2B2
		move.b	(Control_Ports_Buffer_Data).w,d0            ; $FFFFF604
		andi.w	#$000F,d0
		bne.s	Offset_0x04B29A
		move.b	#$0C,(Debug_Accel_Timer).w            ; $FFFFFE0A
		move.b	#$0F,(Debug_Speed).w            ; $FFFFFE0B
		bra.w	Offset_0x04B316
Offset_0x04B29A:
		subq.b	#$01,(Debug_Accel_Timer).w            ; $FFFFFE0A
		bne.s	Offset_0x04B2B6
		move.b	#$01,(Debug_Accel_Timer).w            ; $FFFFFE0A
		addq.b	#$01,(Debug_Speed).w            ; $FFFFFE0B
		bne.s	Offset_0x04B2B2
		move.b	#$FF,(Debug_Speed).w            ; $FFFFFE0B
Offset_0x04B2B2:
		move.b	(Control_Ports_Buffer_Data).w,d4            ; $FFFFF604
Offset_0x04B2B6:
		moveq	#0,d1
		move.b	(Debug_Speed).w,d1              ; $FFFFFE0B
		addq.w	#$01,d1
		swap	D1
		asr.l	#$04,d1
		move.l	Obj_Y(A0),d2                                    ; $0014
		move.l	Obj_X(A0),d3                                    ; $0010
		btst	#0,d4
		beq.s	Offset_0x04B2E0
		sub.l	D1,d2
		moveq	#0,d0
		move.w	(Sonic_Level_Limits_Min_Y).w,d0             ; $FFFFEE18
		swap	D0
		cmp.l	D0,d2
		bge.s	Offset_0x04B2E0
		move.l	D0,d2
Offset_0x04B2E0:
		btst	#$01,d4
		beq.s	Offset_0x04B2FA
		add.l	D1,d2
		moveq	#0,d0
		move.w	(Level_Limits_Max_Y).w,d0                   ; $FFFFEE12
		addi.w	#$00DF,d0
		swap	D0
		cmp.l	D0,d2
		blt.s	Offset_0x04B2FA
		move.l	D0,d2
Offset_0x04B2FA:
		btst	#$02,d4
		beq.s	Offset_0x04B306
		sub.l	D1,d3
		bcc.s	Offset_0x04B306
		moveq	#0,d3
Offset_0x04B306:
		btst	#$03,d4
		beq.s	Offset_0x04B30E
		add.l	D1,d3
Offset_0x04B30E:
		move.l	D2, Obj_Y(A0)                                    ; $0014
		move.l	D3, Obj_X(A0)                                    ; $0010
Offset_0x04B316:
		btst	#$06,(Control_Ports_Buffer_Data).w          ; $FFFFF604
		beq.s	Offset_0x04B34E
		btst	#$05,(Control_Ports_Buffer_Data+$01).w      ; $FFFFF605
		beq.s	Offset_0x04B332
		subq.b	#$01,(Debug_object).w            ; $FFFFFE06
		bcc.s	Offset_0x04B34A
		add.b	D6,(Debug_object).w              ; $FFFFFE06
		bra.s	Offset_0x04B34A
Offset_0x04B332:
		btst	#$06,(Control_Ports_Buffer_Data+$01).w      ; $FFFFF605
		beq.s	Offset_0x04B34E
		addq.b	#$01,(Debug_object).w            ; $FFFFFE06
		cmp.b	(Debug_object).w,d6              ; $FFFFFE06
		bhi.s	Offset_0x04B34A
		move.b	#0,(Debug_object).w            ; $FFFFFE06
Offset_0x04B34A:
		bra.w	Offset_0x04B3F6
Offset_0x04B34E:
		btst	#$05,(Control_Ports_Buffer_Data+$01).w      ; $FFFFF605
		beq.s	Offset_0x04B39A
		jsr	(AllocateObject)                     ; Offset_0x011DD8
		bne.s	Offset_0x04B39A
		move.w	Obj_X(A0), Obj_X(A1)                      ; $0010, $0010
		move.w	Obj_Y(A0), Obj_Y(A1)                      ; $0014, $0014
		move.b	Obj_Flags(A0), Obj_Flags(A1)              ; $0004, $0004
		move.b	Obj_Flags(A0), Obj_Status(A1)             ; $0004, $002A
		andi.b	#$7F, Obj_Status(A1)                             ; $002A
		moveq	#0,d0
		move.b	(Debug_object).w,d0              ; $FFFFFE06
		add.w	D0,d0
		move.w	D0,d1
		lsl.w	#$02,d0
		add.w	D1,d0
		move.b	$04(A2,d0), Obj_Subtype(A1)                     ; $002C
		move.l	(A2,d0),(A1)
		move.b	#0,(A1)
		rts
Offset_0x04B39A:
		btst	#$04,(Control_Ports_Buffer_Data+$01).w      ; $FFFFF605
		beq.s	Offset_0x04B3C6
		moveq	#0,d0
		move.w	D0,(Debug_placement_mode).w                ; $FFFFFE08
		lea	(Obj_Memory_Address).w,a1                   ; $FFFFB000
		move.l	(Debug_Player_Obj_Map).w, Obj_Map(A1) ; $FFFFFFCA, $000C
		move.w	(Debug_Player_Obj_Art_VRAM).w, Obj_Art_VRAM(A1) ; $FFFFFFCE, $000A
		bsr.s	Offset_0x04B3C8
		move.b	#$13, Obj_Height_2(A1)                           ; $001E
		move.b	#$09, Obj_Width_2(A1)                            ; $001F
Offset_0x04B3C6:
		rts
Offset_0x04B3C8:
		move.b	D0, Obj_Ani_Number(A1)                           ; $0020
		move.w	D0, Obj_Sub_X(A1)                                ; $0012
		move.w	D0, Obj_Sub_Y(A1)                                ; $0016
		move.b	D0, Obj_Player_Control(A1)                       ; $002E
		move.b	D0, Obj_Player_Spdsh_Flag(A1)                    ; $003D
		move.w	D0, Obj_Speed_X(A1)                              ; $0018
		move.w	D0, Obj_Speed_Y(A1)                              ; $001A
		move.w	D0, Obj_Inertia(A1)                              ; $001C
		move.b	#$02, Obj_Status(A1)                             ; $002A
		move.b	#$02, Obj_Routine(A1)                            ; $0005
		rts
Offset_0x04B3F6:
		moveq	#0,d0
		move.b	(Debug_object).w,d0              ; $FFFFFE06
		add.w	D0,d0
		move.w	D0,d1
		lsl.w	#$02,d0
		add.w	D1,d0
		move.l	$04(A2,d0), Obj_Map(A0)                         ; $000C
		move.w	$08(A2,d0), Obj_Art_VRAM(A0)                    ; $000A
		move.b	(A2,d0), Obj_Map_Id(A0)                      ; $0022
		rts
; ===========================================================================
; Offset_0x04B418:
Debug_Index:	dc.w DebugList_AIZ1-Debug_Index
		dc.w Debug_AIz_2-Debug_Index
		dc.w Debug_Hz-Debug_Index
		dc.w Debug_Hz-Debug_Index
		dc.w Debug_MGz-Debug_Index
		dc.w Debug_MGz-Debug_Index
		dc.w Debug_CNz-Debug_Index
		dc.w Debug_CNz-Debug_Index
		dc.w Debug_FBz-Debug_Index
		dc.w Debug_FBz-Debug_Index
		dc.w Debug_Iz_1-Debug_Index
		dc.w Debug_Iz_2-Debug_Index
		dc.w Debug_LBz_1-Debug_Index
		dc.w Debug_LBz_2-Debug_Index
		dc.w Debug_MVz-Debug_Index
		dc.w Debug_MVz-Debug_Index
		dc.w Debug_Sz-Debug_Index
		dc.w Debug_Sz-Debug_Index
		dc.w Debug_LRz-Debug_Index
		dc.w Debug_LRz-Debug_Index
		dc.w Debug_SSz-Debug_Index
		dc.w Debug_SSz-Debug_Index
		dc.w Debug_DEz-Debug_Index
		dc.w Debug_DEz-Debug_Index
		dc.w Debug_TDz-Debug_Index
		dc.w Debug_TDz-Debug_Index
		dc.w Debug_HPz-Debug_Index
		dc.w Debug_HPz-Debug_Index
		dc.w Debug_ALz-Debug_Index
		dc.w Debug_ALz-Debug_Index
		dc.w Debug_BPz-Debug_Index
		dc.w Debug_BPz-Debug_Index
		dc.w Debug_DPz-Debug_Index
		dc.w Debug_DPz-Debug_Index
		dc.w Debug_CGz-Debug_Index
		dc.w Debug_CGz-Debug_Index
		dc.w Debug_EMz-Debug_Index
		dc.w Debug_EMz-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index
		dc.w Debug_Default-Debug_Index

; macro for a debug object list header
; must be on the same line as a label that has a corresponding _End label later
dbglistheader macro {INTLABEL}
__LABEL__ label *
	dc.w ((__LABEL___End - __LABEL___Begin) / $A)
__LABEL___Begin label *
    endm

; macro to define debug list object data
dbglistobj macro obj, mapaddr, subtype, frame, vram
	dc.l	(frame<<$18)|obj
	dc.l	(subtype<<$18)|mapaddr
	dc.w	vram
    endm

; Offset_0x04B478: Debug_AIz_1:
DebugList_AIZ1:	dbglistheader
		dbglistobj Obj00_Rings,				Rings_Mappings,			0, 0, $A6BC
		dbglistobj Obj01_Monitors,			Monitors_Mappings,		8, 0, $4C4
		dbglistobj Obj02_Pathswappers,			Layer_Switch_Mappings,		9, 1, $26BC
		dbglistobj Obj02_Pathswappers,			Layer_Switch_Mappings,		$D, 5, $26BC
		dbglistobj Obj07_Springs,			Springs_Mappings,		$81, 0, $4A4
		dbglistobj Obj07_Springs,			Springs_Mappings,		$90, 3, $4B4
		dbglistobj Obj07_Springs,			Springs_Mappings,		$A0, 6, $4A4
		dbglistobj Obj_0x08_Spikes,			Spikes_Mappings,		0, 0, $49C
		dbglistobj Obj05_Rock,				Rock_Mappings,			4, 0, $2333
		dbglistobj Obj05_Rock,				Rock_Mappings,			$13, 1, $2333
		dbglistobj Obj05_Rock,				Rock_Mappings,			$23, 2, $2333
		dbglistobj Obj_0x04_Collapsing_Platform,	Collapsing_Platform_Mappings,	0, 0, $4001
		dbglistobj Obj_0x06_Ride_Vine,			Ride_Vine_Mappings,		8, $21, $422
		dbglistobj Obj_0x0C_Swing_Ride_Vine,		Ride_Vine_Mappings,		$F, $21, $422
		dbglistobj Obj_0x2D_AIz_Falling_Log,		AIz_Falling_Log_Mappings,	7, 0, $43CF
		dbglistobj Obj_0x82_AIz_Rhinobot,		Rhinobot_Mappings,		0, 0, $2500
		dbglistobj Obj_0x81_AIz_Bloominator,		Bloominator_Mappings,		0, 0, $252A
		dbglistobj Obj_0x83_AIz_Monkey_Dude,		Monkey_Dude_Mappings,		$10, 0, $2548
		dbglistobj Obj_AIz_Intro_Surfboard,		Intro_Surfboard_Mappings,	1, 1, $680
		dbglistobj Obj_Art_Scaling,			Scaling_Mappings,		0, 0, $6500
		dbglistobj Obj_0x0B_Sphere_Test,		Sphere_Test_Mappings,		0, 0, $24E0
		dbglistobj Obj_0x34_Star_Post,			Star_Post_Mappings,		1, 0, $5EC
		dbglistobj Obj_0x54_Oxygen_Bubbles,		Sonic_Underwater_Mappings,	$81, $13, $845C
		dbglistobj Obj_0x2A_Breakable_Floor,		Breakable_Floor_Mappings,	0, 0, $4001
		dbglistobj Obj35_AIZPlants,			Plants_Mappings,		0, 0, $C333
		dbglistobj Obj35_AIZPlants,			Plants_Mappings,		$11, 1, $C333
		dbglistobj Obj35_AIZPlants,			Plants_Mappings,		$20, 0, $C333
		dbglistobj Obj35_AIZPlants,			Plants_Mappings,		$31, 1, $C333
		dbglistobj Obj35_AIZPlants,			Plants_Mappings,		$40, 0, $C333
		dbglistobj Obj35_AIZPlants,			Plants_Mappings,		$51, 1, $C333
		dbglistobj Obj35_AIZPlants,			Plants_Mappings,		$60, 0, $C333
DebugList_AIZ1_End:

;-------------------------------------------------------------------------------
Debug_AIz_2:                                                   ; Offset_0x04B5B0
		dc.w	((DOL_01_End-DOL_01)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_01: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	Obj05_Rock                          ; Offset_0x0150FC
		dc.l	($04<<$18)|AIz_2_Rock_Mappings         ; Offset_0x015776
		dc.w	$42F0
		dc.l	($01<<$18)|Obj05_Rock               ; Offset_0x0150FC
		dc.l	($13<<$18)|AIz_2_Rock_Mappings         ; Offset_0x015776
		dc.w	$42F0
		dc.l	($02<<$18)|Obj05_Rock               ; Offset_0x0150FC
		dc.l	($23<<$18)|AIz_2_Rock_Mappings         ; Offset_0x015776
		dc.w	$42F0
		dc.l	Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
		dc.l	AIz_2_Collapsing_Platform_Mappings     ; Offset_0x0160F8
		dc.w	$4001
		dc.l	Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
		dc.l	Breakable_Wall_Mappings                ; Offset_0x017732
		dc.w	$4001
		dc.l	($05<<$18)|Obj_0x29_AIz_Disappearing_Platform ; Offset_0x020EE0
		dc.l	($07<<$18)|AIz_Disappearing_Platform_Mappings ; Offset_0x021050
		dc.w	$4001
		dc.l	Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
		dc.l	AIz_2_Breakable_Floor_Mappings         ; Offset_0x021770
		dc.w	$4001
		dc.l	($05<<$18)|Obj_0x2B_AIz_Flipping_Bridge ; Offset_0x021B1C
		dc.l	($50<<$18)|Flipping_Bridge_Mappings    ; Offset_0x021E78
		dc.w	$42F0
		dc.l	Obj_0x2C_AIz_Collapsing_Bridge         ; Offset_0x021F0C
		dc.l	($08<<$18)|Collapsing_Bridge_Mappings  ; Offset_0x0222A2
		dc.w	$42F0
		dc.l	Obj_0x2D_AIz_Falling_Log               ; Offset_0x0227AC
		dc.l	($07<<$18)|AIz_2_Falling_Log_Mappings  ; Offset_0x02297E
		dc.w	$42F0
		dc.l	($08<<$18)|Obj_0x2E_AIz_Spiked_Rotating_Log ; Offset_0x022A7E
		dc.l	Spiked_Rotating_Log_Mappings           ; Offset_0x022C4E
		dc.w	$42F0
		dc.l	Obj2F_StaticDecoration                  ; Offset_0x022E38
		dc.l	Still_Sprite_Mappings                  ; Offset_0x022F02
		dc.w	$42F0
		dc.l	($01<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($01<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$42F0
		dc.l	($02<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($02<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$42F0
		dc.l	($03<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($03<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$4001
		dc.l	($04<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($04<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$6001
		dc.l	Obj30_AnimatedDecoration         ; Offset_0x0231C0
		dc.l	Animated_Still_Sprite_Mappings         ; Offset_0x02322A
		dc.w	$62F0
		dc.l	($05<<$18)|Obj30_AnimatedDecoration ; Offset_0x0231C0
		dc.l	($01<<$18)|Animated_Still_Sprite_Mappings ; Offset_0x02322A
		dc.w	$62F0
		dc.l	($21<<$18)|Obj_0x06_Ride_Vine          ; Offset_0x017A8E
		dc.l	($88<<$18)|Ride_Vine_Mappings          ; Offset_0x018482
		dc.w	$0422
		dc.l	($21<<$18)|Obj_0x0C_Swing_Ride_Vine    ; Offset_0x0180FE
		dc.l	($0F<<$18)|Ride_Vine_Mappings          ; Offset_0x018482
		dc.w	$0422
		dc.l	($01<<$18)|Obj_0x32_AIz_Draw_Bridge    ; Offset_0x02235C
		dc.l	Draw_Bridge_Mappings                   ; Offset_0x02277E
		dc.w	$42F0
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	($10<<$18)|Switch_Mappings             ; Offset_0x023832
		dc.w	$0456
		dc.l	Obj_0x82_AIz_Rhinobot                  ; Offset_0x043C2A
		dc.l	Rhinobot_Mappings                      ; Offset_0x10E548
		dc.w	$2500
		dc.l	Obj_0x81_AIz_Bloominator               ; Offset_0x043B3E
		dc.l	Bloominator_Mappings                   ; Offset_0x10E660
		dc.w	$252A
		dc.l	Obj_0x83_AIz_Monkey_Dude               ; Offset_0x043F1C
		dc.l	Monkey_Dude_Mappings                   ; Offset_0x10E716
		dc.w	$2548
		dc.l	Obj_0x9F_AIz_Catakiller_Jr             ; Offset_0x044490
		dc.l	Catakiller_Jr_Mappings                 ; Offset_0x10E9BE
		dc.w	$255F
		dc.l	Obj_0x34_Star_Post                     ; Offset_0x023F76
		dc.l	($01<<$18)|Star_Post_Mappings          ; Offset_0x024282
		dc.w	$05EC
		dc.l	($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
		dc.l	($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
		dc.w	$845C
		dc.l	Obj_AIz_Tree                           ; Offset_0x0234AA
		dc.l	Tree_Mappings                          ; Offset_0x0234F0
		dc.w	$443F
DOL_01_End:
;-------------------------------------------------------------------------------
Debug_Hz:                                                      ; Offset_0x04B724
		dc.w	((DOL_02_End-DOL_02)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_02: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($09<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	Obj_0x9A_Hz_Blastoid                   ; Offset_0x0446D0
		dc.l	Blastoid_Mappings                      ; Offset_0x10DD6A
		dc.w	$2539
		dc.l	Obj_0x9E_Hz_Pointdexter                ; Offset_0x044F90
		dc.l	($20<<$18)|Pointdexter_Mappings        ; Offset_0x10DE0C
		dc.w	$2559
		dc.l	Obj_0x9B_Hz_Buggernaut                 ; Offset_0x0447A6
		dc.l	Buggernaut_Mappings                    ; Offset_0x10DE4E
		dc.w	$2453
		dc.l	Obj_0x9D_Hz_Mega_Chopper               ; Offset_0x044CC8
		dc.l	Mega_Chopper_Mappings                  ; Offset_0x10DEBA
		dc.w	$254D
		dc.l	Obj_0x9C_Hz_Turbo_Spiker               ; Offset_0x044946
		dc.l	Turbo_Spiker_Mappings                  ; Offset_0x10E1AC
		dc.w	$2500
		dc.l	Obj_0x99_Hz_Jawz                       ; Offset_0x04465C
		dc.l	Jawz_Mappings                          ; Offset_0x10E304
		dc.w	$2539
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	($20<<$18)|Hz_Switch_Mappings          ; Offset_0x02385C
		dc.w	$2426
		dc.l	Obj_0x36_Hz_Breakable_Bar              ; Offset_0x0143B2
		dc.l	Hz_Breakable_Bar_Mappings              ; Offset_0x01488E
		dc.w	$43CA
		dc.l	($04<<$18)|Obj_0x36_Hz_Breakable_Bar   ; Offset_0x0143B2
		dc.l	($80<<$18)|Hz_Breakable_Bar_Mappings   ; Offset_0x01488E
		dc.w	$43CA
		dc.l	Obj_0x38_Hz_Fan                        ; Offset_0x026408
		dc.l	($16<<$18)|Fan_Mappings                ; Offset_0x0267EE
		dc.w	$240B
		dc.l	($01<<$18)|Obj_0x38_Hz_Fan             ; Offset_0x026408
		dc.l	($4C<<$18)|Fan_Mappings                ; Offset_0x0267EE
		dc.w	$240B
		dc.l	Obj_0x39_Hz_Large_Fan                  ; Offset_0x026736
		dc.l	Large_Fan_Mappings                     ; Offset_0x02685C
		dc.w	$2500
		dc.l	Obj_0x3A_Hz_Hand_Launcher              ; Offset_0x026A80
		dc.l	Hand_Launcher_Mappings                 ; Offset_0x026DB8
		dc.w	$23E4
		dc.l	Obj_0x3B_Hz_Water_Wall                 ; Offset_0x025C30
		dc.l	Water_Wall_Mappings                    ; Offset_0x0262BA
		dc.w	$4500
		dc.l	($01<<$18)|Obj_0x3B_Hz_Water_Wall      ; Offset_0x025C30
		dc.l	($01<<$18)|Water_Wall_Mappings         ; Offset_0x0262BA
		dc.w	$4500
		dc.l	($01<<$18)|Obj_0x38_Hz_Fan             ; Offset_0x026408
		dc.l	($FC<<$18)|Fan_Mappings                ; Offset_0x0267EE
		dc.w	$240B
		dc.l	Obj_0x3C_Automatic_Door                ; Offset_0x026ED0
		dc.l	Automatic_Door_Mappings                ; Offset_0x027002
		dc.w	$43D4
		dc.l	Obj_0x3F_Hz_Spikes_On_Conveyor_Belt    ; Offset_0x027346
		dc.l	Spikes_On_Conveyor_Belt_Mappings       ; Offset_0x027548
		dc.w	$243E
		dc.l	Obj_0x40_Hz_Block                      ; Offset_0x014AB6
		dc.l	Hz_Block_Mappings                      ; Offset_0x014B0E
		dc.w	$43D4
		dc.l	Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
		dc.l	($08<<$18)|Hz_Collapsing_Platform_Mappings ; Offset_0x016366
		dc.w	$C001
		dc.l	($03<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
		dc.l	($18<<$18)|Hz_Collapsing_Platform_Mappings ; Offset_0x016366
		dc.w	$C001
		dc.l	($06<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
		dc.l	($28<<$18)|Hz_Collapsing_Platform_Mappings ; Offset_0x016366
		dc.w	$C001
		dc.l	($09<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
		dc.l	($38<<$18)|Hz_Collapsing_Platform_Mappings ; Offset_0x016366
		dc.w	$C001
		dc.l	($06<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($06<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$C001
		dc.l	($07<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($07<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$C001
		dc.l	($08<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($08<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$4001
		dc.l	($09<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($09<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$C001
		dc.l	($0A<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($0A<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$C001
		dc.l	($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
		dc.l	($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
		dc.w	$845C
		dc.l	Obj_0x51_Floating_Platform             ; Offset_0x01C3C2
		dc.l	($14<<$18)|Hz_Floating_Platform_Mappings ; Offset_0x01C518
		dc.w	$441D
		dc.l	($01<<$18)|Obj_0x67_Hz_Snake_Platform  ; Offset_0x01C532
		dc.l	Hz_Floating_Platform_Mappings          ; Offset_0x01C518
		dc.w	$0028
		dc.l	Obj_0x51_Floating_Platform             ; Offset_0x01C3C2
		dc.l	($17<<$18)|Hz_Floating_Platform_Mappings ; Offset_0x01C518
		dc.w	$441D
		dc.l	Obj_0x68_Hz_Spinning_Column            ; Offset_0x0289B8
		dc.l	($01<<$18)|Spinning_Column_Mappings    ; Offset_0x028BFC
		dc.w	$4040
		dc.l	Obj_0x68_Hz_Spinning_Column            ; Offset_0x0289B8
		dc.l	($02<<$18)|Spinning_Column_Mappings    ; Offset_0x028BFC
		dc.w	$4040
		dc.l	($0F<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($0F<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$C368
		dc.l	($10<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($10<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$C379
		dc.l	($11<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($11<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$C399
		dc.l	($12<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($12<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$C3A4
		dc.l	Obj_0x6E_Hz_Waterfall                  ; Offset_0x02E0A8
		dc.l	($40<<$18)|Waterfall_Mappings          ; Offset_0x02E1E8
		dc.w	$235C
		dc.l	Obj_0x6D_Hz_Water_Splash               ; Offset_0x02E22E
		dc.l	Water_Splash_Mappings                  ; Offset_0x02E4D0
		dc.w	$43B2
		dc.l	($13<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($13<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$4038
		dc.l	Obj_0x6C_Bridge                        ; Offset_0x02E504
		dc.l	($90<<$18)|Bridge_Mappings             ; Offset_0x02EE60
		dc.w	$4038
		dc.l	Obj_0x6A_Hz_Horizontal_Spikes          ; Offset_0x014B5A
		dc.l	Invisible_Block_Mappings               ; Offset_0x014352
		dc.w	$86BC
		dc.l	Obj_0x6B_Hz_Vertical_Spikes            ; Offset_0x014CE8
		dc.l	Invisible_Block_Mappings               ; Offset_0x014352
		dc.w	$86BC
		dc.l	Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
		dc.l	Hz_Breakable_Wall_Mappings             ; Offset_0x0179B8
		dc.w	$6001
		dc.l	($02<<$18)|Obj_0x0D_Breakable_Wall     ; Offset_0x0170CA
		dc.l	($02<<$18)|Hz_Breakable_Wall_Mappings  ; Offset_0x0179B8
		dc.w	$4350
DOL_02_End:
;-------------------------------------------------------------------------------
Debug_MGz:                                                     ; Offset_0x04B942
		dc.w	((DOL_03_End-DOL_03)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_03: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($80<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($07<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($30<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$0478
		dc.l	($0A<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($40<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$0478
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	($04<<$18)|Obj_0x08_Spikes             ; Offset_0x01A442
		dc.l	($40<<$18)|Spikes_Mappings             ; Offset_0x01A88C
		dc.w	$0494
		dc.l	Obj_0xA4_MGz_Tunnelbot                 ; Offset_0x04515C
		dc.l	Tunnelbot_Mappings                     ; Offset_0x10E918
		dc.w	$254F
		dc.l	Obj_0xA3_MGz_Bubbles                   ; Offset_0x04504A
		dc.l	Bubbles_Mappings                       ; Offset_0x10EC1A
		dc.w	$2500
		dc.l	Obj_0xA5_MGz_Spiker                    ; Offset_0x045864
		dc.l	Spiker_Mappings                        ; Offset_0x10EC6A
		dc.w	$2530
		dc.l	Obj_0xA6_MGz_Mantis                    ; Offset_0x045B26
		dc.l	Mantis_Mappings                        ; Offset_0x10ECDE
		dc.w	$254F
		dc.l	($0B<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($0B<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$4451
		dc.l	($0C<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($0C<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$4451
		dc.l	($0D<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($0D<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$4451
		dc.l	($0E<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($0E<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$4451
		dc.l	Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
		dc.l	($08<<$18)|MGz_Collapsing_Platform_Mappings ; Offset_0x0167B4
		dc.w	$4001
		dc.l	($03<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
		dc.l	($18<<$18)|MGz_Collapsing_Platform_Mappings ; Offset_0x0167B4
		dc.w	$4001
		dc.l	($06<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
		dc.l	($28<<$18)|MGz_Collapsing_Platform_Mappings ; Offset_0x0167B4
		dc.w	$4001
		dc.l	Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
		dc.l	MGz_Breakable_Wall_Mappings            ; Offset_0x0178F8
		dc.w	$4001
		dc.l	Obj_0x51_Floating_Platform             ; Offset_0x01C3C2
		dc.l	($04<<$18)|MGz_Floating_Platform_Mappings ; Offset_0x01C4E4
		dc.w	$4001
		dc.l	Obj_0x20_Smashing_Pillar_Spikes        ; Offset_0x01FDB6
		dc.l	($0A<<$18)|Smashing_Pillar_Mappings    ; Offset_0x01FEE8
		dc.w	$4001
		dc.l	($01<<$18)|Obj_0x53_MGz_Swinging_Platform ; Offset_0x02A224
		dc.l	Swinging_Platform_Mappings             ; Offset_0x02A36C
		dc.w	$435F
		dc.l	($01<<$18)|Obj_0x58_MGz_Swinging_Spiked_Ball ; Offset_0x02A390
		dc.l	Swinging_Spiked_Ball_Mappings          ; Offset_0x02A582
		dc.w	$235F
		dc.l	($02<<$18)|Obj_0x58_MGz_Swinging_Spiked_Ball ; Offset_0x02A390
		dc.l	($01<<$18)|Swinging_Spiked_Ball_Mappings ; Offset_0x02A582
		dc.w	$235F
		dc.l	($06<<$18)|Obj_0x55_MGz_Head_Trigger   ; Offset_0x02A5BC
		dc.l	Head_Trigger_Mappings                  ; Offset_0x02A822
		dc.w	$A3FF
		dc.l	Obj_0x56_MGz_Moving_Spike_Platform     ; Offset_0x02AA8A
		dc.l	Moving_Spike_Platform_Mappings         ; Offset_0x02ABA8
		dc.w	$4001
		dc.l	($01<<$18)|Obj_0x57_MGz_Trigger_Platform ; Offset_0x02A884
		dc.l	($11<<$18)|Trigger_Platform_Mappings   ; Offset_0x02A9C2
		dc.w	$4001
		dc.l	Obj_0x59_MGz_Dash_Trigger              ; Offset_0x01C930
		dc.l	($01<<$18)|Dash_Trigger_Mappings       ; Offset_0x01CB06
		dc.w	$235F
		dc.l	Obj_0x5A_MGz_Pulley                    ; Offset_0x02ACD8
		dc.l	($20<<$18)|Pulley_Mappings             ; Offset_0x02B0CA
		dc.w	$235F
		dc.l	Obj_0x5B_MGz_Blue_Spinning_Platform    ; Offset_0x02B19A
		dc.l	Blue_Spinning_Platform_Mappings        ; Offset_0x02BEA8
		dc.w	$235F
		dc.l	($02<<$18)|Obj_0x5C_MGz_Blue_Platform_Launcher ; Offset_0x02BED2
		dc.l	Blue_Spinning_Platform_Mappings        ; Offset_0x02BEA8
		dc.w	$43FF
DOL_03_End:
;-------------------------------------------------------------------------------
Debug_CNz:                                                     ; Offset_0x04BAA2
		dc.w	((DOL_04_End-DOL_04)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_04: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	($04<<$18)|Obj_0x08_Spikes             ; Offset_0x01A442
		dc.l	($40<<$18)|Spikes_Mappings             ; Offset_0x01A88C
		dc.w	$0494
		dc.l	Obj_0xA0_CNz_Clamer                    ; Offset_0x045C7A
		dc.l	Clamer_Mappings                        ; Offset_0x10EA62
		dc.w	$2500
		dc.l	Obj_0xA1_CNz_Sparkle                   ; Offset_0x045E4A
		dc.l	Sparkle_Mappings                       ; Offset_0x10EAE0
		dc.w	$2524
		dc.l	Obj_0xA2_CNz_Batbot                    ; Offset_0x046004
		dc.l	Batbot_Mappings                        ; Offset_0x10EB82
		dc.w	$2552
		dc.l	($01<<$18)|Obj_0x3C_Automatic_Door     ; Offset_0x026ED0
		dc.l	($01<<$18)|Automatic_Door_Mappings     ; Offset_0x027002
		dc.w	$4416
		dc.l	Obj_0x4A_Bumper                        ; Offset_0x029188
		dc.l	Bumper_Mappings                        ; Offset_0x0293D4
		dc.w	$4364
		dc.l	($09<<$18)|Obj_0x42_CNz_Cannon         ; Offset_0x02794E
		dc.l	Cannon_Mappings                        ; Offset_0x027C10
		dc.w	$4374
		dc.l	Obj_0x43_CNz_Platform                  ; Offset_0x027DBA
		dc.l	CNz_Platform_Mappings                  ; Offset_0x027EBA
		dc.w	$43BE
		dc.l	Obj_0x44_CNz_Trapdoor                  ; Offset_0x027F0E
		dc.l	Trapdoor_Mappings                      ; Offset_0x027FAA
		dc.w	$43F0
		dc.l	Obj_0x45_CNz_Light_Bulb                ; Offset_0x027FDA
		dc.l	Light_Bulb_Mappings                    ; Offset_0x028030
		dc.w	$4404
		dc.l	Obj_0x46_CNz_Fan                       ; Offset_0x02805C
		dc.l	($80<<$18)|CNz_Fan_Mappings            ; Offset_0x0281E8
		dc.w	$43E8
		dc.l	Obj_0x47_CNz_Barrel                    ; Offset_0x028430
		dc.l	Barrel_Mappings                        ; Offset_0x0288E8
		dc.w	$438E
		dc.l	Obj_0x3C_Automatic_Door                ; Offset_0x026ED0
		dc.l	($80<<$18)|Automatic_Door_Horizontal_Mappings ; Offset_0x027168
		dc.w	$4416
		dc.l	Obj_0x4A_Bumper                        ; Offset_0x029188
		dc.l	($80<<$18)|Bumper_Mappings             ; Offset_0x0293D4
		dc.w	$4364
		dc.l	Obj_0x4A_Bumper                        ; Offset_0x029188
		dc.l	($2B<<$18)|Bumper_Mappings             ; Offset_0x0293D4
		dc.w	$4364
		dc.l	Obj_0x4A_Bumper                        ; Offset_0x029188
		dc.l	($D5<<$18)|Bumper_Mappings             ; Offset_0x0293D4
		dc.w	$4364
		dc.l	Obj_0x41_CNz_Balloon                   ; Offset_0x027552
		dc.l	Balloon_Mappings                       ; Offset_0x0276EC
		dc.w	$0351
		dc.l	($05<<$18)|Obj_0x41_CNz_Balloon        ; Offset_0x027552
		dc.l	($01<<$18)|Balloon_Mappings            ; Offset_0x0276EC
		dc.w	$0351
		dc.l	($0A<<$18)|Obj_0x41_CNz_Balloon        ; Offset_0x027552
		dc.l	($02<<$18)|Balloon_Mappings            ; Offset_0x0276EC
		dc.w	$0351
		dc.l	($0F<<$18)|Obj_0x41_CNz_Balloon        ; Offset_0x027552
		dc.l	($03<<$18)|Balloon_Mappings            ; Offset_0x0276EC
		dc.w	$0351
		dc.l	($14<<$18)|Obj_0x41_CNz_Balloon        ; Offset_0x027552
		dc.l	($04<<$18)|Balloon_Mappings            ; Offset_0x0276EC
		dc.w	$0351
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	CNz_Switch_Mappings                    ; Offset_0x02388C
		dc.w	$441A
		dc.l	Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
		dc.l	CNz_Breakable_Wall_Mappings            ; Offset_0x017858
		dc.w	$4420
		dc.l	($02<<$18)|Obj_0x0D_Breakable_Wall     ; Offset_0x0170CA
		dc.l	($02<<$18)|CNz_Breakable_Wall_Mappings ; Offset_0x017858
		dc.w	$4420
		dc.l	Obj_0x4D_CNz_Barber_Pole               ; Offset_0x0296A0
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$86BC
		dc.l	($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
		dc.l	($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
		dc.w	$845C
		dc.l	Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
		dc.l	($01<<$18)|CNz_Breakable_Floor_Mappings ; Offset_0x0217E4
		dc.w	$4430
		dc.l	Obj_0x47_CNz_Barrel                    ; Offset_0x028430
		dc.l	($49<<$18)|Barrel_Mappings             ; Offset_0x0288E8
		dc.w	$438E
DOL_04_End:
;-------------------------------------------------------------------------------
Debug_FBz:                                                     ; Offset_0x04BC0C
		dc.w	((DOL_05_End-DOL_05)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_05: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	Obj_0xA7_FBz_Blaster                   ; Offset_0x04611C
		dc.l	($80<<$18)|Blaster_Mappings            ; Offset_0x10ED62
		dc.w	$2500
		dc.l	Obj_0xA8_FBz_Techno_Squeek             ; Offset_0x046392
		dc.l	Techno_Squeek_Mappings                 ; Offset_0x10EF02
		dc.w	$2528
		dc.l	Obj_0xA8_FBz_Techno_Squeek             ; Offset_0x046392
		dc.l	($02<<$18)|Techno_Squeek_Mappings      ; Offset_0x10EF02
		dc.w	$2528
		dc.l	Obj_0xA8_FBz_Techno_Squeek             ; Offset_0x046392
		dc.l	($04<<$18)|Techno_Squeek_Mappings      ; Offset_0x10EF02
		dc.w	$2528
DOL_05_End:
;-------------------------------------------------------------------------------
Debug_Iz_1:                                                    ; Offset_0x04BC86
		dc.w	((DOL_06_End-DOL_06)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_06: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($05<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	Obj_0xAA_Iz_Penguinator                ; Offset_0x047F8A
		dc.l	($20<<$18)|Penguinator_Mappings        ; Offset_0x10EE48
		dc.w	$2500
		dc.l	Obj_0xAB_Iz_Star_Pointer               ; Offset_0x0482D2
		dc.l	Star_Pointer_Mappings                  ; Offset_0x10EF66
		dc.w	$2548
		dc.l	Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
		dc.l	($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	($06<<$18)|Obj_0xBA_Iz_Breakable_Wall  ; Offset_0x04694C
		dc.l	Crushing_Column_Mappings               ; Offset_0x110938
		dc.w	$4001
		dc.l	($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
		dc.l	($01<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
		dc.l	($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
		dc.l	($03<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
		dc.l	($04<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($06<<$18)|Obj_0xBB_Iz_Freezer         ; Offset_0x046CF2
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$23B6
		dc.l	($0A<<$18)|Obj_0xBC_Iz_Segmented_Column ; Offset_0x04719E
		dc.l	Crushing_Column_Mappings               ; Offset_0x110938
		dc.w	$4001
		dc.l	($0A<<$18)|Obj_0xBC_Iz_Segmented_Column ; Offset_0x04719E
		dc.l	($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($07<<$18)|Obj_0xBD_Iz_Swinging_Platform ; Offset_0x047336
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$23B6
		dc.l	($07<<$18)|Obj_0xBD_Iz_Swinging_Platform ; Offset_0x047336
		dc.l	($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
		dc.w	$23B6
		dc.l	($07<<$18)|Obj_0xBE_Iz_Stalactite      ; Offset_0x0477C6
		dc.l	Crushing_Column_Mappings               ; Offset_0x110938
		dc.w	$4001
		dc.l	($05<<$18)|Obj_0xC0_Iz_Ice_Spikes      ; Offset_0x0478D2
		dc.l	Crushing_Column_Mappings               ; Offset_0x110938
		dc.w	$4001
		dc.l	($05<<$18)|Obj_0xC0_Iz_Ice_Spikes      ; Offset_0x0478D2
		dc.l	($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($03<<$18)|Obj_0xBF_Iz_Ice_Cube        ; Offset_0x04798A
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	($05<<$18)|Obj_0xC1_Iz_Ice_Spiked_Ball ; Offset_0x047AD0
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	($04<<$18)|Obj_0xC1_Iz_Ice_Spiked_Ball ; Offset_0x047AD0
		dc.l	($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
		dc.l	Iz_Collapsing_Platform_Mappings        ; Offset_0x016D00
		dc.w	$4001
		dc.l	($03<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
		dc.l	($80<<$18)|Iz_Collapsing_Platform_Mappings ; Offset_0x016D00
		dc.w	$4001
		dc.l	Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
		dc.l	Iz_Breakable_Floor_Mappings            ; Offset_0x02187C
		dc.w	$4001
		dc.l	($0A<<$18)|Obj_0x2A_Breakable_Floor    ; Offset_0x0211D6
		dc.l	($1A<<$18)|Iz_Breakable_Floor_Mappings ; Offset_0x02187C
		dc.w	$43B6
		dc.l	Obj_0x6C_Bridge                        ; Offset_0x02E504
		dc.l	($10<<$18)|Iz_Bridge_Mappings          ; Offset_0x02EE28
		dc.w	$43B6
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	($10<<$18)|Switch_Mappings             ; Offset_0x023832
		dc.w	$0456
DOL_06_End:
;-------------------------------------------------------------------------------
Debug_Iz_2:                                                    ; Offset_0x04BDDC
		dc.w	((DOL_07_End-DOL_07)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_07: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($05<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	Obj_0xAA_Iz_Penguinator                ; Offset_0x047F8A
		dc.l	($20<<$18)|Penguinator_Mappings        ; Offset_0x10EE48
		dc.w	$2500
		dc.l	Obj_0xAB_Iz_Star_Pointer               ; Offset_0x0482D2
		dc.l	Star_Pointer_Mappings                  ; Offset_0x10EF66
		dc.w	$2548
		dc.l	Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
		dc.l	($04<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
		dc.l	($06<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
		dc.l	($01<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
		dc.l	($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
		dc.l	($03<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($02<<$18)|Obj_0xB8_Iz_Crushing_Column ; Offset_0x046B0E
		dc.l	($04<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($06<<$18)|Obj_0xBB_Iz_Freezer         ; Offset_0x046CF2
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$23B6
		dc.l	($0A<<$18)|Obj_0xBC_Iz_Segmented_Column ; Offset_0x04719E
		dc.l	Crushing_Column_Mappings               ; Offset_0x110938
		dc.w	$4001
		dc.l	($0A<<$18)|Obj_0xBC_Iz_Segmented_Column ; Offset_0x04719E
		dc.l	($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($07<<$18)|Obj_0xBD_Iz_Swinging_Platform ; Offset_0x047336
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$23B6
		dc.l	($07<<$18)|Obj_0xBD_Iz_Swinging_Platform ; Offset_0x047336
		dc.l	($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
		dc.w	$23B6
		dc.l	($05<<$18)|Obj_0xC0_Iz_Ice_Spikes      ; Offset_0x0478D2
		dc.l	Crushing_Column_Mappings               ; Offset_0x110938
		dc.w	$4001
		dc.l	($05<<$18)|Obj_0xC0_Iz_Ice_Spikes      ; Offset_0x0478D2
		dc.l	($02<<$18)|Crushing_Column_Mappings    ; Offset_0x110938
		dc.w	$4001
		dc.l	($03<<$18)|Obj_0xBF_Iz_Ice_Cube        ; Offset_0x04798A
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	($05<<$18)|Obj_0xC1_Iz_Ice_Spiked_Ball ; Offset_0x047AD0
		dc.l	($02<<$18)|Iz_Platform_Mappings        ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	($04<<$18)|Obj_0xC1_Iz_Ice_Spiked_Ball ; Offset_0x047AD0
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$43B6
		dc.l	($20<<$18)|Obj_0xC2_Iz_Snow_Pile       ; Offset_0x047B4E
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$437D
		dc.l	($1F<<$18)|Obj_0xC3_Iz_Trampoline      ; Offset_0x047D46
		dc.l	Iz_Platform_Mappings                   ; Offset_0x110BBC
		dc.w	$437D
		dc.l	Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
		dc.l	Iz_Collapsing_Platform_Mappings        ; Offset_0x016D00
		dc.w	$4001
		dc.l	($03<<$18)|Obj_0x0F_Collapsing_Platform ; Offset_0x01595E
		dc.l	($80<<$18)|Iz_Collapsing_Platform_Mappings ; Offset_0x016D00
		dc.w	$4001
		dc.l	Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
		dc.l	Iz_Breakable_Floor_Mappings            ; Offset_0x02187C
		dc.w	$4001
		dc.l	($0A<<$18)|Obj_0x2A_Breakable_Floor    ; Offset_0x0211D6
		dc.l	($1A<<$18)|Iz_Breakable_Floor_Mappings ; Offset_0x02187C
		dc.w	$43B6
		dc.l	Obj_0x6C_Bridge                        ; Offset_0x02E504
		dc.l	($8C<<$18)|Iz_Bridge_Mappings          ; Offset_0x02EE28
		dc.w	$43B6
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	($10<<$18)|Switch_Mappings             ; Offset_0x023832
		dc.w	$0456
DOL_07_End:
;-------------------------------------------------------------------------------
Debug_LBz_1:                                                   ; Offset_0x04BF32
		dc.w	((DOL_08_End-DOL_08)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_08: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
		dc.l	($80<<$18)|LBz_Collapsing_Platforms_Mappings ; Offset_0x0161E2
		dc.w	$4001
		dc.l	Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
		dc.l	($40<<$18)|LBz_Collapsing_Platforms_Mappings_2 ; Offset_0x0162DE
		dc.w	$4001
		dc.l	Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
		dc.l	LBz_Breakable_Floor_Mappings           ; Offset_0x021A84
		dc.w	$4001
		dc.l	Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
		dc.l	($05<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
		dc.w	$43C3
		dc.l	($01<<$18)|Obj_0x11_LBz_Platform       ; Offset_0x01BCFC
		dc.l	($11<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
		dc.w	$43C3
		dc.l	Obj_0x13_LBz_Exploding_Trigger         ; Offset_0x01C890
		dc.l	LBz_Exploding_Trigger_Mappings         ; Offset_0x01C926
		dc.w	$4433
		dc.l	Obj_0x14_LBz_Trigger_Bridge            ; Offset_0x01CBA2
		dc.l	Trigger_Bridge_Mappings                ; Offset_0x01CD64
		dc.w	$43C3
		dc.l	Obj_0x15_LBz_Player_Launcher           ; Offset_0x01D050
		dc.l	Player_Launcher_Mappings               ; Offset_0x01D2CA
		dc.w	$43C3
		dc.l	Obj_0x16_LBz_Flame_Thrower             ; Offset_0x01D312
		dc.l	Flame_Thrower_Mappings                 ; Offset_0x01D3C6
		dc.w	$43AC
		dc.l	Obj_0x17_LBz_Hooked_Ride               ; Offset_0x01D4FC
		dc.l	Hooked_Ride_Mappings                   ; Offset_0x01D8F8
		dc.w	$2433
		dc.l	Obj_0x18_LBz_Cup_Elevator              ; Offset_0x01D916
		dc.l	Cup_Elevator_Mappings                  ; Offset_0x01DF66
		dc.w	$440D
		dc.l	($03<<$18)|Obj_0x19_LBz_Cup_Elevator_Pole ; Offset_0x01DF10
		dc.l	($06<<$18)|Cup_Elevator_Mappings       ; Offset_0x01DF66
		dc.w	$440D
		dc.l	Obj_0x20_Smashing_Pillar_Spikes        ; Offset_0x01FDB6
		dc.l	($10<<$18)|Smashing_Spike_Mappins      ; Offset_0x01FED8
		dc.w	$4455
		dc.l	Obj_0x87_LBz_Snale_Blaster             ; Offset_0x048436
		dc.l	Snale_Blaster_Mappings                 ; Offset_0x10D3C8
		dc.w	$2524
		dc.l	Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
		dc.l	Orbinaut_Mappings                      ; Offset_0x10D472
		dc.w	$256E
		dc.l	Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
		dc.l	($02<<$18)|Orbinaut_Mappings           ; Offset_0x10D472
		dc.w	$256E
		dc.l	Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
		dc.l	($04<<$18)|Orbinaut_Mappings           ; Offset_0x10D472
		dc.w	$256E
		dc.l	Obj_0x88_LBz_Ribot                     ; Offset_0x048756
		dc.l	Ribot_Mappings                         ; Offset_0x10D486
		dc.w	$2547
		dc.l	Obj_0x88_LBz_Ribot                     ; Offset_0x048756
		dc.l	($02<<$18)|Ribot_Mappings              ; Offset_0x10D486
		dc.w	$2547
		dc.l	Obj_0x88_LBz_Ribot                     ; Offset_0x048756
		dc.l	($04<<$18)|Ribot_Mappings              ; Offset_0x10D486
		dc.w	$2547
		dc.l	Obj_0x8A_LBz_Corkey                    ; Offset_0x048BCE
		dc.l	($20<<$18)|Corkey_Mappings             ; Offset_0x10D590
		dc.w	$2558
		dc.l	Obj_0x8B_LBz_Flybot_767                ; Offset_0x048DF8
		dc.l	Flybot_767_Mappings                    ; Offset_0x10D62E
		dc.w	$2500
		dc.l	Obj_0x34_Star_Post                     ; Offset_0x023F76
		dc.l	($01<<$18)|Star_Post_Mappings          ; Offset_0x024282
		dc.w	$05EC
		dc.l	Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
		dc.l	($0D<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
		dc.w	$43C3
		dc.l	($02<<$18)|Obj_0x10_LBz_Tube_Elevator  ; Offset_0x020856
		dc.l	Tube_Elevator_Mappings                 ; Offset_0x020D4E
		dc.w	$2455
		dc.l	($14<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($14<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$440D
		dc.l	($15<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($15<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$2433
		dc.l	($16<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($16<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$2433
DOL_08_End:
;-------------------------------------------------------------------------------
Debug_LBz_2:                                                   ; Offset_0x04C09C
		dc.w	((DOL_09_End-DOL_09)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_09: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
		dc.l	($80<<$18)|LBz_Collapsing_Platforms_Mappings ; Offset_0x0161E2
		dc.w	$4001
		dc.l	Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
		dc.l	($40<<$18)|LBz_Collapsing_Platforms_Mappings_2 ; Offset_0x0162DE
		dc.w	$4001
		dc.l	Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
		dc.l	LBz_Breakable_Floor_Mappings           ; Offset_0x021A84
		dc.w	$4001
		dc.l	Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
		dc.l	($05<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
		dc.w	$43C3
		dc.l	($01<<$18)|Obj_0x11_LBz_Platform       ; Offset_0x01BCFC
		dc.l	($11<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
		dc.w	$43C3
		dc.l	Obj_0x13_LBz_Exploding_Trigger         ; Offset_0x01C890
		dc.l	LBz_Exploding_Trigger_Mappings         ; Offset_0x01C926
		dc.w	$4433
		dc.l	Obj_0x14_LBz_Trigger_Bridge            ; Offset_0x01CBA2
		dc.l	Trigger_Bridge_Mappings                ; Offset_0x01CD64
		dc.w	$43C3
		dc.l	Obj_0x15_LBz_Player_Launcher           ; Offset_0x01D050
		dc.l	Player_Launcher_Mappings               ; Offset_0x01D2CA
		dc.w	$43C3
		dc.l	Obj_0x16_LBz_Flame_Thrower             ; Offset_0x01D312
		dc.l	Flame_Thrower_Mappings                 ; Offset_0x01D3C6
		dc.w	$43AC
		dc.l	Obj_0x17_LBz_Hooked_Ride               ; Offset_0x01D4FC
		dc.l	Hooked_Ride_Mappings                   ; Offset_0x01D8F8
		dc.w	$2433
		dc.l	($07<<$18)|Obj_0x1B_LBz_Pipe_Plug      ; Offset_0x01E2C6
		dc.l	LBz_Pipe_Plug_Mappings                 ; Offset_0x01E61C
		dc.w	$42E6
		dc.l	Obj_0x1E_LBz_Spin_Launcher             ; Offset_0x01F5FC
		dc.l	Spin_Launcher_Mappings                 ; Offset_0x01F864
		dc.w	$42EA
		dc.l	Obj_0x1F_LBz_Hook                      ; Offset_0x01F892
		dc.l	($1A<<$18)|Hook_Mappings               ; Offset_0x01FA5E
		dc.w	$42EA
		dc.l	Obj_0x21_LBz_Gate_Laser                ; Offset_0x01FF28
		dc.l	($0F<<$18)|Gate_Laser_Mappings         ; Offset_0x020036
		dc.w	$42EA
		dc.l	Obj_0x87_LBz_Snale_Blaster             ; Offset_0x048436
		dc.l	Snale_Blaster_Mappings                 ; Offset_0x10D3C8
		dc.w	$2524
		dc.l	Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
		dc.l	Orbinaut_Mappings                      ; Offset_0x10D472
		dc.w	$256E
		dc.l	Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
		dc.l	($02<<$18)|Orbinaut_Mappings           ; Offset_0x10D472
		dc.w	$256E
		dc.l	Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
		dc.l	($04<<$18)|Orbinaut_Mappings           ; Offset_0x10D472
		dc.w	$256E
		dc.l	Obj_0x88_LBz_Ribot                     ; Offset_0x048756
		dc.l	Ribot_Mappings                         ; Offset_0x10D486
		dc.w	$2547
		dc.l	Obj_0x88_LBz_Ribot                     ; Offset_0x048756
		dc.l	($02<<$18)|Ribot_Mappings              ; Offset_0x10D486
		dc.w	$2547
		dc.l	Obj_0x88_LBz_Ribot                     ; Offset_0x048756
		dc.l	($04<<$18)|Ribot_Mappings              ; Offset_0x10D486
		dc.w	$2547
		dc.l	Obj_0x8A_LBz_Corkey                    ; Offset_0x048BCE
		dc.l	($20<<$18)|Corkey_Mappings             ; Offset_0x10D590
		dc.w	$2558
		dc.l	Obj_0x8B_LBz_Flybot_767                ; Offset_0x048DF8
		dc.l	Flybot_767_Mappings                    ; Offset_0x10D62E
		dc.w	$2500
		dc.l	Obj_0x34_Star_Post                     ; Offset_0x023F76
		dc.l	($01<<$18)|Star_Post_Mappings          ; Offset_0x024282
		dc.w	$05EC
		dc.l	($13<<$18)|Obj_0x54_Oxygen_Bubbles     ; Offset_0x025500
		dc.l	($81<<$18)|Sonic_Underwater_Mappings   ; Offset_0x025872
		dc.w	$845C
		dc.l	Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
		dc.l	($0D<<$18)|LBz_Platform_Mappings       ; Offset_0x01C1F8
		dc.w	$43C3
		dc.l	Obj_0x18_LBz_Cup_Elevator              ; Offset_0x01D916
		dc.l	Cup_Elevator_Mappings                  ; Offset_0x01DF66
		dc.w	$440D
		dc.l	($03<<$18)|Obj_0x19_LBz_Cup_Elevator_Pole ; Offset_0x01DF10
		dc.l	($06<<$18)|Cup_Elevator_Mappings       ; Offset_0x01DF66
		dc.w	$440D
		dc.l	Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
		dc.l	LBz_Breakable_Wall_Mappings            ; Offset_0x017A3E
		dc.w	$22EA
		dc.l	($14<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($14<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$440D
		dc.l	($15<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($15<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$2433
		dc.l	($16<<$18)|Obj2F_StaticDecoration       ; Offset_0x022E38
		dc.l	($16<<$18)|Still_Sprite_Mappings       ; Offset_0x022F02
		dc.w	$2433
DOL_09_End:
;-------------------------------------------------------------------------------
Debug_MVz:                                                     ; Offset_0x04C22E
		dc.w	((DOL_0A_End-DOL_0A)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0A: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($07<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($30<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$043A
		dc.l	($0A<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($40<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$043A
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
		dc.l	($04<<$18)|Obj_0x08_Spikes             ; Offset_0x01A442
		dc.l	($40<<$18)|Spikes_Mappings             ; Offset_0x01A88C
		dc.w	$0494
		dc.l	Obj_0x95_MVz_Dragonfly                 ; Offset_0x049B24
		dc.l	Dragonfly_Mappings                     ; Offset_0x10DEFA
		dc.w	$056D
		dc.l	Obj_0x97_MVz_Cluckoid                  ; Offset_0x049E50
		dc.l	Cluckoid_Mappings                      ; Offset_0x10E052
		dc.w	$0580
		dc.l	Obj_0x96_MVz_Butterdroid               ; Offset_0x049DCA
		dc.l	Butterdroid_Mappings                   ; Offset_0x10E15C
		dc.w	$0512
		dc.l	Obj_0x94_MVz_Mushmeanie                ; Offset_0x0499BC
		dc.l	Mushmeanie_Mappings                    ; Offset_0x10E330
		dc.w	$055E
		dc.l	Obj_0x93_MVz_Madmole                   ; Offset_0x0495CC
		dc.l	Madmole_Mappings                       ; Offset_0x10E36A
		dc.w	$0536
		dc.l	Obj_0x3D_Retracting_Spring             ; Offset_0x019EA2
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj_0x3D_Retracting_Spring  ; Offset_0x019EA2
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj_0x3D_Retracting_Spring  ; Offset_0x019EA2
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($07<<$18)|Obj_0x3D_Retracting_Spring  ; Offset_0x019EA2
		dc.l	($30<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$043A
		dc.l	($0A<<$18)|Obj_0x3D_Retracting_Spring  ; Offset_0x019EA2
		dc.l	($40<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$043A
DOL_0A_End:
;-------------------------------------------------------------------------------
Debug_Sz:                                                      ; Offset_0x04C302
		dc.w	((DOL_0B_End-DOL_0B)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0B: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
DOL_0B_End:
;-------------------------------------------------------------------------------
Debug_LRz:                                                     ; Offset_0x04C354
		dc.w	((DOL_0C_End-DOL_0C)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0C: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
DOL_0C_End:
;-------------------------------------------------------------------------------
; Offset_0x04C3A6: ; Dados n�o linkados na lista de depura��o ; Left over ???
		dc.l	Obj_0x92_LRz_Toxomister                ; Offset_0x04A400
		dc.l	Toxomister_Mappings                    ; Offset_0x10DDAA
		dc.w	$0568
		dc.l	Obj90_Fireworm                  ; Offset_0x049FB6
		dc.l	Fireworm_Mappings                      ; Offset_0x10E2DC
		dc.w	$0580
		dc.l	Obj_0x91_LRz_Iwamodock                 ; Offset_0x04A29C
		dc.l	Iwamodock_Mappings                     ; Offset_0x10E46E
		dc.w	$0536
;-------------------------------------------------------------------------------
Debug_SSz:                                                     ; Offset_0x04C3C4
		dc.w	((DOL_0D_End-DOL_0D)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0D: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
DOL_0D_End:
;-------------------------------------------------------------------------------
Debug_DEz:                                                     ; Offset_0x04C416
		dc.w	((DOL_0E_End-DOL_0E)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0E: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
DOL_0E_End:
;-------------------------------------------------------------------------------
Debug_TDz:                                                     ; Offset_0x04C468
		dc.w	((DOL_0F_End-DOL_0F)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_0F: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
DOL_0F_End:
;-------------------------------------------------------------------------------
Debug_HPz:                                                     ; Offset_0x04C4BA
		dc.w	((DOL_10_End-DOL_10)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_10: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
DOL_10_End:
;-------------------------------------------------------------------------------
Debug_ALz:                                                     ; Offset_0x04C50C
		dc.w	((DOL_11_End-DOL_11)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_11: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$E3D2
		dc.l	Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
		dc.l	Bubble_Container_Mappings              ; Offset_0x02CFEA
		dc.w	$03C6
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings_2P                     ; Offset_0x01A99C
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	Springs_Mappings_2P                    ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	Switch_Mappings_2P                     ; Offset_0x0238BC
		dc.w	$03AD
		dc.l	Obj_0x65_Goal_Marker                   ; Offset_0x02D124
		dc.l	Goal_Marker_Mappings                   ; Offset_0x02D468
		dc.w	$06BC
DOL_11_End:
;-------------------------------------------------------------------------------
Debug_BPz:                                                     ; Offset_0x04C5C2
		dc.w	((DOL_12_End-DOL_12)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_12: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$E3D2
		dc.l	Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
		dc.l	Bubble_Container_Mappings              ; Offset_0x02CFEA
		dc.w	$03C6
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings_2P                     ; Offset_0x01A99C
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	Springs_Mappings_2P                    ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	Switch_Mappings_2P                     ; Offset_0x0238BC
		dc.w	$03AD
		dc.l	Obj_0x4A_Bumper                        ; Offset_0x029188
		dc.l	Bumper_Mappings_2P                     ; Offset_0x0293F4
		dc.w	$2300
		dc.l	Obj_0x60_BPz_Elephant_Block            ; Offset_0x02C13C
		dc.l	Elephant_Block_Mappings                ; Offset_0x02C29E
		dc.w	$0300
		dc.l	Obj_0x61_BPz_Balloon                   ; Offset_0x02C2C4
		dc.l	BPz_Balloon_Mappings                   ; Offset_0x02C3DE
		dc.w	$6300
		dc.l	Obj_0x65_Goal_Marker                   ; Offset_0x02D124
		dc.l	Goal_Marker_Mappings                   ; Offset_0x02D468
		dc.w	$06BC
DOL_12_End:
;-------------------------------------------------------------------------------
Debug_DPz:                                                     ; Offset_0x04C696
		dc.w	((DOL_13_End-DOL_13)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_13: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$E3D2
		dc.l	Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
		dc.l	Bubble_Container_Mappings              ; Offset_0x02CFEA
		dc.w	$03C6
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings_2P                     ; Offset_0x01A99C
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	Springs_Mappings_2P                    ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	Switch_Mappings_2P                     ; Offset_0x0238BC
		dc.w	$03AD
		dc.l	Obj_0x62_DPz_Dissolving_Sand_Bar       ; Offset_0x02C47E
		dc.l	Dissolving_Sand_Bar_Mappings           ; Offset_0x02C5DE
		dc.w	$4280
		dc.l	($1D<<$18)|Obj_0x62_DPz_Dissolving_Sand_Bar ; Offset_0x02C47E
		dc.l	($01<<$18)|Dissolving_Sand_Bar_Mappings ; Offset_0x02C5DE
		dc.w	$4280
		dc.l	Obj_0x63_DPz_Button                    ; Offset_0x02C7E6
		dc.l	DPz_Button_Mappings                    ; Offset_0x02C894
		dc.w	$4280
		dc.l	Obj_0x65_Goal_Marker                   ; Offset_0x02D124
		dc.l	Goal_Marker_Mappings                   ; Offset_0x02D468
		dc.w	$06BC
DOL_13_End:
;-------------------------------------------------------------------------------
Debug_CGz:                                                     ; Offset_0x04C76A
		dc.w	((DOL_14_End-DOL_14)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_14: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$E3D2
		dc.l	Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
		dc.l	Bubble_Container_Mappings              ; Offset_0x02CFEA
		dc.w	$03C6
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings_2P                     ; Offset_0x01A99C
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	Springs_Mappings_2P                    ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	Switch_Mappings_2P                     ; Offset_0x0238BC
		dc.w	$03AD
		dc.l	Obj_0x38_Hz_Fan                        ; Offset_0x026408
		dc.l	Fan_Mappings_2P                        ; Offset_0x026A50
		dc.w	$6300
		dc.l	Obj_0x5E_CGz_Blade_Platform            ; Offset_0x02BFBE
		dc.l	Blade_Platform_Mappings                ; Offset_0x02C100
		dc.w	$6300
		dc.l	Obj_0x65_Goal_Marker                   ; Offset_0x02D124
		dc.l	Goal_Marker_Mappings                   ; Offset_0x02D468
		dc.w	$06BC
DOL_14_End:
;-------------------------------------------------------------------------------
Debug_EMz:                                                     ; Offset_0x04C834
		dc.w	((DOL_15_End-DOL_15)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_15: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$E3D2
		dc.l	Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
		dc.l	Bubble_Container_Mappings              ; Offset_0x02CFEA
		dc.w	$03C6
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$63D2
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings_2P                     ; Offset_0x01A99C
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	Springs_Mappings_2P                    ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($10<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($20<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($03<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($30<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$03AD
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($40<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($50<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	($E0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($06<<$18)|Obj_0x5F_Retracting_Spring  ; Offset_0x019FF6
		dc.l	($F0<<$18)|Springs_Mappings_2P         ; Offset_0x019DC2
		dc.w	$0391
		dc.l	($02<<$18)|Obj_0x33_Switch             ; Offset_0x023662
		dc.l	Switch_Mappings_2P                     ; Offset_0x0238BC
		dc.w	$03AD
		dc.l	Obj_0x65_Goal_Marker                   ; Offset_0x02D124
		dc.l	Goal_Marker_Mappings                   ; Offset_0x02D468
		dc.w	$06BC
		dc.l	Obj_0x66_EMz_Dripper                   ; Offset_0x02DF26
		dc.l	Dripper_Mappings                       ; Offset_0x02E080
		dc.w	$6300
		dc.l	($03<<$18)|Obj_0x66_EMz_Dripper        ; Offset_0x02DF26
		dc.l	Dripper_Mappings                       ; Offset_0x02E080
		dc.w	$C300
		dc.l	Obj05_Rock                          ; Offset_0x0150FC
		dc.l	($34<<$18)|EMz_Rock_Mappings           ; Offset_0x0157FE
		dc.w	$6300
		dc.l	Obj05_Rock                          ; Offset_0x0150FC
		dc.l	($33<<$18)|EMz_Rock_Mappings           ; Offset_0x0157FE
		dc.w	$6300
DOL_15_End:
;-------------------------------------------------------------------------------
Debug_Default:                                                 ; Offset_0x04C912
		dc.w	((DOL_16_End-DOL_16)/$0A) ; Auto Detec��o do n�mero de itens na lista por Esrael Neto
DOL_16: ; DOL - Debug Object List
		dc.l	Obj00_Rings                         ; Offset_0x0109A4
		dc.l	Rings_Mappings                         ; Offset_0x010DE2
		dc.w	$A6BC
		dc.l	Obj01_Monitors                      ; Offset_0x012F44
		dc.l	($08<<$18)|Monitors_Mappings           ; Offset_0x0134A2
		dc.w	$04C4
		dc.l	($01<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($09<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	($05<<$18)|Obj02_Pathswappers       ; Offset_0x012AE8
		dc.l	($0D<<$18)|Layer_Switch_Mappings       ; Offset_0x012E98
		dc.w	$26BC
		dc.l	Obj07_Springs                       ; Offset_0x01921A
		dc.l	($81<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	($03<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($90<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04B4
		dc.l	($06<<$18)|Obj07_Springs            ; Offset_0x01921A
		dc.l	($A0<<$18)|Springs_Mappings            ; Offset_0x019C1A
		dc.w	$04A4
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Spikes_Mappings                        ; Offset_0x01A88C
		dc.w	$049C
DOL_16_End:
;===============================================================================
; Rotina usada para depurar o jogo
; <<<-
;===============================================================================

;===============================================================================
; Lista de objetos das fases
; ->>>
;===============================================================================
Object_List:                                                   ; Offset_0x04C964
		dc.l	Obj00_Rings
		dc.l	Obj01_Monitors
		dc.l	Obj02_Pathswappers
		dc.l	Obj_0x03_AIz_Hollow_Tree               ; Offset_0x014E88
		dc.l	Obj_0x04_Collapsing_Platform           ; Offset_0x01582E
		dc.l	Obj05_Rock
		dc.l	Obj_0x06_Ride_Vine                     ; Offset_0x017A8E
		dc.l	Obj07_Springs
		dc.l	Obj_0x08_Spikes                        ; Offset_0x01A442
		dc.l	Obj09_AIZTree
		dc.l	Obj0A_ZiplinePeg
		dc.l	Obj_0x0B_Sphere_Test                   ; Offset_0x01B338
		dc.l	Obj_0x0C_Swing_Ride_Vine               ; Offset_0x0180FE
		dc.l	Obj_0x0D_Breakable_Wall                ; Offset_0x0170CA
		dc.l	Obj_0x0E_Spiral_Ramp_Attributes        ; Offset_0x01BC3A
		dc.l	Obj_0x0F_Collapsing_Platform           ; Offset_0x01595E
		dc.l	Obj_0x10_LBz_Tube_Elevator             ; Offset_0x020856 ; $10
		dc.l	Obj_0x11_LBz_Platform                  ; Offset_0x01BCFC
		dc.l	Obj_0x12_LBz_Elevator                  ; Offset_0x01C6A0
		dc.l	Obj_0x13_LBz_Exploding_Trigger         ; Offset_0x01C890
		dc.l	Obj_0x14_LBz_Trigger_Bridge            ; Offset_0x01CBA2
		dc.l	Obj_0x15_LBz_Player_Launcher           ; Offset_0x01D050
		dc.l	Obj_0x16_LBz_Flame_Thrower             ; Offset_0x01D312
		dc.l	Obj_0x17_LBz_Hooked_Ride               ; Offset_0x01D4FC
		dc.l	Obj_0x18_LBz_Cup_Elevator              ; Offset_0x01D916 ; $18
		dc.l	Obj_0x19_LBz_Cup_Elevator_Pole         ; Offset_0x01DF10
		dc.l	Obj_0x1A_Unknow_Controled_By_P2        ; Offset_0x01DFCE
		dc.l	Obj_0x1B_LBz_Pipe_Plug                 ; Offset_0x01E2C6
		dc.l	Obj_0x1C_LBz_Unknow                    ; Offset_0x01E6C6
		dc.l	Obj_0x1D_LBz_Platform                  ; Offset_0x01C228
		dc.l	Obj_0x1E_LBz_Spin_Launcher             ; Offset_0x01F5FC
		dc.l	Obj_0x1F_LBz_Hook                      ; Offset_0x01F892
		dc.l	Obj_0x20_Smashing_Pillar_Spikes        ; Offset_0x01FDB6 ; $20
		dc.l	Obj_0x21_LBz_Gate_Laser                ; Offset_0x01FF28
		dc.l	Obj_0x22_LBz_Buzzer                    ; Offset_0x02005A
		dc.l	Obj_0x23                               ; Offset_0x02010E
		dc.l	Obj_0x24_Automatic_Tunnel              ; Offset_0x0201C6
		dc.l	Obj00_Rings
		dc.l	Obj_0x26_Auto_Spin                     ; Offset_0x013FA8
		dc.l	Obj_0x27_Lava_Attributes               ; Offset_0x0141F2
		dc.l	Obj_0x28_Invisible_Block               ; Offset_0x0142D4 ; $28
		dc.l	Obj_0x29_AIz_Disappearing_Platform     ; Offset_0x020EE0
		dc.l	Obj_0x2A_Breakable_Floor               ; Offset_0x0211D6
		dc.l	Obj_0x2B_AIz_Flipping_Bridge           ; Offset_0x021B1C
		dc.l	Obj_0x2C_AIz_Collapsing_Bridge         ; Offset_0x021F0C
		dc.l	Obj_0x2D_AIz_Falling_Log               ; Offset_0x0227AC
		dc.l	Obj_0x2E_AIz_Spiked_Rotating_Log       ; Offset_0x022A7E
		dc.l	Obj2F_StaticDecoration                  ; Offset_0x022E38
		dc.l	Obj30_AnimatedDecoration
		dc.l	Obj_0x31_LBz_Rotating_Cylinders        ; Offset_0x02350C
		dc.l	Obj_0x32_AIz_Draw_Bridge               ; Offset_0x02235C
		dc.l	Obj_0x33_Switch                        ; Offset_0x023662
		dc.l	Obj_0x34_Star_Post                     ; Offset_0x023F76
		dc.l	Obj35_AIZPlants
		dc.l	Obj_0x36_Hz_Breakable_Bar              ; Offset_0x0143B2
		dc.l	Obj_0x37_Hz_Vertical_Water_Stream      ; Offset_0x025964
		dc.l	Obj_0x38_Hz_Fan                        ; Offset_0x026408 ; $38
		dc.l	Obj_0x39_Hz_Large_Fan                  ; Offset_0x026736
		dc.l	Obj_0x3A_Hz_Hand_Launcher              ; Offset_0x026A80
		dc.l	Obj_0x3B_Hz_Water_Wall                 ; Offset_0x025C30
		dc.l	Obj_0x3C_Automatic_Door                ; Offset_0x026ED0
		dc.l	Obj_0x3D_Retracting_Spring             ; Offset_0x019EA2
		dc.l	Obj_0x3E_Conveyor_Belt_Attributes      ; Offset_0x0271C4
		dc.l	Obj_0x3F_Hz_Spikes_On_Conveyor_Belt    ; Offset_0x027346
		dc.l	Obj_0x40_Hz_Block                      ; Offset_0x014AB6 ; $40
		dc.l	Obj_0x41_CNz_Balloon                   ; Offset_0x027552
		dc.l	Obj_0x42_CNz_Cannon                    ; Offset_0x02794E
		dc.l	Obj_0x43_CNz_Platform                  ; Offset_0x027DBA
		dc.l	Obj_0x44_CNz_Trapdoor                  ; Offset_0x027F0E
		dc.l	Obj_0x45_CNz_Light_Bulb                ; Offset_0x027FDA
		dc.l	Obj_0x46_CNz_Fan                       ; Offset_0x02805C
		dc.l	Obj_0x47_CNz_Barrel                    ; Offset_0x028430
		dc.l	Obj_0x48_CNz_Vacuum_Tubes              ; Offset_0x028278 ; $48
		dc.l	Obj_0x49_CNz_Wheel                     ; Offset_0x028C62
		dc.l	Obj_0x4A_Bumper                        ; Offset_0x029188
		dc.l	Obj_0x4B_Triangular_Springs            ; Offset_0x028D2E
		dc.l	Obj_0x4C_Corkscrew                     ; Offset_0x029408
		dc.l	Obj_0x4D_CNz_Barber_Pole               ; Offset_0x0296A0
		dc.l	Obj_0x4E_CNz_Rotating_Mesh             ; Offset_0x029B5E
		dc.l	Obj_0x4F_Mud_Quicksand_Attributes      ; Offset_0x028E12
		dc.l	Obj_0x50_MGz_Vertical_Pole             ; Offset_0x029F86 ; $50
		dc.l	Obj_0x51_Floating_Platform             ; Offset_0x01C3C2
		dc.l	Obj_0x20_Smashing_Pillar_Spikes        ; Offset_0x01FDB6
		dc.l	Obj_0x53_MGz_Swinging_Platform         ; Offset_0x02A224
		dc.l	Obj_0x54_Oxygen_Bubbles                ; Offset_0x025500
		dc.l	Obj_0x55_MGz_Head_Trigger              ; Offset_0x02A5BC
		dc.l	Obj_0x56_MGz_Moving_Spike_Platform     ; Offset_0x02AA8A
		dc.l	Obj_0x57_MGz_Trigger_Platform          ; Offset_0x02A884
		dc.l	Obj_0x58_MGz_Swinging_Spiked_Ball      ; Offset_0x02A390 ; $58
		dc.l	Obj_0x59_MGz_Dash_Trigger              ; Offset_0x01C930
		dc.l	Obj_0x5A_MGz_Pulley                    ; Offset_0x02ACD8
		dc.l	Obj_0x5B_MGz_Blue_Spinning_Platform    ; Offset_0x02B19A
		dc.l	Obj_0x5C_MGz_Blue_Platform_Launcher    ; Offset_0x02BED2
		dc.l	Obj_0x5D_CGz_Triangular_Springs        ; Offset_0x029004
		dc.l	Obj_0x5E_CGz_Blade_Platform            ; Offset_0x02BFBE
		dc.l	Obj_0x5F_Retracting_Spring             ; Offset_0x019FF6
		dc.l	Obj_0x60_BPz_Elephant_Block            ; Offset_0x02C13C ; $60
		dc.l	Obj_0x61_BPz_Balloon                   ; Offset_0x02C2C4
		dc.l	Obj_0x62_DPz_Dissolving_Sand_Bar       ; Offset_0x02C47E
		dc.l	Obj_0x63_DPz_Button                    ; Offset_0x02C7E6
		dc.l	Obj_0x64_Bubble_Container              ; Offset_0x02C8A8
		dc.l	Obj_0x65_Goal_Marker                   ; Offset_0x02D124
		dc.l	Obj_0x66_EMz_Dripper                   ; Offset_0x02DF26
		dc.l	Obj_0x67_Hz_Snake_Platform             ; Offset_0x01C532
		dc.l	Obj_0x68_Hz_Spinning_Column            ; Offset_0x0289B8 ; $68
		dc.l	Obj_0x69_Hz_Curved_Twisting_Pipe       ; Offset_0x02EEEA
		dc.l	Obj_0x6A_Hz_Horizontal_Spikes          ; Offset_0x014B5A
		dc.l	Obj_0x6B_Hz_Vertical_Spikes            ; Offset_0x014CE8
		dc.l	Obj_0x6C_Bridge                        ; Offset_0x02E504
		dc.l	Obj_0x6D_Hz_Water_Splash               ; Offset_0x02E22E
		dc.l	Obj_0x6E_Hz_Waterfall                  ; Offset_0x02E0A8
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj00_Rings
		dc.l	Obj_0x80_AIz_Fire_Breath               ; Offset_0x0365AA
		dc.l	Obj_0x81_AIz_Bloominator               ; Offset_0x043B3E
		dc.l	Obj_0x82_AIz_Rhinobot                  ; Offset_0x043C2A
		dc.l	Obj_0x83_AIz_Monkey_Dude               ; Offset_0x043F1C
		dc.l	Obj84_HeyHo
		dc.l	Obj_0x85_LBz_Twin_Hammer               ; Offset_0x03EC12
		dc.l	Obj_0x86_LBz_Beam_Rocket               ; Offset_0x03F11A
		dc.l	Obj_0x87_LBz_Snale_Blaster             ; Offset_0x048436
		dc.l	Obj_0x88_LBz_Ribot                     ; Offset_0x048756 ; $88
		dc.l	Obj_0x89_LBz_Orbinaut                  ; Offset_0x048A94
		dc.l	Obj_0x8A_LBz_Corkey                    ; Offset_0x048BCE
		dc.l	Obj_0x8B_LBz_Flybot_767                ; Offset_0x048DF8
		dc.l	Obj_0x8C_LBz_Ball_Shooter              ; Offset_0x03FE88
		dc.l	Obj_0x8D_CNz_Graviton_Mobile           ; Offset_0x03B9A0
		dc.l	Obj_0x8E_CNz_Bowling_Spin              ; Offset_0x03B01A
		dc.l	Obj_0x8F_FBz_Gapsule                   ; Offset_0x03C27C
		dc.l	Obj90_Fireworm
		dc.l	Obj_0x91_LRz_Iwamodock                 ; Offset_0x04A29C
		dc.l	Obj_0x92_LRz_Toxomister                ; Offset_0x04A400
		dc.l	Obj_0x93_MVz_Madmole                   ; Offset_0x0495CC
		dc.l	Obj_0x94_MVz_Mushmeanie                ; Offset_0x0499BC
		dc.l	Obj_0x95_MVz_Dragonfly                 ; Offset_0x049B24
		dc.l	Obj_0x96_MVz_Butterdroid               ; Offset_0x049DCA
		dc.l	Obj_0x97_MVz_Cluckoid                  ; Offset_0x049E50
		dc.l	Obj_0x98_Sz_Guardian                   ; Offset_0x04107E ; $98
		dc.l	Obj_0x99_Hz_Jawz                       ; Offset_0x04465C
		dc.l	Obj_0x9A_Hz_Blastoid                   ; Offset_0x0446D0
		dc.l	Obj_0x9B_Hz_Buggernaut                 ; Offset_0x0447A6
		dc.l	Obj_0x9C_Hz_Turbo_Spiker               ; Offset_0x044946
		dc.l	Obj_0x9D_Hz_Mega_Chopper               ; Offset_0x044CC8
		dc.l	Obj_0x9E_Hz_Pointdexter                ; Offset_0x044F90
		dc.l	Obj_0x9F_AIz_Catakiller_Jr             ; Offset_0x044490 ; $9F
		dc.l	Obj_0xA0_CNz_Clamer                    ; Offset_0x045C7A
		dc.l	Obj_0xA1_CNz_Sparkle                   ; Offset_0x045E4A
		dc.l	Obj_0xA2_CNz_Batbot                    ; Offset_0x046004
		dc.l	Obj_0xA3_MGz_Bubbles                   ; Offset_0x04504A
		dc.l	Obj_0xA4_MGz_Tunnelbot                 ; Offset_0x04515C
		dc.l	Obj_0xA5_MGz_Spiker                    ; Offset_0x045864
		dc.l	Obj_0xA6_MGz_Mantis                    ; Offset_0x045B26
		dc.l	Obj_0xA7_FBz_Blaster                   ; Offset_0x04611C
		dc.l	Obj_0xA8_FBz_Techno_Squeek             ; Offset_0x046392 ; $A8
		dc.l	Obj_0xA9_AIz_Flame_Mobile              ; Offset_0x0371FA
		dc.l	Obj_0xAA_Iz_Penguinator                ; Offset_0x047F8A
		dc.l	Obj_0xAB_Iz_Star_Pointer               ; Offset_0x0482D2
		dc.l	Obj_0xAC_AIz_Fire_Breath               ; Offset_0x036AB4
		dc.l	Obj_0xAD_Hz_Big_Shaker                 ; Offset_0x037E2C
		dc.l	Obj_0xAE_LBz_Robotnik                  ; Offset_0x048FAC
		dc.l	Obj_0xAF_MGz_Drill_Mobile              ; Offset_0x039920
		dc.l	Obj_0xB0_MGz_Drill_Mobile              ; Offset_0x039C7E ; $B0
		dc.l	Obj_0xB1_MGz_Drill_Mobile              ; Offset_0x039F9E
		dc.l	Obj_0xB2_Iz_Freezer_Mobile             ; Offset_0x03E48C
		dc.l	Obj_0xB3_Iz_Big_Icedus                 ; Offset_0x03DCB0
		dc.l	Obj_0xB4_FBz_Hang_Mobile               ; Offset_0x03D4DE
		dc.l	ObjB5_ScrewMobile
		dc.l	Obj_0xB6_Barrier_Eggman                ; Offset_0x03CE96
		dc.l	Obj_0xB7_LBz_Egg_Mobile                ; Offset_0x0493CC
		dc.l	Obj_0xB8_Iz_Crushing_Column            ; Offset_0x046B0E ; $B8
		dc.l	Obj_0xB9_Iz_Platform                   ; Offset_0x04663E
		dc.l	Obj_0xBA_Iz_Breakable_Wall             ; Offset_0x04694C
		dc.l	Obj_0xBB_Iz_Freezer                    ; Offset_0x046CF2
		dc.l	Obj_0xBC_Iz_Segmented_Column           ; Offset_0x04719E
		dc.l	Obj_0xBD_Iz_Swinging_Platform          ; Offset_0x047336
		dc.l	Obj_0xBE_Iz_Stalactite                 ; Offset_0x0477C6
		dc.l	Obj_0xBF_Iz_Ice_Cube                   ; Offset_0x04798A
		dc.l	Obj_0xC0_Iz_Ice_Spikes                 ; Offset_0x0478D2 ; $C0
		dc.l	Obj_0xC1_Iz_Ice_Spiked_Ball            ; Offset_0x047AD0
		dc.l	Obj_0xC2_Iz_Snow_Pile                  ; Offset_0x047B4E
		dc.l	Obj_0xC3_Iz_Trampoline                 ; Offset_0x047D46
		dc.l	Obj_0xC4_MGz_Tunnelbot                 ; Offset_0x045262
		dc.l	ObjC5_HiddenMonitor
		dc.l	Obj_0xC6_Egg_Prison                    ; Offset_0x043490
		dc.l	ObjC7_CutsceneKnuckles
		dc.l	Obj_0xC8_Iz_Trampoline_Support         ; Offset_0x046A00 ; $C8
		dc.l	Obj_0xC9_Knuckles_Switch               ; Offset_0x035484
		dc.l	ObjCA_AIZPlaneIntro
;-------------------------------------------------------------------------------
; Left over - Parte de ponteiros de objetos de uma compila��o anterior
; ->>>
;-------------------------------------------------------------------------------
Offset_0x04CC90:
		dc.w	((Obj_0xAB_Iz_Star_Pointer+$7E)&$FFFF) ; Offset_0x048350
		dc.l	(Obj_0xAC_AIz_Fire_Breath+$7E)         ; Offset_0x036B32
		dc.l	(Obj_0xAD_Hz_Big_Shaker+$7E)           ; Offset_0x037EAA
		dc.l	(Obj_0xAE_LBz_Robotnik+$7E)            ; Offset_0x04902A
		dc.l	(Obj_0xAF_MGz_Drill_Mobile+$7E)        ; Offset_0x03999E
		dc.l	(Obj_0xB0_MGz_Drill_Mobile+$7E)        ; Offset_0x039CFC
		dc.l	(Obj_0xB1_MGz_Drill_Mobile+$7E)        ; Offset_0x03A01C
		dc.l	(Obj_0xB2_Iz_Freezer_Mobile+$7E)       ; Offset_0x03E50A
		dc.l	(Obj_0xB3_Iz_Big_Icedus+$7E)           ; Offset_0x03DD2E
		dc.l	(Obj_0xB4_FBz_Hang_Mobile+$7E)         ; Offset_0x03D55C
		dc.l	ObjB5_ScrewMobile+$7E
		dc.l	(Obj_0xB6_Barrier_Eggman+$7E)          ; Offset_0x03CF14
		dc.l	(Obj_0xB7_LBz_Egg_Mobile+$7E)          ; Offset_0x04944A
		dc.l	(Obj_0xB8_Iz_Crushing_Column+$7E)      ; Offset_0x046B8C
		dc.l	(Obj_0xB9_Iz_Platform+$7E)             ; Offset_0x0466BC
		dc.l	(Obj_0xBA_Iz_Breakable_Wall+$7E)       ; Offset_0x0469CA
		dc.l	(Obj_0xBB_Iz_Freezer+$7E)              ; Offset_0x046D70
		dc.l	(Obj_0xBC_Iz_Segmented_Column+$7E)     ; Offset_0x04721C
		dc.l	(Obj_0xBD_Iz_Swinging_Platform+$7E)    ; Offset_0x0473B4
		dc.l	(Obj_0xBE_Iz_Stalactite+$7E)           ; Offset_0x047844
		dc.l	(Obj_0xBF_Iz_Ice_Cube+$7E)             ; Offset_0x047A08
		dc.l	(Obj_0xC0_Iz_Ice_Spikes+$7E)           ; Offset_0x047950
		dc.l	(Obj_0xC1_Iz_Ice_Spiked_Ball+$7E)      ; Offset_0x047B4E
		dc.l	(Obj_0xC2_Iz_Snow_Pile+$7E)            ; Offset_0x047BCC
		dc.l	(Obj_0xC3_Iz_Trampoline+$7E)           ; Offset_0x047DC4
		dc.l	(Obj_0xC4_MGz_Tunnelbot+$7E)           ; Offset_0x0452E0
		dc.l	ObjC5_HiddenMonitor+$7E
		dc.l	(Obj_0xC6_Egg_Prison+$7E)              ; Offset_0x04350E
		dc.l	ObjC7_CutsceneKnuckles+$7E
		dc.l	(Obj_0xC8_Iz_Trampoline_Support+$7E)   ; Offset_0x046A7E
		dc.l	(Obj_0xC9_Knuckles_Switch+$7E)         ; Offset_0x035502
		dc.l	ObjCA_AIZPlaneIntro+$7E
;-------------------------------------------------------------------------------
Offset_0x04CD0E:
		dc.w	((Obj_0xC8_Iz_Trampoline_Support+$88)&$FFFF) ; Offset_0x046A88
		dc.l	(Obj_0xC9_Knuckles_Switch+$88)         ; Offset_0x03550C
		dc.l	(ObjCA_AIZPlaneIntro+$88)   ; Offset_0x035B5A
;===============================================================================
; Lista de objetos das fases
; <<<-
;===============================================================================
Art_Sonic:                                                     ; Offset_0x050000
		binclude	"data\art\sonic.dat"
Art_Miles:                                                     ; Offset_0x0676A0
		binclude	"data\art\miles.dat"
Art_Knuckles:                                                  ; Offset_0x072F60
		binclude	"data\art\knuckles.dat"
Art_Sonic_Surfboard:                                           ; Offset_0x075200
		binclude	"data\art\sonicsrf.dat"
Art_Sonic_2P:                                                  ; Offset_0x077560
		binclude	"data\art\sonic_2p.dat"
Art_Miles_2P:                                                  ; Offset_0x07A620
		binclude	"data\art\miles_2p.dat"
Art_Miles_Tails_2P:                                            ; Offset_0x07D3C0
		binclude	"data\art\milest_2p.dat"
Art_Knuckles_2P:                                               ; Offset_0x07D960
		binclude	"data\art\kte_2p.dat"
Art_Invincibility: ; N�o usado - Left Over ???                 ; Offset_0x080DE0
		binclude	"data\art\invcblty.dat"
Art_Dust_Water_Splash:                                         ; Offset_0x081220
		binclude	"data\art\dustwtrs.dat"
Art_Fire_Shield:                                               ; Offset_0x082B80
		binclude	"data\art\f_shield.dat"
Art_Lightning_Shield:                                          ; Offset_0x083E40
		binclude	"data\art\l_shield.dat"
Art_Water_Shield:                                              ; Offset_0x084E80
		binclude	"data\art\w_shield.dat"
Art_Dust_2P:                                                   ; Offset_0x0858E0
		binclude	"data\art\dust_2p.nem"
		align0 4
Art_CNz_Cannon:                                                ; Offset_0x0859A0
		binclude	"data\cnz\cannon.dat"
Art_Angel_Island_Stalk:                                        ; Offset_0x0864C0
		binclude	"data\aiz\stalk.dat"
Art_Angel_Island_Stalk_with_Fruits:                            ; Offset_0x086DC0
		binclude	"data\aiz\stkfruit.dat"
Art_Angel_Island_Stalk_2:                                      ; Offset_0x087180
		binclude	"data\aiz\stalk_2.dat"
Art_Angel_Island_Leaves_Burning:                               ; Offset_0x087A80
		binclude	"data\aiz\leavesbn.dat"
Art_Angel_Island_Burning_Background:                           ; Offset_0x088600
		binclude	"data\aiz\brngbg.dat"
Art_Angel_Island_Leaves_Burning_Background:                    ; Offset_0x089200
		binclude	"data\aiz\leavesb2.dat"
Art_Angel_Island_Leaves:                                       ; Offset_0x089400
		binclude	"data\aiz\leaves.dat"
Art_Hydrocity_Conveyor_Belt:                                   ; Offset_0x089860
		binclude	"data\hz\convbelt.dat"
Art_Hydrocity_Water_Surface:                                   ; Offset_0x08A5E0
		binclude	"data\hz\wtrsurfc.dat"
Art_Hydrocity_Background:                                      ; Offset_0x08A9E0
		binclude	"data\hz\backgnd.dat"
Art_Hydrocity_Water_Surface_2:                                 ; Offset_0x08ADE0
		binclude	"data\hz\wtrsurf2.dat"
Art_Hydrocity_Background_2:                                    ; Offset_0x08B1E0
		binclude	"data\hz\backgnd2.dat"
Art_Hydrocity_Waterfall:                                       ; Offset_0x08B5E0
		binclude	"data\hz\waterfll.dat"
Art_Hydrocity_Background_3:                                    ; Offset_0x08C060
		binclude	"data\hz\backgnd3.dat"
Art_Hydrocity_Background_4:                                    ; Offset_0x08C460
		binclude	"data\hz\backgnd4.dat"
Art_Hydrocity_Background_5:                                    ; Offset_0x08CC60
		binclude	"data\hz\backgnd5.dat"
Art_Hydrocity_Background_6:                                    ; Offset_0x08DC60
		binclude	"data\hz\backgnd6.dat"
Art_Marble_Garden_Mud:                                         ; Offset_0x090C60
		binclude	"data\mgz\mud.dat"
Art_Marble_Garden_Fruits:                                      ; Offset_0x093060
		binclude	"data\mgz\fruits.dat"
Art_Carnival_Night_Diagonal_Barber_Pole:                       ; Offset_0x0930C0
		binclude	"data\cnz\barbpole.dat"
Art_Carnival_Night_Diagonal_Barber_Pole_2:                     ; Offset_0x0942C0
		binclude	"data\cnz\barbpol2.dat"
Art_Carnival_Night_Vacuum_Tubes:                               ; Offset_0x0962C0
		binclude	"data\cnz\v_tubes.dat"
Art_Carnival_Night_Rotating_Mesh:                              ; Offset_0x0982C0
		binclude	"data\cnz\rot_mesh.dat"
Art_Carnival_Night_Fan_Lights:                                 ; Offset_0x0992C0
		binclude	"data\cnz\fanlight.dat"
Art_Carnival_Night_Background:                                 ; Offset_0x099440
		binclude	"data\cnz\backgnd.dat"
Art_Carnival_Night_Wheel:                                      ; Offset_0x09B440
		binclude	"data\cnz\wheel.dat"
Art_Iz_Background:                                             ; Offset_0x09BE40
		binclude	"data\iz\backgnd.dat"
Art_Iz_Background_2:                                           ; Offset_0x09CE40
		binclude	"data\iz\backgnd2.dat"
Art_Iz_Background_3:                                           ; Offset_0x09D040
		binclude	"data\iz\backgnd3.dat"
Art_Iz_Background_4:                                           ; Offset_0x09D140
		binclude	"data\iz\backgnd4.dat"
Art_Iz_Background_5:                                           ; Offset_0x09D1C0
		binclude	"data\iz\backgnd5.dat"
Art_Iz_Crystal:                                                ; Offset_0x09D200
		binclude	"data\iz\crystal.dat"
Art_LBz_Foreground_Buzzer:                                     ; Offset_0x09D600
		binclude	"data\lbz\buzzer.dat"
Art_LBz_Background_Mountains:                                  ; Offset_0x09DB00
		binclude	"data\lbz\mountain.dat"
Art_LBz_Ocean:                                                 ; Offset_0x09EF00
		binclude	"data\lbz\ocean.dat"
Art_LBz_Background_Bricks:                                     ; Offset_0x09F000
		binclude	"data\lbz\bgbricks.dat"
Art_LBz_Water_Surface:                                         ; Offset_0x09F400
		binclude	"data\lbz\watersrf.dat"
Art_LBz_Background_Above_Water:                                ; Offset_0x09F600
		binclude	"data\lbz\backgnd.dat"
Art_LBz_Water_Surface_Above:                                   ; Offset_0x09F800
		binclude	"data\lbz\watersf2.dat"
Art_LBz_Background_Under_Water:                                ; Offset_0x09FA00
		binclude	"data\lbz\backgnd2.dat"
Art_LBz_Foreground_Cylinder:                                   ; Offset_0x09FC00
		binclude	"data\lbz\cylinder.dat"
Art_LBz_Foreground_Lights:                                     ; Offset_0x0A1C00
		binclude	"data\lbz\lights.dat"
Art_LBz_Foreground_Pistons:                                    ; Offset_0x0A1E80
		binclude	"data\lbz\pistons.dat"
Art_LRz_Background:                                            ; Offset_0x0A2180
		binclude	"data\lrz\backgnd.dat"
Art_LRz_Background_Lava:                                       ; Offset_0x0A4580
		binclude	"data\lrz\backgnd2.dat"
Art_ALz_Quicksand:                                             ; Offset_0x0A4D80
		binclude	"data\alz\quicksnd.dat"
Art_BPz_Foreground_Flags:                                      ; Offset_0x0A5380
		binclude	"data\bpz\fg_flags.dat"
Art_BPz_Cylinder:                                              ; Offset_0x0A58C0
		binclude	"data\bpz\cylinder.dat"
Art_BPz_Background_People:                                     ; Offset_0x0A5DC0
		binclude	"data\bpz\people.dat"
Art_BPz_Background_Flags:                                      ; Offset_0x0A5E80
		binclude	"data\bpz\bg_flags.dat"
Art_DPz_Quicksand:                                             ; Offset_0x0A5EC0
		binclude	"data\dpz\quicksnd.dat"
Art_DPz_Background_Sand_Dunes:                                 ; Offset_0x0A6640
		binclude	"data\dpz\sanddune.dat"
Art_Oxygen_Numbers:                                            ; Offset_0x0A8640
		binclude	"data\art\oxygnumb.dat"
Art_Menu_Sonic_Miles:                                          ; Offset_0x0A8DC0
		binclude	"data\menus\soncmils.dat"
;-------------------------------------------------------------------------------

; Z80 Bank $16
Snd_Bank1_Start:	startBank
Angel_Island_1_Snd_Data:                                       ; Offset_0x0B0000
		include	"sound\music\aiz1.asm"
Angel_Island_2_Snd_Data:                                       ; Offset_0x0B2210
		include	"sound\music\aiz2.asm"
Hydrocity_1_Snd_Data:                                          ; Offset_0x0B3F24
		include	"sound\music\hcz1.asm"
Hydrocity_2_Snd_Data:                                          ; Offset_0x0B5492
		include	"sound\music\hcz2.asm"
Marble_Garden_1_Snd_Data:                                      ; Offset_0x0B6E51
		include	"sound\music\mgz1.asm"
Marble_Garden_2_Snd_Data:                                      ; Offset_0x0B7468
		include	"sound\music\mgz2.asm"
	finishBank
; Z80 Bank $17
Snd_Bank2_Start:	startBank
Carnival_Night_1_Snd_Data:                                     ; Offset_0x0B8000
		include	"sound\music\cnz1.asm"
Carnival_Night_2_Snd_Data:                                     ; Offset_0x0B9BBB
		include	"sound\music\cnz2.asm"
Flying_Battery_1_Snd_Data:                                     ; Offset_0x0BB99E
		include	"sound\music\fbz1.asm"
Flying_Battery_2_Snd_Data:                                     ; Offset_0x0BBF36
		include	"sound\music\fbz2.asm"
Icecap_1_Snd_Data:                                             ; Offset_0x0BC499
		include	"sound\music\icz1.asm"
Icecap_2_Snd_Data:                                             ; Offset_0x0BCA37
		include	"sound\music\icz2.asm"
Launch_Base_1_Snd_Data:                                        ; Offset_0x0BD04B
		include	"sound\music\lbz1.asm"
	finishBank
;-------------------------------------------------------------------------------
; Z80 Bank $18
Snd_Bank3_Start:	startBank
Launch_Base_2_Snd_Data:                                        ; Offset_0x0C0000
		include	"sound\music\lbz2.asm"
Mushroom_Valley_1_Snd_Data:                                    ; Offset_0x0C252A
		include	"sound\music\mvz1.asm"
Mushroom_Valley_2_Snd_Data:                                    ; Offset_0x0C2A9C
		include	"sound\music\mvz2.asm"
Sandopolis_1_Snd_Data:                                         ; Offset_0x0C3005
		include	"sound\music\soz1.asm"
Sandopolis_2_Snd_Data:                                         ; Offset_0x0C366F
		include	"sound\music\soz2.asm"
Lava_Reef_1_Snd_Data:                                          ; Offset_0x0C3C62
		include	"sound\music\lrz1.asm"
Lava_Reef_2_Snd_Data:                                          ; Offset_0x0C504F
		include	"sound\music\lrz2.asm"
Sky_Sanctuary_Snd_Data:                                        ; Offset_0x0C6642
		include	"sound\music\ssz.asm"
Death_Egg_1_Snd_Data:                                          ; Offset_0x0C7954
		include	"sound\music\dez1.asm"
	finishBank
; Z80 Bank $19
Snd_Bank4_Start:	startBank
Death_Egg_2_Snd_Data:                                          ; Offset_0x0C8000
		include	"sound\music\dez2.asm"
Mini_Boss_Snd_Data:                                            ; Offset_0x0C8412
		include	"sound\music\miniboss.asm"
Boss_Snd_Data:                                                 ; Offset_0x0C8742
		include	"sound\music\zone boss.asm"
The_Doomsday_Snd_Data:                                         ; Offset_0x0C8C3E
		include	"sound\music\ddz.asm"
Glowing_Spheres_Bonus_Stage_Snd_Data:                          ; Offset_0x0C9521
		include	"sound\music\pachinko.asm"
Special_Stage_Snd_Data:                                        ; Offset_0x0C9A84
		include	"sound\music\special stage.asm"
Slot_Machine_Bonus_Stage_Snd_Data:                             ; Offset_0x0CA31C
		include	"sound\music\slots.asm"
Gumball_Machine_Bonus_Stage_Snd_Data:                          ; Offset_0x0CAE04
		include	"sound\music\gum ball machine.asm"
Knuckles_Theme_Snd_Data:                                       ; Offset_0x0CBB19
		include	"sound\music\knuckles.asm"
Azure_Lake_Snd_Data:                                           ; Offset_0x0CBE82
		include	"sound\music\azure lake.asm"
Balloon_Park_Snd_Data:                                         ; Offset_0x0CC988
		include	"sound\music\balloon park.asm"
Desert_Palace_Snd_Data:                                        ; Offset_0x0CD620
		include	"sound\music\desert palace.asm"
	finishBank
;-------------------------------------------------------------------------------
; Z80 Bank $1A
Snd_Bank5_Start:	startBank
Chrome_Gadget_Snd_Data:                                        ; Offset_0x0D0000
		include	"sound\music\chrome gadget.asm"
Endless_Mine_Snd_Data:                                         ; Offset_0x0D224B
		include	"sound\music\endless mine.asm"
Title_Screen_Snd_Data:                                         ; Offset_0x0D2993
		include	"sound\music\title.asm"
Credits_Snd_Data:                                              ; Offset_0x0D2DCC
		include	"sound\music\credits.asm"
Time_Game_Over_Snd_Data:                                       ; Offset_0x0D383C
		include	"sound\music\game over.asm"
Continue_Snd_Data:                                             ; Offset_0x0D3A99
		include	"sound\music\continue.asm"
Level_Results_Snd_Data:                                        ; Offset_0x0D427A
		include	"sound\music\level outro.asm"
Extra_Life_Snd_Data:                                           ; Offset_0x0D476A
		include	"sound\music\1up.asm"
Got_Emerald_Snd_Data:                                          ; Offset_0x0D496A
		include	"sound\music\chaos emerald.asm"
Invincibility_Snd_Data:                                        ; Offset_0x0D4A38
		include	"sound\music\invincible.asm"
Competition_Menu_Snd_Data:                                     ; Offset_0x0D4CB8
		include	"sound\music\competition menu.asm"
Super_Sonic_Theme_Snd_Data:                                    ; Offset_0x0D5EAA
		include	"sound\music\unused.asm"
Data_Select_Menu_Snd_Data:                                     ; Offset_0x0D695E
		include	"sound\music\menu.asm"
	finishBank
; Z80 Bank $1B
Snd_Bank6_Start:	startBank
Final_Boss_Snd_Data:                                           ; Offset_0x0D8000
		include	"sound\music\final boss.asm"
Panic_Snd_Data:                                                ; Offset_0x0D8592
		include	"sound\music\countdown.asm"
	finishBank
;-------------------------------------------------------------------------------
; Offset_0xE0000:
Z80_Driver:	include	"s3.sounddriver.asm"
Z80_Driver_End
;-------------------------------------------------------------------------------
	cnop -Size_of_SndBank, $8000	; aligned to end of bank

SndBank:
Ring_Sfx_Data:                                           ; $32 ; Offset_0x0EC000
		include	"sound\sfx\32 - ring (right).asm"
Ring_Left_Speaker_Sfx_Data:                                    ; Offset_0x0EC02E
		include	"sound\sfx\33 - ring (left).asm"
Ring_Lost_Sfx_Data:                                            ; Offset_0x0EC05C
		include	"sound\sfx\34 - ring loss.asm"
Hurt_Sfx_Data:                                                 ; Offset_0x0EC084
		include	"sound\sfx\35 - death.asm"
Skidding_Sfx_Data:                                             ; Offset_0x0EC0B6
		include	"sound\sfx\36 - skid.asm"
Spike_Hurt_Sfx_Data:                                           ; Offset_0x0EC0EB
		include	"sound\sfx\37 - spike hit.asm"
Collect_Oxygen_Sfx_Data:                                       ; Offset_0x0EC11A
		include	"sound\sfx\38 - bubble.asm"
Water_Splash_Sfx_Data:                                         ; Offset_0x0EC150
		include	"sound\sfx\39 - splash.asm"
Got_Classic_Shield_Sfx_Data:                                   ; Offset_0x0EC191
		include	"sound\sfx\3A - shield.asm"
Drowning_Sfx_Data:                                             ; Offset_0x0EC1BC
		include	"sound\sfx\3B - drown.asm"
Rolling_Sfx_Data:                                              ; Offset_0x0EC20B
		include	"sound\sfx\3C - roll.asm"
Object_Hit_Sfx_Data:                                           ; Offset_0x0EC249
		include	"sound\sfx\3D - break.asm"
Got_Fire_Shield_Sfx_Data:                                      ; Offset_0x0EC283
		include	"sound\sfx\3E - fire shield.asm"
Got_Water_Shield_Sfx_Data:                                     ; Offset_0x0EC2AE
		include	"sound\sfx\3F - bubble shield.asm"
Offset_0x0EC2D1:
		include	"sound\sfx\40 - unknown shield.asm"
Got_Lightning_Shield_Sfx_Data:                                 ; Offset_0x0EC2F4
		include	"sound\sfx\41 - lightning shield.asm"
Offset_0x0EC317:
		include	"sound\sfx\42 - insta shield attack.asm"
Fire_Shield_Sfx_Data:                                          ; Offset_0x0EC32F
		include	"sound\sfx\43 - fire shield attack.asm"
Offset_0x0EC34A:
		include	"sound\sfx\44 - bubble shield attack.asm"
Offset_0x0EC377:
		include	"sound\sfx\45 - lightning shield attack.asm"
Hyper_Form_Change_Sfx_Data:                                    ; Offset_0x0EC39F
		include	"sound\sfx\46 - whistle.asm"
Offset_0x0EC3CC:
		include	"sound\sfx\47 - sand wall rise.asm"
Offset_0x0EC3EC:
		include	"sound\sfx\48 - flying.asm"
Offset_0x0EC414:
		include	"sound\sfx\49 - flying (tired).asm"
Grab_Sfx_Data:                                                 ; Offset_0x0EC41E
		include	"sound\sfx\4A - blast.asm"
Offset_0x0EC438:
		include	"sound\sfx\4B - thump.asm"
Offset_0x0EC460:
		include	"sound\sfx\4C - grab.asm"
Offset_0x0EC483:
		include	"sound\sfx\4D - waterfall.asm"
Offset_0x0EC498:
		include	"sound\sfx\4E - slide skid (loud).asm"
Waterfall_Splash_Sfx_Data:                                     ; Offset_0x0EC4C0
		include	"sound\sfx\4F - waterfall splash.asm"
Offset_0x0EC4F1:
		include	"sound\sfx\50 - glide land.asm"
Projectile_Sfx_Data:                                           ; Offset_0x0EC51B
		include	"sound\sfx\51 - projectile.asm"
Missile_Explosion_Sfx_Data:                                    ; Offset_0x0EC548
		include	"sound\sfx\52 - missile explode.asm"
Flame_Sfx_Data:                                                ; Offset_0x0EC58C
		include	"sound\sfx\53 - flamethrower (quiet).asm"
Flying_Battery_Move_Sfx_Data:                                  ; Offset_0x0EC59D
		include	"sound\sfx\54 - large ship.asm"
Offset_0x0EC5D1:
		include	"sound\sfx\55 - boss activate.asm"
Missile_Throw_Sfx_Data:                                        ; Offset_0x0EC609
		include	"sound\sfx\56 - missile throw.asm"
Robotnik_Buzzer_Sfx_Data:                                      ; Offset_0x0EC63A
		include	"sound\sfx\57.asm"
Spike_Move_Sfx_Data:                                           ; Offset_0x0EC671
		include	"sound\sfx\58 - spike move.asm"
Offset_0x0EC68E:
		include	"sound\sfx\59 - charging.asm"
Offset_0x0EC6CE:
		include	"sound\sfx\5A - boss laser.asm"
Offset_0x0EC711:
		include	"sound\sfx\5B - block conveyor.asm"
Draw_Bridge_Move_Sfx_Data:                                     ; Offset_0x0EC739
		include	"sound\sfx\5C - flip bridge.asm"
Geyser_Sfx_Data:                                               ; Offset_0x0EC749
		include	"sound\sfx\5D - geyser.asm"
Fan_Big_Sfx_Data:                                              ; Offset_0x0EC762
		include	"sound\sfx\5E - boss rotate.asm"
Offset_0x0EC794:
		include	"sound\sfx\5F - fan (big).asm"
Offset_0x0EC7C5:
		include	"sound\sfx\60 - fan (small).asm"
Offset_0x0EC7DD:
		include	"sound\sfx\61 - fan latch.asm"
Smash_Sfx_Data:                                                ; Offset_0x0EC7F6
		include	"sound\sfx\62 - collapse.asm"
Offset_0x0EC852:
		include	"sound\sfx\63 - unknown charge.asm"
Switch_Blip_Sfx_Data:                                          ; Offset_0x0EC87F
		include	"sound\sfx\64 - switch.asm"
Offset_0x0EC88C:
		include	"sound\sfx\65 - flamethrower (loud).asm"
Offset_0x0EC89B:
		include	"sound\sfx\66 - mecha spark.asm"
Offset_0x0EC8C3:
		include	"sound\sfx\67.asm"
Floor_Thump_Sfx_Data:                                          ; Offset_0x0EC8F9
		include	"sound\sfx\68 - floor thump.asm"
Offset_0x0EC922:
		include	"sound\sfx\69 - laser.asm"
Offset_0x0EC94A:
		include	"sound\sfx\6A - boss panic.asm"
Offset_0x0EC97C:
		include	"sound\sfx\6B - Unknown Spin.asm"
Crash_Sfx_Data:                                                ; Offset_0x0EC997
		include	"sound\sfx\6C - Crash.asm"
Offset_0x0EC9BF:
		include	"sound\sfx\6D - Boss Zoom.asm"
Offset_0x0ECA00:
		include	"sound\sfx\6E-6F - Boss Hit Floor.asm"
Jump_Sfx_Data:                                                 ; Offset_0x0ECA31
		include	"sound\sfx\70 - Jump.asm"
Offset_0x0ECA47:
		include	"sound\sfx\71 - Star Post.asm"
Offset_0x0ECA71:
		include	"sound\sfx\72 - Pulley Grab.asm"
Offset_0x0ECA90:
		include	"sound\sfx\73 - Death 2.asm"
Offset_0x0ECAC2:
		include	"sound\sfx\74 - Skid 2.asm"
Level_Projectile_Sfx_Data:                                     ; Offset_0x0ECAF7
		include	"sound\sfx\75 - Level Projectile.asm"
Offset_0x0ECB23:
		include	"sound\sfx\76 - Spike Hit 2.asm"
Offset_0x0ECB52:
		include	"sound\sfx\77 - Push Block.asm"
Offset_0x0ECB7F:
		include	"sound\sfx\78 - Goal.asm"
Underwater_Sfx_Data:                                           ; Offset_0x0ECBB2
		include	"sound\sfx\79 - Action Block.asm"
Offset_0x0ECBC4:
		include	"sound\sfx\7A - Splash 2.asm"
Offset_0x0ECC05:
		include	"sound\sfx\7B - Unknown Shift.asm"
Boss_Hit_Sfx_Data:                                             ; Offset_0x0ECC24
		include	"sound\sfx\7C - Boss Hit.asm"
Offset_0x0ECC58:
		include	"sound\sfx\7D - Bubble 2.asm"
Offset_0x0ECC8E:
		include	"sound\sfx\7E - Lava Ball.asm"
Offset_0x0ECCD8:
		include	"sound\sfx\7F - Shield 2.asm"
Hoverpad_Sfx_Data:                                             ; Offset_0x0ECD05
		include	"sound\sfx\80 - Hoverpad.asm"
Transporter_Sfx_Data:                                          ; Offset_0x0ECD32
		include	"sound\sfx\81 - Transporter.asm"
Tunnel_Booster_Sfx_Data:                                       ; Offset_0x0ECD66
		include	"sound\sfx\82 - Tunnel Booster.asm"
Rising_Platform_Sfx_Data:                                      ; Offset_0x0ECD96
		include	"sound\sfx\83 - Balloon Platform.asm"
Wave_Hover_Sfx_Data:                                           ; Offset_0x0ECDC5
		binclude	"sound\0x84.sfx"
Trapdoor_Sfx_Data:                                             ; Offset_0x0ECDF6
		include	"sound\sfx\85 - Trap Door.asm"
Balloon_Pop_Sfx_Data:                                          ; Offset_0x0ECE20
		include	"sound\sfx\86 - Balloon.asm"
Cannon_Turn_Sfx_Data:                                          ; Offset_0x0ECE6A
		include	"sound\sfx\87 - Cannon Turn.asm"
Offset_0x0ECE99:
		include	"sound\sfx\88 - Gravity Machine.asm"
Offset_0x0ECEC6:
		include	"sound\sfx\89 - Lightning.asm"
Offset_0x0ECF11:
		include	"sound\sfx\8A - Boss Magma.asm"
Small_Bumper_Sfx_Data:                                         ; Offset_0x0ECF45
		include	"sound\sfx\8B - Small Bumpers.asm"
Offset_0x0ECF75:
		include	"sound\sfx\8C - Chain Tension.asm"
Offset_0x0ECFA6:
		include	"sound\sfx\8D - Unknown Pump.asm"
Offset_0x0ECFD3:
		include	"sound\sfx\8E - Slide Skid (Quiet).asm"
Offset_0x0ECFE4:
		binclude	"sound\0x8F.sfx"
Offset_0x0ECFFC:
		binclude	"sound\0x90.sfx"
Frost_Puff_Sfx_Data:                                           ; Offset_0x0ED032
		binclude	"sound\0x91.sfx"
Ice_Spike_Sfx_Data:                                            ; Offset_0x0ED050
		binclude	"sound\0x92.sfx"
Offset_0x0ED07F:
		binclude	"sound\0x93.sfx"
Offset_0x0ED0B2:
		binclude	"sound\0x94.sfx"
Tube_Launcher_Sfx_Data:                                        ; Offset_0x0ED0E4
		binclude	"sound\0x95.sfx"
Offset_0x0ED12F:
		binclude	"sound\0x96.sfx"
Bridge_Collapse_Sfx_Data:                                      ; Offset_0x0ED14D
		binclude	"sound\0x97.sfx"
Offset_0x0ED199:
		binclude	"sound\0x98.sfx"
Offset_0x0ED1D1:
		binclude	"sound\0x99.sfx"
Offset_0x0ED1FE:
		binclude	"sound\0x9A.sfx"
Buzzer_Sfx_Data:                                               ; Offset_0x0ED22B
		binclude	"sound\0x9B.sfx"
Offset_0x0ED258:
		binclude	"sound\0x9C.sfx"
Offset_0x0ED288:
		binclude	"sound\0x9D.sfx"
Offset_0x0ED2AE:
		binclude	"sound\0x9E.sfx"
Offset_0x0ED2D4:
		binclude	"sound\0x9F.sfx"
Offset_0x0ED30A:
		binclude	"sound\0xA0.sfx"
Offset_0x0ED337:
		binclude	"sound\0xA1.sfx"
Offset_0x0ED344:
		binclude	"sound\0xA2.sfx"
Offset_0x0ED378:
		binclude	"sound\0xA3.sfx"
Offset_0x0ED3AE:
		binclude	"sound\0xA4.sfx"
Offset_0x0ED3E2:
		binclude	"sound\0xA5.sfx"
Offset_0x0ED413:
		binclude	"sound\0xA6.sfx"
Offset_0x0ED42D:
		binclude	"sound\0xA7.sfx"
Offset_0x0ED45E:
		binclude	"sound\0xA8.sfx"
Offset_0x0ED494:
		binclude	"sound\0xA9.sfx"
Door_Close_Sfx_Data:                                           ; Offset_0x0ED4C6
		binclude	"sound\0xAA.sfx"
Offset_0x0ED4FC:
		binclude	"sound\0xAB.sfx"
Offset_0x0ED530:
		binclude	"sound\0xAC.sfx"
Offset_0x0ED57A:
		binclude	"sound\0xAD.sfx"
Offset_0x0ED5A9:
		binclude	"sound\0xAE.sfx"
Offset_0x0ED5DC:
		binclude	"sound\0xAF.sfx"
Slide_Thunk_Sfx_Data:                                          ; Offset_0x0ED60B
		binclude	"sound\0xB0.sfx"
Offset_0x0ED63F:
		binclude	"sound\0xB1.sfx"
Offset_0x0ED652:
		binclude	"sound\0xB2.sfx"
Offset_0x0ED688:
		binclude	"sound\0xB3.sfx"
Offset_0x0ED6D4:
		binclude	"sound\0xB4.sfx"
Offset_0x0ED6EA:
		binclude	"sound\0xB5.sfx"
Offset_0x0ED720:
		binclude	"sound\0xB6.sfx"
Offset_0x0ED73F:
		binclude	"sound\0xB7.sfx"
Offset_0x0ED7A4:
		binclude	"sound\0xB8.sfx"
Offset_0x0ED7DB:
		binclude	"sound\0xB9.sfx"
Offset_0x0ED80F:
		binclude	"sound\0xBA.sfx"
Super_Form_Change_Sfx_Data:                                    ; Offset_0x0ED850
		binclude	"sound\0xBB.sfx"
Offset_0x0ED88C:
		binclude	"sound\0xBC.sfx"
Offset_0x0ED8BA:
		binclude	"sound\0xBD.sfx"
Offset_0x0ED8D2:
		binclude	"sound\0xBE.sfx"
Offset_0x0ED8FA:
		binclude	"sound\0xBF.sfx"
Offset_0x0ED927:
		binclude	"sound\0xC0.sfx"
Offset_0x0ED956:
		binclude	"sound\0xC1.sfx"
Offset_0x0ED98E:
		binclude	"sound\0xC2.sfx"
Offset_0x0ED9BB:
		binclude	"sound\0xC3.sfx"
Offset_0x0ED9E8:
		binclude	"sound\0xC4.sfx"
Offset_0x0EDA15:
		binclude	"sound\0xC5.sfx"
Offset_0x0EDA42:
		binclude	"sound\0xC6.sfx"
Offset_0x0EDA6F:
		binclude	"sound\0xC7.sfx"
Offset_0x0EDA87:
		binclude	"sound\0xC8.sfx"
Energy_Zap_Sfx_Data:                                           ; Offset_0x0EDAB7
		binclude	"sound\0xC9.sfx"
Offset_0x0EDAE1:
		binclude	"sound\0xCA.sfx"
Offset_0x0EDAF7:
		binclude	"sound\0xCB.sfx"
Offset_0x0EDB52:
		include	"sound\sfx\cc - spin dash.asm"
Offset_0x0EDBA3:
		binclude	"sound\0xCD.sfx"
Check_Point_Sfx_Data:                                          ; Offset_0x0EDC15
		binclude	"sound\0xCE.sfx"
Offset_0x0EDC3F:
		binclude	"sound\0xCF.sfx"
Special_Stage_Entry_Sfx_Data:                                  ; Offset_0x0EDC74
		binclude	"sound\0xD0.sfx"
Offset_0x0EDCA1:
		binclude	"sound\0xD1.sfx"
Spring_Sfx_Data:                                               ; Offset_0x0EDD1C
		binclude	"sound\0xD2.sfx"
Error_Sfx_Data:                                                ; Offset_0x0EDD71
		binclude	"sound\0xD3.sfx"
Offset_0x0EDD9D:
		binclude	"sound\0xD4.sfx"
Offset_0x0EDE17:
		binclude	"sound\0xD5.sfx"
Offset_0x0EDE4B:
		binclude	"sound\0xD6.sfx"
Offset_0x0EDE73:
		binclude	"sound\0xD7.sfx"
Offset_0x0EDEB4:
		include	"sound\sfx\D8 - Slot Machine.asm"
Offset_0x0EDEDC:
		include	"sound\sfx\D9 - Signpost.asm"
SndBank_End

	if SndBank_End - SndBank > $8000
		fatal "SndBank must fit within $8000 bytes, but was $\{SndBank_End-SndBank }. Try moving something to the other bank."
	endif
	if SndBank_End - SndBank > Size_of_SndBank
		fatal "Size_of_SndBank = $\{Size_of_SndBank}, but you have $\{SndBank_End-SndBank} bytes of sound effects."
	endif

DAC_81_Size           equ (DAC_81_Data_End-DAC_81_Data)
DAC_81_Data_Ptr       equ (DAC_81_Data&$FFFF)|$8000
DAC_82_To_85_Size     equ (DAC_82_To_85_Data_End-DAC_82_To_85_Data)
DAC_82_To_85_Data_Ptr equ (DAC_82_To_85_Data&$FFFF)|$8000
DAC_86_Size           equ (DAC_86_Data_End-DAC_86_Data)
DAC_86_Data_Ptr       equ (DAC_86_Data&$FFFF)|$8000
DAC_87_Size           equ (DAC_87_Data_End-DAC_87_Data)
DAC_87_Data_Ptr       equ (DAC_87_Data&$FFFF)|$8000
DAC_88_Size           equ (DAC_88_Data_End-DAC_88_Data)
DAC_88_Data_Ptr       equ (DAC_88_Data&$FFFF)|$8000
DAC_89_Size           equ (DAC_89_Data_End-DAC_89_Data)
DAC_89_Data_Ptr       equ (DAC_89_Data&$FFFF)|$8000
DAC_8A_To_8B_Size     equ (DAC_8A_To_8B_Data_End-DAC_8A_To_8B_Data)
DAC_8A_To_8B_Data_Ptr equ (DAC_8A_To_8B_Data&$FFFF)|$8000
DAC_8C_Size           equ (DAC_8C_Data_End-DAC_8C_Data)
DAC_8C_Data_Ptr       equ (DAC_8C_Data&$FFFF)|$8000
DAC_8D_To_8E_Size     equ (DAC_8D_To_8E_Data_End-DAC_8D_To_8E_Data)
DAC_8D_To_8E_Data_Ptr equ (DAC_8D_To_8E_Data&$FFFF)|$8000
DAC_8F_Size           equ (DAC_8F_Data_End-DAC_8F_Data)
DAC_8F_Data_Ptr       equ (DAC_8F_Data&$FFFF)|$8000
DAC_90_To_93_Size     equ (DAC_90_To_93_Data_End-DAC_90_To_93_Data)
DAC_90_To_93_Data_Ptr equ (DAC_90_To_93_Data&$FFFF)|$8000
DAC_94_To_97_Size     equ (DAC_94_To_97_Data_End-DAC_94_To_97_Data)
DAC_94_To_97_Data_Ptr equ (DAC_94_To_97_Data&$FFFF)|$8000
DAC_98_To_9A_Size     equ (DAC_98_To_9A_Data_End-DAC_98_To_9A_Data)
DAC_98_To_9A_Data_Ptr equ (DAC_98_To_9A_Data&$FFFF)|$8000
DAC_9B_Size           equ (DAC_9B_Data_End-DAC_9B_Data)
DAC_9B_Data_Ptr       equ (DAC_9B_Data&$FFFF)|$8000

DACBank:	startBank
DAC_Table:                                                     ; Offset_0x0F0000
		dc.w	z80_ptr(DAC_81_Setup)    ; $8036
		dc.w	z80_ptr(DAC_82_Setup)    ; $803B
		dc.w	z80_ptr(DAC_83_Setup)    ; $8040
		dc.w	z80_ptr(DAC_84_Setup)    ; $8045
		dc.w	z80_ptr(DAC_85_Setup)    ; $804A
		dc.w	z80_ptr(DAC_86_Setup)    ; $804F
		dc.w	z80_ptr(DAC_87_Setup)    ; $8054
		dc.w	z80_ptr(DAC_88_Setup)    ; $8059
		dc.w	z80_ptr(DAC_89_Setup)    ; $805E
		dc.w	z80_ptr(DAC_8A_Setup)    ; $8063
		dc.w	z80_ptr(DAC_8B_Setup)    ; $8068
		dc.w	z80_ptr(DAC_8C_Setup)    ; $806D
		dc.w	z80_ptr(DAC_8D_Setup)    ; $8072
		dc.w	z80_ptr(DAC_8E_Setup)    ; $8077
		dc.w	z80_ptr(DAC_8F_Setup)    ; $807C
		dc.w	z80_ptr(DAC_90_Setup)    ; $8081
		dc.w	z80_ptr(DAC_91_Setup)    ; $8086
		dc.w	z80_ptr(DAC_92_Setup)    ; $808B
		dc.w	z80_ptr(DAC_93_Setup)    ; $8090
		dc.w	z80_ptr(DAC_94_Setup)    ; $8095
		dc.w	z80_ptr(DAC_95_Setup)    ; $809A
		dc.w	z80_ptr(DAC_96_Setup)    ; $809F
		dc.w	z80_ptr(DAC_97_Setup)    ; $80A4
		dc.w	z80_ptr(DAC_98_Setup)    ; $80A9
		dc.w	z80_ptr(DAC_99_Setup)    ; $80AE
		dc.w	z80_ptr(DAC_9A_Setup)    ; $80B3
		dc.w	z80_ptr(DAC_9B_Setup)    ; $80B8
DAC_81_Setup:                                                  ; Offset_0x0F0036
		dc.b	$04
		dc.w	(((DAC_81_Size>>$08)|(DAC_81_Size<<$08))&$FFFF)         ; $0790
		dc.w	(((DAC_81_Data_Ptr>>$08)|(DAC_81_Data_Ptr<<$08))&$FFFF) ; $83BD
DAC_82_Setup:                                                  ; Offset_0x0F003B
		dc.b	$0E
		dc.w	(((DAC_82_To_85_Size>>$08)|(DAC_82_To_85_Size<<$08))&$FFFF)         ; $04C0
		dc.w	(((DAC_82_To_85_Data_Ptr>>$08)|(DAC_82_To_85_Data_Ptr<<$08))&$FFFF) ; $8B4D
DAC_83_Setup:                                                  ; Offset_0x0F0040
		dc.b	$14
		dc.w	(((DAC_82_To_85_Size>>$08)|(DAC_82_To_85_Size<<$08))&$FFFF)         ; $04C0
		dc.w	(((DAC_82_To_85_Data_Ptr>>$08)|(DAC_82_To_85_Data_Ptr<<$08))&$FFFF) ; $8B4D
DAC_84_Setup:                                                  ; Offset_0x0F0045
		dc.b	$1A
		dc.w	(((DAC_82_To_85_Size>>$08)|(DAC_82_To_85_Size<<$08))&$FFFF)         ; $04C0
		dc.w	(((DAC_82_To_85_Data_Ptr>>$08)|(DAC_82_To_85_Data_Ptr<<$08))&$FFFF) ; $8B4D
DAC_85_Setup:                                                  ; Offset_0x0F004A
		dc.b	$20
		dc.w	(((DAC_82_To_85_Size>>$08)|(DAC_82_To_85_Size<<$08))&$FFFF)         ; $04C0
		dc.w	(((DAC_82_To_85_Data_Ptr>>$08)|(DAC_82_To_85_Data_Ptr<<$08))&$FFFF) ; $8B4D
DAC_86_Setup:                                                  ; Offset_0x0F004F
		dc.b	$04
		dc.w	(((DAC_86_Size>>$08)|(DAC_86_Size<<$08))&$FFFF)         ; $0300
		dc.w	(((DAC_86_Data_Ptr>>$08)|(DAC_86_Data_Ptr<<$08))&$FFFF) ; $80BD
DAC_87_Setup:                                                  ; Offset_0x0F0054
		dc.b	$04
		dc.w	(((DAC_87_Size>>$08)|(DAC_87_Size<<$08))&$FFFF)         ; $0740
		dc.w	(((DAC_87_Data_Ptr>>$08)|(DAC_87_Data_Ptr<<$08))&$FFFF) ; $B8D8
DAC_88_Setup:                                                  ; Offset_0x0F0059
		dc.b	$06
		dc.w	(((DAC_88_Size>>$08)|(DAC_88_Size<<$08))&$FFFF)         ; $1250
		dc.w	(((DAC_88_Data_Ptr>>$08)|(DAC_88_Data_Ptr<<$08))&$FFFF) ; $9FED
DAC_89_Setup:                                                  ; Offset_0x0F005E
		dc.b	$0A
		dc.w	(((DAC_89_Size>>$08)|(DAC_89_Size<<$08))&$FFFF)         ; $0A20
		dc.w	(((DAC_89_Data_Ptr>>$08)|(DAC_89_Data_Ptr<<$08))&$FFFF) ; $C528
DAC_8A_Setup:                                                  ; Offset_0x0F0063
		dc.b	$14
		dc.w	(((DAC_8A_To_8B_Size>>$08)|(DAC_8A_To_8B_Size<<$08))&$FFFF)         ; $0160
		dc.w	(((DAC_8A_To_8B_Data_Ptr>>$08)|(DAC_8A_To_8B_Data_Ptr<<$08))&$FFFF) ; $B23D
DAC_8B_Setup:                                                  ; Offset_0x0F0068
		dc.b	$1B
		dc.w	(((DAC_8A_To_8B_Size>>$08)|(DAC_8A_To_8B_Size<<$08))&$FFFF)         ; $0160
		dc.w	(((DAC_8A_To_8B_Data_Ptr>>$08)|(DAC_8A_To_8B_Data_Ptr<<$08))&$FFFF) ; $B23D
DAC_8C_Setup:                                                  ; Offset_0x0F006D
		dc.b	$08
		dc.w	(((DAC_8C_Size>>$08)|(DAC_8C_Size<<$08))&$FFFF)         ; $006B
		dc.w	(((DAC_8C_Data_Ptr>>$08)|(DAC_8C_Data_Ptr<<$08))&$FFFF) ; $B39D
DAC_8D_Setup:                                                  ; Offset_0x0F0072
		dc.b	$0B
		dc.w	(((DAC_8D_To_8E_Size>>$08)|(DAC_8D_To_8E_Size<<$08))&$FFFF)         ; $04D0
		dc.w	(((DAC_8D_To_8E_Data_Ptr>>$08)|(DAC_8D_To_8E_Data_Ptr<<$08))&$FFFF) ; $B408
DAC_8E_Setup:                                                  ; Offset_0x0F0077
		dc.b	$11
		dc.w	(((DAC_8D_To_8E_Size>>$08)|(DAC_8D_To_8E_Size<<$08))&$FFFF)         ; $04D0
		dc.w	(((DAC_8D_To_8E_Data_Ptr>>$08)|(DAC_8D_To_8E_Data_Ptr<<$08))&$FFFF) ; $B408
DAC_8F_Setup:                                                  ; Offset_0x0F007C
		dc.b	$08
		dc.w	(((DAC_8F_Size>>$08)|(DAC_8F_Size<<$08))&$FFFF)         ; $0510
		dc.w	(((DAC_8F_Data_Ptr>>$08)|(DAC_8F_Data_Ptr<<$08))&$FFFF) ; $C018
DAC_90_Setup:                                                  ; Offset_0x0F0081
		dc.b	$03
		dc.w	(((DAC_90_To_93_Size>>$08)|(DAC_90_To_93_Size<<$08))&$FFFF)         ; $0650
		dc.w	(((DAC_90_To_93_Data_Ptr>>$08)|(DAC_90_To_93_Data_Ptr<<$08))&$FFFF) ; $999D
DAC_91_Setup:                                                  ; Offset_0x0F0086
		dc.b	$07
		dc.w	(((DAC_90_To_93_Size>>$08)|(DAC_90_To_93_Size<<$08))&$FFFF)         ; $0650
		dc.w	(((DAC_90_To_93_Data_Ptr>>$08)|(DAC_90_To_93_Data_Ptr<<$08))&$FFFF) ; $999D
DAC_92_Setup:                                                  ; Offset_0x0F008B
		dc.b	$0A
		dc.w	(((DAC_90_To_93_Size>>$08)|(DAC_90_To_93_Size<<$08))&$FFFF)         ; $0650
		dc.w	(((DAC_90_To_93_Data_Ptr>>$08)|(DAC_90_To_93_Data_Ptr<<$08))&$FFFF) ; $999D
DAC_93_Setup:                                                  ; Offset_0x0F0090
		dc.b	$0E
		dc.w	(((DAC_90_To_93_Size>>$08)|(DAC_90_To_93_Size<<$08))&$FFFF)         ; $0650
		dc.w	(((DAC_90_To_93_Data_Ptr>>$08)|(DAC_90_To_93_Data_Ptr<<$08))&$FFFF) ; $999D
DAC_94_Setup:                                                  ; Offset_0x0F0095
		dc.b	$06
		dc.w	(((DAC_94_To_97_Size>>$08)|(DAC_94_To_97_Size<<$08))&$FFFF)         ; $0990
		dc.w	(((DAC_94_To_97_Data_Ptr>>$08)|(DAC_94_To_97_Data_Ptr<<$08))&$FFFF) ; $900D
DAC_95_Setup:                                                  ; Offset_0x0F009A
		dc.b	$0A
		dc.w	(((DAC_94_To_97_Size>>$08)|(DAC_94_To_97_Size<<$08))&$FFFF)         ; $0990
		dc.w	(((DAC_94_To_97_Data_Ptr>>$08)|(DAC_94_To_97_Data_Ptr<<$08))&$FFFF) ; $900D
DAC_96_Setup:                                                  ; Offset_0x0F009F
		dc.b	$0D
		dc.w	(((DAC_94_To_97_Size>>$08)|(DAC_94_To_97_Size<<$08))&$FFFF)         ; $0990
		dc.w	(((DAC_94_To_97_Data_Ptr>>$08)|(DAC_94_To_97_Data_Ptr<<$08))&$FFFF) ; $900D
DAC_97_Setup:                                                  ; Offset_0x0F00A4
		dc.b	$12
		dc.w	(((DAC_94_To_97_Size>>$08)|(DAC_94_To_97_Size<<$08))&$FFFF)         ; $0990
		dc.w	(((DAC_94_To_97_Data_Ptr>>$08)|(DAC_94_To_97_Data_Ptr<<$08))&$FFFF) ; $900D
DAC_98_Setup:                                                  ; Offset_0x0F00A9
		dc.b	$0B
		dc.w	(((DAC_98_To_9A_Size>>$08)|(DAC_98_To_9A_Size<<$08))&$FFFF)         ; $0D1F
		dc.w	(((DAC_98_To_9A_Data_Ptr>>$08)|(DAC_98_To_9A_Data_Ptr<<$08))&$FFFF) ; $CF48
DAC_99_Setup:                                                  ; Offset_0x0F00AE
		dc.b	$13
		dc.w	(((DAC_98_To_9A_Size>>$08)|(DAC_98_To_9A_Size<<$08))&$FFFF)         ; $0D1F
		dc.w	(((DAC_98_To_9A_Data_Ptr>>$08)|(DAC_98_To_9A_Data_Ptr<<$08))&$FFFF) ; $CF48
DAC_9A_Setup:                                                  ; Offset_0x0F00B3
		dc.b	$16
		dc.w	(((DAC_98_To_9A_Size>>$08)|(DAC_98_To_9A_Size<<$08))&$FFFF)         ; $0D1F
		dc.w	(((DAC_98_To_9A_Data_Ptr>>$08)|(DAC_98_To_9A_Data_Ptr<<$08))&$FFFF) ; $CF48
DAC_9B_Setup:                                                  ; Offset_0x0F00B8
		dc.b	$12
		dc.w	(((DAC_9B_Size>>$08)|(DAC_9B_Size<<$08))&$FFFF)         ; $169D
		dc.w	(((DAC_9B_Data_Ptr>>$08)|(DAC_9B_Data_Ptr<<$08))&$FFFF) ; $DC67
;-------------------------------------------------------------------------------
DAC_86_Data:                                                   ; Offset_0x0F00BD
		binclude	"sound\DAC\dac_86.bin"
DAC_86_Data_End:
;-------------------------------------------------------------------------------
DAC_81_Data:                                                   ; Offset_0x0F03BD
		binclude	"sound\DAC\dac_81.bin"
DAC_81_Data_End:
;-------------------------------------------------------------------------------
DAC_82_To_85_Data:                                             ; Offset_0x0F0B4D
		binclude	"sound\DAC\dac82-85.bin"
DAC_82_To_85_Data_End:
;-------------------------------------------------------------------------------
DAC_94_To_97_Data:                                             ; Offset_0x0F100D
		binclude	"sound\DAC\dac94-97.bin"
DAC_94_To_97_Data_End:
;-------------------------------------------------------------------------------
DAC_90_To_93_Data:                                             ; Offset_0x0F199D
		binclude	"sound\DAC\dac90-93.bin"
DAC_90_To_93_Data_End:
;-------------------------------------------------------------------------------
DAC_88_Data:                                                   ; Offset_0x0F1FED
		binclude	"sound\DAC\dac_88.bin"
DAC_88_Data_End:
;-------------------------------------------------------------------------------
DAC_8A_To_8B_Data:                                             ; Offset_0x0F323D
		binclude	"sound\DAC\dac8A-8B.bin"
DAC_8A_To_8B_Data_End:
;-------------------------------------------------------------------------------
DAC_8C_Data:                                                   ; Offset_0x0F339D
		binclude	"sound\DAC\dac_8C.bin"
DAC_8C_Data_End:
;-------------------------------------------------------------------------------
DAC_8D_To_8E_Data:                                             ; Offset_0x0F3408
		binclude	"sound\DAC\dac8D-8E.bin"
DAC_8D_To_8E_Data_End:
;-------------------------------------------------------------------------------
DAC_87_Data:                                                   ; Offset_0x0F38D8
		binclude	"sound\DAC\dac_87.bin"
DAC_87_Data_End:
;-------------------------------------------------------------------------------
DAC_8F_Data:                                                   ; Offset_0x0F4018
		binclude	"sound\DAC\dac_8F.bin"
DAC_8F_Data_End:
;-------------------------------------------------------------------------------
DAC_89_Data:                                                   ; Offset_0x0F4528
		binclude	"sound\DAC\dac_89.bin"
DAC_89_Data_End:
;-------------------------------------------------------------------------------
DAC_98_To_9A_Data:                                             ; Offset_0x0F4F48
		binclude	"sound\DAC\dac98-9A.bin"
DAC_98_To_9A_Data_End:
;-------------------------------------------------------------------------------
DAC_9B_Data:                                                   ; Offset_0x0F5C67
		binclude	"sound\DAC\dac_9B.bin"
DAC_9B_Data_End:
	finishBank
;-------------------------------------------------------------------------------
SEGABank:	startBank
SEGA_PCM_Data:                                                 ; Offset_0x0F8000
		binclude	"sound\sega.pcm"
SEGA_PCM_Data_End:
	finishBank
;===============================================================================
; Mapeamento dos Sprites do Sonic
; ->>>
;===============================================================================
; Offset_100000:
Sonic_Mappings:		include	"data/mappings/Sonic.asm"

; Offset_0x101622:
Sonic_Dyn_Script:	include	"data/mappings/Sonic DPLC.asm"

;===============================================================================
; Script para carga dos Sprites do Sonic
; <<<-
;===============================================================================
Miles_Mappings:                                                ; Offset_0x101FF4
		dc.w	Offset_0x10210A-Miles_Mappings
		dc.w	Offset_0x10210C-Miles_Mappings
		dc.w	Offset_0x10211A-Miles_Mappings
		dc.w	Offset_0x102128-Miles_Mappings
		dc.w	Offset_0x102136-Miles_Mappings
		dc.w	Offset_0x102144-Miles_Mappings
		dc.w	Offset_0x10214C-Miles_Mappings
		dc.w	Offset_0x102154-Miles_Mappings
		dc.w	Offset_0x102162-Miles_Mappings
		dc.w	Offset_0x102170-Miles_Mappings
		dc.w	Offset_0x102178-Miles_Mappings
		dc.w	Offset_0x102180-Miles_Mappings
		dc.w	Offset_0x102188-Miles_Mappings
		dc.w	Offset_0x102190-Miles_Mappings
		dc.w	Offset_0x102198-Miles_Mappings
		dc.w	Offset_0x1021AC-Miles_Mappings
		dc.w	Offset_0x1021C0-Miles_Mappings
		dc.w	Offset_0x1021D4-Miles_Mappings
		dc.w	Offset_0x1021E8-Miles_Mappings
		dc.w	Offset_0x1021FC-Miles_Mappings
		dc.w	Offset_0x102210-Miles_Mappings
		dc.w	Offset_0x102224-Miles_Mappings
		dc.w	Offset_0x102238-Miles_Mappings
		dc.w	Offset_0x10224C-Miles_Mappings
		dc.w	Offset_0x102260-Miles_Mappings
		dc.w	Offset_0x102274-Miles_Mappings
		dc.w	Offset_0x102288-Miles_Mappings
		dc.w	Offset_0x10229C-Miles_Mappings
		dc.w	Offset_0x1022B0-Miles_Mappings
		dc.w	Offset_0x1022C4-Miles_Mappings
		dc.w	Offset_0x1022D8-Miles_Mappings
		dc.w	Offset_0x1022EC-Miles_Mappings
		dc.w	Offset_0x102300-Miles_Mappings
		dc.w	Offset_0x102314-Miles_Mappings
		dc.w	Offset_0x102328-Miles_Mappings
		dc.w	Offset_0x10233C-Miles_Mappings
		dc.w	Offset_0x102350-Miles_Mappings
		dc.w	Offset_0x102364-Miles_Mappings
		dc.w	Offset_0x102378-Miles_Mappings
		dc.w	Offset_0x102386-Miles_Mappings
		dc.w	Offset_0x10239A-Miles_Mappings
		dc.w	Offset_0x1023A8-Miles_Mappings
		dc.w	Offset_0x1023BC-Miles_Mappings
		dc.w	Offset_0x1023CA-Miles_Mappings
		dc.w	Offset_0x1023DE-Miles_Mappings
		dc.w	Offset_0x1023EC-Miles_Mappings
		dc.w	Offset_0x102400-Miles_Mappings
		dc.w	Offset_0x10240E-Miles_Mappings
		dc.w	Offset_0x10241C-Miles_Mappings
		dc.w	Offset_0x10242A-Miles_Mappings
		dc.w	Offset_0x102438-Miles_Mappings
		dc.w	Offset_0x102446-Miles_Mappings
		dc.w	Offset_0x102454-Miles_Mappings
		dc.w	Offset_0x102468-Miles_Mappings
		dc.w	Offset_0x10247C-Miles_Mappings
		dc.w	Offset_0x102490-Miles_Mappings
		dc.w	Offset_0x1024A4-Miles_Mappings
		dc.w	Offset_0x1024B8-Miles_Mappings
		dc.w	Offset_0x1024CC-Miles_Mappings
		dc.w	Offset_0x1024E0-Miles_Mappings
		dc.w	Offset_0x1024F4-Miles_Mappings
		dc.w	Offset_0x1024E0-Miles_Mappings
		dc.w	Offset_0x102508-Miles_Mappings
		dc.w	Offset_0x10251C-Miles_Mappings
		dc.w	Offset_0x102530-Miles_Mappings
		dc.w	Offset_0x102544-Miles_Mappings
		dc.w	Offset_0x102558-Miles_Mappings
		dc.w	Offset_0x10256C-Miles_Mappings
		dc.w	Offset_0x102580-Miles_Mappings
		dc.w	Offset_0x102594-Miles_Mappings
		dc.w	Offset_0x1025A8-Miles_Mappings
		dc.w	Offset_0x1025B0-Miles_Mappings
		dc.w	Offset_0x1025B8-Miles_Mappings
		dc.w	Offset_0x1025C0-Miles_Mappings
		dc.w	Offset_0x1025C8-Miles_Mappings
		dc.w	Offset_0x1025D0-Miles_Mappings
		dc.w	Offset_0x1025D8-Miles_Mappings
		dc.w	Offset_0x1025E0-Miles_Mappings
		dc.w	Offset_0x1025E8-Miles_Mappings
		dc.w	Offset_0x1025F0-Miles_Mappings
		dc.w	Offset_0x1025F8-Miles_Mappings
		dc.w	Offset_0x102600-Miles_Mappings
		dc.w	Offset_0x102608-Miles_Mappings
		dc.w	Offset_0x102610-Miles_Mappings
		dc.w	Offset_0x102618-Miles_Mappings
		dc.w	Offset_0x102620-Miles_Mappings
		dc.w	Offset_0x102628-Miles_Mappings
		dc.w	Offset_0x102630-Miles_Mappings
		dc.w	Offset_0x102638-Miles_Mappings
		dc.w	Offset_0x102640-Miles_Mappings
		dc.w	Offset_0x10264E-Miles_Mappings
		dc.w	Offset_0x10265C-Miles_Mappings
		dc.w	Offset_0x102664-Miles_Mappings
		dc.w	Offset_0x10266C-Miles_Mappings
		dc.w	Offset_0x102674-Miles_Mappings
		dc.w	Offset_0x102682-Miles_Mappings
		dc.w	Offset_0x102690-Miles_Mappings
		dc.w	Offset_0x102698-Miles_Mappings
		dc.w	Offset_0x1026A0-Miles_Mappings
		dc.w	Offset_0x1026A8-Miles_Mappings
		dc.w	Offset_0x1026B6-Miles_Mappings
		dc.w	Offset_0x1026C4-Miles_Mappings
		dc.w	Offset_0x1026D2-Miles_Mappings
		dc.w	Offset_0x1026E0-Miles_Mappings
		dc.w	Offset_0x1026EE-Miles_Mappings
		dc.w	Offset_0x1026FC-Miles_Mappings
		dc.w	Offset_0x10270A-Miles_Mappings
		dc.w	Offset_0x102718-Miles_Mappings
		dc.w	Offset_0x102720-Miles_Mappings
		dc.w	Offset_0x10272E-Miles_Mappings
		dc.w	Offset_0x10273C-Miles_Mappings
		dc.w	Offset_0x10274A-Miles_Mappings
		dc.w	Offset_0x102758-Miles_Mappings
		dc.w	Offset_0x102766-Miles_Mappings
		dc.w	Offset_0x102774-Miles_Mappings
		dc.w	Offset_0x102782-Miles_Mappings
		dc.w	Offset_0x102790-Miles_Mappings
		dc.w	Offset_0x102798-Miles_Mappings
		dc.w	Offset_0x1027A0-Miles_Mappings
		dc.w	Offset_0x1027AE-Miles_Mappings
		dc.w	Offset_0x1027B6-Miles_Mappings
		dc.w	Offset_0x1027BE-Miles_Mappings
		dc.w	Offset_0x1027C6-Miles_Mappings
		dc.w	Offset_0x1027CE-Miles_Mappings
		dc.w	Offset_0x1027D6-Miles_Mappings
		dc.w	Offset_0x1027DE-Miles_Mappings
		dc.w	Offset_0x1027E6-Miles_Mappings
		dc.w	Offset_0x1027EE-Miles_Mappings
		dc.w	Offset_0x1027FC-Miles_Mappings
		dc.w	Offset_0x10280A-Miles_Mappings
		dc.w	Offset_0x102812-Miles_Mappings
		dc.w	Offset_0x10281A-Miles_Mappings
		dc.w	Offset_0x102822-Miles_Mappings
		dc.w	Offset_0x10282A-Miles_Mappings
		dc.w	Offset_0x102838-Miles_Mappings
		dc.w	Offset_0x102846-Miles_Mappings
		dc.w	Offset_0x10284E-Miles_Mappings
		dc.w	Offset_0x102856-Miles_Mappings
		dc.w	Offset_0x10285E-Miles_Mappings
Offset_0x10210A:
		dc.w	$0000
Offset_0x10210C:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF4
		dc.w	$0009, $0006, $FFF4
Offset_0x10211A:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF4
		dc.w	$0009, $0006, $FFF4
Offset_0x102128:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF4
		dc.w	$0009, $0006, $FFF4
Offset_0x102136:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF4
		dc.w	$0009, $0006, $FFF4
Offset_0x102144:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x10214C:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x102154:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF4
		dc.w	$0009, $0006, $FFF4
Offset_0x102162:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF4
		dc.w	$0009, $0006, $FFF4
Offset_0x102170:
		dc.w	$0001
		dc.w	$F007, $0000, $FFEC
Offset_0x102178:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFE4
Offset_0x102180:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFE4
Offset_0x102188:
		dc.w	$0001
		dc.w	$0009, $0000, $FFE4
Offset_0x102190:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFE4
Offset_0x102198:
		dc.w	$0003
		dc.w	$EC09, $0000, $FFF0
		dc.w	$FC0D, $0006, $FFF0
		dc.w	$FC09, $000E, $FFE2
Offset_0x1021AC:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF3
		dc.w	$000D, $0006, $FFF0
		dc.w	$0009, $000E, $FFE4
Offset_0x1021C0:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF8
		dc.w	$0009, $0006, $FFF3
		dc.w	$FD09, $000C, $FFE4
Offset_0x1021D4:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF2
		dc.w	$0009, $0006, $FFF2
		dc.w	$FD09, $000C, $FFE6
Offset_0x1021E8:
		dc.w	$0003
		dc.w	$EC09, $0000, $FFF0
		dc.w	$FC0D, $0006, $FFF0
		dc.w	$FC09, $000E, $FFE2
Offset_0x1021FC:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF3
		dc.w	$000D, $0006, $FFF0
		dc.w	$0009, $000E, $FFE4
Offset_0x102210:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF8
		dc.w	$0009, $0006, $FFF1
		dc.w	$FD09, $000C, $FFE4
Offset_0x102224:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF2
		dc.w	$0009, $0006, $FFF2
		dc.w	$FD09, $000C, $FFE6
Offset_0x102238:
		dc.w	$0003
		dc.w	$E301, $0000, $FFF3
		dc.w	$F303, $0002, $FFEC
		dc.w	$F30B, $0006, $FFF4
Offset_0x10224C:
		dc.w	$0003
		dc.w	$E705, $0000, $FFF6
		dc.w	$F70B, $0004, $FFEE
		dc.w	$FE05, $0010, $0006
Offset_0x102260:
		dc.w	$0003
		dc.w	$E605, $0000, $FFF8
		dc.w	$F603, $0004, $FFEF
		dc.w	$F60B, $0008, $FFF7
Offset_0x102274:
		dc.w	$0003
		dc.w	$E301, $0000, $FFF7
		dc.w	$F30F, $0002, $FFEC
		dc.w	$FB01, $0012, $000C
Offset_0x102288:
		dc.w	$0003
		dc.w	$E301, $0000, $FFF3
		dc.w	$F303, $0002, $FFEC
		dc.w	$F30B, $0006, $FFF4
Offset_0x10229C:
		dc.w	$0003
		dc.w	$E705, $0000, $FFF6
		dc.w	$F70B, $0004, $FFEE
		dc.w	$FF05, $0010, $0006
Offset_0x1022B0:
		dc.w	$0003
		dc.w	$E605, $0000, $FFF8
		dc.w	$F603, $0004, $FFEF
		dc.w	$F60B, $0008, $FFF7
Offset_0x1022C4:
		dc.w	$0003
		dc.w	$E301, $0000, $FFF7
		dc.w	$F30F, $0002, $FFEC
		dc.w	$0301, $0012, $000C
Offset_0x1022D8:
		dc.w	$0003
		dc.w	$F007, $0000, $FFEC
		dc.w	$F007, $0008, $FFFC
		dc.w	$0607, $0010, $FFFC
Offset_0x1022EC:
		dc.w	$0003
		dc.w	$F007, $0000, $FFF0
		dc.w	$F007, $0008, $0000
		dc.w	$0407, $0010, $0000
Offset_0x102300:
		dc.w	$0003
		dc.w	$F007, $0000, $FFF0
		dc.w	$F007, $0008, $0000
		dc.w	$0407, $0010, $FFFD
Offset_0x102314:
		dc.w	$0003
		dc.w	$F007, $0000, $FFF0
		dc.w	$F007, $0008, $0000
		dc.w	$0407, $0010, $FFFD
Offset_0x102328:
		dc.w	$0003
		dc.w	$F007, $0000, $FFEC
		dc.w	$F007, $0008, $FFFC
		dc.w	$0607, $0010, $FFFC
Offset_0x10233C:
		dc.w	$0003
		dc.w	$F007, $0000, $FFF0
		dc.w	$F007, $0008, $0000
		dc.w	$0407, $0010, $0000
Offset_0x102350:
		dc.w	$0003
		dc.w	$F007, $0000, $FFF0
		dc.w	$F007, $0008, $0000
		dc.w	$0407, $0010, $FFFD
Offset_0x102364:
		dc.w	$0003
		dc.w	$F007, $0000, $FFF0
		dc.w	$F007, $0008, $0000
		dc.w	$0407, $0010, $FFFD
Offset_0x102378:
		dc.w	$0002
		dc.w	$0401, $0000, $FFEB
		dc.w	$F40F, $0002, $FFF3
Offset_0x102386:
		dc.w	$0003
		dc.w	$E205, $0000, $FFF8
		dc.w	$FA01, $0004, $FFF0
		dc.w	$F20F, $0006, $FFF8
Offset_0x10239A:
		dc.w	$0002
		dc.w	$F901, $0000, $FFEC
		dc.w	$F10F, $0002, $FFF4
Offset_0x1023A8:
		dc.w	$0003
		dc.w	$FC01, $0000, $FFEF
		dc.w	$E501, $0002, $FFFF
		dc.w	$F50F, $0004, $FFF7
Offset_0x1023BC:
		dc.w	$0002
		dc.w	$0401, $0000, $FFEB
		dc.w	$F40F, $0002, $FFF3
Offset_0x1023CA:
		dc.w	$0003
		dc.w	$E201, $0000, $0000
		dc.w	$FA01, $0002, $FFF0
		dc.w	$F20F, $0004, $FFF8
Offset_0x1023DE:
		dc.w	$0002
		dc.w	$F901, $0000, $FFEC
		dc.w	$F10F, $0002, $FFF4
Offset_0x1023EC:
		dc.w	$0003
		dc.w	$E401, $0000, $FFFF
		dc.w	$FC01, $0002, $FFEF
		dc.w	$F40F, $0004, $FFF7
Offset_0x102400:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFF0
		dc.w	$F007, $0010, $FFEA
Offset_0x10240E:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFF0
		dc.w	$F805, $0010, $FFEA
Offset_0x10241C:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFF0
		dc.w	$F805, $0010, $FFEA
Offset_0x10242A:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFF0
		dc.w	$F805, $1010, $FFEA
Offset_0x102438:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFF0
		dc.w	$F007, $0010, $FFEA
Offset_0x102446:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFF0
		dc.w	$F007, $1810, $FFE8
Offset_0x102454:
		dc.w	$0003
		dc.w	$E401, $0000, $FFFA
		dc.w	$F40B, $0002, $FFF0
		dc.w	$FE0B, $000E, $FFE8
Offset_0x102468:
		dc.w	$0003
		dc.w	$E405, $0000, $FFF8
		dc.w	$F40B, $0004, $FFF0
		dc.w	$0405, $0010, $FFEF
Offset_0x10247C:
		dc.w	$0003
		dc.w	$E401, $0000, $FFFA
		dc.w	$F40B, $0002, $FFF0
		dc.w	$0405, $000E, $FFEF
Offset_0x102490:
		dc.w	$0003
		dc.w	$E405, $0000, $FFF8
		dc.w	$F40B, $0004, $FFF0
		dc.w	$0405, $0010, $FFEF
Offset_0x1024A4:
		dc.w	$0003
		dc.w	$E401, $0000, $FFFA
		dc.w	$F40B, $0002, $FFF0
		dc.w	$FC0B, $000E, $FFEA
Offset_0x1024B8:
		dc.w	$0003
		dc.w	$E405, $0000, $FFF8
		dc.w	$F40B, $0004, $FFF0
		dc.w	$F70B, $1810, $FFEA
Offset_0x1024CC:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF0
		dc.w	$000D, $0006, $FFF0
		dc.w	$060D, $000E, $FFF0
Offset_0x1024E0:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF0
		dc.w	$000D, $0006, $FFF0
		dc.w	$0605, $000E, $FFF8
Offset_0x1024F4:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF0
		dc.w	$000D, $0006, $FFF0
		dc.w	$0605, $000E, $FFF8
Offset_0x102508:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF0
		dc.w	$000D, $0006, $FFF0
		dc.w	$060D, $000E, $FFF0
Offset_0x10251C:
		dc.w	$0003
		dc.w	$F009, $0000, $FFF0
		dc.w	$000D, $0006, $FFF0
		dc.w	$080D, $180E, $FFF0
Offset_0x102530:
		dc.w	$0003
		dc.w	$F80B, $0000, $FFEC
		dc.w	$F805, $000C, $0004
		dc.w	$FE0B, $0810, $0000
Offset_0x102544:
		dc.w	$0003
		dc.w	$F80B, $0000, $FFEC
		dc.w	$F805, $000C, $0004
		dc.w	$0105, $0810, $0004
Offset_0x102558:
		dc.w	$0003
		dc.w	$F80B, $0000, $FFEC
		dc.w	$F805, $000C, $0004
		dc.w	$0105, $0810, $0004
Offset_0x10256C:
		dc.w	$0003
		dc.w	$F80B, $0000, $FFEC
		dc.w	$F805, $000C, $0004
		dc.w	$0105, $0810, $0004
Offset_0x102580:
		dc.w	$0003
		dc.w	$F80B, $0000, $FFEC
		dc.w	$F805, $000C, $0004
		dc.w	$FC0B, $0810, $FFFE
Offset_0x102594:
		dc.w	$0003
		dc.w	$F80B, $0000, $FFEC
		dc.w	$F805, $000C, $0004
		dc.w	$F70B, $1010, $FFFF
Offset_0x1025A8:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x1025B0:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x1025B8:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x1025C0:
		dc.w	$0001
		dc.w	$F809, $0000, $FFDC
Offset_0x1025C8:
		dc.w	$0001
		dc.w	$F809, $0000, $FFDC
Offset_0x1025D0:
		dc.w	$0001
		dc.w	$F809, $0000, $FFDC
Offset_0x1025D8:
		dc.w	$0001
		dc.w	$F809, $0000, $FFDC
Offset_0x1025E0:
		dc.w	$0001
		dc.w	$0709, $0000, $FFE1
Offset_0x1025E8:
		dc.w	$0001
		dc.w	$0709, $0000, $FFE1
Offset_0x1025F0:
		dc.w	$0001
		dc.w	$0709, $0000, $FFE1
Offset_0x1025F8:
		dc.w	$0001
		dc.w	$0709, $0000, $FFE1
Offset_0x102600:
		dc.w	$0001
		dc.w	$0C07, $0000, $FFF8
Offset_0x102608:
		dc.w	$0001
		dc.w	$0C07, $0000, $FFF8
Offset_0x102610:
		dc.w	$0001
		dc.w	$0C07, $0000, $FFF8
Offset_0x102618:
		dc.w	$0001
		dc.w	$0C07, $0000, $FFF8
Offset_0x102620:
		dc.w	$0001
		dc.w	$0707, $0000, $0007
Offset_0x102628:
		dc.w	$0001
		dc.w	$0707, $0000, $0007
Offset_0x102630:
		dc.w	$0001
		dc.w	$0707, $0000, $0007
Offset_0x102638:
		dc.w	$0001
		dc.w	$0707, $0000, $0007
Offset_0x102640:
		dc.w	$0002
		dc.w	$E805, $0000, $FFF8
		dc.w	$F80B, $0004, $FFF0
Offset_0x10264E:
		dc.w	$0002
		dc.w	$E805, $0000, $FFF8
		dc.w	$F80B, $0004, $FFF0
Offset_0x10265C:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF9
Offset_0x102664:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x10266C:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x102674:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFF0
		dc.w	$E40D, $0010, $FFEA
Offset_0x102682:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFF0
		dc.w	$E40D, $0810, $FFEA
Offset_0x102690:
		dc.w	$0001
		dc.w	$F40F, $0000, $FFF0
Offset_0x102698:
		dc.w	$0001
		dc.w	$F40F, $0000, $FFF0
Offset_0x1026A0:
		dc.w	$0001
		dc.w	$F40F, $0000, $FFF0
Offset_0x1026A8:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF8
		dc.w	$000D, $0006, $FFF0
Offset_0x1026B6:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF8
		dc.w	$0009, $0006, $FFF8
Offset_0x1026C4:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF8
		dc.w	$0009, $0006, $FFF8
Offset_0x1026D2:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF8
		dc.w	$0009, $0006, $FFF8
Offset_0x1026E0:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF0
		dc.w	$000D, $0006, $FFF0
Offset_0x1026EE:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF0
		dc.w	$000D, $0006, $FFF0
Offset_0x1026FC:
		dc.w	$0002
		dc.w	$F801, $0000, $FFE8
		dc.w	$F00B, $0002, $FFF0
Offset_0x10270A:
		dc.w	$0002
		dc.w	$F009, $0000, $FFF0
		dc.w	$000D, $0006, $FFE8
Offset_0x102718:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x102720:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFEC
		dc.w	$F003, $0010, $000C
Offset_0x10272E:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFEC
		dc.w	$F003, $0010, $000C
Offset_0x10273C:
		dc.w	$0002
		dc.w	$F805, $0000, $FFEC
		dc.w	$F00B, $0004, $FFFC
Offset_0x10274A:
		dc.w	$0002
		dc.w	$F007, $0000, $FFF0
		dc.w	$F007, $0800, $0000
Offset_0x102758:
		dc.w	$0002
		dc.w	$F805, $0800, $0004
		dc.w	$F00B, $0804, $FFEC
Offset_0x102766:
		dc.w	$0002
		dc.w	$F007, $0000, $FFF0
		dc.w	$F805, $0008, $0000
Offset_0x102774:
		dc.w	$0002
		dc.w	$F007, $0800, $0000
		dc.w	$F805, $0808, $FFF0
Offset_0x102782:
		dc.w	$0002
		dc.w	$F805, $0000, $FFEC
		dc.w	$F00B, $0004, $FFFC
Offset_0x102790:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x102798:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF1
Offset_0x1027A0:
		dc.w	$0002
		dc.w	$E405, $0000, $FFF8
		dc.w	$F40B, $0004, $FFF1
Offset_0x1027AE:
		dc.w	$0001
		dc.w	$F20B, $0000, $FFF2
Offset_0x1027B6:
		dc.w	$0001
		dc.w	$F40B, $0000, $FFF0
Offset_0x1027BE:
		dc.w	$0001
		dc.w	$F30B, $0000, $FFF2
Offset_0x1027C6:
		dc.w	$0001
		dc.w	$F20B, $0000, $FFF2
Offset_0x1027CE:
		dc.w	$0001
		dc.w	$F20B, $0000, $FFF2
Offset_0x1027D6:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF1
Offset_0x1027DE:
		dc.w	$0001
		dc.w	$ED0B, $0000, $FFF0
Offset_0x1027E6:
		dc.w	$0001
		dc.w	$EC0B, $0000, $FFF1
Offset_0x1027EE:
		dc.w	$0002
		dc.w	$F409, $0000, $FFF3
		dc.w	$0405, $0006, $FFF3
Offset_0x1027FC:
		dc.w	$0002
		dc.w	$F207, $0000, $FFF0
		dc.w	$EC03, $0008, $0000
Offset_0x10280A:
		dc.w	$0001
		dc.w	$F809, $0000, $FFE0
Offset_0x102812:
		dc.w	$0001
		dc.w	$F809, $0000, $FFE0
Offset_0x10281A:
		dc.w	$0001
		dc.w	$F809, $0000, $FFE0
Offset_0x102822:
		dc.w	$0001
		dc.w	$F809, $0000, $FFE0
Offset_0x10282A:
		dc.w	$0002
		dc.w	$E809, $0000, $FFF4
		dc.w	$F80D, $0006, $FFF4
Offset_0x102838:
		dc.w	$0002
		dc.w	$E809, $0000, $FFF4
		dc.w	$F80D, $0006, $FFF4
Offset_0x102846:
		dc.w	$0001
		dc.w	$FD09, $0000, $FFE3
Offset_0x10284E:
		dc.w	$0001
		dc.w	$FD09, $0000, $FFE3
Offset_0x102856:
		dc.w	$0001
		dc.w	$FD09, $0000, $FFE3
Offset_0x10285E:
		dc.w	$0001
		dc.w	$FD09, $0000, $FFE3
;===============================================================================
; Script para carga dos Sprites do Miles
; ->>>
;===============================================================================
Miles_Dyn_Script:                                              ; Offset_0x102866
		dc.w	Offset_0x10297C-Miles_Dyn_Script
		dc.w	Offset_0x10297E-Miles_Dyn_Script
		dc.w	Offset_0x102984-Miles_Dyn_Script
		dc.w	Offset_0x10298A-Miles_Dyn_Script
		dc.w	Offset_0x102990-Miles_Dyn_Script
		dc.w	Offset_0x102996-Miles_Dyn_Script
		dc.w	Offset_0x10299A-Miles_Dyn_Script
		dc.w	Offset_0x10299E-Miles_Dyn_Script
		dc.w	Offset_0x1029A4-Miles_Dyn_Script
		dc.w	Offset_0x1029AA-Miles_Dyn_Script
		dc.w	Offset_0x1029AE-Miles_Dyn_Script
		dc.w	Offset_0x1029B2-Miles_Dyn_Script
		dc.w	Offset_0x1029B6-Miles_Dyn_Script
		dc.w	Offset_0x1029BA-Miles_Dyn_Script
		dc.w	Offset_0x1029BE-Miles_Dyn_Script
		dc.w	Offset_0x1029C6-Miles_Dyn_Script
		dc.w	Offset_0x1029CE-Miles_Dyn_Script
		dc.w	Offset_0x1029D6-Miles_Dyn_Script
		dc.w	Offset_0x1029DE-Miles_Dyn_Script
		dc.w	Offset_0x1029E6-Miles_Dyn_Script
		dc.w	Offset_0x1029EE-Miles_Dyn_Script
		dc.w	Offset_0x1029F6-Miles_Dyn_Script
		dc.w	Offset_0x1029FE-Miles_Dyn_Script
		dc.w	Offset_0x102A06-Miles_Dyn_Script
		dc.w	Offset_0x102A0E-Miles_Dyn_Script
		dc.w	Offset_0x102A16-Miles_Dyn_Script
		dc.w	Offset_0x102A1E-Miles_Dyn_Script
		dc.w	Offset_0x102A26-Miles_Dyn_Script
		dc.w	Offset_0x102A2E-Miles_Dyn_Script
		dc.w	Offset_0x102A36-Miles_Dyn_Script
		dc.w	Offset_0x102A3E-Miles_Dyn_Script
		dc.w	Offset_0x102A46-Miles_Dyn_Script
		dc.w	Offset_0x102A4E-Miles_Dyn_Script
		dc.w	Offset_0x102A56-Miles_Dyn_Script
		dc.w	Offset_0x102A5E-Miles_Dyn_Script
		dc.w	Offset_0x102A66-Miles_Dyn_Script
		dc.w	Offset_0x102A6E-Miles_Dyn_Script
		dc.w	Offset_0x102A76-Miles_Dyn_Script
		dc.w	Offset_0x102A7E-Miles_Dyn_Script
		dc.w	Offset_0x102A84-Miles_Dyn_Script
		dc.w	Offset_0x102A8C-Miles_Dyn_Script
		dc.w	Offset_0x102A92-Miles_Dyn_Script
		dc.w	Offset_0x102A9A-Miles_Dyn_Script
		dc.w	Offset_0x102AA0-Miles_Dyn_Script
		dc.w	Offset_0x102AA8-Miles_Dyn_Script
		dc.w	Offset_0x102AAE-Miles_Dyn_Script
		dc.w	Offset_0x102AB6-Miles_Dyn_Script
		dc.w	Offset_0x102ABC-Miles_Dyn_Script
		dc.w	Offset_0x102AC2-Miles_Dyn_Script
		dc.w	Offset_0x102ABC-Miles_Dyn_Script
		dc.w	Offset_0x102AC8-Miles_Dyn_Script
		dc.w	Offset_0x102ACE-Miles_Dyn_Script
		dc.w	Offset_0x102AD4-Miles_Dyn_Script
		dc.w	Offset_0x102ADC-Miles_Dyn_Script
		dc.w	Offset_0x102AE4-Miles_Dyn_Script
		dc.w	Offset_0x102AEC-Miles_Dyn_Script
		dc.w	Offset_0x102AF4-Miles_Dyn_Script
		dc.w	Offset_0x102AFC-Miles_Dyn_Script
		dc.w	Offset_0x102B04-Miles_Dyn_Script
		dc.w	Offset_0x102B0C-Miles_Dyn_Script
		dc.w	Offset_0x102B14-Miles_Dyn_Script
		dc.w	Offset_0x102B0C-Miles_Dyn_Script
		dc.w	Offset_0x102B1C-Miles_Dyn_Script
		dc.w	Offset_0x102B24-Miles_Dyn_Script
		dc.w	Offset_0x102B2C-Miles_Dyn_Script
		dc.w	Offset_0x102B34-Miles_Dyn_Script
		dc.w	Offset_0x102B3C-Miles_Dyn_Script
		dc.w	Offset_0x102B44-Miles_Dyn_Script
		dc.w	Offset_0x102B4C-Miles_Dyn_Script
		dc.w	Offset_0x102B54-Miles_Dyn_Script
		dc.w	Offset_0x102B5C-Miles_Dyn_Script
		dc.w	Offset_0x102B60-Miles_Dyn_Script
		dc.w	Offset_0x102B64-Miles_Dyn_Script
		dc.w	Offset_0x102B68-Miles_Dyn_Script
		dc.w	Offset_0x102B6C-Miles_Dyn_Script
		dc.w	Offset_0x102B70-Miles_Dyn_Script
		dc.w	Offset_0x102B74-Miles_Dyn_Script
		dc.w	Offset_0x102B78-Miles_Dyn_Script
		dc.w	Offset_0x102B7C-Miles_Dyn_Script
		dc.w	Offset_0x102B80-Miles_Dyn_Script
		dc.w	Offset_0x102B84-Miles_Dyn_Script
		dc.w	Offset_0x102B88-Miles_Dyn_Script
		dc.w	Offset_0x102B8C-Miles_Dyn_Script
		dc.w	Offset_0x102B90-Miles_Dyn_Script
		dc.w	Offset_0x102B94-Miles_Dyn_Script
		dc.w	Offset_0x102B98-Miles_Dyn_Script
		dc.w	Offset_0x102B9C-Miles_Dyn_Script
		dc.w	Offset_0x102BA0-Miles_Dyn_Script
		dc.w	Offset_0x102BA4-Miles_Dyn_Script
		dc.w	Offset_0x102BA8-Miles_Dyn_Script
		dc.w	Offset_0x102BAE-Miles_Dyn_Script
		dc.w	Offset_0x102BB4-Miles_Dyn_Script
		dc.w	Offset_0x102BB8-Miles_Dyn_Script
		dc.w	Offset_0x102BBC-Miles_Dyn_Script
		dc.w	Offset_0x102BC0-Miles_Dyn_Script
		dc.w	Offset_0x102BC0-Miles_Dyn_Script
		dc.w	Offset_0x102BC6-Miles_Dyn_Script
		dc.w	Offset_0x102BCA-Miles_Dyn_Script
		dc.w	Offset_0x102BCE-Miles_Dyn_Script
		dc.w	Offset_0x102BD2-Miles_Dyn_Script
		dc.w	Offset_0x102BD8-Miles_Dyn_Script
		dc.w	Offset_0x102BDE-Miles_Dyn_Script
		dc.w	Offset_0x102BE4-Miles_Dyn_Script
		dc.w	Offset_0x102BEA-Miles_Dyn_Script
		dc.w	Offset_0x102BF0-Miles_Dyn_Script
		dc.w	Offset_0x102BF6-Miles_Dyn_Script
		dc.w	Offset_0x102BFC-Miles_Dyn_Script
		dc.w	Offset_0x102C02-Miles_Dyn_Script
		dc.w	Offset_0x102C06-Miles_Dyn_Script
		dc.w	Offset_0x102C0C-Miles_Dyn_Script
		dc.w	Offset_0x102C12-Miles_Dyn_Script
		dc.w	Offset_0x102C18-Miles_Dyn_Script
		dc.w	Offset_0x102C12-Miles_Dyn_Script
		dc.w	Offset_0x102C1E-Miles_Dyn_Script
		dc.w	Offset_0x102C1E-Miles_Dyn_Script
		dc.w	Offset_0x102C24-Miles_Dyn_Script
		dc.w	Offset_0x102C2A-Miles_Dyn_Script
		dc.w	Offset_0x102C2E-Miles_Dyn_Script
		dc.w	Offset_0x102C32-Miles_Dyn_Script
		dc.w	Offset_0x102C38-Miles_Dyn_Script
		dc.w	Offset_0x102C3C-Miles_Dyn_Script
		dc.w	Offset_0x102C40-Miles_Dyn_Script
		dc.w	Offset_0x102C44-Miles_Dyn_Script
		dc.w	Offset_0x102C48-Miles_Dyn_Script
		dc.w	Offset_0x102C4C-Miles_Dyn_Script
		dc.w	Offset_0x102C50-Miles_Dyn_Script
		dc.w	Offset_0x102C54-Miles_Dyn_Script
		dc.w	Offset_0x102C58-Miles_Dyn_Script
		dc.w	Offset_0x102C5E-Miles_Dyn_Script
		dc.w	Offset_0x102B68-Miles_Dyn_Script
		dc.w	Offset_0x102B6C-Miles_Dyn_Script
		dc.w	Offset_0x102B70-Miles_Dyn_Script
		dc.w	Offset_0x102B74-Miles_Dyn_Script
		dc.w	Offset_0x102C64-Miles_Dyn_Script
		dc.w	Offset_0x102C6A-Miles_Dyn_Script
		dc.w	Offset_0x102B68-Miles_Dyn_Script
		dc.w	Offset_0x102B6C-Miles_Dyn_Script
		dc.w	Offset_0x102B70-Miles_Dyn_Script
		dc.w	Offset_0x102B74-Miles_Dyn_Script
Offset_0x10297C:
		dc.w	$0000
Offset_0x10297E:
		dc.w	$0002
		dc.w	$5000, $5006
Offset_0x102984:
		dc.w	$0002
		dc.w	$500C, $5006
Offset_0x10298A:
		dc.w	$0002
		dc.w	$5012, $5006
Offset_0x102990:
		dc.w	$0002
		dc.w	$5018, $5006
Offset_0x102996:
		dc.w	$0001
		dc.w	$B01E
Offset_0x10299A:
		dc.w	$0001
		dc.w	$B02A
Offset_0x10299E:
		dc.w	$0002
		dc.w	$5036, $503C
Offset_0x1029A4:
		dc.w	$0002
		dc.w	$5036, $5042
Offset_0x1029AA:
		dc.w	$0001
		dc.w	$7048
Offset_0x1029AE:
		dc.w	$0001
		dc.w	$B050
Offset_0x1029B2:
		dc.w	$0001
		dc.w	$B05C
Offset_0x1029B6:
		dc.w	$0001
		dc.w	$5068
Offset_0x1029BA:
		dc.w	$0001
		dc.w	$B06E
Offset_0x1029BE:
		dc.w	$0003
		dc.w	$507A, $7080, $50CA
Offset_0x1029C6:
		dc.w	$0003
		dc.w	$5088, $708E, $50D0
Offset_0x1029CE:
		dc.w	$0003
		dc.w	$5096, $509C, $50D6
Offset_0x1029D6:
		dc.w	$0003
		dc.w	$50A2, $50A8, $50DC
Offset_0x1029DE:
		dc.w	$0003
		dc.w	$507A, $70AE, $50CA
Offset_0x1029E6:
		dc.w	$0003
		dc.w	$5088, $70B6, $50D0
Offset_0x1029EE:
		dc.w	$0003
		dc.w	$5096, $50BE, $50D6
Offset_0x1029F6:
		dc.w	$0003
		dc.w	$50A2, $50C4, $50DC
Offset_0x1029FE:
		dc.w	$0003
		dc.w	$10E2, $30E4, $B0E8
Offset_0x102A06:
		dc.w	$0003
		dc.w	$30F4, $B0F8, $3104
Offset_0x102A0E:
		dc.w	$0003
		dc.w	$3108, $310C, $B110
Offset_0x102A16:
		dc.w	$0003
		dc.w	$111C, $F11E, $112E
Offset_0x102A1E:
		dc.w	$0003
		dc.w	$10E2, $30E4, $B130
Offset_0x102A26:
		dc.w	$0003
		dc.w	$30F4, $B13C, $3148
Offset_0x102A2E:
		dc.w	$0003
		dc.w	$3108, $310C, $B14C
Offset_0x102A36:
		dc.w	$0003
		dc.w	$111C, $F158, $1168
Offset_0x102A3E:
		dc.w	$0003
		dc.w	$716A, $7172, $71CA
Offset_0x102A46:
		dc.w	$0003
		dc.w	$717A, $7182, $71D2
Offset_0x102A4E:
		dc.w	$0003
		dc.w	$718A, $7192, $71DA
Offset_0x102A56:
		dc.w	$0003
		dc.w	$719A, $71A2, $75BE
Offset_0x102A5E:
		dc.w	$0003
		dc.w	$716A, $71AA, $71CA
Offset_0x102A66:
		dc.w	$0003
		dc.w	$717A, $71B2, $71D2
Offset_0x102A6E:
		dc.w	$0003
		dc.w	$718A, $71BA, $71DA
Offset_0x102A76:
		dc.w	$0003
		dc.w	$719A, $71C2, $75BE
Offset_0x102A7E:
		dc.w	$0002
		dc.w	$11EA, $F1EC
Offset_0x102A84:
		dc.w	$0003
		dc.w	$31FC, $1200, $F202
Offset_0x102A8C:
		dc.w	$0002
		dc.w	$1212, $F214
Offset_0x102A92:
		dc.w	$0003
		dc.w	$1224, $1226, $F228
Offset_0x102A9A:
		dc.w	$0002
		dc.w	$11EA, $F238
Offset_0x102AA0:
		dc.w	$0003
		dc.w	$1248, $1200, $F24A
Offset_0x102AA8:
		dc.w	$0002
		dc.w	$1212, $F25A
Offset_0x102AAE:
		dc.w	$0003
		dc.w	$126A, $1224, $F26C
Offset_0x102AB6:
		dc.w	$0002
		dc.w	$F27C, $729C
Offset_0x102ABC:
		dc.w	$0002
		dc.w	$F28C, $32A4
Offset_0x102AC2:
		dc.w	$0002
		dc.w	$F27C, $32A8
Offset_0x102AC8:
		dc.w	$0002
		dc.w	$F27C, $72AC
Offset_0x102ACE:
		dc.w	$0002
		dc.w	$F28C, $72AC
Offset_0x102AD4:
		dc.w	$0003
		dc.w	$12B4, $B2B6, $B2D2
Offset_0x102ADC:
		dc.w	$0003
		dc.w	$32C2, $B2C6, $32DE
Offset_0x102AE4:
		dc.w	$0003
		dc.w	$12B4, $B2B6, $32E2
Offset_0x102AEC:
		dc.w	$0003
		dc.w	$32C2, $B2C6, $32E6
Offset_0x102AF4:
		dc.w	$0003
		dc.w	$12B4, $B2B6, $B2EA
Offset_0x102AFC:
		dc.w	$0003
		dc.w	$32C2, $B2C6, $B2EA
Offset_0x102B04:
		dc.w	$0003
		dc.w	$52F6, $72FC, $7312
Offset_0x102B0C:
		dc.w	$0003
		dc.w	$5304, $730A, $331E
Offset_0x102B14:
		dc.w	$0003
		dc.w	$52F6, $72FC, $331A
Offset_0x102B1C:
		dc.w	$0003
		dc.w	$52F6, $72FC, $7322
Offset_0x102B24:
		dc.w	$0003
		dc.w	$5304, $730A, $7322
Offset_0x102B2C:
		dc.w	$0003
		dc.w	$B32A, $3336, $B2D2
Offset_0x102B34:
		dc.w	$0003
		dc.w	$B33A, $3346, $32DE
Offset_0x102B3C:
		dc.w	$0003
		dc.w	$B32A, $3336, $32E2
Offset_0x102B44:
		dc.w	$0003
		dc.w	$B33A, $3346, $32E6
Offset_0x102B4C:
		dc.w	$0003
		dc.w	$B32A, $3336, $B2EA
Offset_0x102B54:
		dc.w	$0003
		dc.w	$B33A, $3346, $B2EA
Offset_0x102B5C:
		dc.w	$0001
		dc.w	$F34A
Offset_0x102B60:
		dc.w	$0001
		dc.w	$F35A
Offset_0x102B64:
		dc.w	$0001
		dc.w	$F36A
Offset_0x102B68:
		dc.w	$0001
		dc.w	$50CA
Offset_0x102B6C:
		dc.w	$0001
		dc.w	$50D0
Offset_0x102B70:
		dc.w	$0001
		dc.w	$50D6
Offset_0x102B74:
		dc.w	$0001
		dc.w	$50DC
Offset_0x102B78:
		dc.w	$0001
		dc.w	$537A
Offset_0x102B7C:
		dc.w	$0001
		dc.w	$5380
Offset_0x102B80:
		dc.w	$0001
		dc.w	$5386
Offset_0x102B84:
		dc.w	$0001
		dc.w	$538C
Offset_0x102B88:
		dc.w	$0001
		dc.w	$71CA
Offset_0x102B8C:
		dc.w	$0001
		dc.w	$71D2
Offset_0x102B90:
		dc.w	$0001
		dc.w	$71DA
Offset_0x102B94:
		dc.w	$0001
		dc.w	$75BE
Offset_0x102B98:
		dc.w	$0001
		dc.w	$7392
Offset_0x102B9C:
		dc.w	$0001
		dc.w	$739A
Offset_0x102BA0:
		dc.w	$0001
		dc.w	$73A2
Offset_0x102BA4:
		dc.w	$0001
		dc.w	$73AA
Offset_0x102BA8:
		dc.w	$0002
		dc.w	$33B2, $B3B6
Offset_0x102BAE:
		dc.w	$0002
		dc.w	$33B2, $B3C2
Offset_0x102BB4:
		dc.w	$0001
		dc.w	$B3CE
Offset_0x102BB8:
		dc.w	$0001
		dc.w	$F3DA
Offset_0x102BBC:
		dc.w	$0001
		dc.w	$F3EA
Offset_0x102BC0:
		dc.w	$0002
		dc.w	$F3FA, $740A
Offset_0x102BC6:
		dc.w	$0001
		dc.w	$F412
Offset_0x102BCA:
		dc.w	$0001
		dc.w	$F422
Offset_0x102BCE:
		dc.w	$0001
		dc.w	$F432
Offset_0x102BD2:
		dc.w	$0002
		dc.w	$5442, $7448
Offset_0x102BD8:
		dc.w	$0002
		dc.w	$5442, $5450
Offset_0x102BDE:
		dc.w	$0002
		dc.w	$5442, $5456
Offset_0x102BE4:
		dc.w	$0002
		dc.w	$5442, $545C
Offset_0x102BEA:
		dc.w	$0002
		dc.w	$5462, $7468
Offset_0x102BF0:
		dc.w	$0002
		dc.w	$5470, $7476
Offset_0x102BF6:
		dc.w	$0002
		dc.w	$147E, $B480
Offset_0x102BFC:
		dc.w	$0002
		dc.w	$548C, $7492
Offset_0x102C02:
		dc.w	$0001
		dc.w	$F49A
Offset_0x102C06:
		dc.w	$0002
		dc.w	$F4AA, $34BA
Offset_0x102C0C:
		dc.w	$0002
		dc.w	$F4BE, $34CE
Offset_0x102C12:
		dc.w	$0002
		dc.w	$34D2, $B4D6
Offset_0x102C18:
		dc.w	$0002
		dc.w	$74E2, $74E2
Offset_0x102C1E:
		dc.w	$0002
		dc.w	$74EA, $34F2
Offset_0x102C24:
		dc.w	$0002
		dc.w	$34F6, $B4FA
Offset_0x102C2A:
		dc.w	$0001
		dc.w	$F506
Offset_0x102C2E:
		dc.w	$0001
		dc.w	$B516
Offset_0x102C32:
		dc.w	$0002
		dc.w	$3522, $B526
Offset_0x102C38:
		dc.w	$0001
		dc.w	$B532
Offset_0x102C3C:
		dc.w	$0001
		dc.w	$B53E
Offset_0x102C40:
		dc.w	$0001
		dc.w	$B54A
Offset_0x102C44:
		dc.w	$0001
		dc.w	$B556
Offset_0x102C48:
		dc.w	$0001
		dc.w	$B562
Offset_0x102C4C:
		dc.w	$0001
		dc.w	$B56E
Offset_0x102C50:
		dc.w	$0001
		dc.w	$B57A
Offset_0x102C54:
		dc.w	$0001
		dc.w	$B586
Offset_0x102C58:
		dc.w	$0002
		dc.w	$5592, $3598
Offset_0x102C5E:
		dc.w	$0002
		dc.w	$759C, $35A4
Offset_0x102C64:
		dc.w	$0002
		dc.w	$55A8, $75AE
Offset_0x102C6A:
		dc.w	$0002
		dc.w	$55A8, $75B6
;===============================================================================
; Script para carga dos Sprites do Miles
; <<<-
;===============================================================================
Sonic_Mappings_2P:                                             ; Offset_0x102C70
		dc.w	Offset_0x102CC8-Sonic_Mappings_2P
		dc.w	Offset_0x102CCA-Sonic_Mappings_2P
		dc.w	Offset_0x102CD2-Sonic_Mappings_2P
		dc.w	Offset_0x102CDA-Sonic_Mappings_2P
		dc.w	Offset_0x102CE2-Sonic_Mappings_2P
		dc.w	Offset_0x102CEA-Sonic_Mappings_2P
		dc.w	Offset_0x102CF2-Sonic_Mappings_2P
		dc.w	Offset_0x102CFA-Sonic_Mappings_2P
		dc.w	Offset_0x102D02-Sonic_Mappings_2P
		dc.w	Offset_0x102D0A-Sonic_Mappings_2P
		dc.w	Offset_0x102D12-Sonic_Mappings_2P
		dc.w	Offset_0x102D1A-Sonic_Mappings_2P
		dc.w	Offset_0x102D22-Sonic_Mappings_2P
		dc.w	Offset_0x102D2A-Sonic_Mappings_2P
		dc.w	Offset_0x102D32-Sonic_Mappings_2P
		dc.w	Offset_0x102D3A-Sonic_Mappings_2P
		dc.w	Offset_0x102D42-Sonic_Mappings_2P
		dc.w	Offset_0x102D4A-Sonic_Mappings_2P
		dc.w	Offset_0x102D52-Sonic_Mappings_2P
		dc.w	Offset_0x102D5A-Sonic_Mappings_2P
		dc.w	Offset_0x102D62-Sonic_Mappings_2P
		dc.w	Offset_0x102D6A-Sonic_Mappings_2P
		dc.w	Offset_0x102D72-Sonic_Mappings_2P
		dc.w	Offset_0x102D7A-Sonic_Mappings_2P
		dc.w	Offset_0x102D82-Sonic_Mappings_2P
		dc.w	Offset_0x102D8A-Sonic_Mappings_2P
		dc.w	Offset_0x102D92-Sonic_Mappings_2P
		dc.w	Offset_0x102D9A-Sonic_Mappings_2P
		dc.w	Offset_0x102DA2-Sonic_Mappings_2P
		dc.w	Offset_0x102DAA-Sonic_Mappings_2P
		dc.w	Offset_0x102DB2-Sonic_Mappings_2P
		dc.w	Offset_0x102DBA-Sonic_Mappings_2P
		dc.w	Offset_0x102DC2-Sonic_Mappings_2P
		dc.w	Offset_0x102DCA-Sonic_Mappings_2P
		dc.w	Offset_0x102DD2-Sonic_Mappings_2P
		dc.w	Offset_0x102DDA-Sonic_Mappings_2P
		dc.w	Offset_0x102DE2-Sonic_Mappings_2P
		dc.w	Offset_0x102DEA-Sonic_Mappings_2P
		dc.w	Offset_0x102DF2-Sonic_Mappings_2P
		dc.w	Offset_0x102DF2-Sonic_Mappings_2P
		dc.w	Offset_0x102DFA-Sonic_Mappings_2P
		dc.w	Offset_0x102E02-Sonic_Mappings_2P
		dc.w	Offset_0x102E0A-Sonic_Mappings_2P
		dc.w	Offset_0x102E12-Sonic_Mappings_2P
Offset_0x102CC8:
		dc.w	$0000
Offset_0x102CCA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102CD2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102CDA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102CE2:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x102CEA:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x102CF2:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x102CFA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D02:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D0A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D12:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x102D1A:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x102D22:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x102D2A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D32:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D3A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D42:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D4A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D52:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D5A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D62:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D6A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D72:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D7A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D82:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D8A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D92:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102D9A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DA2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DAA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DB2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DBA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DC2:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x102DCA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DD2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DDA:
		dc.w	$0001
		dc.w	$FC09, $0000, $FFF4
Offset_0x102DE2:
		dc.w	$0001
		dc.w	$FC09, $0000, $FFF4
Offset_0x102DEA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DF2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102DFA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102E02:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102E0A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x102E12:
		dc.w	$0001
		dc.w	$FC09, $0000, $FFF4
;-------------------------------------------------------------------------------
Sonic_Dyn_Script_2P:                                           ; Offset_0x102E1A
		dc.w	Offset_0x102E72-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E74-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E78-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E7C-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E80-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E84-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E88-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E8C-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E90-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E94-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E98-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102E9C-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EA0-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EA4-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EA8-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EAC-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EB0-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EB4-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EB8-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EBC-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EC0-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EC4-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EC8-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102ECC-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102ED0-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102ED4-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102ED8-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EDC-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EE0-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EE4-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EE8-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EEC-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EF0-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EF4-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EF8-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102EFC-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102F00-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102F04-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102F08-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102F08-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102F0C-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102F10-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102F14-Sonic_Dyn_Script_2P
		dc.w	Offset_0x102F18-Sonic_Dyn_Script_2P
Offset_0x102E72:
		dc.w	$0000
Offset_0x102E74:
		dc.w	$0001
		dc.w	$8000
Offset_0x102E78:
		dc.w	$0001
		dc.w	$8009
Offset_0x102E7C:
		dc.w	$0001
		dc.w	$8012
Offset_0x102E80:
		dc.w	$0001
		dc.w	$B01B
Offset_0x102E84:
		dc.w	$0001
		dc.w	$B027
Offset_0x102E88:
		dc.w	$0001
		dc.w	$B033
Offset_0x102E8C:
		dc.w	$0001
		dc.w	$803F
Offset_0x102E90:
		dc.w	$0001
		dc.w	$8048
Offset_0x102E94:
		dc.w	$0001
		dc.w	$8051
Offset_0x102E98:
		dc.w	$0001
		dc.w	$B05A
Offset_0x102E9C:
		dc.w	$0001
		dc.w	$B066
Offset_0x102EA0:
		dc.w	$0001
		dc.w	$B072
Offset_0x102EA4:
		dc.w	$0001
		dc.w	$807E
Offset_0x102EA8:
		dc.w	$0001
		dc.w	$8087
Offset_0x102EAC:
		dc.w	$0001
		dc.w	$8090
Offset_0x102EB0:
		dc.w	$0001
		dc.w	$8099
Offset_0x102EB4:
		dc.w	$0001
		dc.w	$80A2
Offset_0x102EB8:
		dc.w	$0001
		dc.w	$80AB
Offset_0x102EBC:
		dc.w	$0001
		dc.w	$80B4
Offset_0x102EC0:
		dc.w	$0001
		dc.w	$80BD
Offset_0x102EC4:
		dc.w	$0001
		dc.w	$80C6
Offset_0x102EC8:
		dc.w	$0001
		dc.w	$80CF
Offset_0x102ECC:
		dc.w	$0001
		dc.w	$80D8
Offset_0x102ED0:
		dc.w	$0001
		dc.w	$80E1
Offset_0x102ED4:
		dc.w	$0001
		dc.w	$80EA
Offset_0x102ED8:
		dc.w	$0001
		dc.w	$80F3
Offset_0x102EDC:
		dc.w	$0001
		dc.w	$80FC
Offset_0x102EE0:
		dc.w	$0001
		dc.w	$8105
Offset_0x102EE4:
		dc.w	$0001
		dc.w	$810E
Offset_0x102EE8:
		dc.w	$0001
		dc.w	$8117
Offset_0x102EEC:
		dc.w	$0001
		dc.w	$8120
Offset_0x102EF0:
		dc.w	$0001
		dc.w	$B129
Offset_0x102EF4:
		dc.w	$0001
		dc.w	$8135
Offset_0x102EF8:
		dc.w	$0001
		dc.w	$813E
Offset_0x102EFC:
		dc.w	$0001
		dc.w	$5147
Offset_0x102F00:
		dc.w	$0001
		dc.w	$514D
Offset_0x102F04:
		dc.w	$0001
		dc.w	$8153
Offset_0x102F08:
		dc.w	$0001
		dc.w	$815C
Offset_0x102F0C:
		dc.w	$0001
		dc.w	$8165
Offset_0x102F10:
		dc.w	$0001
		dc.w	$816E
Offset_0x102F14:
		dc.w	$0001
		dc.w	$8177
Offset_0x102F18:
		dc.w	$0001
		dc.w	$5180
;-------------------------------------------------------------------------------
Miles_2P_Mappings:                                             ; Offset_0x102F1C
		dc.w	Offset_0x102F78-Miles_2P_Mappings
		dc.w	Offset_0x102F7A-Miles_2P_Mappings
		dc.w	Offset_0x102F82-Miles_2P_Mappings
		dc.w	Offset_0x102F8A-Miles_2P_Mappings
		dc.w	Offset_0x102F92-Miles_2P_Mappings
		dc.w	Offset_0x102F9A-Miles_2P_Mappings
		dc.w	Offset_0x102FA2-Miles_2P_Mappings
		dc.w	Offset_0x102FAA-Miles_2P_Mappings
		dc.w	Offset_0x102FB2-Miles_2P_Mappings
		dc.w	Offset_0x102FBA-Miles_2P_Mappings
		dc.w	Offset_0x102FC2-Miles_2P_Mappings
		dc.w	Offset_0x102FCA-Miles_2P_Mappings
		dc.w	Offset_0x102FD2-Miles_2P_Mappings
		dc.w	Offset_0x102FDA-Miles_2P_Mappings
		dc.w	Offset_0x102FE2-Miles_2P_Mappings
		dc.w	Offset_0x102FEA-Miles_2P_Mappings
		dc.w	Offset_0x102FF2-Miles_2P_Mappings
		dc.w	Offset_0x102FFA-Miles_2P_Mappings
		dc.w	Offset_0x103002-Miles_2P_Mappings
		dc.w	Offset_0x10300A-Miles_2P_Mappings
		dc.w	Offset_0x103012-Miles_2P_Mappings
		dc.w	Offset_0x10301A-Miles_2P_Mappings
		dc.w	Offset_0x103022-Miles_2P_Mappings
		dc.w	Offset_0x10302A-Miles_2P_Mappings
		dc.w	Offset_0x103032-Miles_2P_Mappings
		dc.w	Offset_0x10303A-Miles_2P_Mappings
		dc.w	Offset_0x103042-Miles_2P_Mappings
		dc.w	Offset_0x10304A-Miles_2P_Mappings
		dc.w	Offset_0x103052-Miles_2P_Mappings
		dc.w	Offset_0x10305A-Miles_2P_Mappings
		dc.w	Offset_0x103062-Miles_2P_Mappings
		dc.w	Offset_0x10306A-Miles_2P_Mappings
		dc.w	Offset_0x103072-Miles_2P_Mappings
		dc.w	Offset_0x10307A-Miles_2P_Mappings
		dc.w	Offset_0x103082-Miles_2P_Mappings
		dc.w	Offset_0x10308A-Miles_2P_Mappings
		dc.w	Offset_0x103092-Miles_2P_Mappings
		dc.w	Offset_0x10309A-Miles_2P_Mappings
		dc.w	Offset_0x1030A2-Miles_2P_Mappings
		dc.w	Offset_0x1030A2-Miles_2P_Mappings
		dc.w	Offset_0x1030AA-Miles_2P_Mappings
		dc.w	Offset_0x1030B2-Miles_2P_Mappings
		dc.w	Offset_0x1030BA-Miles_2P_Mappings
		dc.w	Offset_0x1030C2-Miles_2P_Mappings
		dc.w	Offset_0x1030CA-Miles_2P_Mappings
		dc.w	Offset_0x1030D2-Miles_2P_Mappings
Offset_0x102F78:
		dc.w	$0000
Offset_0x102F7A:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x102F82:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF0
Offset_0x102F8A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF0
Offset_0x102F92:
		dc.w	$0001
		dc.w	$F60A, $0000, $FFF6
Offset_0x102F9A:
		dc.w	$0001
		dc.w	$F60A, $0000, $FFF6
Offset_0x102FA2:
		dc.w	$0001
		dc.w	$F60A, $0000, $FFF6
Offset_0x102FAA:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x102FB2:
		dc.w	$0001
		dc.w	$F80A, $0000, $FFF4
Offset_0x102FBA:
		dc.w	$0001
		dc.w	$F80A, $0000, $FFF4
Offset_0x102FC2:
		dc.w	$0001
		dc.w	$F20A, $0000, $FFF6
Offset_0x102FCA:
		dc.w	$0001
		dc.w	$F20A, $0000, $FFF6
Offset_0x102FD2:
		dc.w	$0001
		dc.w	$F20A, $0000, $FFF6
Offset_0x102FDA:
		dc.w	$0001
		dc.w	$F70A, $0000, $FFF4
Offset_0x102FE2:
		dc.w	$0001
		dc.w	$F70A, $0000, $FFF4
Offset_0x102FEA:
		dc.w	$0001
		dc.w	$F20B, $0000, $FFF2
Offset_0x102FF2:
		dc.w	$0001
		dc.w	$F606, $0000, $FFF8
Offset_0x102FFA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF7
Offset_0x103002:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF7
Offset_0x10300A:
		dc.w	$0001
		dc.w	$F60E, $0000, $FFF2
Offset_0x103012:
		dc.w	$0001
		dc.w	$F809, $0000, $FFF6
Offset_0x10301A:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x103022:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x10302A:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x103032:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x10303A:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x103042:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x10304A:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x103052:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x10305A:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x103062:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x10306A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103072:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10307A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103082:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10308A:
		dc.w	$0001
		dc.w	$FC0D, $0000, $FFEA
Offset_0x103092:
		dc.w	$0001
		dc.w	$FC0D, $0000, $FFEA
Offset_0x10309A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1030A2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1030AA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1030B2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1030BA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1030C2:
		dc.w	$0001
		dc.w	$FC05, $0000, $FFF8
Offset_0x1030CA:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1030D2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
;-------------------------------------------------------------------------------
Miles_Tails_2P_Mappings:                                       ; Offset_0x1030DA
		dc.w	Offset_0x1030FA-Miles_Tails_2P_Mappings
		dc.w	Offset_0x1030FC-Miles_Tails_2P_Mappings
		dc.w	Offset_0x103104-Miles_Tails_2P_Mappings
		dc.w	Offset_0x10310C-Miles_Tails_2P_Mappings
		dc.w	Offset_0x103114-Miles_Tails_2P_Mappings
		dc.w	Offset_0x10311C-Miles_Tails_2P_Mappings
		dc.w	Offset_0x103124-Miles_Tails_2P_Mappings
		dc.w	Offset_0x10312C-Miles_Tails_2P_Mappings
		dc.w	Offset_0x103134-Miles_Tails_2P_Mappings
		dc.w	Offset_0x10313C-Miles_Tails_2P_Mappings
		dc.w	Offset_0x103144-Miles_Tails_2P_Mappings
		dc.w	Offset_0x10314C-Miles_Tails_2P_Mappings
		dc.w	Offset_0x103154-Miles_Tails_2P_Mappings
		dc.w	Offset_0x10315C-Miles_Tails_2P_Mappings
		dc.w	Offset_0x103164-Miles_Tails_2P_Mappings
		dc.w	Offset_0x10316C-Miles_Tails_2P_Mappings
Offset_0x1030FA:
		dc.w	$0000
Offset_0x1030FC:
		dc.w	$0001
		dc.w	$FC05, $0000, $FFF0
Offset_0x103104:
		dc.w	$0001
		dc.w	$FC05, $0000, $FFF0
Offset_0x10310C:
		dc.w	$0001
		dc.w	$FC05, $0000, $FFF0
Offset_0x103114:
		dc.w	$0001
		dc.w	$FC04, $0000, $FFEC
Offset_0x10311C:
		dc.w	$0001
		dc.w	$FC04, $0000, $FFEC
Offset_0x103124:
		dc.w	$0001
		dc.w	$FC04, $0000, $FFEC
Offset_0x10312C:
		dc.w	$0001
		dc.w	$0405, $0000, $FFEC
Offset_0x103134:
		dc.w	$0001
		dc.w	$0405, $0000, $FFEC
Offset_0x10313C:
		dc.w	$0001
		dc.w	$0804, $0000, $FFEC
Offset_0x103144:
		dc.w	$0001
		dc.w	$0201, $0000, $FFFC
Offset_0x10314C:
		dc.w	$0001
		dc.w	$0201, $0000, $FFFC
Offset_0x103154:
		dc.w	$0001
		dc.w	$0201, $0000, $FFFC
Offset_0x10315C:
		dc.w	$0001
		dc.w	$0405, $0000, $0004
Offset_0x103164:
		dc.w	$0001
		dc.w	$0405, $0000, $0004
Offset_0x10316C:
		dc.w	$0001
		dc.w	$0401, $0000, $0008
;-------------------------------------------------------------------------------
Miles_Dyn_Script_2P:                                           ; Offset_0x103174
		dc.w	Offset_0x1031D0-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031D2-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031D6-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031DA-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031DE-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031E2-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031E6-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031EA-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031EE-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031F2-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031F6-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031FA-Miles_Dyn_Script_2P
		dc.w	Offset_0x1031FE-Miles_Dyn_Script_2P
		dc.w	Offset_0x103202-Miles_Dyn_Script_2P
		dc.w	Offset_0x103206-Miles_Dyn_Script_2P
		dc.w	Offset_0x10320A-Miles_Dyn_Script_2P
		dc.w	Offset_0x10320E-Miles_Dyn_Script_2P
		dc.w	Offset_0x103212-Miles_Dyn_Script_2P
		dc.w	Offset_0x103216-Miles_Dyn_Script_2P
		dc.w	Offset_0x10321A-Miles_Dyn_Script_2P
		dc.w	Offset_0x10321E-Miles_Dyn_Script_2P
		dc.w	Offset_0x103222-Miles_Dyn_Script_2P
		dc.w	Offset_0x103226-Miles_Dyn_Script_2P
		dc.w	Offset_0x10322A-Miles_Dyn_Script_2P
		dc.w	Offset_0x10322E-Miles_Dyn_Script_2P
		dc.w	Offset_0x103232-Miles_Dyn_Script_2P
		dc.w	Offset_0x103236-Miles_Dyn_Script_2P
		dc.w	Offset_0x10323A-Miles_Dyn_Script_2P
		dc.w	Offset_0x10323E-Miles_Dyn_Script_2P
		dc.w	Offset_0x103242-Miles_Dyn_Script_2P
		dc.w	Offset_0x103246-Miles_Dyn_Script_2P
		dc.w	Offset_0x10324A-Miles_Dyn_Script_2P
		dc.w	Offset_0x10324E-Miles_Dyn_Script_2P
		dc.w	Offset_0x103252-Miles_Dyn_Script_2P
		dc.w	Offset_0x103256-Miles_Dyn_Script_2P
		dc.w	Offset_0x10325A-Miles_Dyn_Script_2P
		dc.w	Offset_0x10325E-Miles_Dyn_Script_2P
		dc.w	Offset_0x103262-Miles_Dyn_Script_2P
		dc.w	Offset_0x103266-Miles_Dyn_Script_2P
		dc.w	Offset_0x103266-Miles_Dyn_Script_2P
		dc.w	Offset_0x10326A-Miles_Dyn_Script_2P
		dc.w	Offset_0x10326E-Miles_Dyn_Script_2P
		dc.w	Offset_0x103272-Miles_Dyn_Script_2P
		dc.w	Offset_0x103276-Miles_Dyn_Script_2P
		dc.w	Offset_0x10327A-Miles_Dyn_Script_2P
		dc.w	Offset_0x10327E-Miles_Dyn_Script_2P
Offset_0x1031D0:
		dc.w	$0000
Offset_0x1031D2:
		dc.w	$0001
		dc.w	$B000
Offset_0x1031D6:
		dc.w	$0001
		dc.w	$800C
Offset_0x1031DA:
		dc.w	$0001
		dc.w	$8015
Offset_0x1031DE:
		dc.w	$0001
		dc.w	$801E
Offset_0x1031E2:
		dc.w	$0001
		dc.w	$8027
Offset_0x1031E6:
		dc.w	$0001
		dc.w	$8030
Offset_0x1031EA:
		dc.w	$0001
		dc.w	$B039
Offset_0x1031EE:
		dc.w	$0001
		dc.w	$8045
Offset_0x1031F2:
		dc.w	$0001
		dc.w	$804E
Offset_0x1031F6:
		dc.w	$0001
		dc.w	$8057
Offset_0x1031FA:
		dc.w	$0001
		dc.w	$8060
Offset_0x1031FE:
		dc.w	$0001
		dc.w	$8069
Offset_0x103202:
		dc.w	$0001
		dc.w	$8072
Offset_0x103206:
		dc.w	$0001
		dc.w	$807B
Offset_0x10320A:
		dc.w	$0001
		dc.w	$B084
Offset_0x10320E:
		dc.w	$0001
		dc.w	$5090
Offset_0x103212:
		dc.w	$0001
		dc.w	$8096
Offset_0x103216:
		dc.w	$0001
		dc.w	$809F
Offset_0x10321A:
		dc.w	$0001
		dc.w	$B0A8
Offset_0x10321E:
		dc.w	$0001
		dc.w	$50B4
Offset_0x103222:
		dc.w	$0001
		dc.w	$50BA
Offset_0x103226:
		dc.w	$0001
		dc.w	$50C0
Offset_0x10322A:
		dc.w	$0001
		dc.w	$50C6
Offset_0x10322E:
		dc.w	$0001
		dc.w	$50CC
Offset_0x103232:
		dc.w	$0001
		dc.w	$50D2
Offset_0x103236:
		dc.w	$0001
		dc.w	$50D8
Offset_0x10323A:
		dc.w	$0001
		dc.w	$50DE
Offset_0x10323E:
		dc.w	$0001
		dc.w	$50E4
Offset_0x103242:
		dc.w	$0001
		dc.w	$50EA
Offset_0x103246:
		dc.w	$0001
		dc.w	$50F0
Offset_0x10324A:
		dc.w	$0001
		dc.w	$80F6
Offset_0x10324E:
		dc.w	$0001
		dc.w	$80FF
Offset_0x103252:
		dc.w	$0001
		dc.w	$8108
Offset_0x103256:
		dc.w	$0001
		dc.w	$8111
Offset_0x10325A:
		dc.w	$0001
		dc.w	$711A
Offset_0x10325E:
		dc.w	$0001
		dc.w	$7122
Offset_0x103262:
		dc.w	$0001
		dc.w	$812A
Offset_0x103266:
		dc.w	$0001
		dc.w	$8133
Offset_0x10326A:
		dc.w	$0001
		dc.w	$813C
Offset_0x10326E:
		dc.w	$0001
		dc.w	$8145
Offset_0x103272:
		dc.w	$0001
		dc.w	$814E
Offset_0x103276:
		dc.w	$0001
		dc.w	$3169
Offset_0x10327A:
		dc.w	$0001
		dc.w	$8157
Offset_0x10327E:
		dc.w	$0001
		dc.w	$8160
;-------------------------------------------------------------------------------
Miles_Tails_2P_Dyn_Script:                                     ; Offset_0x103282
		dc.w	Offset_0x1032A2-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032A4-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032A8-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032AC-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032B0-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032B4-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032B8-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032BC-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032C0-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032C4-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032C8-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032CC-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032D0-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032D4-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032D8-Miles_Tails_2P_Dyn_Script
		dc.w	Offset_0x1032DC-Miles_Tails_2P_Dyn_Script
Offset_0x1032A2:
		dc.w	$0000
Offset_0x1032A4:
		dc.w	$0001
		dc.w	$3000
Offset_0x1032A8:
		dc.w	$0001
		dc.w	$3004
Offset_0x1032AC:
		dc.w	$0001
		dc.w	$3008
Offset_0x1032B0:
		dc.w	$0001
		dc.w	$100C
Offset_0x1032B4:
		dc.w	$0001
		dc.w	$100E
Offset_0x1032B8:
		dc.w	$0001
		dc.w	$1010
Offset_0x1032BC:
		dc.w	$0001
		dc.w	$3012
Offset_0x1032C0:
		dc.w	$0001
		dc.w	$3016
Offset_0x1032C4:
		dc.w	$0001
		dc.w	$101A
Offset_0x1032C8:
		dc.w	$0001
		dc.w	$101C
Offset_0x1032CC:
		dc.w	$0001
		dc.w	$101E
Offset_0x1032D0:
		dc.w	$0001
		dc.w	$1020
Offset_0x1032D4:
		dc.w	$0001
		dc.w	$3022
Offset_0x1032D8:
		dc.w	$0001
		dc.w	$3026
Offset_0x1032DC:
		dc.w	$0001
		dc.w	$102A
;-------------------------------------------------------------------------------
Knuckles_Mappings_2P:                                          ; Offset_0x1032E0
		dc.w	Offset_0x103344-Knuckles_Mappings_2P
		dc.w	Offset_0x103346-Knuckles_Mappings_2P
		dc.w	Offset_0x10334E-Knuckles_Mappings_2P
		dc.w	Offset_0x103356-Knuckles_Mappings_2P
		dc.w	Offset_0x10335E-Knuckles_Mappings_2P
		dc.w	Offset_0x103366-Knuckles_Mappings_2P
		dc.w	Offset_0x10336E-Knuckles_Mappings_2P
		dc.w	Offset_0x103376-Knuckles_Mappings_2P
		dc.w	Offset_0x10337E-Knuckles_Mappings_2P
		dc.w	Offset_0x103386-Knuckles_Mappings_2P
		dc.w	Offset_0x10338E-Knuckles_Mappings_2P
		dc.w	Offset_0x103396-Knuckles_Mappings_2P
		dc.w	Offset_0x10339E-Knuckles_Mappings_2P
		dc.w	Offset_0x1033A6-Knuckles_Mappings_2P
		dc.w	Offset_0x1033AE-Knuckles_Mappings_2P
		dc.w	Offset_0x1033B6-Knuckles_Mappings_2P
		dc.w	Offset_0x1033BE-Knuckles_Mappings_2P
		dc.w	Offset_0x1033C6-Knuckles_Mappings_2P
		dc.w	Offset_0x1033CE-Knuckles_Mappings_2P
		dc.w	Offset_0x1033D6-Knuckles_Mappings_2P
		dc.w	Offset_0x1033DE-Knuckles_Mappings_2P
		dc.w	Offset_0x1033E6-Knuckles_Mappings_2P
		dc.w	Offset_0x1033EE-Knuckles_Mappings_2P
		dc.w	Offset_0x1033F6-Knuckles_Mappings_2P
		dc.w	Offset_0x1033FE-Knuckles_Mappings_2P
		dc.w	Offset_0x103406-Knuckles_Mappings_2P
		dc.w	Offset_0x10340E-Knuckles_Mappings_2P
		dc.w	Offset_0x103416-Knuckles_Mappings_2P
		dc.w	Offset_0x10341E-Knuckles_Mappings_2P
		dc.w	Offset_0x103426-Knuckles_Mappings_2P
		dc.w	Offset_0x10342E-Knuckles_Mappings_2P
		dc.w	Offset_0x103436-Knuckles_Mappings_2P
		dc.w	Offset_0x10343E-Knuckles_Mappings_2P
		dc.w	Offset_0x103446-Knuckles_Mappings_2P
		dc.w	Offset_0x10344E-Knuckles_Mappings_2P
		dc.w	Offset_0x103456-Knuckles_Mappings_2P
		dc.w	Offset_0x10345E-Knuckles_Mappings_2P
		dc.w	Offset_0x103466-Knuckles_Mappings_2P
		dc.w	Offset_0x10346E-Knuckles_Mappings_2P
		dc.w	Offset_0x103476-Knuckles_Mappings_2P
		dc.w	Offset_0x10347E-Knuckles_Mappings_2P
		dc.w	Offset_0x103486-Knuckles_Mappings_2P
		dc.w	Offset_0x10348E-Knuckles_Mappings_2P
		dc.w	Offset_0x103496-Knuckles_Mappings_2P
		dc.w	Offset_0x10349E-Knuckles_Mappings_2P
		dc.w	Offset_0x1034A6-Knuckles_Mappings_2P
		dc.w	Offset_0x1034AE-Knuckles_Mappings_2P
		dc.w	Offset_0x1034B6-Knuckles_Mappings_2P
		dc.w	Offset_0x1034BE-Knuckles_Mappings_2P
		dc.w	Offset_0x1034C6-Knuckles_Mappings_2P
Offset_0x103344:
		dc.w	$0000
Offset_0x103346:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10334E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103356:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10335E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103366:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10336E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103376:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10337E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103386:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10338E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103396:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10339E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033A6:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033AE:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033B6:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033BE:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033C6:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033CE:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033D6:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033DE:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033E6:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033EE:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033F6:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1033FE:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103406:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10340E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103416:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x10341E:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x103426:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x10342E:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x103436:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10343E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103446:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10344E:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x103456:
		dc.w	$0001
		dc.w	$FC09, $0000, $FFF4
Offset_0x10345E:
		dc.w	$0001
		dc.w	$FC09, $0000, $FFF4
Offset_0x103466:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10346E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103476:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10347E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103486:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10348E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x103496:
		dc.w	$0001
		dc.w	$FC05, $0000, $FFF8
Offset_0x10349E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1034A6:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1034AE:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x1034B6:
		dc.w	$0001
		dc.w	$F80D, $0000, $FFF0
Offset_0x1034BE:
		dc.w	$0001
		dc.w	$F809, $0000, $FFF4
Offset_0x1034C6:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
;-------------------------------------------------------------------------------
Knuckles_Dyn_Script_2P:                                        ; Offset_0x1034CE
		dc.w	Offset_0x103532-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103534-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103538-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x10353C-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103540-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103544-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103548-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x10354C-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103550-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103554-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103558-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x10355C-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103560-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103564-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103568-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x10356C-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103570-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103574-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103578-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x10357C-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103580-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103584-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103588-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x10358C-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103590-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103594-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x103598-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x10359C-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035A0-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035A4-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035A8-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035AC-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035B0-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035B4-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035B8-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035BC-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035C0-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035C4-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035C8-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035CC-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035D0-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035D4-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035D8-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035DC-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035E0-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035E4-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035E8-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035EC-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035F0-Knuckles_Dyn_Script_2P
		dc.w	Offset_0x1035F4-Knuckles_Dyn_Script_2P
Offset_0x103532:
		dc.w	$0000
Offset_0x103534:
		dc.w	$0001
		dc.w	$8000
Offset_0x103538:
		dc.w	$0001
		dc.w	$8009
Offset_0x10353C:
		dc.w	$0001
		dc.w	$8012
Offset_0x103540:
		dc.w	$0001
		dc.w	$801B
Offset_0x103544:
		dc.w	$0001
		dc.w	$8024
Offset_0x103548:
		dc.w	$0001
		dc.w	$802D
Offset_0x10354C:
		dc.w	$0001
		dc.w	$8036
Offset_0x103550:
		dc.w	$0001
		dc.w	$803F
Offset_0x103554:
		dc.w	$0001
		dc.w	$8048
Offset_0x103558:
		dc.w	$0001
		dc.w	$8051
Offset_0x10355C:
		dc.w	$0001
		dc.w	$805A
Offset_0x103560:
		dc.w	$0001
		dc.w	$8063
Offset_0x103564:
		dc.w	$0001
		dc.w	$806C
Offset_0x103568:
		dc.w	$0001
		dc.w	$8075
Offset_0x10356C:
		dc.w	$0001
		dc.w	$807E
Offset_0x103570:
		dc.w	$0001
		dc.w	$8087
Offset_0x103574:
		dc.w	$0001
		dc.w	$8090
Offset_0x103578:
		dc.w	$0001
		dc.w	$8099
Offset_0x10357C:
		dc.w	$0001
		dc.w	$80A2
Offset_0x103580:
		dc.w	$0001
		dc.w	$80AB
Offset_0x103584:
		dc.w	$0001
		dc.w	$80B4
Offset_0x103588:
		dc.w	$0001
		dc.w	$80BD
Offset_0x10358C:
		dc.w	$0001
		dc.w	$80C6
Offset_0x103590:
		dc.w	$0001
		dc.w	$80CF
Offset_0x103594:
		dc.w	$0001
		dc.w	$80D8
Offset_0x103598:
		dc.w	$0001
		dc.w	$80E1
Offset_0x10359C:
		dc.w	$0001
		dc.w	$50EA
Offset_0x1035A0:
		dc.w	$0001
		dc.w	$50F0
Offset_0x1035A4:
		dc.w	$0001
		dc.w	$50F6
Offset_0x1035A8:
		dc.w	$0001
		dc.w	$50FC
Offset_0x1035AC:
		dc.w	$0001
		dc.w	$8102
Offset_0x1035B0:
		dc.w	$0001
		dc.w	$810B
Offset_0x1035B4:
		dc.w	$0001
		dc.w	$8114
Offset_0x1035B8:
		dc.w	$0001
		dc.w	$B11D
Offset_0x1035BC:
		dc.w	$0001
		dc.w	$5129
Offset_0x1035C0:
		dc.w	$0001
		dc.w	$512F
Offset_0x1035C4:
		dc.w	$0001
		dc.w	$8135
Offset_0x1035C8:
		dc.w	$0001
		dc.w	$813E
Offset_0x1035CC:
		dc.w	$0001
		dc.w	$8147
Offset_0x1035D0:
		dc.w	$0001
		dc.w	$8150
Offset_0x1035D4:
		dc.w	$0001
		dc.w	$8159
Offset_0x1035D8:
		dc.w	$0001
		dc.w	$8162
Offset_0x1035DC:
		dc.w	$0001
		dc.w	$31A0
Offset_0x1035E0:
		dc.w	$0001
		dc.w	$816B
Offset_0x1035E4:
		dc.w	$0001
		dc.w	$8174
Offset_0x1035E8:
		dc.w	$0001
		dc.w	$817D
Offset_0x1035EC:
		dc.w	$0001
		dc.w	$7186
Offset_0x1035F0:
		dc.w	$0001
		dc.w	$518E
Offset_0x1035F4:
		dc.w	$0001
		dc.w	$B194
;-------------------------------------------------------------------------------
Art_Intro_Water_Waves:                                         ; Offset_0x1035F8
		binclude	"data\aiz\wtrwaves.nem"
Art_Intro_Small_Water_Waves:                                   ; Offset_0x103B38
		binclude	"data\aiz\smallwav.nem"
Art_Surfboard:                                                 ; Offset_0x103DD0
		binclude	"data\aiz\surfbrd.nem"
Art_SEGA:                                                      ; Offset_0x10417A
		binclude	"data\art\sega.nem"
Art_SEGA_Some_Blocks:                                          ; Offset_0x1045FA
		binclude	"data\art\segablck.nem"
SEGA_Mappings:                                                 ; Offset_0x104612
		binclude	"data\mappings\sega.eni"
Art_Title_Screen_Sonic_3:                                      ; Offset_0x1046CA
		binclude	"data\art\titlscrn.kos"
Art_Title_Screen_Sonic:                                        ; Offset_0x1051AA
		binclude	"data\art\ts_sonic.kos"
Map_Title_Screen_Sonic_3:                                      ; Offset_0x1065DA
		binclude	"data\mappings\titlscrn.eni"
Map_Title_Screen_Sonic:                                        ; Offset_0x106650
		binclude	"data\mappings\ts_sonic.eni"
Pal_Title_Screen_Sonic_3:                                      ; Offset_0x1066F6
		binclude	"data\all\titlscrn.pal"
Pal_Title_Screen_Sonic:                                        ; Offset_0x106776
		binclude	"data\all\ts_sonic.pal"
Art_Switch:                                                    ; Offset_0x1067F6
		binclude	"data\art\switch.nem"
Art_Horizontal_Spring:  ; N�o usado ; Left over ???            ; Offset_0x10687E
		binclude	"data\art\h_spring.nem"
Art_Diagonal_Spring:                                           ; Offset_0x106AC8
		binclude	"data\art\d_spring.nem"
Art_Head_Up_Display:    ; N�o usado ; Left over ???            ; Offset_0x106CB0
		binclude	"data\art\hud.nem"
Art_Head_Up_Display_Sonic:                                     ; Offset_0x106DDC
		binclude	"data\art\hudsonic.nem"
Art_Head_Up_Display_Miles:                                     ; Offset_0x106EF4
		binclude	"data\art\hudmiles.nem"
Art_Head_Up_Display_Knuckles:                                  ; Offset_0x106FE4
		binclude	"data\art\hud_kte.nem"
Art_Rings:                                                     ; Offset_0x1070E2
		binclude	"data\art\rings.nem"
Art_Monitors:                                                  ; Offset_0x1071DA
		binclude	"data\art\monitors.nem"
Art_Vertical_Spikes:                                           ; Offset_0x107634
		binclude	"data\art\v_spikes.nem"
Art_Horizontal_Spikes:                                         ; Offset_0x107690
		binclude	"data\art\h_spikes.nem"
Art_Enemy_Points:                                              ; Offset_0x1076F8
		binclude	"data\art\enemypts.nem"
Art_Star_Post:                                                 ; Offset_0x10779E
		binclude	"data\art\starpost.nem"
Art_End_Panel:                                                 ; Offset_0x107956
		binclude	"data\art\endpanel.nem"
Art_Oxygen_Bubbles:                                            ; Offset_0x1080F8
		binclude	"data\art\oxygen.nem"
Art_Game_Over_Time_Over:                                       ; Offset_0x108396
		binclude	"data\art\gt_over.nem"
Art_Explosion:                                                 ; Offset_0x108528
		binclude	"data\art\explosn.nem"
Art_Miles_In_Continue_Screen:                                  ; Offset_0x1088CE
		binclude	"data\art\cntmiles.nem"
Art_Mini_Sonic_In_Level_Results:                               ; Offset_0x108BBA
		binclude	"data\art\m_sonic.nem"
Art_Mini_Miles_In_Level_Results:                               ; Offset_0x108D1C
		binclude	"data\art\m_miles.nem"
Art_Spikes_Springs:                                            ; Offset_0x108E64
		binclude	"data\art\spkspngs.nem"
Art_Main_Head_Up_Display_Rings:                                ; Offset_0x109154
		binclude	"data\art\hudrings.nem"
Art_Enemy_Points_Star_Post:                                    ; Offset_0x109392
		binclude	"data\art\epntpost.nem"
Art_Menu_Font:                                                 ; Offset_0x1095D6
		binclude	"data\menus\menufont.nem"
Art_Result_Font_2P:     ; N�o usado ; Left over ???            ; Offset_0x109B4A
		binclude	"data\menus\resfnt2p.nem"
Versus_Menu_Bg_Mappings:                                       ; Offset_0x109D1C
		binclude	"data\menus\vsmenubg.eni"
Art_Menu_Frame:                                                ; Offset_0x109EC8
		binclude	"data\menus\menu_frm.nem"
Art_Level_Icons:                                               ; Offset_0x109F48
		binclude	"data\menus\levelico.nem"
Art_Seal:               ; N�o usado ; Left over ???            ; Offset_0x10ADA2
		binclude	"data\art\seal.nem"
Art_Pig:                ; N�o usado ; Left over ???            ; Offset_0x10AEBE
		binclude	"data\art\pig.nem"
Art_Blue_Bird:                                                 ; Offset_0x10B00A
		binclude	"data\art\bluebird.nem"
Art_Chicken:                                                   ; Offset_0x10B13C
		binclude	"data\art\chicken.nem"
Art_Penguin:                                                   ; Offset_0x10B28A
		binclude	"data\art\penguin.nem"
Art_Squirrel:                                                  ; Offset_0x10B3DC
		binclude	"data\art\squirrel.nem"
Art_Rabbit:                                                    ; Offset_0x10B53A
		binclude	"data\art\rabbit.nem"
Art_Scaled_Spheres:                                            ; Offset_0x10B68E
		binclude	"data\ss_test\spheres.nem"
Special_Stage_Globe_Mappings:                                  ; Offset_0x10BFEE
		binclude	"data\ss_test\globe.dat"
Art_Special_Stage_Globe:                                       ; Offset_0x10C8AE
		binclude	"data\ss_test\globe.nem"
;-------------------------------------------------------------------------------
Robotnik_Ship_Mappings:                                        ; Offset_0x10D020
		dc.w	Offset_0x10D03A-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D042-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D04A-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D058-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D060-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D068-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D0B2-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D0BA-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D0D4-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D106-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D11A-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D146-Robotnik_Ship_Mappings
		dc.w	Offset_0x10D16C-Robotnik_Ship_Mappings
Offset_0x10D03A:
		dc.w	$0001
		dc.w	$F80D, $0000, $FFF0
Offset_0x10D042:
		dc.w	$0001
		dc.w	$F80D, $0008, $FFF0
Offset_0x10D04A:
		dc.w	$0002
		dc.w	$F80D, $0010, $FFEC
		dc.w	$F801, $0018, $000C
Offset_0x10D058:
		dc.w	$0001
		dc.w	$F80D, $001A, $FFF0
Offset_0x10D060:
		dc.w	$0001
		dc.w	$F805, $004E, $0000
Offset_0x10D068:
		dc.w	$000C
		dc.w	$EC0C, $0022, $FFE4
		dc.w	$EC08, $0026, $0004
		dc.w	$F40E, $0029, $FFE4
		dc.w	$F40A, $0035, $0004
		dc.w	$0C08, $003E, $FFEC
		dc.w	$0C04, $0041, $0004
		dc.w	$D405, $0043, $FFF0
		dc.w	$DC01, $0047, $FFE8
		dc.w	$D405, $0843, $0000
		dc.w	$DC01, $0847, $0010
		dc.w	$DA00, $004B, $FFFE
		dc.w	$E404, $0049, $FFEC
Offset_0x10D0B2:
		dc.w	$0001
		dc.w	$FC04, $004C, $FFF8
Offset_0x10D0BA:
		dc.w	$0004
		dc.w	$F405, $0043, $FFF0
		dc.w	$FC01, $0047, $FFE8
		dc.w	$F405, $0843, $0000
		dc.w	$FC01, $0847, $0010
Offset_0x10D0D4:
		dc.w	$0008
		dc.w	$EC0C, $0022, $FFE4
		dc.w	$EC08, $0026, $0004
		dc.w	$D405, $0043, $FFF0
		dc.w	$DC01, $0047, $FFE8
		dc.w	$D405, $0843, $0000
		dc.w	$DC01, $0847, $0010
		dc.w	$DA00, $004B, $FFFE
		dc.w	$E404, $0049, $FFEC
Offset_0x10D106:
		dc.w	$0003
		dc.w	$EC0C, $0022, $FFE4
		dc.w	$EC08, $0026, $0004
		dc.w	$E404, $0049, $FFEC
Offset_0x10D11A:
		dc.w	$0007
		dc.w	$EC0C, $0022, $FFE4
		dc.w	$EC08, $0026, $0004
		dc.w	$F40E, $0029, $FFE4
		dc.w	$F40A, $0035, $0004
		dc.w	$0C08, $003E, $FFEC
		dc.w	$0C04, $0041, $0004
		dc.w	$E404, $0049, $FFEC
Offset_0x10D146:
		dc.w	$0006
		dc.w	$EC0C, $0022, $FFE4
		dc.w	$EC08, $0026, $0004
		dc.w	$D405, $0043, $FFF0
		dc.w	$DC01, $0047, $FFE8
		dc.w	$D405, $0843, $0000
		dc.w	$DC01, $0847, $0010
Offset_0x10D16C:
		dc.w	$0006
		dc.w	$D405, $0043, $FFF0
		dc.w	$DC01, $0047, $FFE8
		dc.w	$D405, $0843, $0000
		dc.w	$DC01, $0847, $0010
		dc.w	$DA00, $004B, $FFFE
		dc.w	$E404, $0049, $FFEC
;-------------------------------------------------------------------------------
Ball_Shooter_Mappings:                                         ; Offset_0x10D192
		dc.w	Offset_0x10D1A0-Ball_Shooter_Mappings
		dc.w	Offset_0x10D1C0-Ball_Shooter_Mappings
		dc.w	Offset_0x10D1DA-Ball_Shooter_Mappings
		dc.w	Offset_0x10D1FA-Ball_Shooter_Mappings
		dc.w	Offset_0x10D20E-Ball_Shooter_Mappings
		dc.w	Offset_0x10D22E-Ball_Shooter_Mappings
		dc.w	Offset_0x10D248-Ball_Shooter_Mappings
Offset_0x10D1A0:
		dc.w	$0005
		dc.w	$E80E, $0000, $FFF0
		dc.w	$F004, $000C, $0010
		dc.w	$0805, $000E, $FFE0
		dc.w	$0005, $0012, $FFF0
		dc.w	$000A, $0016, $0000
Offset_0x10D1C0:
		dc.w	$0004
		dc.w	$E80E, $0000, $FFF0
		dc.w	$F004, $000C, $0010
		dc.w	$000D, $001F, $FFF0
		dc.w	$1005, $0027, $FFF8
Offset_0x10D1DA:
		dc.w	$0005
		dc.w	$E80E, $0000, $FFF0
		dc.w	$F004, $000C, $0010
		dc.w	$1005, $002B, $FFE8
		dc.w	$0005, $002F, $FFF0
		dc.w	$0007, $0033, $0000
Offset_0x10D1FA:
		dc.w	$0003
		dc.w	$E80E, $0000, $FFF0
		dc.w	$F004, $000C, $0010
		dc.w	$000E, $003B, $FFF0
Offset_0x10D20E:
		dc.w	$0005
		dc.w	$E80E, $0000, $FFF0
		dc.w	$F004, $000C, $0010
		dc.w	$0805, $000E, $FFE0
		dc.w	$0005, $0012, $FFF0
		dc.w	$000A, $0016, $0000
Offset_0x10D22E:
		dc.w	$0004
		dc.w	$E80E, $0000, $FFF0
		dc.w	$F004, $000C, $0010
		dc.w	$000D, $001F, $FFF0
		dc.w	$1005, $0027, $FFF8
Offset_0x10D248:
		dc.w	$0005
		dc.w	$E80E, $0000, $FFF0
		dc.w	$F004, $000C, $0010
		dc.w	$1005, $002B, $FFE8
		dc.w	$0005, $002F, $FFF0
		dc.w	$0007, $0033, $0000
;-------------------------------------------------------------------------------
FBz_Robotnik_Head_Mappings:                                    ; Offset_0x10D268
		dc.w	Offset_0x10D270-FBz_Robotnik_Head_Mappings
		dc.w	Offset_0x10D278-FBz_Robotnik_Head_Mappings
		dc.w	Offset_0x10D280-FBz_Robotnik_Head_Mappings
		dc.w	Offset_0x10D288-FBz_Robotnik_Head_Mappings
Offset_0x10D270:
		dc.w	$0001
		dc.w	$F80D, $0000, $FFF0
Offset_0x10D278:
		dc.w	$0001
		dc.w	$F80D, $0008, $FFF0
Offset_0x10D280:
		dc.w	$0001
		dc.w	$F80D, $0010, $FFF0
Offset_0x10D288:
		dc.w	$0001
		dc.w	$F80D, $0018, $FFF0
;-------------------------------------------------------------------------------
Twin_Hammer_Mappings:                                          ; Offset_0x10D290
		dc.w	Offset_0x10D2A2-Twin_Hammer_Mappings
		dc.w	Offset_0x10D2B0-Twin_Hammer_Mappings
		dc.w	Offset_0x10D2BE-Twin_Hammer_Mappings
		dc.w	Offset_0x10D2CC-Twin_Hammer_Mappings
		dc.w	Offset_0x10D2E6-Twin_Hammer_Mappings
		dc.w	Offset_0x10D300-Twin_Hammer_Mappings
		dc.w	Offset_0x10D31A-Twin_Hammer_Mappings
		dc.w	Offset_0x10D322-Twin_Hammer_Mappings
		dc.w	Offset_0x10D32A-Twin_Hammer_Mappings
Offset_0x10D2A2:
		dc.w	$0002
		dc.w	$F40A, $0000, $FFE8
		dc.w	$F40A, $0800, $0000
Offset_0x10D2B0:
		dc.w	$0002
		dc.w	$F40E, $0009, $FFE0
		dc.w	$F40E, $1809, $0000
Offset_0x10D2BE:
		dc.w	$0002
		dc.w	$F40E, $1009, $FFE0
		dc.w	$F40E, $0809, $0000
Offset_0x10D2CC:
		dc.w	$0004
		dc.w	$EE05, $0015, $FFEE
		dc.w	$EE05, $0815, $0002
		dc.w	$0205, $1815, $0002
		dc.w	$0205, $1015, $FFEE
Offset_0x10D2E6:
		dc.w	$0004
		dc.w	$ED05, $0015, $FFED
		dc.w	$ED05, $0815, $0003
		dc.w	$0305, $1815, $0003
		dc.w	$0305, $1015, $FFED
Offset_0x10D300:
		dc.w	$0004
		dc.w	$EC05, $0015, $FFEC
		dc.w	$EC05, $0815, $0004
		dc.w	$0405, $1815, $0004
		dc.w	$0405, $1015, $FFEC
Offset_0x10D31A:
		dc.w	$0001
		dc.w	$F40A, $0019, $FFF4
Offset_0x10D322:
		dc.w	$0001
		dc.w	$F805, $0022, $FFF8
Offset_0x10D32A:
		dc.w	$0001
		dc.w	$F805, $0026, $FFF8
;-------------------------------------------------------------------------------
Twin_Hammer_Box_Mappings:                                      ; Offset_0x10D332
		dc.w	Offset_0x10D34A-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D358-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D366-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D374-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D382-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D390-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D398-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D3A0-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D3A8-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D3B0-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D3B8-Twin_Hammer_Box_Mappings
		dc.w	Offset_0x10D3C0-Twin_Hammer_Box_Mappings
Offset_0x10D34A:
		dc.w	$0002
		dc.w	$F002, $0000, $FFEC
		dc.w	$F00F, $0003, $FFF4
Offset_0x10D358:
		dc.w	$0002
		dc.w	$F40E, $0013, $FFEC
		dc.w	$F402, $001F, $000C
Offset_0x10D366:
		dc.w	$0002
		dc.w	$F80D, $0022, $FFEC
		dc.w	$F801, $002A, $000C
Offset_0x10D374:
		dc.w	$0002
		dc.w	$EC0B, $002C, $FFF4
		dc.w	$0C00, $1034, $0004
Offset_0x10D382:
		dc.w	$0002
		dc.w	$EC0A, $0038, $FFF4
		dc.w	$0400, $0041, $0004
Offset_0x10D390:
		dc.w	$0001
		dc.w	$F409, $0042, $FFF4
Offset_0x10D398:
		dc.w	$0001
		dc.w	$F801, $0048, $FFFC
Offset_0x10D3A0:
		dc.w	$0001
		dc.w	$F800, $1048, $FFFC
Offset_0x10D3A8:
		dc.w	$0001
		dc.w	$F800, $004A, $FFFC
Offset_0x10D3B0:
		dc.w	$0001
		dc.w	$FC04, $004B, $FFF8
Offset_0x10D3B8:
		dc.w	$0001
		dc.w	$FC00, $004B, $FFF8
Offset_0x10D3C0:
		dc.w	$0001
		dc.w	$FC00, $004D, $FFF8
;-------------------------------------------------------------------------------
Snale_Blaster_Mappings:                                        ; Offset_0x10D3C8
		dc.w	Offset_0x10D3DE-Snale_Blaster_Mappings
		dc.w	Offset_0x10D3F2-Snale_Blaster_Mappings
		dc.w	Offset_0x10D406-Snale_Blaster_Mappings
		dc.w	Offset_0x10D41A-Snale_Blaster_Mappings
		dc.w	Offset_0x10D42E-Snale_Blaster_Mappings
		dc.w	Offset_0x10D442-Snale_Blaster_Mappings
		dc.w	Offset_0x10D44A-Snale_Blaster_Mappings
		dc.w	Offset_0x10D452-Snale_Blaster_Mappings
		dc.w	Offset_0x10D45A-Snale_Blaster_Mappings
		dc.w	Offset_0x10D462-Snale_Blaster_Mappings
		dc.w	Offset_0x10D46A-Snale_Blaster_Mappings
Offset_0x10D3DE:
		dc.w	$0003
		dc.w	$F005, $0007, $FFFC
		dc.w	$F800, $0000, $FFF4
		dc.w	$0009, $0001, $FFF4
Offset_0x10D3F2:
		dc.w	$0003
		dc.w	$F005, $000B, $FFFC
		dc.w	$F800, $0000, $FFF4
		dc.w	$0009, $0001, $FFF4
Offset_0x10D406:
		dc.w	$0003
		dc.w	$F005, $000F, $FFFC
		dc.w	$F800, $0000, $FFF4
		dc.w	$0009, $0001, $FFF4
Offset_0x10D41A:
		dc.w	$0003
		dc.w	$F005, $0013, $FFFC
		dc.w	$F800, $0000, $FFF4
		dc.w	$0009, $0001, $FFF4
Offset_0x10D42E:
		dc.w	$0003
		dc.w	$F005, $0017, $FFFC
		dc.w	$F800, $0000, $FFF4
		dc.w	$0009, $0001, $FFF4
Offset_0x10D442:
		dc.w	$0001
		dc.w	$F402, $001B, $FFFC
Offset_0x10D44A:
		dc.w	$0001
		dc.w	$FC01, $001E, $FFFC
Offset_0x10D452:
		dc.w	$0001
		dc.w	$FC00, $0021, $FFFC
Offset_0x10D45A:
		dc.w	$0001
		dc.w	$FC00, $0022, $FFFC
Offset_0x10D462:
		dc.w	$0001
		dc.w	$FC00, $0020, $FFFC
Offset_0x10D46A:
		dc.w	$0001
		dc.w	$0000, $FADC, $0000
;-------------------------------------------------------------------------------
Orbinaut_Mappings:                                             ; Offset_0x10D472
		dc.w	Offset_0x10D476-Orbinaut_Mappings
		dc.w	Offset_0x10D47E-Orbinaut_Mappings
Offset_0x10D476:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10D47E:
		dc.w	$0001
		dc.w	$F805, $0004, $FFF8
;-------------------------------------------------------------------------------
Ribot_Mappings:                                                ; Offset_0x10D486
		dc.w	Offset_0x10D496-Ribot_Mappings
		dc.w	Offset_0x10D4BC-Ribot_Mappings
		dc.w	Offset_0x10D4E2-Ribot_Mappings
		dc.w	Offset_0x10D508-Ribot_Mappings
		dc.w	Offset_0x10D52E-Ribot_Mappings
		dc.w	Offset_0x10D554-Ribot_Mappings
		dc.w	Offset_0x10D57A-Ribot_Mappings
		dc.w	Offset_0x10D582-Ribot_Mappings
Offset_0x10D496:
		dc.w	$0006
		dc.w	$F401, $0000, $FFF8
		dc.w	$0404, $0002, $FFF0
		dc.w	$F401, $0800, $0000
		dc.w	$0404, $0802, $0000
		dc.w	$FC00, $000F, $0008
		dc.w	$FC00, $000F, $FFF0
Offset_0x10D4BC:
		dc.w	$0006
		dc.w	$F401, $0004, $FFF8
		dc.w	$0404, $0006, $FFF0
		dc.w	$F401, $0804, $0000
		dc.w	$0404, $0806, $0000
		dc.w	$FC00, $000F, $0008
		dc.w	$FC00, $000F, $FFF0
Offset_0x10D4E2:
		dc.w	$0006
		dc.w	$F401, $0008, $FFF8
		dc.w	$0404, $000A, $FFF0
		dc.w	$F401, $0808, $0000
		dc.w	$0404, $080A, $0000
		dc.w	$FC00, $000F, $0008
		dc.w	$FC00, $000F, $FFF0
Offset_0x10D508:
		dc.w	$0006
		dc.w	$F401, $0000, $FFF8
		dc.w	$0404, $0002, $FFF0
		dc.w	$F401, $0800, $0000
		dc.w	$0404, $0802, $0000
		dc.w	$EC00, $000F, $FFFC
		dc.w	$F400, $0010, $FFFC
Offset_0x10D52E:
		dc.w	$0006
		dc.w	$F401, $0004, $FFF8
		dc.w	$0404, $0006, $FFF0
		dc.w	$F401, $0804, $0000
		dc.w	$0404, $0806, $0000
		dc.w	$EC00, $000F, $FFFC
		dc.w	$F400, $0010, $FFFC
Offset_0x10D554:
		dc.w	$0006
		dc.w	$F401, $0008, $FFF8
		dc.w	$0404, $000A, $FFF0
		dc.w	$F401, $0808, $0000
		dc.w	$0404, $080A, $0000
		dc.w	$EC00, $000F, $FFFC
		dc.w	$F400, $0010, $FFFC
Offset_0x10D57A:
		dc.w	$0001
		dc.w	$FC00, $000C, $FFFC
Offset_0x10D582:
		dc.w	$0002
		dc.w	$F801, $000D, $FFF8
		dc.w	$F801, $080D, $0000
;-------------------------------------------------------------------------------
Corkey_Mappings:                                               ; Offset_0x10D590
		dc.w	Offset_0x10D5A0-Corkey_Mappings
		dc.w	Offset_0x10D5AE-Corkey_Mappings
		dc.w	Offset_0x10D5B6-Corkey_Mappings
		dc.w	Offset_0x10D5BE-Corkey_Mappings
		dc.w	Offset_0x10D5C6-Corkey_Mappings
		dc.w	Offset_0x10D5E6-Corkey_Mappings
		dc.w	Offset_0x10D606-Corkey_Mappings
		dc.w	Offset_0x10D626-Corkey_Mappings
Offset_0x10D5A0:
		dc.w	$0002
		dc.w	$F805, $0000, $FFF0
		dc.w	$F805, $0800, $0000
Offset_0x10D5AE:
		dc.w	$0001
		dc.w	$FC04, $0004, $FFF8
Offset_0x10D5B6:
		dc.w	$0001
		dc.w	$FC04, $0006, $FFF8
Offset_0x10D5BE:
		dc.w	$0001
		dc.w	$FC04, $0008, $FFF8
Offset_0x10D5C6:
		dc.w	$0005
		dc.w	$B003, $000A, $FFFC
		dc.w	$D003, $000A, $FFFC
		dc.w	$F003, $000A, $FFFC
		dc.w	$1003, $000A, $FFFC
		dc.w	$3003, $000A, $FFFC
Offset_0x10D5E6:
		dc.w	$0005
		dc.w	$B003, $000E, $FFFC
		dc.w	$D003, $000E, $FFFC
		dc.w	$F003, $000E, $FFFC
		dc.w	$1003, $000E, $FFFC
		dc.w	$3003, $000E, $FFFC
Offset_0x10D606:
		dc.w	$0005
		dc.w	$B003, $0012, $FFFC
		dc.w	$D003, $0012, $FFFC
		dc.w	$F003, $0012, $FFFC
		dc.w	$1003, $0012, $FFFC
		dc.w	$3003, $0012, $FFFC
Offset_0x10D626:
		dc.w	$0001
		dc.w	$0000, $FAA8, $0000
;-------------------------------------------------------------------------------
Flybot_767_Mappings:                                           ; Offset_0x10D62E
		dc.w	Offset_0x10D658-Flybot_767_Mappings
		dc.w	Offset_0x10D66C-Flybot_767_Mappings
		dc.w	Offset_0x10D680-Flybot_767_Mappings
		dc.w	Offset_0x10D694-Flybot_767_Mappings
		dc.w	Offset_0x10D6A8-Flybot_767_Mappings
		dc.w	Offset_0x10D6BC-Flybot_767_Mappings
		dc.w	Offset_0x10D6D0-Flybot_767_Mappings
		dc.w	Offset_0x10D6E4-Flybot_767_Mappings
		dc.w	Offset_0x10D6F8-Flybot_767_Mappings
		dc.w	Offset_0x10D70C-Flybot_767_Mappings
		dc.w	Offset_0x10D720-Flybot_767_Mappings
		dc.w	Offset_0x10D72E-Flybot_767_Mappings
		dc.w	Offset_0x10D73C-Flybot_767_Mappings
		dc.w	Offset_0x10D750-Flybot_767_Mappings
		dc.w	Offset_0x10D75E-Flybot_767_Mappings
		dc.w	Offset_0x10D766-Flybot_767_Mappings
		dc.w	Offset_0x10D774-Flybot_767_Mappings
		dc.w	Offset_0x10D782-Flybot_767_Mappings
		dc.w	Offset_0x10D790-Flybot_767_Mappings
		dc.w	Offset_0x10D79E-Flybot_767_Mappings
		dc.w	Offset_0x10D7AC-Flybot_767_Mappings
Offset_0x10D658:
		dc.w	$0003
		dc.w	$0105, $0000, $0007
		dc.w	$F80D, $0004, $FFF0
		dc.w	$0105, $0800, $FFF8
Offset_0x10D66C:
		dc.w	$0003
		dc.w	$0105, $0000, $0007
		dc.w	$F80D, $0004, $FFF0
		dc.w	$0105, $0800, $FFF8
Offset_0x10D680:
		dc.w	$0003
		dc.w	$F905, $0000, $0007
		dc.w	$F80D, $0004, $FFF0
		dc.w	$F905, $0800, $FFF8
Offset_0x10D694:
		dc.w	$0003
		dc.w	$F905, $0000, $0007
		dc.w	$F80D, $0004, $FFF0
		dc.w	$F905, $0800, $FFF8
Offset_0x10D6A8:
		dc.w	$0003
		dc.w	$F305, $0000, $0007
		dc.w	$F80D, $0004, $FFF0
		dc.w	$F305, $0800, $FFF8
Offset_0x10D6BC:
		dc.w	$0003
		dc.w	$F305, $0000, $0007
		dc.w	$F80D, $0004, $FFF0
		dc.w	$F305, $0800, $FFF8
Offset_0x10D6D0:
		dc.w	$0003
		dc.w	$0108, $0000, $0007
		dc.w	$F80D, $0003, $FFF0
		dc.w	$0108, $0800, $FFF8
Offset_0x10D6E4:
		dc.w	$0003
		dc.w	$0108, $0000, $0007
		dc.w	$F80D, $0003, $FFF0
		dc.w	$0108, $0800, $FFF8
Offset_0x10D6F8:
		dc.w	$0003
		dc.w	$0105, $0000, $0007
		dc.w	$F80D, $0004, $FFF0
		dc.w	$0105, $0800, $FFF8
Offset_0x10D70C:
		dc.w	$0003
		dc.w	$0105, $0000, $0007
		dc.w	$F80D, $0004, $FFF0
		dc.w	$0105, $0800, $FFF8
Offset_0x10D720:
		dc.w	$0002
		dc.w	$F80D, $0000, $FFF0
		dc.w	$0000, $0008, $0010
Offset_0x10D72E:
		dc.w	$0002
		dc.w	$F40D, $0000, $FFF4
		dc.w	$0400, $0008, $000C
Offset_0x10D73C:
		dc.w	$0003
		dc.w	$F40D, $0000, $FFF0
		dc.w	$F400, $0008, $0010
		dc.w	$0400, $0009, $0008
Offset_0x10D750:
		dc.w	$0002
		dc.w	$F80D, $0000, $FFF0
		dc.w	$F801, $0008, $0010
Offset_0x10D75E:
		dc.w	$0001
		dc.w	$F80D, $0000, $FFF0
Offset_0x10D766:
		dc.w	$0002
		dc.w	$F404, $0000, $0004
		dc.w	$FC0D, $0002, $FFF4
Offset_0x10D774:
		dc.w	$0002
		dc.w	$F409, $0000, $FFFF
		dc.w	$0408, $0006, $FFF7
Offset_0x10D782:
		dc.w	$0002
		dc.w	$F404, $0000, $0000
		dc.w	$FC0A, $0002, $FFF8
Offset_0x10D790:
		dc.w	$0002
		dc.w	$F40A, $0000, $FFF8
		dc.w	$0C00, $0009, $FFF8
Offset_0x10D79E:
		dc.w	$0002
		dc.w	$F40A, $0000, $FFF8
		dc.w	$0C00, $0009, $FFF8
Offset_0x10D7AC:
		dc.w	$0003
		dc.w	$F800, $0000, $FFF0
		dc.w	$F80A, $0001, $FFF8
		dc.w	$1000, $000A, $0008
;-------------------------------------------------------------------------------
Flybot_767_Dyn_Script:                                         ; Offset_0x10D7C0
		dc.w	Offset_0x10D7EA-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D7F0-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D7F6-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D7FC-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D802-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D808-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D80E-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D814-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D81A-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D820-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D826-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D82C-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D832-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D83A-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D840-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D844-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D84A-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D850-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D856-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D85C-Flybot_767_Dyn_Script
		dc.w	Offset_0x10D862-Flybot_767_Dyn_Script
Offset_0x10D7EA:
		dc.w	$0001
		dc.w	$0083, $0007
Offset_0x10D7F0:
		dc.w	$0001
		dc.w	$00C3, $0007
Offset_0x10D7F6:
		dc.w	$0001
		dc.w	$0103, $0007
Offset_0x10D7FC:
		dc.w	$0001
		dc.w	$0143, $0007
Offset_0x10D802:
		dc.w	$0001
		dc.w	$0183, $0007
Offset_0x10D808:
		dc.w	$0001
		dc.w	$01C3, $0007
Offset_0x10D80E:
		dc.w	$0001
		dc.w	$0202, $0007
Offset_0x10D814:
		dc.w	$0001
		dc.w	$0232, $0007
Offset_0x10D81A:
		dc.w	$0001
		dc.w	$0263, $0007
Offset_0x10D820:
		dc.w	$0001
		dc.w	$02A3, $0007
Offset_0x10D826:
		dc.w	$0001
		dc.w	$02E7, $0360
Offset_0x10D82C:
		dc.w	$0001
		dc.w	$0377, $03F0
Offset_0x10D832:
		dc.w	$0002
		dc.w	$0407, $0480, $0490
Offset_0x10D83A:
		dc.w	$0001
		dc.w	$04A7, $0521
Offset_0x10D840:
		dc.w	$0000
		dc.w	$0547
Offset_0x10D844:
		dc.w	$0001
		dc.w	$05C1, $05E7
Offset_0x10D84A:
		dc.w	$0001
		dc.w	$0665, $06C2
Offset_0x10D850:
		dc.w	$0001
		dc.w	$06F1, $0718
Offset_0x10D856:
		dc.w	$0001
		dc.w	$07A8, $0830
Offset_0x10D85C:
		dc.w	$0001
		dc.w	$0848, $08D0
Offset_0x10D862:
		dc.w	$0002
		dc.w	$08E0, $08F8, $0980
;-------------------------------------------------------------------------------
Knuckles_LBz_Pillar_Mappings:                                  ; Offset_0x10D86A
		dc.w	Offset_0x10D888-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D8AE-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D8B6-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D8CA-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D8DE-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D8F2-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D918-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D93E-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D946-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D94E-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D956-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D95E-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D966-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D968-Knuckles_LBz_Pillar_Mappings
		dc.w	Offset_0x10D970-Knuckles_LBz_Pillar_Mappings
Offset_0x10D888:
		dc.w	$0006
		dc.w	$F008, $0000, $FFE8
		dc.w	$F80E, $0003, $FFE0
		dc.w	$F008, $0800, $0000
		dc.w	$F80E, $0803, $0000
		dc.w	$E800, $000F, $FFF0
		dc.w	$E800, $000F, $0008
Offset_0x10D8AE:
		dc.w	$0001
		dc.w	$FC00, $000F, $FFFC
Offset_0x10D8B6:
		dc.w	$0003
		dc.w	$E805, $0010, $FFF8
		dc.w	$F805, $0010, $FFF8
		dc.w	$0805, $0010, $FFF8
Offset_0x10D8CA:
		dc.w	$0003
		dc.w	$E805, $0810, $FFF8
		dc.w	$F805, $0810, $FFF8
		dc.w	$0805, $0810, $FFF8
Offset_0x10D8DE:
		dc.w	$0003
		dc.w	$E805, $0014, $FFF8
		dc.w	$F805, $0014, $FFF8
		dc.w	$0805, $0014, $FFF8
Offset_0x10D8F2:
		dc.w	$0006
		dc.w	$F204, $001C, $FFF8
		dc.w	$0804, $001E, $FFF8
		dc.w	$F005, $0018, $FFF0
		dc.w	$F005, $0818, $0000
		dc.w	$0005, $1018, $FFF0
		dc.w	$0005, $1818, $0000
Offset_0x10D918:
		dc.w	$0006
		dc.w	$F204, $001C, $FFF9
		dc.w	$0804, $001E, $FFF9
		dc.w	$F005, $0018, $FFF0
		dc.w	$F005, $0818, $0000
		dc.w	$0005, $1018, $FFF0
		dc.w	$0005, $1818, $0000
Offset_0x10D93E:
		dc.w	$0001
		dc.w	$F805, $0020, $FFF8
Offset_0x10D946:
		dc.w	$0001
		dc.w	$F805, $0024, $FFF8
Offset_0x10D94E:
		dc.w	$0001
		dc.w	$F805, $0028, $FFF8
Offset_0x10D956:
		dc.w	$0001
		dc.w	$F805, $002C, $FFF8
Offset_0x10D95E:
		dc.w	$0001
		dc.w	$FC00, $0030, $FFFC
Offset_0x10D966:
		dc.w	$0000
Offset_0x10D968:
		dc.w	$0001
		dc.w	$F805, $0014, $FFF8
Offset_0x10D970:
		dc.w	$0002
		dc.w	$F801, $0031, $FFF8
		dc.w	$F801, $0831, $0000
;-------------------------------------------------------------------------------
Graviton_Mobile_Mappings:                                      ; Offset_0x10D97E
		dc.w	Offset_0x10D998-Graviton_Mobile_Mappings
		dc.w	Offset_0x10D9BE-Graviton_Mobile_Mappings
		dc.w	Offset_0x10D9CC-Graviton_Mobile_Mappings
		dc.w	Offset_0x10D9DA-Graviton_Mobile_Mappings
		dc.w	Offset_0x10D9E8-Graviton_Mobile_Mappings
		dc.w	Offset_0x10D9F6-Graviton_Mobile_Mappings
		dc.w	Offset_0x10DA10-Graviton_Mobile_Mappings
		dc.w	Offset_0x10DA36-Graviton_Mobile_Mappings
		dc.w	Offset_0x10DA5C-Graviton_Mobile_Mappings
		dc.w	Offset_0x10DA6A-Graviton_Mobile_Mappings
		dc.w	Offset_0x10DA72-Graviton_Mobile_Mappings
		dc.w	Offset_0x10DA7A-Graviton_Mobile_Mappings
		dc.w	Offset_0x10DA8E-Graviton_Mobile_Mappings
Offset_0x10D998:
		dc.w	$0006
		dc.w	$EC0F, $0000, $FFE0
		dc.w	$F402, $0010, $FFD8
		dc.w	$0C08, $0013, $FFE8
		dc.w	$EC0F, $0800, $0000
		dc.w	$F402, $0810, $0020
		dc.w	$0C08, $0813, $0000
Offset_0x10D9BE:
		dc.w	$0002
		dc.w	$F003, $0016, $FFF8
		dc.w	$F003, $0816, $0000
Offset_0x10D9CC:
		dc.w	$0002
		dc.w	$F003, $001A, $FFF8
		dc.w	$F003, $081A, $0000
Offset_0x10D9DA:
		dc.w	$0002
		dc.w	$F003, $001E, $FFF8
		dc.w	$F003, $081E, $0000
Offset_0x10D9E8:
		dc.w	$0002
		dc.w	$F007, $0022, $FFF0
		dc.w	$F007, $0822, $0000
Offset_0x10D9F6:
		dc.w	$0004
		dc.w	$F005, $002A, $FFF0
		dc.w	$F005, $082A, $0000
		dc.w	$0005, $102A, $FFF0
		dc.w	$0005, $182A, $0000
Offset_0x10DA10:
		dc.w	$0006
		dc.w	$C00E, $002E, $FFF0
		dc.w	$D808, $003A, $FFF8
		dc.w	$E007, $003D, $FFF8
		dc.w	$000E, $002E, $FFF0
		dc.w	$1808, $003A, $FFF8
		dc.w	$2007, $003D, $FFF8
Offset_0x10DA36:
		dc.w	$0006
		dc.w	$C007, $003D, $FFF8
		dc.w	$E00E, $002E, $FFF0
		dc.w	$F808, $003A, $FFF8
		dc.w	$0007, $003D, $FFF8
		dc.w	$200E, $002E, $FFF0
		dc.w	$3808, $003A, $FFF8
Offset_0x10DA5C:
		dc.w	$0002
		dc.w	$F003, $0045, $FFF8
		dc.w	$F003, $0845, $0000
Offset_0x10DA6A:
		dc.w	$0001
		dc.w	$0000, $FBD0, $0000
Offset_0x10DA72:
		dc.w	$0001
		dc.w	$F007, $0022, $FFF0
Offset_0x10DA7A:
		dc.w	$0003
		dc.w	$EC0F, $0000, $FFF4
		dc.w	$F402, $0010, $FFEC
		dc.w	$0C08, $0013, $FFFC
Offset_0x10DA8E:
		dc.w	$0003
		dc.w	$EC0F, $0800, $FFEC
		dc.w	$F402, $0810, $000C
		dc.w	$0C08, $0813, $FFEC
;-------------------------------------------------------------------------------
Graviton_Mobile_Magnetic_Angle_X_Lookup_Data:                  ; Offset_0x10DAA2
		dc.b	$00, $01, $02, $03, $04, $05, $06, $08
		dc.b	$09, $0A, $0B, $0C, $0D, $0E, $0F, $10
		dc.b	$11, $12, $13, $14, $15, $16, $17, $18
		dc.b	$18, $19, $1A, $1B, $1C, $1D, $1E, $1E
		dc.b	$1F, $20, $21, $21, $22, $23, $23, $24
		dc.b	$25, $25, $26, $26, $27, $27, $28, $28
		dc.b	$29, $29, $29, $2A, $2A, $2A, $2B, $2B
		dc.b	$2B, $2B, $2C, $2C, $2C, $2C, $2C, $2C
;-------------------------------------------------------------------------------
Gapsule_Mappings:                                              ; Offset_0x10DAE2
		dc.w	Offset_0x10DB06-Gapsule_Mappings
		dc.w	Offset_0x10DB20-Gapsule_Mappings
		dc.w	Offset_0x10DB28-Gapsule_Mappings
		dc.w	Offset_0x10DB30-Gapsule_Mappings
		dc.w	Offset_0x10DB3E-Gapsule_Mappings
		dc.w	Offset_0x10DB4C-Gapsule_Mappings
		dc.w	Offset_0x10DB5A-Gapsule_Mappings
		dc.w	Offset_0x10DB68-Gapsule_Mappings
		dc.w	Offset_0x10DB82-Gapsule_Mappings
		dc.w	Offset_0x10DBA8-Gapsule_Mappings
		dc.w	Offset_0x10DBCE-Gapsule_Mappings
		dc.w	Offset_0x10DBF4-Gapsule_Mappings
		dc.w	Offset_0x10DC1A-Gapsule_Mappings
		dc.w	Offset_0x10DC40-Gapsule_Mappings
		dc.w	Offset_0x10DC66-Gapsule_Mappings
		dc.w	Offset_0x10DC8C-Gapsule_Mappings
		dc.w	Offset_0x10DCB2-Gapsule_Mappings
		dc.w	Offset_0x10DCD8-Gapsule_Mappings
Offset_0x10DB06:
		dc.w	$0004
		dc.w	$E00F, $0000, $FFE0
		dc.w	$000F, $0010, $FFE0
		dc.w	$E00F, $0800, $0000
		dc.w	$000F, $0810, $0000
Offset_0x10DB20:
		dc.w	$0001
		dc.w	$F805, $0020, $FFF8
Offset_0x10DB28:
		dc.w	$0001
		dc.w	$F805, $0820, $FFF8
Offset_0x10DB30:
		dc.w	$0002
		dc.w	$F801, $0024, $FFF8
		dc.w	$F801, $0824, $0000
Offset_0x10DB3E:
		dc.w	$0002
		dc.w	$F805, $0026, $FFF0
		dc.w	$F805, $0826, $0000
Offset_0x10DB4C:
		dc.w	$0002
		dc.w	$F80C, $002A, $FFF8
		dc.w	$0009, $002E, $FFF8
Offset_0x10DB5A:
		dc.w	$0002
		dc.w	$F801, $0034, $FFF8
		dc.w	$F801, $0834, $0000
Offset_0x10DB68:
		dc.w	$0004
		dc.w	$E80A, $0036, $FFE8
		dc.w	$000A, $003F, $FFE8
		dc.w	$E80A, $0836, $0000
		dc.w	$000A, $083F, $0000
Offset_0x10DB82:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$FC00, $0051, $FFF4
		dc.w	$FC00, $0051, $0004
		dc.w	$FC00, $0050, $FFF4
		dc.w	$FC00, $0050, $0004
Offset_0x10DBA8:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$F900, $0051, $FFF4
		dc.w	$F900, $0051, $0004
		dc.w	$FA00, $0050, $FFF4
		dc.w	$FA00, $0050, $0004
Offset_0x10DBCE:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$F900, $0051, $FFF6
		dc.w	$F900, $0051, $0007
		dc.w	$FA00, $0050, $FFF5
		dc.w	$FA00, $0050, $0006
Offset_0x10DBF4:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$FC00, $0051, $FFF7
		dc.w	$FC00, $0051, $0008
		dc.w	$FC00, $0050, $FFF6
		dc.w	$FC00, $0050, $0007
Offset_0x10DC1A:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$FF00, $0051, $FFF7
		dc.w	$FF00, $0051, $0007
		dc.w	$FE00, $0050, $FFF6
		dc.w	$FE00, $0050, $0006
Offset_0x10DC40:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$FF00, $0051, $FFF4
		dc.w	$FF00, $0051, $0004
		dc.w	$FE00, $0050, $FFF4
		dc.w	$FE00, $0050, $0004
Offset_0x10DC66:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$FF00, $0051, $FFF1
		dc.w	$FF00, $0051, $0002
		dc.w	$FE00, $0050, $FFF2
		dc.w	$FE00, $0050, $0003
Offset_0x10DC8C:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$FC00, $0051, $FFF0
		dc.w	$FC00, $0051, $0001
		dc.w	$FC00, $0050, $FFF1
		dc.w	$FC00, $0050, $0002
Offset_0x10DCB2:
		dc.w	$0006
		dc.w	$F805, $0048, $FFF0
		dc.w	$F805, $0848, $0000
		dc.w	$F900, $0051, $FFF1
		dc.w	$F900, $0051, $0002
		dc.w	$FA00, $0050, $FFF2
		dc.w	$FA00, $0050, $0003
Offset_0x10DCD8:
		dc.w	$0002
		dc.w	$F805, $004C, $FFF0
		dc.w	$F805, $084C, $0000
;-------------------------------------------------------------------------------
Unreferenced_Mappings:                                         ; Offset_0x10DCE6
		dc.w	Offset_0x10DCF6-Unreferenced_Mappings
		dc.w	Offset_0x10DD1C-Unreferenced_Mappings
		dc.w	Offset_0x10DD42-Unreferenced_Mappings
		dc.w	Offset_0x10DD4A-Unreferenced_Mappings
		dc.w	Offset_0x10DD52-Unreferenced_Mappings
		dc.w	Offset_0x10DD5A-Unreferenced_Mappings
		dc.w	Offset_0x10DD62-Unreferenced_Mappings
		dc.w	Offset_0x10DD62-Unreferenced_Mappings
Offset_0x10DCF6:
		dc.w	$0006
		dc.w	$E008, $0000, $FFE8
		dc.w	$E008, $0800, $0000
		dc.w	$E80F, $0003, $FFE0
		dc.w	$E80F, $0803, $0000
		dc.w	$080E, $0013, $FFE0
		dc.w	$080E, $0813, $0000
Offset_0x10DD1C:
		dc.w	$0006
		dc.w	$E00D, $001F, $FFE0
		dc.w	$E00D, $081F, $0000
		dc.w	$F00E, $0027, $FFE0
		dc.w	$F00E, $0827, $0000
		dc.w	$080E, $0013, $FFE0
		dc.w	$080E, $0813, $0000
Offset_0x10DD42:
		dc.w	$0001
		dc.w	$F80D, $0033, $FFF0
Offset_0x10DD4A:
		dc.w	$0001
		dc.w	$F805, $003F, $FFF8
Offset_0x10DD52:
		dc.w	$0001
		dc.w	$F805, $083F, $FFF8
Offset_0x10DD5A:
		dc.w	$0001
		dc.w	$F805, $003B, $FFF8
Offset_0x10DD62:
		dc.w	$0001
		dc.w	$F801, $0004, $FFFC
;-------------------------------------------------------------------------------
Blastoid_Mappings:                                             ; Offset_0x10DD6A
		dc.w	Offset_0x10DD72-Blastoid_Mappings
		dc.w	Offset_0x10DD86-Blastoid_Mappings
		dc.w	Offset_0x10DD9A-Blastoid_Mappings
		dc.w	Offset_0x10DDA2-Blastoid_Mappings
Offset_0x10DD72:
		dc.w	$0003
		dc.w	$F405, $000A, $FFE8
		dc.w	$F409, $0000, $FFF8
		dc.w	$040C, $0006, $FFF0
Offset_0x10DD86:
		dc.w	$0003
		dc.w	$F405, $000E, $FFE8
		dc.w	$F409, $0000, $FFF8
		dc.w	$040C, $0006, $FFF0
Offset_0x10DD9A:
		dc.w	$0001
		dc.w	$FC00, $0012, $FFFC
Offset_0x10DDA2:
		dc.w	$0001
		dc.w	$FC00, $0013, $FFFC
;-------------------------------------------------------------------------------
Toxomister_Mappings:                                           ; Offset_0x10DDAA
		dc.w	Offset_0x10DDBA-Toxomister_Mappings
		dc.w	Offset_0x10DDC2-Toxomister_Mappings
		dc.w	Offset_0x10DDDC-Toxomister_Mappings
		dc.w	Offset_0x10DDE4-Toxomister_Mappings
		dc.w	Offset_0x10DDEC-Toxomister_Mappings
		dc.w	Offset_0x10DDF4-Toxomister_Mappings
		dc.w	Offset_0x10DDFC-Toxomister_Mappings
		dc.w	Offset_0x10DE04-Toxomister_Mappings
Offset_0x10DDBA:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10DDC2:
		dc.w	$0004
		dc.w	$F001, $0004, $FFF8
		dc.w	$F001, $0804, $0000
		dc.w	$0001, $0004, $FFF8
		dc.w	$0001, $0804, $0000
Offset_0x10DDDC:
		dc.w	$0001
		dc.w	$FC00, $0006, $FFFC
Offset_0x10DDE4:
		dc.w	$0001
		dc.w	$FC00, $0007, $FFFC
Offset_0x10DDEC:
		dc.w	$0001
		dc.w	$F805, $0008, $FFF8
Offset_0x10DDF4:
		dc.w	$0001
		dc.w	$F805, $000C, $FFF8
Offset_0x10DDFC:
		dc.w	$0001
		dc.w	$F805, $0010, $FFF8
Offset_0x10DE04:
		dc.w	$0001
		dc.w	$F805, $0014, $FFF8
;-------------------------------------------------------------------------------
Pointdexter_Mappings:                                          ; Offset_0x10DE0C
		dc.w	Offset_0x10DE12-Pointdexter_Mappings
		dc.w	Offset_0x10DE26-Pointdexter_Mappings
		dc.w	Offset_0x10DE3A-Pointdexter_Mappings
Offset_0x10DE12:
		dc.w	$0003
		dc.w	$F801, $0000, $FFEC
		dc.w	$F809, $0002, $FFF4
		dc.w	$F801, $0008, $000C
Offset_0x10DE26:
		dc.w	$0003
		dc.w	$F401, $0000, $FFEC
		dc.w	$F40A, $000A, $FFF4
		dc.w	$F401, $0008, $000C
Offset_0x10DE3A:
		dc.w	$0003
		dc.w	$F801, $0000, $FFEC
		dc.w	$F00B, $0013, $FFF4
		dc.w	$F801, $0008, $000C
;-------------------------------------------------------------------------------
Buggernaut_Mappings:                                           ; Offset_0x10DE4E
		dc.w	Offset_0x10DE5A-Buggernaut_Mappings
		dc.w	Offset_0x10DE62-Buggernaut_Mappings
		dc.w	Offset_0x10DE76-Buggernaut_Mappings
		dc.w	Offset_0x10DE8A-Buggernaut_Mappings
		dc.w	Offset_0x10DE92-Buggernaut_Mappings
		dc.w	Offset_0x10DEA6-Buggernaut_Mappings
Offset_0x10DE5A:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10DE62:
		dc.w	$0003
		dc.w	$F805, $0000, $FFF8
		dc.w	$F404, $0004, $0000
		dc.w	$F404, $0804, $FFF7
Offset_0x10DE76:
		dc.w	$0003
		dc.w	$F805, $0000, $FFF8
		dc.w	$FC04, $1004, $0000
		dc.w	$FC04, $1804, $FFF7
Offset_0x10DE8A:
		dc.w	$0001
		dc.w	$FC04, $0006, $FFF8
Offset_0x10DE92:
		dc.w	$0003
		dc.w	$FC04, $0006, $FFF8
		dc.w	$F500, $0008, $0000
		dc.w	$F500, $0008, $FFF4
Offset_0x10DEA6:
		dc.w	$0003
		dc.w	$FC04, $0006, $FFF8
		dc.w	$FD00, $0008, $0000
		dc.w	$FD00, $0008, $FFF4
;-------------------------------------------------------------------------------
Mega_Chopper_Mappings:                                         ; Offset_0x10DEBA
		dc.w	Offset_0x10DEC2-Mega_Chopper_Mappings
		dc.w	Offset_0x10DED0-Mega_Chopper_Mappings
		dc.w	Offset_0x10DEDE-Mega_Chopper_Mappings
		dc.w	Offset_0x10DEEC-Mega_Chopper_Mappings
Offset_0x10DEC2:
		dc.w	$0002
		dc.w	$F805, $0000, $FFF4
		dc.w	$F801, $0008, $0004
Offset_0x10DED0:
		dc.w	$0002
		dc.w	$F805, $0000, $FFF4
		dc.w	$F801, $000A, $0004
Offset_0x10DEDE:
		dc.w	$0002
		dc.w	$F805, $0004, $FFF4
		dc.w	$F801, $0008, $0004
Offset_0x10DEEC:
		dc.w	$0002
		dc.w	$F805, $0004, $FFF4
		dc.w	$F801, $000A, $0004
;-------------------------------------------------------------------------------
Dragonfly_Mappings:                                            ; Offset_0x10DEFA
		dc.w	Offset_0x10DF0E-Dragonfly_Mappings
		dc.w	Offset_0x10DF28-Dragonfly_Mappings
		dc.w	Offset_0x10DF42-Dragonfly_Mappings
		dc.w	Offset_0x10DF5C-Dragonfly_Mappings
		dc.w	Offset_0x10DF76-Dragonfly_Mappings
		dc.w	Offset_0x10DF90-Dragonfly_Mappings
		dc.w	Offset_0x10DF98-Dragonfly_Mappings
		dc.w	Offset_0x10DFA0-Dragonfly_Mappings
		dc.w	Offset_0x10DFAE-Dragonfly_Mappings
		dc.w	Offset_0x10DFBC-Dragonfly_Mappings
Offset_0x10DF0E:
		dc.w	$0004
		dc.w	$FA04, $0004, $FFF8
		dc.w	$FC00, $0006, $FFF0
		dc.w	$FC00, $0006, $0008
		dc.w	$F805, $0000, $FFF8
Offset_0x10DF28:
		dc.w	$0004
		dc.w	$FB04, $0004, $FFF8
		dc.w	$FC00, $0006, $FFF0
		dc.w	$FC00, $0006, $0008
		dc.w	$F805, $0000, $FFF8
Offset_0x10DF42:
		dc.w	$0004
		dc.w	$FC04, $0004, $FFF8
		dc.w	$FC00, $0006, $FFF0
		dc.w	$FC00, $0006, $0008
		dc.w	$F805, $0000, $FFF8
Offset_0x10DF5C:
		dc.w	$0004
		dc.w	$FD04, $0004, $FFF8
		dc.w	$FC00, $0006, $FFF0
		dc.w	$FC00, $0006, $0008
		dc.w	$F805, $0000, $FFF8
Offset_0x10DF76:
		dc.w	$0004
		dc.w	$FE04, $0004, $FFF8
		dc.w	$FC00, $0006, $FFF0
		dc.w	$FC00, $0006, $0008
		dc.w	$F805, $0000, $FFF8
Offset_0x10DF90:
		dc.w	$0001
		dc.w	$FC04, $0007, $FFF8
Offset_0x10DF98:
		dc.w	$0001
		dc.w	$FC00, $0009, $FFFC
Offset_0x10DFA0:
		dc.w	$0002
		dc.w	$F808, $000A, $FFD8
		dc.w	$F808, $080A, $0010
Offset_0x10DFAE:
		dc.w	$0002
		dc.w	$0008, $100A, $FFD8
		dc.w	$0008, $180A, $0010
Offset_0x10DFBC:
		dc.w	$0001
		dc.w	$0000, $FA93, $0000
;-------------------------------------------------------------------------------
Cluckoid_Dyn_Script:                                           ; Offset_0x10DFC4
		dc.w	Offset_0x10DFE0-Cluckoid_Dyn_Script
		dc.w	Offset_0x10DFE8-Cluckoid_Dyn_Script
		dc.w	Offset_0x10DFF0-Cluckoid_Dyn_Script
		dc.w	Offset_0x10DFF8-Cluckoid_Dyn_Script
		dc.w	Offset_0x10DFFE-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E004-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E00A-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E012-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E01A-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E022-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E028-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E02E-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E034-Cluckoid_Dyn_Script
		dc.w	Offset_0x10E03A-Cluckoid_Dyn_Script
Offset_0x10DFE0:
		dc.w	$0002
		dc.w	$0008, $0091, $00B1
Offset_0x10DFE8:
		dc.w	$0002
		dc.w	$00D8, $0091, $00B1
Offset_0x10DFF0:
		dc.w	$0002
		dc.w	$0168, $0091, $00B1
Offset_0x10DFF8:
		dc.w	$0001
		dc.w	$01FB, $00B1
Offset_0x10DFFE:
		dc.w	$0001
		dc.w	$02BB, $0372
Offset_0x10E004:
		dc.w	$0001
		dc.w	$03AB, $0462
Offset_0x10E00A:
		dc.w	$0002
		dc.w	$0492, $04CB, $0581
Offset_0x10E012:
		dc.w	$0002
		dc.w	$05A2, $05DB, $0581
Offset_0x10E01A:
		dc.w	$0002
		dc.w	$0691, $06BB, $0581
Offset_0x10E022:
		dc.w	$0001
		dc.w	$077B, $0831
Offset_0x10E028:
		dc.w	$0001
		dc.w	$085B, $0581
Offset_0x10E02E:
		dc.w	$0001
		dc.w	$09DB, $0441
Offset_0x10E034:
		dc.w	$0001
		dc.w	$091B, $0091
Offset_0x10E03A:
		dc.w	$0002
		dc.w	$0A98, $00B1, $0091
;-------------------------------------------------------------------------------
Cluckoid_Arrow_Mappings:                                       ; Offset_0x10E042
		dc.w	Offset_0x10E044-Cluckoid_Arrow_Mappings
Offset_0x10E044:
		dc.w	$0002
		dc.w	$F40C, $0000, $FFF0
		dc.w	$FC01, $0004, $FFF8
;-------------------------------------------------------------------------------
Cluckoid_Mappings:                                             ; Offset_0x10E052
		dc.w	Offset_0x10E06E-Cluckoid_Mappings
		dc.w	Offset_0x10E082-Cluckoid_Mappings
		dc.w	Offset_0x10E096-Cluckoid_Mappings
		dc.w	Offset_0x10E0AA-Cluckoid_Mappings
		dc.w	Offset_0x10E0B8-Cluckoid_Mappings
		dc.w	Offset_0x10E0C6-Cluckoid_Mappings
		dc.w	Offset_0x10E0D4-Cluckoid_Mappings
		dc.w	Offset_0x10E0E8-Cluckoid_Mappings
		dc.w	Offset_0x10E0FC-Cluckoid_Mappings
		dc.w	Offset_0x10E110-Cluckoid_Mappings
		dc.w	Offset_0x10E11E-Cluckoid_Mappings
		dc.w	Offset_0x10E12C-Cluckoid_Mappings
		dc.w	Offset_0x10E13A-Cluckoid_Mappings
		dc.w	Offset_0x10E148-Cluckoid_Mappings
Offset_0x10E06E:
		dc.w	$0003
		dc.w	$F00A, $0000, $FFF0
		dc.w	$F801, $0009, $0008
		dc.w	$0804, $000B, $FFF8
Offset_0x10E082:
		dc.w	$0003
		dc.w	$F00A, $0000, $FFF0
		dc.w	$F801, $0009, $0008
		dc.w	$0804, $000B, $FFF8
Offset_0x10E096:
		dc.w	$0003
		dc.w	$F00A, $0000, $FFF0
		dc.w	$F801, $0009, $0008
		dc.w	$0804, $000B, $FFF8
Offset_0x10E0AA:
		dc.w	$0002
		dc.w	$F00E, $0000, $FFF0
		dc.w	$0804, $000C, $FFF8
Offset_0x10E0B8:
		dc.w	$0002
		dc.w	$F00E, $0000, $FFF0
		dc.w	$0808, $000C, $FFF0
Offset_0x10E0C6:
		dc.w	$0002
		dc.w	$F00E, $0000, $FFF0
		dc.w	$0808, $000C, $FFF0
Offset_0x10E0D4:
		dc.w	$0003
		dc.w	$F008, $0000, $FFF0
		dc.w	$F80E, $0003, $FFE8
		dc.w	$F801, $000F, $0008
Offset_0x10E0E8:
		dc.w	$0003
		dc.w	$F008, $0000, $FFF0
		dc.w	$F80E, $0003, $FFE8
		dc.w	$F801, $000F, $0008
Offset_0x10E0FC:
		dc.w	$0003
		dc.w	$0001, $0000, $FFE8
		dc.w	$F00B, $0002, $FFF0
		dc.w	$F801, $000E, $0008
Offset_0x10E110:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFED
		dc.w	$F801, $000C, $0005
Offset_0x10E11E:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFF0
		dc.w	$F801, $000C, $0008
Offset_0x10E12C:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFF0
		dc.w	$F801, $000C, $0008
Offset_0x10E13A:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFF0
		dc.w	$F801, $000C, $0008
Offset_0x10E148:
		dc.w	$0003
		dc.w	$F00A, $0000, $FFF0
		dc.w	$0804, $0009, $FFF8
		dc.w	$F801, $000B, $0008
;-------------------------------------------------------------------------------
Butterdroid_Mappings:                                          ; Offset_0x10E15C
		dc.w	Offset_0x10E166-Butterdroid_Mappings
		dc.w	Offset_0x10E16E-Butterdroid_Mappings
		dc.w	Offset_0x10E176-Butterdroid_Mappings
		dc.w	Offset_0x10E17E-Butterdroid_Mappings
		dc.w	Offset_0x10E186-Butterdroid_Mappings
Offset_0x10E166:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10E16E:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10E176:
		dc.w	$0001
		dc.w	$FC0D, $0000, $FFEF
Offset_0x10E17E:
		dc.w	$0001
		dc.w	$000D, $0000, $FFEC
Offset_0x10E186:
		dc.w	$0001
		dc.w	$000A, $0000, $FFF4
;-------------------------------------------------------------------------------
Butterdroid_Dyn_Script:                                        ; Offset_0x10E18E
		dc.w	Offset_0x10E198-Butterdroid_Dyn_Script
		dc.w	Offset_0x10E19C-Butterdroid_Dyn_Script
		dc.w	Offset_0x10E1A0-Butterdroid_Dyn_Script
		dc.w	Offset_0x10E1A4-Butterdroid_Dyn_Script
		dc.w	Offset_0x10E1A8-Butterdroid_Dyn_Script
Offset_0x10E198:
		dc.w	$0000
		dc.w	$0008
Offset_0x10E19C:
		dc.w	$0000
		dc.w	$0098
Offset_0x10E1A0:
		dc.w	$0000
		dc.w	$0127
Offset_0x10E1A4:
		dc.w	$0000
		dc.w	$01A7
Offset_0x10E1A8:
		dc.w	$0000
		dc.w	$0228
;-------------------------------------------------------------------------------
Turbo_Spiker_Mappings:                                         ; Offset_0x10E1AC
		dc.w	Offset_0x10E1C8-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E1E2-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E1FC-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E216-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E224-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E22C-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E234-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E23C-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E244-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E24C-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E254-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E25C-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E264-Turbo_Spiker_Mappings
		dc.w	Offset_0x10E26C-Turbo_Spiker_Mappings
Offset_0x10E1C8:
		dc.w	$0004
		dc.w	$F006, $0000, $FFF0
		dc.w	$0008, $0006, $0000
		dc.w	$0800, $0009, $FFF0
		dc.w	$080C, $000A, $FFF8
Offset_0x10E1E2:
		dc.w	$0004
		dc.w	$F006, $0000, $FFF0
		dc.w	$0008, $0006, $0000
		dc.w	$0800, $000E, $FFF0
		dc.w	$080C, $000F, $FFF8
Offset_0x10E1FC:
		dc.w	$0004
		dc.w	$F006, $0000, $FFF0
		dc.w	$0008, $0006, $0000
		dc.w	$0800, $0013, $FFF0
		dc.w	$080C, $0014, $FFF8
Offset_0x10E216:
		dc.w	$0002
		dc.w	$E80B, $0018, $FFF4
		dc.w	$0809, $0024, $FFF4
Offset_0x10E224:
		dc.w	$0001
		dc.w	$F801, $002A, $FFFC
Offset_0x10E22C:
		dc.w	$0001
		dc.w	$FC00, $002C, $FFFC
Offset_0x10E234:
		dc.w	$0001
		dc.w	$FC00, $002D, $FFFC
Offset_0x10E23C:
		dc.w	$0001
		dc.w	$FC00, $002E, $FFFC
Offset_0x10E244:
		dc.w	$0001
		dc.w	$F805, $002F, $FFF8
Offset_0x10E24C:
		dc.w	$0001
		dc.w	$F805, $082F, $FFF8
Offset_0x10E254:
		dc.w	$0001
		dc.w	$F805, $0033, $FFF8
Offset_0x10E25C:
		dc.w	$0001
		dc.w	$F805, $0833, $FFF8
Offset_0x10E264:
		dc.w	$0001
		dc.w	$FC04, $0037, $FFF8
Offset_0x10E26C:
		dc.w	$0001
		dc.w	$FC04, $0837, $FFF8
;-------------------------------------------------------------------------------
Fireworm_Segments_Mappings:                                    ; Offset_0x10E274
		dc.w	Offset_0x10E2B4-Fireworm_Segments_Mappings
		dc.w	Offset_0x10E284-Fireworm_Segments_Mappings
		dc.w	Offset_0x10E28C-Fireworm_Segments_Mappings
		dc.w	Offset_0x10E294-Fireworm_Segments_Mappings
		dc.w	Offset_0x10E29C-Fireworm_Segments_Mappings
		dc.w	Offset_0x10E2A4-Fireworm_Segments_Mappings
		dc.w	Offset_0x10E2AC-Fireworm_Segments_Mappings
		dc.w	Offset_0x10E2BC-Fireworm_Segments_Mappings
Offset_0x10E284:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10E28C:
		dc.w	$0001
		dc.w	$F805, $0004, $FFF8
Offset_0x10E294:
		dc.w	$0001
		dc.w	$F805, $0008, $FFF8
Offset_0x10E29C:
		dc.w	$0001
		dc.w	$F805, $000C, $FFF8
Offset_0x10E2A4:
		dc.w	$0001
		dc.w	$F805, $0010, $FFF8
Offset_0x10E2AC:
		dc.w	$0001
		dc.w	$FC00, $0014, $FFFC
Offset_0x10E2B4:
		dc.w	$0001
		dc.w	$EC0A, $0015, $FFF4
Offset_0x10E2BC:
		dc.w	$0001
		dc.w	$0000, $FAE8, $0000
;-------------------------------------------------------------------------------
Fireworm_Dyn_Script:                                           ; Offset_0x10E2C4
		dc.w	Offset_0x10E2CC-Fireworm_Dyn_Script
		dc.w	Offset_0x10E2D0-Fireworm_Dyn_Script
		dc.w	Offset_0x10E2D4-Fireworm_Dyn_Script
		dc.w	Offset_0x10E2D8-Fireworm_Dyn_Script
Offset_0x10E2CC:
		dc.w	$0000
		dc.w	$0003
Offset_0x10E2D0:
		dc.w	$0000
		dc.w	$0045
Offset_0x10E2D4:
		dc.w	$0000
		dc.w	$00A8
Offset_0x10E2D8:
		dc.w	$0000
		dc.w	$0138
;-------------------------------------------------------------------------------
Fireworm_Mappings:                                             ; Offset_0x10E2DC
		dc.w	Offset_0x10E2E4-Fireworm_Mappings
		dc.w	Offset_0x10E2EC-Fireworm_Mappings
		dc.w	Offset_0x10E2F4-Fireworm_Mappings
		dc.w	Offset_0x10E2FC-Fireworm_Mappings
Offset_0x10E2E4:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10E2EC:
		dc.w	$0001
		dc.w	$F406, $0000, $FFF8
Offset_0x10E2F4:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10E2FC:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
;-------------------------------------------------------------------------------
Jawz_Mappings:                                                 ; Offset_0x10E304
		dc.w	Offset_0x10E308-Jawz_Mappings
		dc.w	Offset_0x10E31C-Jawz_Mappings
Offset_0x10E308:
		dc.w	$0003
		dc.w	$FC0D, $0000, $FFE8
		dc.w	$F406, $0008, $0008
		dc.w	$F402, $000E, $0018
Offset_0x10E31C:
		dc.w	$0003
		dc.w	$FC0D, $0000, $FFE8
		dc.w	$F406, $0008, $0008
		dc.w	$F402, $0011, $0018
;-------------------------------------------------------------------------------
Mushmeanie_Mappings:                                           ; Offset_0x10E330
		dc.w	Offset_0x10E338-Mushmeanie_Mappings
		dc.w	Offset_0x10E340-Mushmeanie_Mappings
		dc.w	Offset_0x10E34E-Mushmeanie_Mappings
		dc.w	Offset_0x10E35C-Mushmeanie_Mappings
Offset_0x10E338:
		dc.w	$0001
		dc.w	$F809, $0000, $FFF4
Offset_0x10E340:
		dc.w	$0002
		dc.w	$F805, $0006, $FFF8
		dc.w	$0700, $000A, $FFFC
Offset_0x10E34E:
		dc.w	$0002
		dc.w	$F805, $0006, $FFF8
		dc.w	$0201, $000B, $FFFC
Offset_0x10E35C:
		dc.w	$0002
		dc.w	$F805, $0006, $FFF8
		dc.w	$0501, $000D, $FFFC
;-------------------------------------------------------------------------------
Madmole_Mappings:                                              ; Offset_0x10E36A
		dc.w	Offset_0x10E386-Madmole_Mappings
		dc.w	Offset_0x10E3A6-Madmole_Mappings
		dc.w	Offset_0x10E3C6-Madmole_Mappings
		dc.w	Offset_0x10E3E6-Madmole_Mappings
		dc.w	Offset_0x10E3FA-Madmole_Mappings
		dc.w	Offset_0x10E408-Madmole_Mappings
		dc.w	Offset_0x10E416-Madmole_Mappings
		dc.w	Offset_0x10E41E-Madmole_Mappings
		dc.w	Offset_0x10E42C-Madmole_Mappings
		dc.w	Offset_0x10E434-Madmole_Mappings
		dc.w	Offset_0x10E442-Madmole_Mappings
		dc.w	Offset_0x10E44A-Madmole_Mappings
		dc.w	Offset_0x10E458-Madmole_Mappings
		dc.w	Offset_0x10E460-Madmole_Mappings
Offset_0x10E386:
		dc.w	$0005
		dc.w	$F40A, $2000, $FFFA
		dc.w	$FC00, $2009, $FFF2
		dc.w	$E809, $400E, $FFFD
		dc.w	$F800, $4014, $0005
		dc.w	$0401, $200A, $000A
Offset_0x10E3A6:
		dc.w	$0005
		dc.w	$F40A, $2000, $FFFA
		dc.w	$FC00, $2009, $FFF2
		dc.w	$E809, $400E, $FFF5
		dc.w	$F800, $4014, $FFFD
		dc.w	$0401, $200A, $0002
Offset_0x10E3C6:
		dc.w	$0005
		dc.w	$F40A, $2000, $FFFA
		dc.w	$FC00, $2009, $FFF2
		dc.w	$E809, $400E, $FFED
		dc.w	$F800, $4014, $FFF5
		dc.w	$0401, $200A, $FFFA
Offset_0x10E3E6:
		dc.w	$0003
		dc.w	$F40A, $2000, $FFFA
		dc.w	$FC00, $2009, $FFF2
		dc.w	$F801, $200C, $FFF2
Offset_0x10E3FA:
		dc.w	$0002
		dc.w	$F40A, $2000, $FFFA
		dc.w	$FC00, $2009, $FFF2
Offset_0x10E408:
		dc.w	$0002
		dc.w	$F409, $400E, $FFF4
		dc.w	$0400, $4014, $FFFC
Offset_0x10E416:
		dc.w	$0001
		dc.w	$F40A, $4015, $FFF4
Offset_0x10E41E:
		dc.w	$0002
		dc.w	$FC00, $401E, $FFF4
		dc.w	$F406, $401F, $FFFC
Offset_0x10E42C:
		dc.w	$0001
		dc.w	$F40A, $5015, $FFF4
Offset_0x10E434:
		dc.w	$0002
		dc.w	$FC09, $500E, $FFF4
		dc.w	$F400, $5014, $FFFC
Offset_0x10E442:
		dc.w	$0001
		dc.w	$F40A, $5815, $FFF4
Offset_0x10E44A:
		dc.w	$0002
		dc.w	$FC00, $481E, $0004
		dc.w	$F406, $481F, $FFF4
Offset_0x10E458:
		dc.w	$0001
		dc.w	$F40A, $4815, $FFF4
Offset_0x10E460:
		dc.w	$0002
		dc.w	$FC08, $2025, $FFE8
		dc.w	$FC08, $2825, $0000
;-------------------------------------------------------------------------------
Iwamodock_Mappings:                                            ; Offset_0x10E46E
		dc.w	Offset_0x10E482-Iwamodock_Mappings
		dc.w	Offset_0x10E48A-Iwamodock_Mappings
		dc.w	Offset_0x10E49E-Iwamodock_Mappings
		dc.w	Offset_0x10E4B2-Iwamodock_Mappings
		dc.w	Offset_0x10E4C6-Iwamodock_Mappings
		dc.w	Offset_0x10E4DA-Iwamodock_Mappings
		dc.w	Offset_0x10E4EE-Iwamodock_Mappings
		dc.w	Offset_0x10E4F6-Iwamodock_Mappings
		dc.w	Offset_0x10E4FE-Iwamodock_Mappings
		dc.w	Offset_0x10E506-Iwamodock_Mappings
Offset_0x10E482:
		dc.w	$0001
		dc.w	$F40A, $6000, $FFF4
Offset_0x10E48A:
		dc.w	$0003
		dc.w	$0400, $201B, $FFF8
		dc.w	$0400, $281B, $0000
		dc.w	$F40A, $6009, $FFF4
Offset_0x10E49E:
		dc.w	$0003
		dc.w	$FD05, $201C, $FFF0
		dc.w	$FD05, $281C, $0000
		dc.w	$F40A, $6012, $FFF4
Offset_0x10E4B2:
		dc.w	$0003
		dc.w	$FD05, $2020, $FFF0
		dc.w	$FD05, $2820, $0000
		dc.w	$F40A, $6012, $FFF4
Offset_0x10E4C6:
		dc.w	$0003
		dc.w	$FD05, $2024, $FFF0
		dc.w	$FD05, $2824, $0000
		dc.w	$F40A, $6012, $FFF4
Offset_0x10E4DA:
		dc.w	$0003
		dc.w	$FD05, $2028, $FFF0
		dc.w	$FD05, $2828, $0000
		dc.w	$F40A, $6012, $FFF4
Offset_0x10E4EE:
		dc.w	$0001
		dc.w	$FC04, $602C, $FFF8
Offset_0x10E4F6:
		dc.w	$0001
		dc.w	$FC00, $602E, $FFFC
Offset_0x10E4FE:
		dc.w	$0001
		dc.w	$FC04, $002F, $FFF8
Offset_0x10E506:
		dc.w	$0001
		dc.w	$FC00, $0031, $FFFC
;-------------------------------------------------------------------------------
Rhinobot_Dyn_Script:                                           ; Offset_0x10E50E
		dc.w	Offset_0x10E51E-Rhinobot_Dyn_Script
		dc.w	Offset_0x10E526-Rhinobot_Dyn_Script
		dc.w	Offset_0x10E52E-Rhinobot_Dyn_Script
		dc.w	Offset_0x10E532-Rhinobot_Dyn_Script
		dc.w	Offset_0x10E538-Rhinobot_Dyn_Script
		dc.w	Offset_0x10E53C-Rhinobot_Dyn_Script
		dc.w	Offset_0x10E540-Rhinobot_Dyn_Script
		dc.w	Offset_0x10E544-Rhinobot_Dyn_Script
Offset_0x10E51E:
		dc.w	$0002
		dc.w	$0001, $002F, $0122
Offset_0x10E526:
		dc.w	$0002
		dc.w	$0151, $0171, $019B
Offset_0x10E52E:
		dc.w	$0000
		dc.w	$025B
Offset_0x10E532:
		dc.w	$0001
		dc.w	$031F, $0411
Offset_0x10E538:
		dc.w	$0000
		dc.w	$0432
Offset_0x10E53C:
		dc.w	$0000
		dc.w	$0465
Offset_0x10E540:
		dc.w	$0000
		dc.w	$04C5
Offset_0x10E544:
		dc.w	$0000
		dc.w	$0522
;-------------------------------------------------------------------------------
Rhinobot_Mappings:                                             ; Offset_0x10E548
		dc.w	Offset_0x10E558-Rhinobot_Mappings
		dc.w	Offset_0x10E56C-Rhinobot_Mappings
		dc.w	Offset_0x10E580-Rhinobot_Mappings
		dc.w	Offset_0x10E588-Rhinobot_Mappings
		dc.w	Offset_0x10E596-Rhinobot_Mappings
		dc.w	Offset_0x10E59E-Rhinobot_Mappings
		dc.w	Offset_0x10E5A6-Rhinobot_Mappings
		dc.w	Offset_0x10E5AE-Rhinobot_Mappings
Offset_0x10E558:
		dc.w	$0003
		dc.w	$0001, $0000, $FFE8
		dc.w	$F00F, $0002, $FFF0
		dc.w	$F802, $0012, $0010
Offset_0x10E56C:
		dc.w	$0003
		dc.w	$0001, $0000, $FFEC
		dc.w	$F004, $0002, $FFF4
		dc.w	$F80E, $0004, $FFF4
Offset_0x10E580:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x10E588:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFEC
		dc.w	$F801, $0010, $000C
Offset_0x10E596:
		dc.w	$0001
		dc.w	$0008, $0000, $FFF4
Offset_0x10E59E:
		dc.w	$0001
		dc.w	$F809, $0000, $FFF4
Offset_0x10E5A6:
		dc.w	$0001
		dc.w	$F809, $0000, $FFF4
Offset_0x10E5AE:
		dc.w	$0001
		dc.w	$0008, $0000, $FFF4
;-------------------------------------------------------------------------------
; Offset_0x10E5B6:
		dc.w	((Offset_0x10E5CC-Boss_Explosion_Mappings)-$02)
		dc.w	Offset_0x10E5DC-Boss_Explosion_Mappings
		dc.w	Offset_0x10E5E4-Boss_Explosion_Mappings
		dc.w	Offset_0x10E5EC-Boss_Explosion_Mappings
		dc.w	Offset_0x10E5F4-Boss_Explosion_Mappings
Boss_Explosion_Mappings:                                       ; Offset_0x10E5C0
		dc.w	Offset_0x10E5CC-Boss_Explosion_Mappings
		dc.w	Offset_0x10E5D4-Boss_Explosion_Mappings
		dc.w	Offset_0x10E5DC-Boss_Explosion_Mappings
		dc.w	Offset_0x10E5E4-Boss_Explosion_Mappings
		dc.w	Offset_0x10E5EC-Boss_Explosion_Mappings
		dc.w	Offset_0x10E5F4-Boss_Explosion_Mappings
Offset_0x10E5CC:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10E5D4:
		dc.w	$0001
		dc.w	$F40A, $0004, $FFF4
Offset_0x10E5DC:
		dc.w	$0001
		dc.w	$F40A, $000D, $FFF4
Offset_0x10E5E4:
		dc.w	$0001
		dc.w	$F40A, $0016, $FFF4
Offset_0x10E5EC:
		dc.w	$0001
		dc.w	$F30A, $001F, $FFF4
Offset_0x10E5F4:
		dc.w	$0001
		dc.w	$F609, $0028, $FFF4
;-------------------------------------------------------------------------------
Fire_Breath_Flame_Mappings:                                    ; Offset_0x10E5FC
		dc.w	Offset_0x10E606-Fire_Breath_Flame_Mappings
		dc.w	Offset_0x10E60E-Fire_Breath_Flame_Mappings
		dc.w	Offset_0x10E616-Fire_Breath_Flame_Mappings
		dc.w	Offset_0x10E61E-Fire_Breath_Flame_Mappings
		dc.w	Offset_0x10E626-Fire_Breath_Flame_Mappings
Offset_0x10E606:
		dc.w	$0001
		dc.w	$EC0F, $0000, $FFEC
Offset_0x10E60E:
		dc.w	$0001
		dc.w	$F00F, $0010, $FFF0
Offset_0x10E616:
		dc.w	$0001
		dc.w	$F00F, $0020, $FFF0
Offset_0x10E61E:
		dc.w	$0001
		dc.w	$F00F, $0030, $FFF0
Offset_0x10E626:
		dc.w	$0001
		dc.w	$EB0F, $0040, $FFF0
;-------------------------------------------------------------------------------
Hang_Mobile_Flame_Mappings:                                    ; Offset_0x10E62E
		dc.w	Offset_0x10E638-Hang_Mobile_Flame_Mappings
		dc.w	Offset_0x10E640-Hang_Mobile_Flame_Mappings
		dc.w	Offset_0x10E648-Hang_Mobile_Flame_Mappings
		dc.w	Offset_0x10E650-Hang_Mobile_Flame_Mappings
		dc.w	Offset_0x10E658-Hang_Mobile_Flame_Mappings
Offset_0x10E638:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x10E640:
		dc.w	$0001
		dc.w	$EC0F, $000C, $FFF0
Offset_0x10E648:
		dc.w	$0001
		dc.w	$EC0F, $001C, $FFF0
Offset_0x10E650:
		dc.w	$0001
		dc.w	$EC0E, $002C, $FFF0
Offset_0x10E658:
		dc.w	$0001
		dc.w	$EC0E, $0038, $FFF0
;-------------------------------------------------------------------------------
Bloominator_Mappings:                                          ; Offset_0x10E660
		dc.w	Offset_0x10E66A-Bloominator_Mappings
		dc.w	Offset_0x10E690-Bloominator_Mappings
		dc.w	Offset_0x10E6B6-Bloominator_Mappings
		dc.w	Offset_0x10E6E8-Bloominator_Mappings
		dc.w	Offset_0x10E70E-Bloominator_Mappings
Offset_0x10E66A:
		dc.w	$0006
		dc.w	$EA06, $0007, $FFF0
		dc.w	$EA06, $0807, $0000
		dc.w	$0800, $0000, $FFE8
		dc.w	$0006, $0001, $FFF0
		dc.w	$0006, $0801, $0000
		dc.w	$0800, $0800, $0010
Offset_0x10E690:
		dc.w	$0006
		dc.w	$EA06, $000D, $FFF0
		dc.w	$EA06, $080D, $0000
		dc.w	$0800, $0000, $FFE8
		dc.w	$0006, $0001, $FFF0
		dc.w	$0006, $0801, $0000
		dc.w	$0800, $0800, $0010
Offset_0x10E6B6:
		dc.w	$0008
		dc.w	$E200, $0013, $FFF8
		dc.w	$EA06, $0014, $FFF0
		dc.w	$E200, $0813, $0000
		dc.w	$EA06, $0814, $0000
		dc.w	$0800, $0000, $FFE8
		dc.w	$0006, $0001, $FFF0
		dc.w	$0006, $0801, $0000
		dc.w	$0800, $0800, $0010
Offset_0x10E6E8:
		dc.w	$0006
		dc.w	$EC06, $0007, $FFF0
		dc.w	$EC06, $0807, $0000
		dc.w	$0800, $0000, $FFE8
		dc.w	$0006, $0001, $FFF0
		dc.w	$0006, $0801, $0000
		dc.w	$0800, $0800, $0010
Offset_0x10E70E:
		dc.w	$0001
		dc.w	$F805, $001A, $FFF8
;-------------------------------------------------------------------------------
Monkey_Dude_Mappings:                                          ; Offset_0x10E716
		dc.w	Offset_0x10E724-Monkey_Dude_Mappings
		dc.w	Offset_0x10E73E-Monkey_Dude_Mappings
		dc.w	Offset_0x10E758-Monkey_Dude_Mappings
		dc.w	Offset_0x10E772-Monkey_Dude_Mappings
		dc.w	Offset_0x10E77A-Monkey_Dude_Mappings
		dc.w	Offset_0x10E782-Monkey_Dude_Mappings
		dc.w	Offset_0x10E78A-Monkey_Dude_Mappings
Offset_0x10E724:
		dc.w	$0004
		dc.w	$FE00, $000D, $FFF7
		dc.w	$EB0A, $0000, $FFF0
		dc.w	$F805, $0009, $FFF8
		dc.w	$0004, $800E, $0010
Offset_0x10E73E:
		dc.w	$0004
		dc.w	$FD00, $000D, $FFF7
		dc.w	$E90A, $0000, $FFF0
		dc.w	$F805, $0009, $FFF8
		dc.w	$0004, $800E, $0010
Offset_0x10E758:
		dc.w	$0004
		dc.w	$FE00, $000D, $FFF7
		dc.w	$EB0A, $0000, $FFF0
		dc.w	$F805, $0009, $FFF8
		dc.w	$0804, $800E, $0010
Offset_0x10E772:
		dc.w	$0001
		dc.w	$FC00, $0010, $FFFC
Offset_0x10E77A:
		dc.w	$0001
		dc.w	$FC00, $1011, $FFFC
Offset_0x10E782:
		dc.w	$0001
		dc.w	$FC00, $0012, $FFFC
Offset_0x10E78A:
		dc.w	$0001
		dc.w	$F805, $0013, $FFF8
;-------------------------------------------------------------------------------
Guardian_Mappings:                                             ; Offset_0x10E792
		dc.w	Offset_0x10E7C8-Guardian_Mappings
		dc.w	Offset_0x10E7E2-Guardian_Mappings
		dc.w	Offset_0x10E7FC-Guardian_Mappings
		dc.w	Offset_0x10E816-Guardian_Mappings
		dc.w	Offset_0x10E81E-Guardian_Mappings
		dc.w	Offset_0x10E826-Guardian_Mappings
		dc.w	Offset_0x10E82E-Guardian_Mappings
		dc.w	Offset_0x10E836-Guardian_Mappings
		dc.w	Offset_0x10E844-Guardian_Mappings
		dc.w	Offset_0x10E852-Guardian_Mappings
		dc.w	Offset_0x10E85A-Guardian_Mappings
		dc.w	Offset_0x10E868-Guardian_Mappings
		dc.w	Offset_0x10E876-Guardian_Mappings
		dc.w	Offset_0x10E87E-Guardian_Mappings
		dc.w	Offset_0x10E886-Guardian_Mappings
		dc.w	Offset_0x10E88E-Guardian_Mappings
		dc.w	Offset_0x10E896-Guardian_Mappings
		dc.w	Offset_0x10E8A4-Guardian_Mappings
		dc.w	Offset_0x10E8B2-Guardian_Mappings
		dc.w	Offset_0x10E8BA-Guardian_Mappings
		dc.w	Offset_0x10E8C2-Guardian_Mappings
		dc.w	Offset_0x10E8CA-Guardian_Mappings
		dc.w	Offset_0x10E8D2-Guardian_Mappings
		dc.w	Offset_0x10E8DA-Guardian_Mappings
		dc.w	Offset_0x10E8E2-Guardian_Mappings
		dc.w	Offset_0x10E8F6-Guardian_Mappings
		dc.w	Offset_0x10E910-Guardian_Mappings
Offset_0x10E7C8:
		dc.w	$0004
		dc.w	$F40E, $0000, $FFE8
		dc.w	$F406, $000C, $0008
		dc.w	$DC0A, $004D, $FFE8
		dc.w	$DC0A, $084D, $0000
Offset_0x10E7E2:
		dc.w	$0004
		dc.w	$F40E, $0000, $FFE8
		dc.w	$F406, $000C, $0008
		dc.w	$D40B, $002C, $FFE8
		dc.w	$DC0A, $084D, $0000
Offset_0x10E7FC:
		dc.w	$0004
		dc.w	$F40E, $0012, $FFE8
		dc.w	$F406, $001E, $0008
		dc.w	$D40B, $0038, $FFE8
		dc.w	$DC0A, $0844, $0000
Offset_0x10E816:
		dc.w	$0001
		dc.w	$F80D, $0024, $FFF0
Offset_0x10E81E:
		dc.w	$0001
		dc.w	$F00B, $002C, $FFF4
Offset_0x10E826:
		dc.w	$0001
		dc.w	$F00B, $0038, $FFF4
Offset_0x10E82E:
		dc.w	$0001
		dc.w	$F00F, $0056, $FFF0
Offset_0x10E836:
		dc.w	$0002
		dc.w	$F00B, $0066, $FFEC
		dc.w	$F006, $0072, $0004
Offset_0x10E844:
		dc.w	$0002
		dc.w	$F40E, $0078, $FFEC
		dc.w	$F402, $0084, $000C
Offset_0x10E852:
		dc.w	$0001
		dc.w	$F00F, $0087, $FFF0
Offset_0x10E85A:
		dc.w	$0002
		dc.w	$EC0E, $0097, $FFF0
		dc.w	$0409, $00A3, $FFF8
Offset_0x10E868:
		dc.w	$0002
		dc.w	$F801, $00A9, $FFEC
		dc.w	$F00F, $00AB, $FFF4
Offset_0x10E876:
		dc.w	$0001
		dc.w	$F40A, $00BB, $FFF4
Offset_0x10E87E:
		dc.w	$0001
		dc.w	$F40E, $00C4, $FFF0
Offset_0x10E886:
		dc.w	$0001
		dc.w	$F40A, $00D0, $FFF4
Offset_0x10E88E:
		dc.w	$0001
		dc.w	$F40A, $00D9, $FFF4
Offset_0x10E896:
		dc.w	$0002
		dc.w	$F80D, $00E2, $FFEC
		dc.w	$F801, $00EA, $000C
Offset_0x10E8A4:
		dc.w	$0002
		dc.w	$F80D, $00EC, $FFEC
		dc.w	$F801, $00F4, $000C
Offset_0x10E8B2:
		dc.w	$0001
		dc.w	$F00B, $00F6, $FFF4
Offset_0x10E8BA:
		dc.w	$0001
		dc.w	$F00B, $0102, $FFF8
Offset_0x10E8C2:
		dc.w	$0001
		dc.w	$F00B, $010E, $FFFC
Offset_0x10E8CA:
		dc.w	$0001
		dc.w	$F00F, $011A, $FFF0
Offset_0x10E8D2:
		dc.w	$0001
		dc.w	$F00F, $012A, $FFF0
Offset_0x10E8DA:
		dc.w	$0001
		dc.w	$F805, $013A, $FFF8
Offset_0x10E8E2:
		dc.w	$0003
		dc.w	$E80F, $011A, $FFF0
		dc.w	$040F, $0056, $FFE4
		dc.w	$FC05, $013A, $FFF8
Offset_0x10E8F6:
		dc.w	$0004
		dc.w	$F40E, $0000, $FFE8
		dc.w	$F406, $000C, $0008
		dc.w	$D40B, $0038, $FFE8
		dc.w	$DC0A, $084D, $0000
Offset_0x10E910:
		dc.w	$0001
		dc.w	$0000, $FC00, $0000
;-------------------------------------------------------------------------------
Tunnelbot_Mappings:                                            ; Offset_0x10E918
		dc.w	Offset_0x10E926-Tunnelbot_Mappings
		dc.w	Offset_0x10E94C-Tunnelbot_Mappings
		dc.w	Offset_0x10E972-Tunnelbot_Mappings
		dc.w	Offset_0x10E998-Tunnelbot_Mappings
		dc.w	Offset_0x10E9A0-Tunnelbot_Mappings
		dc.w	Offset_0x10E9AE-Tunnelbot_Mappings
		dc.w	Offset_0x10E9B6-Tunnelbot_Mappings
Offset_0x10E926:
		dc.w	$0006
		dc.w	$F40A, $0000, $FFD8
		dc.w	$F406, $0009, $FFF0
		dc.w	$F406, $0809, $0000
		dc.w	$F40A, $0800, $0010
		dc.w	$DE06, $000F, $FFDC
		dc.w	$DE06, $000F, $0014
Offset_0x10E94C:
		dc.w	$0006
		dc.w	$F40A, $0000, $FFD8
		dc.w	$F406, $0009, $FFF0
		dc.w	$F406, $0809, $0000
		dc.w	$F40A, $0800, $0010
		dc.w	$DE06, $0015, $FFDC
		dc.w	$DE06, $0015, $0014
Offset_0x10E972:
		dc.w	$0006
		dc.w	$F40A, $0000, $FFD8
		dc.w	$F406, $0009, $FFF0
		dc.w	$F406, $0809, $0000
		dc.w	$F40A, $0800, $0010
		dc.w	$DE06, $001B, $FFDC
		dc.w	$DE06, $001B, $0014
Offset_0x10E998:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10E9A0:
		dc.w	$0002
		dc.w	$F406, $0009, $FFF0
		dc.w	$F406, $0809, $0000
Offset_0x10E9AE:
		dc.w	$0001
		dc.w	$F40A, $0800, $FFF4
Offset_0x10E9B6:
		dc.w	$0001
		dc.w	$F406, $000F, $FFF8
;-------------------------------------------------------------------------------
Catakiller_Jr_Mappings:                                        ; Offset_0x10E9BE
		dc.w	Offset_0x10E9CA-Catakiller_Jr_Mappings
		dc.w	Offset_0x10E9D2-Catakiller_Jr_Mappings
		dc.w	Offset_0x10E9DA-Catakiller_Jr_Mappings
		dc.w	Offset_0x10E9E2-Catakiller_Jr_Mappings
		dc.w	Offset_0x10E9F6-Catakiller_Jr_Mappings
		dc.w	Offset_0x10EA0A-Catakiller_Jr_Mappings
Offset_0x10E9CA:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10E9D2:
		dc.w	$0001
		dc.w	$F406, $0004, $FFF8
Offset_0x10E9DA:
		dc.w	$0001
		dc.w	$F805, $000A, $FFF8
Offset_0x10E9E2:
		dc.w	$0003
		dc.w	$EC05, $000E, $0000
		dc.w	$FC08, $0017, $0000
		dc.w	$0405, $100E, $0000
Offset_0x10E9F6:
		dc.w	$0003
		dc.w	$EC05, $0012, $0000
		dc.w	$FC04, $001A, $0005
		dc.w	$0405, $1012, $0000
Offset_0x10EA0A:
		dc.w	$0003
		dc.w	$F400, $0016, $0008
		dc.w	$FC00, $001C, $0010
		dc.w	$0400, $1016, $0008
;-------------------------------------------------------------------------------
Clamer_Dyn_Script:                                             ; Offset_0x10EA1E
		dc.w	Offset_0x10EA34-Clamer_Dyn_Script
		dc.w	Offset_0x10EA38-Clamer_Dyn_Script
		dc.w	Offset_0x10EA3C-Clamer_Dyn_Script
		dc.w	Offset_0x10EA40-Clamer_Dyn_Script
		dc.w	Offset_0x10EA44-Clamer_Dyn_Script
		dc.w	Offset_0x10EA48-Clamer_Dyn_Script
		dc.w	Offset_0x10EA4C-Clamer_Dyn_Script
		dc.w	Offset_0x10EA50-Clamer_Dyn_Script
		dc.w	Offset_0x10EA56-Clamer_Dyn_Script
		dc.w	Offset_0x10EA5A-Clamer_Dyn_Script
		dc.w	Offset_0x10EA5E-Clamer_Dyn_Script
Offset_0x10EA34:
		dc.w	$0000
		dc.w	$000F
Offset_0x10EA38:
		dc.w	$0000
		dc.w	$010F
Offset_0x10EA3C:
		dc.w	$0000
		dc.w	$020B
Offset_0x10EA40:
		dc.w	$0000
		dc.w	$02CB
Offset_0x10EA44:
		dc.w	$0000
		dc.w	$038B
Offset_0x10EA48:
		dc.w	$0000
		dc.w	$044F
Offset_0x10EA4C:
		dc.w	$0000
		dc.w	$054F
Offset_0x10EA50:
		dc.w	$0001
		dc.w	$0641, $066F
Offset_0x10EA56:
		dc.w	$0000
		dc.w	$076F
Offset_0x10EA5A:
		dc.w	$0000
		dc.w	$0863
Offset_0x10EA5E:
		dc.w	$0000
		dc.w	$000F
;-------------------------------------------------------------------------------
Clamer_Mappings:                                               ; Offset_0x10EA62
		dc.w	Offset_0x10EA7A-Clamer_Mappings
		dc.w	Offset_0x10EA82-Clamer_Mappings
		dc.w	Offset_0x10EA8A-Clamer_Mappings
		dc.w	Offset_0x10EA92-Clamer_Mappings
		dc.w	Offset_0x10EA9A-Clamer_Mappings
		dc.w	Offset_0x10EAA2-Clamer_Mappings
		dc.w	Offset_0x10EAAA-Clamer_Mappings
		dc.w	Offset_0x10EAB2-Clamer_Mappings
		dc.w	Offset_0x10EAC0-Clamer_Mappings
		dc.w	Offset_0x10EAC8-Clamer_Mappings
		dc.w	Offset_0x10EAD0-Clamer_Mappings
		dc.w	Offset_0x10EAD8-Clamer_Mappings
Offset_0x10EA7A:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x10EA82:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x10EA8A:
		dc.w	$0001
		dc.w	$F80E, $0000, $FFF0
Offset_0x10EA92:
		dc.w	$0001
		dc.w	$F80E, $0000, $FFF0
Offset_0x10EA9A:
		dc.w	$0001
		dc.w	$F80E, $0000, $FFF0
Offset_0x10EAA2:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x10EAAA:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x10EAB2:
		dc.w	$0002
		dc.w	$F801, $0000, $FFE8
		dc.w	$F00F, $0002, $FFF0
Offset_0x10EAC0:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x10EAC8:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10EAD0:
		dc.w	$0001
		dc.w	$EF0F, $0000, $FFF0
Offset_0x10EAD8:
		dc.w	$0001
		dc.w	$0000, $0000, $0000
;-------------------------------------------------------------------------------
Sparkle_Mappings:                                              ; Offset_0x10EAE0
		dc.w	Offset_0x10EAF2-Sparkle_Mappings
		dc.w	Offset_0x10EAFA-Sparkle_Mappings
		dc.w	Offset_0x10EB02-Sparkle_Mappings
		dc.w	Offset_0x10EB1C-Sparkle_Mappings
		dc.w	Offset_0x10EB36-Sparkle_Mappings
		dc.w	Offset_0x10EB50-Sparkle_Mappings
		dc.w	Offset_0x10EB6A-Sparkle_Mappings
		dc.w	Offset_0x10EB72-Sparkle_Mappings
		dc.w	Offset_0x10EB7A-Sparkle_Mappings
Offset_0x10EAF2:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10EAFA:
		dc.w	$0001
		dc.w	$F40A, $0009, $FFF4
Offset_0x10EB02:
		dc.w	$0004
		dc.w	$C007, $001E, $FFF8
		dc.w	$E007, $001E, $FFF8
		dc.w	$0007, $001E, $FFF8
		dc.w	$2007, $001E, $FFF8
Offset_0x10EB1C:
		dc.w	$0004
		dc.w	$C00B, $0012, $FFF4
		dc.w	$E00B, $0012, $FFF4
		dc.w	$000B, $0012, $FFF4
		dc.w	$200B, $0012, $FFF4
Offset_0x10EB36:
		dc.w	$0004
		dc.w	$C00B, $0812, $FFF4
		dc.w	$E00B, $0812, $FFF4
		dc.w	$000B, $0812, $FFF4
		dc.w	$200B, $0812, $FFF4
Offset_0x10EB50:
		dc.w	$0004
		dc.w	$C00B, $1012, $FFF4
		dc.w	$E00B, $1012, $FFF4
		dc.w	$000B, $1012, $FFF4
		dc.w	$200B, $1012, $FFF4
Offset_0x10EB6A:
		dc.w	$0001
		dc.w	$F805, $0026, $FFF8
Offset_0x10EB72:
		dc.w	$0001
		dc.w	$F805, $002A, $FFF8
Offset_0x10EB7A:
		dc.w	$0001
		dc.w	$0000, $FADC, $0000
;-------------------------------------------------------------------------------
Batbot_Mappings:                                               ; Offset_0x10EB82
		dc.w	Offset_0x10EB90-Batbot_Mappings
		dc.w	Offset_0x10EB9E-Batbot_Mappings
		dc.w	Offset_0x10EBAC-Batbot_Mappings
		dc.w	Offset_0x10EBC6-Batbot_Mappings
		dc.w	Offset_0x10EBD4-Batbot_Mappings
		dc.w	Offset_0x10EBE2-Batbot_Mappings
		dc.w	Offset_0x10EBEA-Batbot_Mappings
Offset_0x10EB90:
		dc.w	$0002
		dc.w	$F80D, $0000, $FFE0
		dc.w	$F80D, $0800, $0000
Offset_0x10EB9E:
		dc.w	$0002
		dc.w	$F80D, $0008, $FFE0
		dc.w	$F80D, $0808, $0000
Offset_0x10EBAC:
		dc.w	$0004
		dc.w	$0009, $0010, $FFE0
		dc.w	$F801, $0016, $FFF8
		dc.w	$F801, $0816, $0000
		dc.w	$0009, $0810, $0008
Offset_0x10EBC6:
		dc.w	$0002
		dc.w	$F801, $0018, $FFF8
		dc.w	$F801, $0818, $0000
Offset_0x10EBD4:
		dc.w	$0002
		dc.w	$F801, $001A, $FFF8
		dc.w	$F801, $081A, $0000
Offset_0x10EBE2:
		dc.w	$0001
		dc.w	$FC00, $001C, $FFFC
Offset_0x10EBEA:
		dc.w	$0001
		dc.w	$FC00, $001D, $FFFC
;-------------------------------------------------------------------------------
Bubbles_Dyn_Script:                                            ; Offset_0x10EBF2
		dc.w	Offset_0x10EBFC-Bubbles_Dyn_Script
		dc.w	Offset_0x10EC02-Bubbles_Dyn_Script
		dc.w	Offset_0x10EC06-Bubbles_Dyn_Script
		dc.w	Offset_0x10EC0A-Bubbles_Dyn_Script
		dc.w	Offset_0x10EC10-Bubbles_Dyn_Script
Offset_0x10EBFC:
		dc.w	$0001
		dc.w	$000B, $00C2
Offset_0x10EC02:
		dc.w	$0000
		dc.w	$00FB
Offset_0x10EC06:
		dc.w	$0000
		dc.w	$01BB
Offset_0x10EC0A:
		dc.w	$0001
		dc.w	$027F, $0371
Offset_0x10EC10:
		dc.w	$0003
		dc.w	$0391, $03BF, $04B3, $04F1
;-------------------------------------------------------------------------------
Bubbles_Mappings:                                              ; Offset_0x10EC1A
		dc.w	Offset_0x10EC24-Bubbles_Mappings
		dc.w	Offset_0x10EC32-Bubbles_Mappings
		dc.w	Offset_0x10EC3A-Bubbles_Mappings
		dc.w	Offset_0x10EC42-Bubbles_Mappings
		dc.w	Offset_0x10EC50-Bubbles_Mappings
Offset_0x10EC24:
		dc.w	$0002
		dc.w	$F40E, $0000, $FFEC
		dc.w	$F402, $000C, $000C
Offset_0x10EC32:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x10EC3A:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x10EC42:
		dc.w	$0002
		dc.w	$F00F, $0000, $FFEC
		dc.w	$F801, $0010, $000C
Offset_0x10EC50:
		dc.w	$0004
		dc.w	$E804, $0000, $FFFC
		dc.w	$F00F, $0002, $FFEC
		dc.w	$F003, $0012, $000C
		dc.w	$1004, $0016, $FFFC
;-------------------------------------------------------------------------------
Spiker_Mappings:                                               ; Offset_0x10EC6A
		dc.w	Offset_0x10EC7A-Spiker_Mappings
		dc.w	Offset_0x10EC8E-Spiker_Mappings
		dc.w	Offset_0x10ECA2-Spiker_Mappings
		dc.w	Offset_0x10ECB6-Spiker_Mappings
		dc.w	Offset_0x10ECBE-Spiker_Mappings
		dc.w	Offset_0x10ECC6-Spiker_Mappings
		dc.w	Offset_0x10ECCE-Spiker_Mappings
		dc.w	Offset_0x10ECD6-Spiker_Mappings
Offset_0x10EC7A:
		dc.w	$0003
		dc.w	$E807, $0000, $FFF0
		dc.w	$E807, $0000, $0000
		dc.w	$0804, $0017, $FFF8
Offset_0x10EC8E:
		dc.w	$0003
		dc.w	$F00A, $0008, $FFE8
		dc.w	$F00A, $0808, $0000
		dc.w	$0804, $0017, $FFF8
Offset_0x10ECA2:
		dc.w	$0003
		dc.w	$F809, $0011, $FFE8
		dc.w	$F809, $0811, $0000
		dc.w	$0804, $0017, $FFF8
Offset_0x10ECB6:
		dc.w	$0001
		dc.w	$FC04, $0019, $FFF8
Offset_0x10ECBE:
		dc.w	$0001
		dc.w	$FC04, $001B, $FFF8
Offset_0x10ECC6:
		dc.w	$0001
		dc.w	$FC00, $001D, $FFFC
Offset_0x10ECCE:
		dc.w	$0001
		dc.w	$FC00, $001E, $FFFC
Offset_0x10ECD6:
		dc.w	$0001
		dc.w	$0000, $FAD0, $0000
;-------------------------------------------------------------------------------
Mantis_Mappings:                                               ; Offset_0x10ECDE
		dc.w	Offset_0x10ECEA-Mantis_Mappings
		dc.w	Offset_0x10ECFE-Mantis_Mappings
		dc.w	Offset_0x10ED12-Mantis_Mappings
		dc.w	Offset_0x10ED3E-Mantis_Mappings
		dc.w	Offset_0x10ED52-Mantis_Mappings
		dc.w	Offset_0x10ED5A-Mantis_Mappings
Offset_0x10ECEA:
		dc.w	$0003
		dc.w	$FA0A, $0009, $0000
		dc.w	$F40A, $0000, $FFF4
		dc.w	$FA0A, $0009, $FFF8
Offset_0x10ECFE:
		dc.w	$0003
		dc.w	$000A, $0012, $0002
		dc.w	$F40A, $0000, $FFF4
		dc.w	$000A, $0012, $FFFA
Offset_0x10ED12:
		dc.w	$0007
		dc.w	$0205, $001B, $0007
		dc.w	$1201, $001F, $000F
		dc.w	$2204, $0021, $0007
		dc.w	$F40A, $0000, $FFF4
		dc.w	$0205, $001B, $FFFF
		dc.w	$1201, $001F, $0007
		dc.w	$2204, $0021, $FFFF
Offset_0x10ED3E:
		dc.w	$0003
		dc.w	$F90A, $0009, $0000
		dc.w	$F40A, $0000, $FFF4
		dc.w	$F90A, $0009, $FFF8
Offset_0x10ED52:
		dc.w	$0001
		dc.w	$FC00, $0023, $FFFC
Offset_0x10ED5A:
		dc.w	$0001
		dc.w	$FC00, $0024, $FFFC
;-------------------------------------------------------------------------------
Blaster_Mappings:                                              ; Offset_0x10ED62
		dc.w	Offset_0x10ED78-Blaster_Mappings
		dc.w	Offset_0x10ED92-Blaster_Mappings
		dc.w	Offset_0x10EDAC-Blaster_Mappings
		dc.w	Offset_0x10EDC6-Blaster_Mappings
		dc.w	Offset_0x10EDCE-Blaster_Mappings
		dc.w	Offset_0x10EDD6-Blaster_Mappings
		dc.w	Offset_0x10EDDE-Blaster_Mappings
		dc.w	Offset_0x10EDE6-Blaster_Mappings
		dc.w	Offset_0x10EDEE-Blaster_Mappings
		dc.w	Offset_0x10EDF6-Blaster_Mappings
		dc.w	Offset_0x10EDFE-Blaster_Mappings
Offset_0x10ED78:
		dc.w	$0004
		dc.w	$0400, $0000, $FFEC
		dc.w	$F40E, $0001, $FFF4
		dc.w	$070C, $000D, $FFF0
		dc.w	$EC06, $0011, $FFE4
Offset_0x10ED92:
		dc.w	$0004
		dc.w	$0300, $0000, $FFEC
		dc.w	$F30E, $0001, $FFF4
		dc.w	$070C, $000D, $FFF0
		dc.w	$EB06, $0011, $FFE4
Offset_0x10EDAC:
		dc.w	$0004
		dc.w	$0400, $0000, $FFEC
		dc.w	$F40E, $0001, $FFF4
		dc.w	$070C, $000D, $FFF0
		dc.w	$EC06, $0017, $FFE4
Offset_0x10EDC6:
		dc.w	$0001
		dc.w	$F805, $001D, $FFF8
Offset_0x10EDCE:
		dc.w	$0001
		dc.w	$F805, $0021, $FFF8
Offset_0x10EDD6:
		dc.w	$0001
		dc.w	$FC00, $0025, $FFFC
Offset_0x10EDDE:
		dc.w	$0001
		dc.w	$FC00, $0026, $FFFC
Offset_0x10EDE6:
		dc.w	$0001
		dc.w	$FC00, $0027, $FFFC
Offset_0x10EDEE:
		dc.w	$0001
		dc.w	$FC00, $0827, $FFFC
Offset_0x10EDF6:
		dc.w	$0001
		dc.w	$FC00, $1827, $FFFC
Offset_0x10EDFE:
		dc.w	$0001
		dc.w	$FC00, $1027, $FFFC
;-------------------------------------------------------------------------------
Penguinator_Dyn_Script:                                        ; Offset_0x10EE06
		dc.w	Offset_0x10EE18-Penguinator_Dyn_Script
		dc.w	Offset_0x10EE1C-Penguinator_Dyn_Script
		dc.w	Offset_0x10EE20-Penguinator_Dyn_Script
		dc.w	Offset_0x10EE24-Penguinator_Dyn_Script
		dc.w	Offset_0x10EE2A-Penguinator_Dyn_Script
		dc.w	Offset_0x10EE30-Penguinator_Dyn_Script
		dc.w	Offset_0x10EE36-Penguinator_Dyn_Script
		dc.w	Offset_0x10EE3C-Penguinator_Dyn_Script
		dc.w	Offset_0x10EE42-Penguinator_Dyn_Script
Offset_0x10EE18:
		dc.w	$0000
		dc.w	$000B
Offset_0x10EE1C:
		dc.w	$0000
		dc.w	$00CB
Offset_0x10EE20:
		dc.w	$0000
		dc.w	$018B
Offset_0x10EE24:
		dc.w	$0001
		dc.w	$0241, $026F
Offset_0x10EE2A:
		dc.w	$0001
		dc.w	$036B, $0421
Offset_0x10EE30:
		dc.w	$0001
		dc.w	$044B, $0502
Offset_0x10EE36:
		dc.w	$0001
		dc.w	$053B, $05F1
Offset_0x10EE3C:
		dc.w	$0001
		dc.w	$061B, $06D2
Offset_0x10EE42:
		dc.w	$0001
		dc.w	$070B, $07C2
;-------------------------------------------------------------------------------
Penguinator_Mappings:                                          ; Offset_0x10EE48
		dc.w	Offset_0x10EE5A-Penguinator_Mappings
		dc.w	Offset_0x10EE62-Penguinator_Mappings
		dc.w	Offset_0x10EE6A-Penguinator_Mappings
		dc.w	Offset_0x10EE72-Penguinator_Mappings
		dc.w	Offset_0x10EE80-Penguinator_Mappings
		dc.w	Offset_0x10EE8E-Penguinator_Mappings
		dc.w	Offset_0x10EE9C-Penguinator_Mappings
		dc.w	Offset_0x10EEAA-Penguinator_Mappings
		dc.w	Offset_0x10EEB8-Penguinator_Mappings
Offset_0x10EE5A:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x10EE62:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x10EE6A:
		dc.w	$0001
		dc.w	$F00B, $0000, $FFF4
Offset_0x10EE72:
		dc.w	$0002
		dc.w	$F001, $0000, $FFEC
		dc.w	$F00F, $0002, $FFF4
Offset_0x10EE80:
		dc.w	$0002
		dc.w	$F40E, $0000, $FFEC
		dc.w	$FC01, $000C, $000C
Offset_0x10EE8E:
		dc.w	$0002
		dc.w	$F40E, $0000, $FFEC
		dc.w	$F402, $000C, $000C
Offset_0x10EE9C:
		dc.w	$0002
		dc.w	$F40E, $0000, $FFEC
		dc.w	$F401, $000C, $000C
Offset_0x10EEAA:
		dc.w	$0002
		dc.w	$F00E, $0000, $FFF0
		dc.w	$0808, $000C, $FFF0
Offset_0x10EEB8:
		dc.w	$0002
		dc.w	$EC0B, $0000, $FFF4
		dc.w	$0C08, $000C, $FFF4
;-------------------------------------------------------------------------------
Snow_Dust_Mappings:                                            ; Offset_0x10EEC6
		dc.w	Offset_0x10EED2-Snow_Dust_Mappings
		dc.w	Offset_0x10EEDA-Snow_Dust_Mappings
		dc.w	Offset_0x10EEE2-Snow_Dust_Mappings
		dc.w	Offset_0x10EEEA-Snow_Dust_Mappings
		dc.w	Offset_0x10EEF2-Snow_Dust_Mappings
		dc.w	Offset_0x10EEFA-Snow_Dust_Mappings
Offset_0x10EED2:
		dc.w	$0001
		dc.w	$F800, $0000, $FFFC
Offset_0x10EEDA:
		dc.w	$0001
		dc.w	$F800, $0800, $FFFC
Offset_0x10EEE2:
		dc.w	$0001
		dc.w	$F001, $0001, $FFFC
Offset_0x10EEEA:
		dc.w	$0001
		dc.w	$F001, $0801, $FFFC
Offset_0x10EEF2:
		dc.w	$0001
		dc.w	$E802, $0003, $FFFC
Offset_0x10EEFA:
		dc.w	$0001
		dc.w	$E802, $0803, $FFFC
;-------------------------------------------------------------------------------
Techno_Squeek_Mappings:                                        ; Offset_0x10EF02
		dc.w	Offset_0x10EF16-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF1E-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF26-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF2E-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF36-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF3E-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF46-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF4E-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF56-Techno_Squeek_Mappings
		dc.w	Offset_0x10EF5E-Techno_Squeek_Mappings
Offset_0x10EF16:
		dc.w	$0001
		dc.w	$F809, $0000, $FFF4
Offset_0x10EF1E:
		dc.w	$0001
		dc.w	$F809, $0006, $FFF4
Offset_0x10EF26:
		dc.w	$0001
		dc.w	$FC04, $000C, $FFF8
Offset_0x10EF2E:
		dc.w	$0001
		dc.w	$FC04, $000E, $FFF8
Offset_0x10EF36:
		dc.w	$0001
		dc.w	$FC04, $0010, $FFF8
Offset_0x10EF3E:
		dc.w	$0001
		dc.w	$F406, $0012, $FFF8
Offset_0x10EF46:
		dc.w	$0001
		dc.w	$F406, $0018, $FFF8
Offset_0x10EF4E:
		dc.w	$0001
		dc.w	$F801, $001E, $FFFC
Offset_0x10EF56:
		dc.w	$0001
		dc.w	$F801, $0020, $FFFC
Offset_0x10EF5E:
		dc.w	$0001
		dc.w	$F801, $0022, $FFFC
;-------------------------------------------------------------------------------
Star_Pointer_Mappings:                                         ; Offset_0x10EF66
		dc.w	Offset_0x10EF6E-Star_Pointer_Mappings
		dc.w	Offset_0x10EF76-Star_Pointer_Mappings
		dc.w	Offset_0x10EF7E-Star_Pointer_Mappings
		dc.w	Offset_0x10EF86-Star_Pointer_Mappings
Offset_0x10EF6E:
		dc.w	$0001
		dc.w	$F805, $0000, $FFF8
Offset_0x10EF76:
		dc.w	$0001
		dc.w	$F805, $0004, $FFF8
Offset_0x10EF7E:
		dc.w	$0001
		dc.w	$F805, $0008, $FFF8
Offset_0x10EF86:
		dc.w	$0001
		dc.w	$F805, $000C, $FFF8
;-------------------------------------------------------------------------------
Flame_Mobile_Mappings:                                         ; Offset_0x10EF8E
		dc.w	Offset_0x10EFFE-Flame_Mobile_Mappings
		dc.w	Offset_0x10F030-Flame_Mobile_Mappings
		dc.w	Offset_0x10F050-Flame_Mobile_Mappings
		dc.w	Offset_0x10F05E-Flame_Mobile_Mappings
		dc.w	Offset_0x10F066-Flame_Mobile_Mappings
		dc.w	Offset_0x10F06E-Flame_Mobile_Mappings
		dc.w	Offset_0x10F076-Flame_Mobile_Mappings
		dc.w	Offset_0x10F084-Flame_Mobile_Mappings
		dc.w	Offset_0x10F08C-Flame_Mobile_Mappings
		dc.w	Offset_0x10F094-Flame_Mobile_Mappings
		dc.w	Offset_0x10F09C-Flame_Mobile_Mappings
		dc.w	Offset_0x10F0A4-Flame_Mobile_Mappings
		dc.w	Offset_0x10F0B2-Flame_Mobile_Mappings
		dc.w	Offset_0x10F0C0-Flame_Mobile_Mappings
		dc.w	Offset_0x10F0CE-Flame_Mobile_Mappings
		dc.w	Offset_0x10F0DC-Flame_Mobile_Mappings
		dc.w	Offset_0x10F0DC-Flame_Mobile_Mappings
		dc.w	Offset_0x10F0EA-Flame_Mobile_Mappings
		dc.w	Offset_0x10F0F8-Flame_Mobile_Mappings
		dc.w	Offset_0x10F100-Flame_Mobile_Mappings
		dc.w	Offset_0x10F108-Flame_Mobile_Mappings
		dc.w	Offset_0x10F110-Flame_Mobile_Mappings
		dc.w	Offset_0x10F110-Flame_Mobile_Mappings
		dc.w	Offset_0x10F11E-Flame_Mobile_Mappings
		dc.w	Offset_0x10F12C-Flame_Mobile_Mappings
		dc.w	Offset_0x10F134-Flame_Mobile_Mappings
		dc.w	Offset_0x10F13C-Flame_Mobile_Mappings
		dc.w	Offset_0x10F144-Flame_Mobile_Mappings
		dc.w	Offset_0x10F176-Flame_Mobile_Mappings
		dc.w	Offset_0x10F1A8-Flame_Mobile_Mappings
		dc.w	Offset_0x10F1DA-Flame_Mobile_Mappings
		dc.w	Offset_0x10F1FA-Flame_Mobile_Mappings
		dc.w	Offset_0x10F21A-Flame_Mobile_Mappings
		dc.w	Offset_0x10F23A-Flame_Mobile_Mappings
		dc.w	Offset_0x10F248-Flame_Mobile_Mappings
		dc.w	Offset_0x10F256-Flame_Mobile_Mappings
		dc.w	Offset_0x10F264-Flame_Mobile_Mappings
		dc.w	Offset_0x10F2DE-Flame_Mobile_Mappings
		dc.w	Offset_0x10F2DE-Flame_Mobile_Mappings
		dc.w	Offset_0x10F2F2-Flame_Mobile_Mappings
		dc.w	Offset_0x10F306-Flame_Mobile_Mappings
		dc.w	Offset_0x10F31A-Flame_Mobile_Mappings
		dc.w	Offset_0x10F32E-Flame_Mobile_Mappings
		dc.w	Offset_0x10F342-Flame_Mobile_Mappings
		dc.w	Offset_0x10F344-Flame_Mobile_Mappings
		dc.w	Offset_0x10F3A6-Flame_Mobile_Mappings
		dc.w	Offset_0x10F3B4-Flame_Mobile_Mappings
		dc.w	Offset_0x10F3C2-Flame_Mobile_Mappings
		dc.w	Offset_0x10F3D0-Flame_Mobile_Mappings
		dc.w	Offset_0x10F3DE-Flame_Mobile_Mappings
		dc.w	Offset_0x10F458-Flame_Mobile_Mappings
		dc.w	Offset_0x10F460-Flame_Mobile_Mappings
		dc.w	Offset_0x10F468-Flame_Mobile_Mappings
		dc.w	Offset_0x10F470-Flame_Mobile_Mappings
		dc.w	Offset_0x10F478-Flame_Mobile_Mappings
		dc.w	Offset_0x10F480-Flame_Mobile_Mappings
Offset_0x10EFFE:
		dc.w	$0008
		dc.w	$E00F, $0000, $FFE0
		dc.w	$E802, $0010, $FFD8
		dc.w	$000D, $0013, $FFE0
		dc.w	$1009, $001B, $FFE8
		dc.w	$E00F, $0800, $0000
		dc.w	$E802, $0810, $0020
		dc.w	$000D, $0813, $0000
		dc.w	$1009, $081B, $0000
Offset_0x10F030:
		dc.w	$0005
		dc.w	$F402, $0021, $FFDC
		dc.w	$EC0F, $0024, $FFE4
		dc.w	$0C0C, $0034, $FFE4
		dc.w	$EC0F, $0038, $0004
		dc.w	$0C0C, $0048, $0004
Offset_0x10F050:
		dc.w	$0002
		dc.w	$FC04, $004C, $FFF0
		dc.w	$FC04, $084C, $0000
Offset_0x10F05E:
		dc.w	$0001
		dc.w	$F40A, $004E, $FFF4
Offset_0x10F066:
		dc.w	$0001
		dc.w	$F406, $0057, $FFF8
Offset_0x10F06E:
		dc.w	$0001
		dc.w	$F40A, $005D, $FFF4
Offset_0x10F076:
		dc.w	$0002
		dc.w	$FC04, $0066, $FFF0
		dc.w	$FC04, $0866, $0000
Offset_0x10F084:
		dc.w	$0001
		dc.w	$F805, $0068, $FFF8
Offset_0x10F08C:
		dc.w	$0001
		dc.w	$F805, $006C, $FFF8
Offset_0x10F094:
		dc.w	$0001
		dc.w	$F805, $0070, $FFF8
Offset_0x10F09C:
		dc.w	$0001
		dc.w	$F805, $0074, $FFF8
Offset_0x10F0A4:
		dc.w	$0002
		dc.w	$FC04, $1078, $FFF0
		dc.w	$FC04, $1878, $0000
Offset_0x10F0B2:
		dc.w	$0002
		dc.w	$FC04, $107A, $FFF0
		dc.w	$FC04, $187A, $0000
Offset_0x10F0C0:
		dc.w	$0002
		dc.w	$FC04, $107C, $FFF0
		dc.w	$FC04, $187C, $0000
Offset_0x10F0CE:
		dc.w	$0002
		dc.w	$FC04, $107E, $FFF0
		dc.w	$FC04, $187E, $0000
Offset_0x10F0DC:
		dc.w	$0002
		dc.w	$F40A, $0080, $FFF4
		dc.w	$F40A, $0089, $000C
Offset_0x10F0EA:
		dc.w	$0002
		dc.w	$F40A, $0080, $FFF4
		dc.w	$F40A, $0092, $000C
Offset_0x10F0F8:
		dc.w	$0001
		dc.w	$F805, $009B, $FFF8
Offset_0x10F100:
		dc.w	$0001
		dc.w	$F801, $009F, $FFFC
Offset_0x10F108:
		dc.w	$0001
		dc.w	$FC00, $00A1, $FFFC
Offset_0x10F110:
		dc.w	$0002
		dc.w	$F40A, $00A2, $FFF4
		dc.w	$DC0A, $00AB, $FFF4
Offset_0x10F11E:
		dc.w	$0002
		dc.w	$F40A, $00A2, $FFF4
		dc.w	$DC0A, $00B4, $FFF4
Offset_0x10F12C:
		dc.w	$0001
		dc.w	$F805, $00BD, $FFF8
Offset_0x10F134:
		dc.w	$0001
		dc.w	$FC04, $00C1, $FFF8
Offset_0x10F13C:
		dc.w	$0001
		dc.w	$FC00, $00C3, $FFFC
Offset_0x10F144:
		dc.w	$0008
		dc.w	$E00F, $00C4, $FFE0
		dc.w	$E802, $00D4, $FFD8
		dc.w	$000D, $0013, $FFE0
		dc.w	$1009, $001B, $FFE8
		dc.w	$E00F, $08C4, $0000
		dc.w	$E802, $08D4, $0020
		dc.w	$000D, $0813, $0000
		dc.w	$1009, $081B, $0000
Offset_0x10F176:
		dc.w	$0008
		dc.w	$E00F, $00D7, $FFE0
		dc.w	$E802, $00E7, $FFD8
		dc.w	$000D, $0013, $FFE0
		dc.w	$1009, $001B, $FFE8
		dc.w	$E00F, $08D7, $0000
		dc.w	$E802, $08E7, $0020
		dc.w	$000D, $0813, $0000
		dc.w	$1009, $081B, $0000
Offset_0x10F1A8:
		dc.w	$0008
		dc.w	$E00F, $00EA, $FFE0
		dc.w	$E802, $00FA, $FFD8
		dc.w	$000D, $0013, $FFE0
		dc.w	$1009, $001B, $FFE8
		dc.w	$E00F, $08EA, $0000
		dc.w	$E802, $08FA, $0020
		dc.w	$000D, $0813, $0000
		dc.w	$1009, $081B, $0000
Offset_0x10F1DA:
		dc.w	$0005
		dc.w	$F402, $00FD, $FFDC
		dc.w	$EC0F, $0100, $FFE4
		dc.w	$EC0F, $0110, $0004
		dc.w	$0C0C, $0034, $FFE4
		dc.w	$0C0C, $0048, $0004
Offset_0x10F1FA:
		dc.w	$0005
		dc.w	$F402, $0120, $FFDC
		dc.w	$EC0F, $0123, $FFE4
		dc.w	$EC0F, $0133, $0004
		dc.w	$0C0C, $0034, $FFE4
		dc.w	$0C0C, $0048, $0004
Offset_0x10F21A:
		dc.w	$0005
		dc.w	$F402, $0143, $FFDC
		dc.w	$EC0F, $0146, $FFE4
		dc.w	$EC0F, $0156, $0004
		dc.w	$0C0C, $0034, $FFE4
		dc.w	$0C0C, $0048, $0004
Offset_0x10F23A:
		dc.w	$0002
		dc.w	$F00B, $0166, $FFE8
		dc.w	$F00B, $0966, $0000
Offset_0x10F248:
		dc.w	$0002
		dc.w	$F00B, $0172, $FFE8
		dc.w	$F00B, $0972, $0000
Offset_0x10F256:
		dc.w	$0002
		dc.w	$F00A, $017E, $FFE8
		dc.w	$F00A, $097E, $0000
Offset_0x10F264:
		dc.w	$0014
		dc.w	$B80F, $0187, $FFEC
		dc.w	$B803, $0197, $000C
		dc.w	$D80C, $019B, $FFEC
		dc.w	$D800, $019F, $000C
		dc.w	$C00F, $0187, $FFE0
		dc.w	$C003, $0197, $0000
		dc.w	$E00C, $019B, $FFE0
		dc.w	$E000, $019F, $0000
		dc.w	$C00F, $0187, $FFF8
		dc.w	$C003, $0197, $0018
		dc.w	$E00C, $019B, $FFF8
		dc.w	$E000, $019F, $0018
		dc.w	$D80F, $0187, $FFD0
		dc.w	$D803, $0197, $FFF0
		dc.w	$F80C, $019B, $FFD0
		dc.w	$F800, $019F, $FFF0
		dc.w	$D80F, $0187, $0008
		dc.w	$D803, $0197, $0028
		dc.w	$F80C, $019B, $0008
		dc.w	$F800, $019F, $0028
Offset_0x10F2DE:
		dc.w	$0003
		dc.w	$F40E, $01A0, $FFF0
		dc.w	$E70D, $01AC, $FFF8
		dc.w	$F700, $01B4, $0008
Offset_0x10F2F2:
		dc.w	$0003
		dc.w	$F40E, $01A0, $FFF0
		dc.w	$E70D, $01B5, $FFF8
		dc.w	$F700, $01BD, $0008
Offset_0x10F306:
		dc.w	$0003
		dc.w	$F40E, $01A0, $FFF0
		dc.w	$E70D, $01BE, $FFF8
		dc.w	$F704, $01C6, $0008
Offset_0x10F31A:
		dc.w	$0003
		dc.w	$F40E, $01A0, $FFF0
		dc.w	$E70D, $01C8, $FFF8
		dc.w	$F704, $01D0, $0008
Offset_0x10F32E:
		dc.w	$0003
		dc.w	$F402, $0021, $FFDC
		dc.w	$EC0F, $0024, $FFE4
		dc.w	$0C0C, $0034, $FFE4
Offset_0x10F342:
		dc.w	$0000
Offset_0x10F344:
		dc.w	$0010
		dc.w	$C80F, $0187, $FFE0
		dc.w	$C803, $0197, $0000
		dc.w	$E80C, $019B, $FFE0
		dc.w	$E800, $019F, $0000
		dc.w	$C80F, $0187, $FFF8
		dc.w	$C803, $0197, $0018
		dc.w	$E80C, $019B, $FFF8
		dc.w	$E800, $019F, $0018
		dc.w	$E00F, $0187, $FFD0
		dc.w	$E003, $0197, $FFF0
		dc.w	$000C, $019B, $FFD0
		dc.w	$0000, $019F, $FFF0
		dc.w	$E00F, $0187, $0008
		dc.w	$E003, $0197, $0028
		dc.w	$000C, $019B, $0008
		dc.w	$0000, $019F, $0028
Offset_0x10F3A6:
		dc.w	$0002
		dc.w	$F40A, $1080, $FFF4
		dc.w	$F40A, $1089, $000C
Offset_0x10F3B4:
		dc.w	$0002
		dc.w	$F40A, $1080, $FFF4
		dc.w	$F40A, $1092, $000C
Offset_0x10F3C2:
		dc.w	$0002
		dc.w	$F40A, $00A2, $FFF4
		dc.w	$DC0A, $00AB, $FFF4
Offset_0x10F3D0:
		dc.w	$0002
		dc.w	$F40A, $00A2, $FFF4
		dc.w	$DC0A, $00B4, $FFF4
Offset_0x10F3DE:
		dc.w	$0014
		dc.w	$B80F, $01D2, $FFEC
		dc.w	$B803, $01E2, $000C
		dc.w	$D80C, $01E6, $FFEC
		dc.w	$D800, $01EA, $000C
		dc.w	$C00F, $01D2, $FFE0
		dc.w	$C003, $01E2, $0000
		dc.w	$E00C, $01E6, $FFE0
		dc.w	$E000, $01EA, $0000
		dc.w	$C00F, $01D2, $FFF8
		dc.w	$C003, $01E2, $0018
		dc.w	$E00C, $01E6, $FFF8
		dc.w	$E000, $01EA, $0018
		dc.w	$D80F, $01D2, $FFD8
		dc.w	$D803, $01E2, $FFF8
		dc.w	$F80C, $01E6, $FFD8
		dc.w	$F800, $01EA, $FFF8
		dc.w	$D80F, $01D2, $0000
		dc.w	$D803, $01E2, $0020
		dc.w	$F80C, $01E6, $0000
		dc.w	$F800, $01EA, $0020
Offset_0x10F458:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x10F460:
		dc.w	$0001
		dc.w	$F00F, $0800, $FFF0
Offset_0x10F468:
		dc.w	$0001
		dc.w	$F80D, $0013, $FFF0
Offset_0x10F470:
		dc.w	$0001
		dc.w	$F80D, $0813, $FFF0
Offset_0x10F478:
		dc.w	$0001
		dc.w	$F809, $001B, $FFF4
Offset_0x10F480:
		dc.w	$0001
		dc.w	$F809, $081B, $FFF4
;-------------------------------------------------------------------------------
Fire_Breath_Mappings:                                          ; Offset_0x10F488
		dc.w	Offset_0x10F4AC-Fire_Breath_Mappings
		dc.w	Offset_0x10F4D2-Fire_Breath_Mappings
		dc.w	Offset_0x10F4E6-Fire_Breath_Mappings
		dc.w	Offset_0x10F4FA-Fire_Breath_Mappings
		dc.w	Offset_0x10F502-Fire_Breath_Mappings
		dc.w	Offset_0x10F50A-Fire_Breath_Mappings
		dc.w	Offset_0x10F512-Fire_Breath_Mappings
		dc.w	Offset_0x10F51A-Fire_Breath_Mappings
		dc.w	Offset_0x10F528-Fire_Breath_Mappings
		dc.w	Offset_0x10F536-Fire_Breath_Mappings
		dc.w	Offset_0x10F544-Fire_Breath_Mappings
		dc.w	Offset_0x10F54C-Fire_Breath_Mappings
		dc.w	Offset_0x10F554-Fire_Breath_Mappings
		dc.w	Offset_0x10F568-Fire_Breath_Mappings
		dc.w	Offset_0x10F57C-Fire_Breath_Mappings
		dc.w	Offset_0x10F584-Fire_Breath_Mappings
		dc.w	Offset_0x10F58C-Fire_Breath_Mappings
		dc.w	Offset_0x10F594-Fire_Breath_Mappings
Offset_0x10F4AC:
		dc.w	$0006
		dc.w	$E004, $0000, $FFF8
		dc.w	$E80F, $0002, $FFE0
		dc.w	$080E, $0012, $FFE0
		dc.w	$E809, $001E, $0000
		dc.w	$F80F, $0024, $0000
		dc.w	$180C, $0034, $0000
Offset_0x10F4D2:
		dc.w	$0003
		dc.w	$F805, $0050, $FFD8
		dc.w	$F805, $0850, $001B
		dc.w	$F805, $0055, $FFF4
Offset_0x10F4E6:
		dc.w	$0003
		dc.w	$F800, $0054, $FFE0
		dc.w	$F800, $0854, $001B
		dc.w	$FA00, $0059, $FFF8
Offset_0x10F4FA:
		dc.w	$0001
		dc.w	$0004, $003E, $FFF8
Offset_0x10F502:
		dc.w	$0001
		dc.w	$F805, $0040, $FFF8
Offset_0x10F50A:
		dc.w	$0001
		dc.w	$F805, $0044, $FFF8
Offset_0x10F512:
		dc.w	$0001
		dc.w	$F801, $0038, $FFFC
Offset_0x10F51A:
		dc.w	$0002
		dc.w	$FC00, $0048, $FFF8
		dc.w	$FC00, $0848, $0000
Offset_0x10F528:
		dc.w	$0002
		dc.w	$F401, $0049, $FFF8
		dc.w	$F401, $0849, $0000
Offset_0x10F536:
		dc.w	$0002
		dc.w	$F400, $004B, $FFF8
		dc.w	$F400, $084B, $0000
Offset_0x10F544:
		dc.w	$0001
		dc.w	$F404, $004C, $FFF8
Offset_0x10F54C:
		dc.w	$0001
		dc.w	$F404, $004E, $FFF8
Offset_0x10F554:
		dc.w	$0003
		dc.w	$F805, $203A, $FFF8
		dc.w	$0800, $1048, $FFF8
		dc.w	$0800, $1848, $0000
Offset_0x10F568:
		dc.w	$0003
		dc.w	$F805, $203A, $FFF8
		dc.w	$0801, $1049, $FFF8
		dc.w	$0801, $1849, $0000
Offset_0x10F57C:
		dc.w	$0001
		dc.w	$F00F, $0002, $FFF0
Offset_0x10F584:
		dc.w	$0001
		dc.w	$F809, $001E, $FFF4
Offset_0x10F58C:
		dc.w	$0001
		dc.w	$F40E, $0012, $FFF0
Offset_0x10F594:
		dc.w	$0002
		dc.w	$EC0F, $0024, $FFF0
		dc.w	$0C0C, $0034, $FFF0
;-------------------------------------------------------------------------------
Small_Fire_Breath_Mappings:                                    ; Offset_0x10F5A2
		dc.w	Offset_0x10F5A8-Small_Fire_Breath_Mappings
		dc.w	Offset_0x10F5B0-Small_Fire_Breath_Mappings
		dc.w	Offset_0x10F5B8-Small_Fire_Breath_Mappings
Offset_0x10F5A8:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10F5B0:
		dc.w	$0001
		dc.w	$F805, $0009, $FFF8
Offset_0x10F5B8:
		dc.w	$0001
		dc.w	$FC00, $000D, $FFFC
;-------------------------------------------------------------------------------
Drill_Mobile_Mappings:                                         ; Offset_0x10F5C0
		dc.w	Offset_0x10F622-Drill_Mobile_Mappings
		dc.w	Offset_0x10F642-Drill_Mobile_Mappings
		dc.w	Offset_0x10F650-Drill_Mobile_Mappings
		dc.w	Offset_0x10F65E-Drill_Mobile_Mappings
		dc.w	Offset_0x10F678-Drill_Mobile_Mappings
		dc.w	Offset_0x10F68C-Drill_Mobile_Mappings
		dc.w	Offset_0x10F694-Drill_Mobile_Mappings
		dc.w	Offset_0x10F69C-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6A4-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6B2-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6BA-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6C2-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6CA-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6D2-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6DA-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6E2-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6F0-Drill_Mobile_Mappings
		dc.w	Offset_0x10F6FE-Drill_Mobile_Mappings
		dc.w	Offset_0x10F70C-Drill_Mobile_Mappings
		dc.w	Offset_0x10F714-Drill_Mobile_Mappings
		dc.w	Offset_0x10F722-Drill_Mobile_Mappings
		dc.w	Offset_0x10F72A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F732-Drill_Mobile_Mappings
		dc.w	Offset_0x10F73A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F742-Drill_Mobile_Mappings
		dc.w	Offset_0x10F74A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F752-Drill_Mobile_Mappings
		dc.w	Offset_0x10F75A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F762-Drill_Mobile_Mappings
		dc.w	Offset_0x10F76A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F784-Drill_Mobile_Mappings
		dc.w	Offset_0x10F798-Drill_Mobile_Mappings
		dc.w	Offset_0x10F7B2-Drill_Mobile_Mappings
		dc.w	Offset_0x10F7C0-Drill_Mobile_Mappings
		dc.w	Offset_0x10F7CE-Drill_Mobile_Mappings
		dc.w	Offset_0x10F7DC-Drill_Mobile_Mappings
		dc.w	Offset_0x10F7EA-Drill_Mobile_Mappings
		dc.w	Offset_0x10F7F2-Drill_Mobile_Mappings
		dc.w	Offset_0x10F7FA-Drill_Mobile_Mappings
		dc.w	Offset_0x10F802-Drill_Mobile_Mappings
		dc.w	Offset_0x10F80A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F812-Drill_Mobile_Mappings
		dc.w	Offset_0x10F81A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F822-Drill_Mobile_Mappings
		dc.w	Offset_0x10F82A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F832-Drill_Mobile_Mappings
		dc.w	Offset_0x10F83A-Drill_Mobile_Mappings
		dc.w	Offset_0x10F842-Drill_Mobile_Mappings
		dc.w	Offset_0x10F850-Drill_Mobile_Mappings
Offset_0x10F622:
		dc.w	$0005
		dc.w	$E00E, $0000, $FFFC
		dc.w	$F801, $000C, $FFDC
		dc.w	$F80F, $000E, $FFE4
		dc.w	$F80F, $001E, $0004
		dc.w	$180C, $002E, $FFF4
Offset_0x10F642:
		dc.w	$0002
		dc.w	$F006, $0032, $FFF0
		dc.w	$080C, $0038, $FFF0
Offset_0x10F650:
		dc.w	$0002
		dc.w	$F40E, $003C, $FFE8
		dc.w	$0404, $0048, $0008
Offset_0x10F65E:
		dc.w	$0004
		dc.w	$E80A, $004A, $0000
		dc.w	$F005, $0053, $FFF0
		dc.w	$000A, $0057, $FFE8
		dc.w	$0005, $0060, $0000
Offset_0x10F678:
		dc.w	$0003
		dc.w	$EC0C, $0064, $FFF0
		dc.w	$F40D, $0068, $FFF0
		dc.w	$040D, $0068, $FFF0
Offset_0x10F68C:
		dc.w	$0001
		dc.w	$F00F, $0070, $FFF0
Offset_0x10F694:
		dc.w	$0001
		dc.w	$F805, $0080, $FFF8
Offset_0x10F69C:
		dc.w	$0001
		dc.w	$F40A, $0084, $FFF4
Offset_0x10F6A4:
		dc.w	$0002
		dc.w	$F406, $008D, $FFF4
		dc.w	$FC00, $0093, $0004
Offset_0x10F6B2:
		dc.w	$0001
		dc.w	$F40A, $0094, $FFF4
Offset_0x10F6BA:
		dc.w	$0001
		dc.w	$F40A, $009D, $FFF4
Offset_0x10F6C2:
		dc.w	$0001
		dc.w	$F40A, $00A6, $FFF4
Offset_0x10F6CA:
		dc.w	$0001
		dc.w	$F40A, $00AF, $FFF4
Offset_0x10F6D2:
		dc.w	$0001
		dc.w	$F40A, $00B8, $FFF4
Offset_0x10F6DA:
		dc.w	$0001
		dc.w	$F40A, $00C1, $FFF4
Offset_0x10F6E2:
		dc.w	$0002
		dc.w	$F400, $00CA, $FFFC
		dc.w	$FC09, $00CB, $FFF4
Offset_0x10F6F0:
		dc.w	$0002
		dc.w	$F400, $00D1, $FFFC
		dc.w	$FC09, $00D2, $FFF4
Offset_0x10F6FE:
		dc.w	$0002
		dc.w	$F400, $00D8, $FFFC
		dc.w	$FC09, $00D9, $FFF4
Offset_0x10F70C:
		dc.w	$0001
		dc.w	$F40A, $00DF, $FFF4
Offset_0x10F714:
		dc.w	$0002
		dc.w	$F406, $00E8, $FFF4
		dc.w	$FC00, $00EE, $0004
Offset_0x10F722:
		dc.w	$0001
		dc.w	$F40A, $00EF, $FFF4
Offset_0x10F72A:
		dc.w	$0001
		dc.w	$F805, $00F8, $FFF8
Offset_0x10F732:
		dc.w	$0001
		dc.w	$F805, $00FC, $FFF8
Offset_0x10F73A:
		dc.w	$0001
		dc.w	$F805, $0100, $FFF8
Offset_0x10F742:
		dc.w	$0001
		dc.w	$F805, $0104, $FFF8
Offset_0x10F74A:
		dc.w	$0001
		dc.w	$F805, $0108, $FFF8
Offset_0x10F752:
		dc.w	$0001
		dc.w	$F40A, $010C, $FFF4
Offset_0x10F75A:
		dc.w	$0001
		dc.w	$F805, $0115, $FFF8
Offset_0x10F762:
		dc.w	$0001
		dc.w	$F402, $0119, $FFFC
Offset_0x10F76A:
		dc.w	$0004
		dc.w	$E00F, $0116, $FFE0
		dc.w	$E00F, $0126, $0000
		dc.w	$000F, $0136, $FFE0
		dc.w	$000F, $0146, $0000
Offset_0x10F784:
		dc.w	$0003
		dc.w	$0C0C, $1064, $FFF0
		dc.w	$FC0D, $1068, $FFF0
		dc.w	$EC0D, $1068, $FFF0
Offset_0x10F798:
		dc.w	$0004
		dc.w	$000A, $104A, $0000
		dc.w	$0005, $1053, $FFF0
		dc.w	$E80A, $1057, $FFE8
		dc.w	$F005, $1060, $0000
Offset_0x10F7B2:
		dc.w	$0002
		dc.w	$0400, $10CA, $FFFC
		dc.w	$F409, $10CB, $FFF4
Offset_0x10F7C0:
		dc.w	$0002
		dc.w	$0400, $10D1, $FFFC
		dc.w	$F409, $10D2, $FFF4
Offset_0x10F7CE:
		dc.w	$0002
		dc.w	$0400, $10D8, $FFFC
		dc.w	$F409, $10D9, $FFF4
Offset_0x10F7DC:
		dc.w	$0002
		dc.w	$F406, $108D, $FFF4
		dc.w	$FC00, $1093, $0004
Offset_0x10F7EA:
		dc.w	$0001
		dc.w	$F40A, $090C, $FFF4
Offset_0x10F7F2:
		dc.w	$0001
		dc.w	$F40A, $190C, $FFF4
Offset_0x10F7FA:
		dc.w	$0001
		dc.w	$F40A, $18AF, $FFF4
Offset_0x10F802:
		dc.w	$0001
		dc.w	$F40A, $18B8, $FFF4
Offset_0x10F80A:
		dc.w	$0001
		dc.w	$F40A, $18C1, $FFF4
Offset_0x10F812:
		dc.w	$0001
		dc.w	$FC08, $011C, $FFF4
Offset_0x10F81A:
		dc.w	$0001
		dc.w	$F805, $08F8, $FFF8
Offset_0x10F822:
		dc.w	$0001
		dc.w	$F805, $18F8, $FFF8
Offset_0x10F82A:
		dc.w	$0001
		dc.w	$FC08, $111C, $FFF4
Offset_0x10F832:
		dc.w	$0001
		dc.w	$F402, $0919, $FFFC
Offset_0x10F83A:
		dc.w	$0001
		dc.w	$F40E, $0000, $FFF0
Offset_0x10F842:
		dc.w	$0002
		dc.w	$F001, $000C, $FFEC
		dc.w	$F00F, $000E, $FFF4
Offset_0x10F850:
		dc.w	$0001
		dc.w	$F00F, $001E, $FFF0
;-------------------------------------------------------------------------------
Big_Shaker_Rocket_Twist_Lookup:                                ; Offset_0x10F858
		dc.b	$18, $18, $18, $18, $18, $18, $18, $18
		dc.b	$18, $17, $17, $17, $17, $17, $17, $16
		dc.b	$16, $16, $16, $15, $15, $15, $15, $14
		dc.b	$14, $14, $13, $13, $13, $12, $12, $11
		dc.b	$11, $11, $10, $10, $0F, $0F, $0E, $0E
		dc.b	$0D, $0D, $0C, $0C, $0B, $0B, $0A, $0A
		dc.b	$09, $09, $08, $08, $07, $06, $06, $05
		dc.b	$05, $04, $04, $03, $02, $02, $01, $01
		dc.b	$00, $FF, $FF, $FE, $FE, $FD, $FC, $FC
		dc.b	$FB, $FB, $FA, $FA, $F9, $F8, $F8, $F7
		dc.b	$F7, $F6, $F6, $F5, $F5, $F4, $F4, $F3
		dc.b	$F3, $F2, $F2, $F1, $F1, $F0, $F0, $EF
		dc.b	$EF, $EF, $EE, $EE, $ED, $ED, $ED, $EC
		dc.b	$EC, $EC, $EB, $EB, $EB, $EB, $EA, $EA
		dc.b	$EA, $EA, $E9, $E9, $E9, $E9, $E9, $E9
		dc.b	$E8, $E8, $E8, $E8, $E8, $E8, $E8, $E8
;-------------------------------------------------------------------------------
Hang_Mobile_Angle_Y_Lookup_Data:                               ; Offset_0x10F8D8
		dc.b	$00, $02, $04, $05, $07, $09, $0B, $0C
		dc.b	$0E, $10, $11, $13, $15, $17, $18, $1A
		dc.b	$1C, $1D, $1F, $20, $22, $23, $25, $27
		dc.b	$28, $29, $2B, $2C, $2E, $2F, $30, $32
		dc.b	$33, $34, $35, $37, $38, $39, $3A, $3B
		dc.b	$3C, $3D, $3E, $3F, $3F, $40, $41, $42
		dc.b	$43, $43, $44, $44, $45, $45, $46, $46
		dc.b	$47, $47, $47, $47, $48, $48, $48, $48
;-------------------------------------------------------------------------------
Hang_Mobile_Angle_Y_Lookup_Data_2:                             ; Offset_0x10F918
		dc.b	$00, $01, $02, $02, $03, $04, $05, $05
		dc.b	$06, $07, $08, $09, $09, $0A, $0B, $0C
		dc.b	$0C, $0D, $0E, $0E, $0F, $10, $10, $11
		dc.b	$12, $12, $13, $14, $14, $15, $15, $16
		dc.b	$17, $17, $18, $18, $19, $19, $1A, $1A
		dc.b	$1B, $1B, $1B, $1C, $1C, $1D, $1D, $1D
		dc.b	$1E, $1E, $1E, $1E, $1F, $1F, $1F, $1F
		dc.b	$1F, $20, $20, $20, $20, $20, $20, $20
;-------------------------------------------------------------------------------
Big_Shaker_Mappings:                                           ; Offset_0x10F958
		dc.w	Offset_0x10F9A0-Big_Shaker_Mappings
		dc.w	Offset_0x10F9BA-Big_Shaker_Mappings
		dc.w	Offset_0x10F9C2-Big_Shaker_Mappings
		dc.w	Offset_0x10F9CA-Big_Shaker_Mappings
		dc.w	Offset_0x10F9D2-Big_Shaker_Mappings
		dc.w	Offset_0x10F9E0-Big_Shaker_Mappings
		dc.w	Offset_0x10F9E8-Big_Shaker_Mappings
		dc.w	Offset_0x10F9F0-Big_Shaker_Mappings
		dc.w	Offset_0x10F9F8-Big_Shaker_Mappings
		dc.w	Offset_0x10FA00-Big_Shaker_Mappings
		dc.w	Offset_0x10FA08-Big_Shaker_Mappings
		dc.w	Offset_0x10FA10-Big_Shaker_Mappings
		dc.w	Offset_0x10FA18-Big_Shaker_Mappings
		dc.w	Offset_0x10FA20-Big_Shaker_Mappings
		dc.w	Offset_0x10FA28-Big_Shaker_Mappings
		dc.w	Offset_0x10FA30-Big_Shaker_Mappings
		dc.w	Offset_0x10FA38-Big_Shaker_Mappings
		dc.w	Offset_0x10FA40-Big_Shaker_Mappings
		dc.w	Offset_0x10FA48-Big_Shaker_Mappings
		dc.w	Offset_0x10FA56-Big_Shaker_Mappings
		dc.w	Offset_0x10FA5E-Big_Shaker_Mappings
		dc.w	Offset_0x10FA66-Big_Shaker_Mappings
		dc.w	Offset_0x10FA6E-Big_Shaker_Mappings
		dc.w	Offset_0x10FAB8-Big_Shaker_Mappings
		dc.w	Offset_0x10FAF0-Big_Shaker_Mappings
		dc.w	Offset_0x10FB28-Big_Shaker_Mappings
		dc.w	Offset_0x10FB28-Big_Shaker_Mappings
		dc.w	Offset_0x10FB2A-Big_Shaker_Mappings
		dc.w	Offset_0x10FB32-Big_Shaker_Mappings
		dc.w	Offset_0x10FB3A-Big_Shaker_Mappings
		dc.w	Offset_0x10FB42-Big_Shaker_Mappings
		dc.w	Offset_0x10FB4A-Big_Shaker_Mappings
		dc.w	Offset_0x10FB58-Big_Shaker_Mappings
		dc.w	Offset_0x10FB6C-Big_Shaker_Mappings
		dc.w	Offset_0x10FB80-Big_Shaker_Mappings
		dc.w	Offset_0x10FB8E-Big_Shaker_Mappings
Offset_0x10F9A0:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$000A, $0009, $FFE8
		dc.w	$E80A, $0800, $0000
		dc.w	$000A, $0809, $0000
Offset_0x10F9BA:
		dc.w	$0001
		dc.w	$F805, $0012, $FFF8
Offset_0x10F9C2:
		dc.w	$0001
		dc.w	$F40A, $0016, $FFF4
Offset_0x10F9CA:
		dc.w	$0001
		dc.w	$F40A, $001F, $FFF4
Offset_0x10F9D2:
		dc.w	$0002
		dc.w	$F209, $0028, $FFF0
		dc.w	$000D, $002E, $FFF2
Offset_0x10F9E0:
		dc.w	$0001
		dc.w	$F00F, $0036, $FFF0
Offset_0x10F9E8:
		dc.w	$0001
		dc.w	$F00F, $0046, $FFF0
Offset_0x10F9F0:
		dc.w	$0001
		dc.w	$F40A, $0056, $FFF4
Offset_0x10F9F8:
		dc.w	$0001
		dc.w	$F40A, $005F, $FFF4
Offset_0x10FA00:
		dc.w	$0001
		dc.w	$F805, $0068, $FFF8
Offset_0x10FA08:
		dc.w	$0001
		dc.w	$F70A, $006C, $FFF7
Offset_0x10FA10:
		dc.w	$0001
		dc.w	$F70A, $0075, $FFF7
Offset_0x10FA18:
		dc.w	$0001
		dc.w	$F40A, $007E, $FFF4
Offset_0x10FA20:
		dc.w	$0001
		dc.w	$F60A, $0087, $FFF6
Offset_0x10FA28:
		dc.w	$0001
		dc.w	$F40A, $0090, $FFF4
Offset_0x10FA30:
		dc.w	$0001
		dc.w	$F40A, $0099, $FFF4
Offset_0x10FA38:
		dc.w	$0001
		dc.w	$F40A, $00A2, $FFF4
Offset_0x10FA40:
		dc.w	$0001
		dc.w	$F40A, $00AB, $FFF4
Offset_0x10FA48:
		dc.w	$0002
		dc.w	$F004, $00B4, $FFF8
		dc.w	$F80E, $00B6, $FFF0
Offset_0x10FA56:
		dc.w	$0001
		dc.w	$F40A, $00C2, $FFF4
Offset_0x10FA5E:
		dc.w	$0001
		dc.w	$F40A, $00CB, $FFF4
Offset_0x10FA66:
		dc.w	$0001
		dc.w	$F40A, $00D4, $FFF4
Offset_0x10FA6E:
		dc.w	$000C
		dc.w	$D804, $00DD, $FFF0
		dc.w	$D804, $08DD, $0000
		dc.w	$E006, $00DF, $FFF0
		dc.w	$E006, $08DF, $0000
		dc.w	$F806, $00DF, $FFF0
		dc.w	$F806, $08DF, $0000
		dc.w	$1006, $00DF, $FFF0
		dc.w	$1006, $08DF, $0000
		dc.w	$2804, $00EE, $FFF0
		dc.w	$2804, $08EE, $0000
		dc.w	$3008, $00F0, $FFE8
		dc.w	$3008, $08F0, $0000
Offset_0x10FAB8:
		dc.w	$0009
		dc.w	$D804, $00DD, $FFF0
		dc.w	$D804, $08DD, $0000
		dc.w	$E00A, $00E5, $FFF4
		dc.w	$F80A, $00E5, $FFF4
		dc.w	$100A, $00E5, $FFF4
		dc.w	$2804, $00EE, $FFF0
		dc.w	$2804, $08EE, $0000
		dc.w	$300C, $00F3, $FFEC
		dc.w	$3000, $00F7, $000C
Offset_0x10FAF0:
		dc.w	$0009
		dc.w	$D804, $08DD, $0000
		dc.w	$D804, $00DD, $FFF0
		dc.w	$E00A, $08E5, $FFF4
		dc.w	$F80A, $08E5, $FFF4
		dc.w	$100A, $08E5, $FFF4
		dc.w	$2804, $08EE, $0000
		dc.w	$2804, $00EE, $FFF0
		dc.w	$300C, $08F3, $FFF4
		dc.w	$3000, $08F7, $FFEC
Offset_0x10FB28:
		dc.w	$0000
Offset_0x10FB2A:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x10FB32:
		dc.w	$0001
		dc.w	$F40A, $0009, $FFF4
Offset_0x10FB3A:
		dc.w	$0001
		dc.w	$F40A, $0800, $FFF4
Offset_0x10FB42:
		dc.w	$0001
		dc.w	$F40A, $0809, $FFF4
Offset_0x10FB4A:
		dc.w	$0002
		dc.w	$FC04, $00DD, $FFF0
		dc.w	$FC04, $08DD, $0000
Offset_0x10FB58:
		dc.w	$0003
		dc.w	$E006, $00DF, $FFF8
		dc.w	$F806, $00DF, $FFF8
		dc.w	$1006, $00DF, $FFF8
Offset_0x10FB6C:
		dc.w	$0003
		dc.w	$E006, $08DF, $FFF8
		dc.w	$F806, $08DF, $FFF8
		dc.w	$1006, $08DF, $FFF8
Offset_0x10FB80:
		dc.w	$0002
		dc.w	$F804, $00EE, $FFFC
		dc.w	$0008, $00F0, $FFF4
Offset_0x10FB8E:
		dc.w	$0002
		dc.w	$F804, $08EE, $FFF4
		dc.w	$0008, $08F0, $FFF4
;-------------------------------------------------------------------------------
Big_Shaker_Splash_Mappings:                                    ; Offset_0x10FB9C
		dc.w	Offset_0x10FBAE-Big_Shaker_Splash_Mappings
		dc.w	Offset_0x10FBB6-Big_Shaker_Splash_Mappings
		dc.w	Offset_0x10FBBE-Big_Shaker_Splash_Mappings
		dc.w	Offset_0x10FBC6-Big_Shaker_Splash_Mappings
		dc.w	Offset_0x10FBCE-Big_Shaker_Splash_Mappings
		dc.w	Offset_0x10FBD6-Big_Shaker_Splash_Mappings
		dc.w	Offset_0x10FBDE-Big_Shaker_Splash_Mappings
		dc.w	Offset_0x10FBE6-Big_Shaker_Splash_Mappings
		dc.w	Offset_0x10FBEE-Big_Shaker_Splash_Mappings
Offset_0x10FBAE:
		dc.w	$0001
		dc.w	$F209, $0000, $FFF0
Offset_0x10FBB6:
		dc.w	$0001
		dc.w	$E20F, $0000, $FFF0
Offset_0x10FBBE:
		dc.w	$0001
		dc.w	$E20F, $0000, $FFF0
Offset_0x10FBC6:
		dc.w	$0001
		dc.w	$E20F, $0000, $FFF0
Offset_0x10FBCE:
		dc.w	$0001
		dc.w	$E20F, $0000, $FFF0
Offset_0x10FBD6:
		dc.w	$0001
		dc.w	$EA0E, $0000, $FFF0
Offset_0x10FBDE:
		dc.w	$0001
		dc.w	$F20D, $0000, $FFF0
Offset_0x10FBE6:
		dc.w	$0001
		dc.w	$FA0C, $0000, $FFF0
Offset_0x10FBEE:
		dc.w	$0001
		dc.w	$FA0C, $0000, $FFF0
;-------------------------------------------------------------------------------
Big_Shaker_Splash_Dyn_Script:                                  ; Offset_0x10FBF6
		dc.w	Offset_0x10FC08-Big_Shaker_Splash_Dyn_Script
		dc.w	Offset_0x10FC0C-Big_Shaker_Splash_Dyn_Script
		dc.w	Offset_0x10FC10-Big_Shaker_Splash_Dyn_Script
		dc.w	Offset_0x10FC14-Big_Shaker_Splash_Dyn_Script
		dc.w	Offset_0x10FC18-Big_Shaker_Splash_Dyn_Script
		dc.w	Offset_0x10FC1C-Big_Shaker_Splash_Dyn_Script
		dc.w	Offset_0x10FC20-Big_Shaker_Splash_Dyn_Script
		dc.w	Offset_0x10FC24-Big_Shaker_Splash_Dyn_Script
		dc.w	Offset_0x10FC28-Big_Shaker_Splash_Dyn_Script
Offset_0x10FC08:
		dc.w	$0000
		dc.w	$0005
Offset_0x10FC0C:
		dc.w	$0000
		dc.w	$006F
Offset_0x10FC10:
		dc.w	$0000
		dc.w	$016F
Offset_0x10FC14:
		dc.w	$0000
		dc.w	$026F
Offset_0x10FC18:
		dc.w	$0000
		dc.w	$036F
Offset_0x10FC1C:
		dc.w	$0000
		dc.w	$046B
Offset_0x10FC20:
		dc.w	$0000
		dc.w	$0527
Offset_0x10FC24:
		dc.w	$0000
		dc.w	$05A3
Offset_0x10FC28:
		dc.w	$0000
		dc.w	$05E3
;-------------------------------------------------------------------------------
Freezer_Mobile_Mappings:                                       ; Offset_0x10FC2C
		dc.w	Offset_0x10FC5E-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FC7E-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FC8C-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCA6-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCB4-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCC2-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCCA-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCD2-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCDA-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCE2-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCEA-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCF2-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FCFA-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD02-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD0A-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD12-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD1A-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD22-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD2A-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD32-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD3A-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD42-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD4A-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD52-Freezer_Mobile_Mappings
		dc.w	Offset_0x10FD5A-Freezer_Mobile_Mappings
Offset_0x10FC5E:
		dc.w	$0005
		dc.w	$F40F, $0000, $FFDC
		dc.w	$F40F, $0010, $FFFC
		dc.w	$140C, $0020, $FFEC
		dc.w	$1400, $0024, $000C
		dc.w	$1C00, $0025, $FFFC
Offset_0x10FC7E:
		dc.w	$0002
		dc.w	$EC07, $0026, $FFF8
		dc.w	$0C04, $002E, $FFF8
Offset_0x10FC8C:
		dc.w	$0004
		dc.w	$D403, $0030, $FFF8
		dc.w	$D403, $0830, $0000
		dc.w	$F40A, $0034, $FFE8
		dc.w	$F40A, $0834, $0000
Offset_0x10FCA6:
		dc.w	$0002
		dc.w	$F801, $003D, $FFEC
		dc.w	$F80D, $003F, $FFF4
Offset_0x10FCB4:
		dc.w	$0002
		dc.w	$F801, $003D, $FFEC
		dc.w	$F80D, $0047, $FFF4
Offset_0x10FCC2:
		dc.w	$0001
		dc.w	$F805, $004F, $FFF8
Offset_0x10FCCA:
		dc.w	$0001
		dc.w	$F40A, $0053, $FFF4
Offset_0x10FCD2:
		dc.w	$0001
		dc.w	$F40A, $005C, $FFF4
Offset_0x10FCDA:
		dc.w	$0001
		dc.w	$F40A, $0065, $FFF4
Offset_0x10FCE2:
		dc.w	$0001
		dc.w	$F40A, $006E, $FFF4
Offset_0x10FCEA:
		dc.w	$0001
		dc.w	$F809, $0077, $FFF4
Offset_0x10FCF2:
		dc.w	$0001
		dc.w	$F00F, $007D, $FFF0
Offset_0x10FCFA:
		dc.w	$0001
		dc.w	$F00F, $008D, $FFF0
Offset_0x10FD02:
		dc.w	$0001
		dc.w	$F00F, $009D, $FFF0
Offset_0x10FD0A:
		dc.w	$0001
		dc.w	$F00F, $00AD, $FFF0
Offset_0x10FD12:
		dc.w	$0001
		dc.w	$F00F, $00BD, $FFF0
Offset_0x10FD1A:
		dc.w	$0001
		dc.w	$FC00, $00CD, $FFFC
Offset_0x10FD22:
		dc.w	$0001
		dc.w	$F805, $00CE, $FFF8
Offset_0x10FD2A:
		dc.w	$0001
		dc.w	$F805, $00D2, $FFF8
Offset_0x10FD32:
		dc.w	$0001
		dc.w	$F805, $00D6, $FFF8
Offset_0x10FD3A:
		dc.w	$0001
		dc.w	$F805, $00DA, $FFF8
Offset_0x10FD42:
		dc.w	$0001
		dc.w	$F805, $00DE, $FFF8
Offset_0x10FD4A:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x10FD52:
		dc.w	$0001
		dc.w	$F00F, $0010, $FFF0
Offset_0x10FD5A:
		dc.w	$0003
		dc.w	$F80C, $0020, $FFEC
		dc.w	$F800, $0024, $000C
		dc.w	$0000, $0025, $FFFC
;-------------------------------------------------------------------------------
Bowling_Spin_Palette_Rotation_Script:                          ; Offset_0x10FD6E
		dc.w	$0004, $0000
		dc.l	Offset_0x10FD78
		dc.w	$0000
Offset_0x10FD78:
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0005, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0003, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0001, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$000A, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0000, $FFF4
;-------------------------------------------------------------------------------
Bowling_Spin_Sparks_Palette_Rotation_Script:                   ; Offset_0x10FDC6
		dc.w	$0004, $0000
		dc.l	Offset_0x10FDD0
		dc.w	$0000
Offset_0x10FDD0:
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0030, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0001, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0003, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0003, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0001, $0020
		dc.w	$005F, $FFF8, $FF94
;-------------------------------------------------------------------------------
Bowling_Spin_Open_Palette_Rotation_Script:                     ; Offset_0x10FE18
		dc.w	$0004, $0000
		dc.l	Offset_0x10FE22
		dc.w	$0000
Offset_0x10FE22:
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0000, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0001, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0007, $0EEE
		dc.w	$0000, $0A22
		dc.w	$0000, $0020
		dc.w	$0002, $FFFC
;-------------------------------------------------------------------------------
Bowling_Spin_Mappings:                                         ; Offset_0x10FE4C
		dc.w	Offset_0x10FE78-Bowling_Spin_Mappings
		dc.w	Offset_0x10FE9E-Bowling_Spin_Mappings
		dc.w	Offset_0x10FF00-Bowling_Spin_Mappings
		dc.w	Offset_0x10FF62-Bowling_Spin_Mappings
		dc.w	Offset_0x10FFC4-Bowling_Spin_Mappings
		dc.w	Offset_0x110026-Bowling_Spin_Mappings
		dc.w	Offset_0x110088-Bowling_Spin_Mappings
		dc.w	Offset_0x1100EA-Bowling_Spin_Mappings
		dc.w	Offset_0x1100FE-Bowling_Spin_Mappings
		dc.w	Offset_0x110112-Bowling_Spin_Mappings
		dc.w	Offset_0x110126-Bowling_Spin_Mappings
		dc.w	Offset_0x110134-Bowling_Spin_Mappings
		dc.w	Offset_0x110142-Bowling_Spin_Mappings
		dc.w	Offset_0x11014A-Bowling_Spin_Mappings
		dc.w	Offset_0x110152-Bowling_Spin_Mappings
		dc.w	Offset_0x11015A-Bowling_Spin_Mappings
		dc.w	Offset_0x110168-Bowling_Spin_Mappings
		dc.w	Offset_0x110176-Bowling_Spin_Mappings
		dc.w	Offset_0x110178-Bowling_Spin_Mappings
		dc.w	Offset_0x110180-Bowling_Spin_Mappings
		dc.w	Offset_0x110188-Bowling_Spin_Mappings
		dc.w	Offset_0x110196-Bowling_Spin_Mappings
Offset_0x10FE78:
		dc.w	$0006
		dc.w	$F00F, $0000, $FFE0
		dc.w	$F00F, $0800, $0000
		dc.w	$1005, $0010, $FFF0
		dc.w	$1005, $0810, $0000
		dc.w	$1C05, $0014, $FFF0
		dc.w	$1C05, $0814, $0000
Offset_0x10FE9E:
		dc.w	$0010
		dc.w	$F00F, $0000, $FFE0
		dc.w	$F00F, $0800, $0000
		dc.w	$0A04, $0023, $FFF0
		dc.w	$0A04, $0823, $0000
		dc.w	$0C04, $0023, $FFF0
		dc.w	$0C04, $0823, $0000
		dc.w	$0E04, $0023, $FFF0
		dc.w	$0E04, $0823, $0000
		dc.w	$1004, $0023, $FFF0
		dc.w	$1004, $0823, $0000
		dc.w	$1204, $0023, $FFF0
		dc.w	$1204, $0823, $0000
		dc.w	$1404, $0023, $FFF0
		dc.w	$1404, $0823, $0000
		dc.w	$1C05, $0014, $FFF0
		dc.w	$1C05, $0814, $0000
Offset_0x10FF00:
		dc.w	$0010
		dc.w	$F00F, $0000, $FFE0
		dc.w	$F00F, $0800, $0000
		dc.w	$0B04, $0023, $FFF0
		dc.w	$0B04, $0823, $0000
		dc.w	$0E04, $0023, $FFF0
		dc.w	$0E04, $0823, $0000
		dc.w	$1104, $0023, $FFF0
		dc.w	$1104, $0823, $0000
		dc.w	$1404, $0023, $FFF0
		dc.w	$1404, $0823, $0000
		dc.w	$1704, $0023, $FFF0
		dc.w	$1704, $0823, $0000
		dc.w	$1A04, $0023, $FFF0
		dc.w	$1A04, $0823, $0000
		dc.w	$2205, $0014, $FFF0
		dc.w	$2205, $0814, $0000
Offset_0x10FF62:
		dc.w	$0010
		dc.w	$F00F, $0000, $FFE0
		dc.w	$F00F, $0800, $0000
		dc.w	$0C04, $0023, $FFF0
		dc.w	$0C04, $0823, $0000
		dc.w	$1004, $0023, $FFF0
		dc.w	$1004, $0823, $0000
		dc.w	$1404, $0023, $FFF0
		dc.w	$1404, $0823, $0000
		dc.w	$1804, $0023, $FFF0
		dc.w	$1804, $0823, $0000
		dc.w	$1C04, $0023, $FFF0
		dc.w	$1C04, $0823, $0000
		dc.w	$2004, $0023, $FFF0
		dc.w	$2004, $0823, $0000
		dc.w	$2805, $0014, $FFF0
		dc.w	$2805, $0814, $0000
Offset_0x10FFC4:
		dc.w	$0010
		dc.w	$F00F, $0000, $FFE0
		dc.w	$F00F, $0800, $0000
		dc.w	$0D04, $0023, $FFF0
		dc.w	$0D04, $0823, $0000
		dc.w	$1204, $0023, $FFF0
		dc.w	$1204, $0823, $0000
		dc.w	$1704, $0023, $FFF0
		dc.w	$1704, $0823, $0000
		dc.w	$1C04, $0023, $FFF0
		dc.w	$1C04, $0823, $0000
		dc.w	$2104, $0023, $FFF0
		dc.w	$2104, $0823, $0000
		dc.w	$2604, $0023, $FFF0
		dc.w	$2604, $0823, $0000
		dc.w	$2E05, $0014, $FFF0
		dc.w	$2E05, $0814, $0000
Offset_0x110026:
		dc.w	$0010
		dc.w	$F00F, $0000, $FFE0
		dc.w	$F00F, $0800, $0000
		dc.w	$0E04, $0023, $FFF0
		dc.w	$0E04, $0823, $0000
		dc.w	$1404, $0023, $FFF0
		dc.w	$1404, $0823, $0000
		dc.w	$1A04, $0023, $FFF0
		dc.w	$1A04, $0823, $0000
		dc.w	$2004, $0023, $FFF0
		dc.w	$2004, $0823, $0000
		dc.w	$2604, $0023, $FFF0
		dc.w	$2604, $0823, $0000
		dc.w	$2C04, $0023, $FFF0
		dc.w	$2C04, $0823, $0000
		dc.w	$3405, $0014, $FFF0
		dc.w	$3405, $0814, $0000
Offset_0x110088:
		dc.w	$0010
		dc.w	$F00F, $0000, $FFE0
		dc.w	$F00F, $0800, $0000
		dc.w	$0F04, $0023, $FFF0
		dc.w	$0F04, $0823, $0000
		dc.w	$1604, $0023, $FFF0
		dc.w	$1604, $0823, $0000
		dc.w	$1D04, $0023, $FFF0
		dc.w	$1D04, $0823, $0000
		dc.w	$2404, $0023, $FFF0
		dc.w	$2404, $0823, $0000
		dc.w	$2B04, $0023, $FFF0
		dc.w	$2B04, $0823, $0000
		dc.w	$3204, $0023, $FFF0
		dc.w	$3204, $0823, $0000
		dc.w	$3A05, $0014, $FFF0
		dc.w	$3A05, $0814, $0000
Offset_0x1100EA:
		dc.w	$0003
		dc.w	$F808, $0018, $FFE8
		dc.w	$F808, $0818, $0000
		dc.w	$0008, $0020, $FFF4
Offset_0x1100FE:
		dc.w	$0003
		dc.w	$F80C, $001B, $FFEC
		dc.w	$F800, $001F, $000C
		dc.w	$0008, $0820, $FFF4
Offset_0x110112:
		dc.w	$0003
		dc.w	$F80C, $081B, $FFF4
		dc.w	$F800, $081F, $FFEC
		dc.w	$0008, $0020, $FFF4
Offset_0x110126:
		dc.w	$0002
		dc.w	$E801, $0025, $FFF4
		dc.w	$F80B, $0027, $FFF4
Offset_0x110134:
		dc.w	$0002
		dc.w	$E803, $0033, $FFF4
		dc.w	$F807, $0037, $FFFC
Offset_0x110142:
		dc.w	$0001
		dc.w	$F805, $003F, $FFF8
Offset_0x11014A:
		dc.w	$0001
		dc.w	$F805, $0043, $FFF8
Offset_0x110152:
		dc.w	$0001
		dc.w	$F805, $0047, $FFF8
Offset_0x11015A:
		dc.w	$0002
		dc.w	$E801, $0825, $0004
		dc.w	$F80B, $0827, $FFF4
Offset_0x110168:
		dc.w	$0002
		dc.w	$E803, $0833, $0004
		dc.w	$F807, $0837, $FFF4
Offset_0x110176:
		dc.w	$0000
Offset_0x110178:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x110180:
		dc.w	$0001
		dc.w	$F00F, $0800, $FFF0
Offset_0x110188:
		dc.w	$0002
		dc.w	$FC04, $0023, $FFF0
		dc.w	$FC04, $0823, $0000
Offset_0x110196:
		dc.w	$0002
		dc.w	$F805, $0014, $FFF0
		dc.w	$F805, $0814, $0000
;-------------------------------------------------------------------------------
Big_Icedus_Palette_Rotation_Script:                            ; Offset_0x1101A4
		dc.w	$0004, $0000
		dc.l	Offset_0x1101AE
		dc.w	$0000
Offset_0x1101AE:
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0222
		dc.w	$0007, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0222
		dc.w	$0005, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0222
		dc.w	$0003, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0222
		dc.w	$0001, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0000, $0222
		dc.w	$0000, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFFC
;-------------------------------------------------------------------------------
Big_Icedus_Palette_Rotation_Script_2:                          ; Offset_0x110210
		dc.w	$0004, $0000
		dc.l	Offset_0x11021A
		dc.w	$0000
Offset_0x11021A:
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0222
		dc.w	$0001, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0222
		dc.w	$0003, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0222
		dc.w	$0005, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0002, $0222
		dc.w	$0007, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF8, $0014
		dc.w	(Palette_Row_1_Offset+$14)                       ; $ED34
		dc.w	$0004, $0222
		dc.w	$0009, $0C22
		dc.w	$0000, $0EE0
		dc.w	$0000, $FFF4
;-------------------------------------------------------------------------------
Big_Icedus_Angle_Lookup:                                       ; Offset_0x11027C
		dc.b	$00, $01, $02, $04, $05, $06, $07, $08
		dc.b	$09, $0B, $0C, $0D, $0E, $0F, $10, $11
		dc.b	$12, $13, $15, $16, $17, $18, $19, $1A
		dc.b	$1B, $1C, $1D, $1E, $1E, $1F, $20, $21
		dc.b	$22, $23, $24, $24, $25, $26, $27, $27
		dc.b	$28, $29, $29, $2A, $2A, $2B, $2B, $2C
		dc.b	$2C, $2D, $2D, $2E, $2E, $2E, $2F, $2F
		dc.b	$2F, $2F, $2F, $30, $30, $30, $30, $30
;-------------------------------------------------------------------------------
Big_Icedus_Mappings:                                           ; Offset_0x1102BC
		dc.w	Offset_0x1102DA-Big_Icedus_Mappings
		dc.w	Offset_0x1102F4-Big_Icedus_Mappings
		dc.w	Offset_0x1102FC-Big_Icedus_Mappings
		dc.w	Offset_0x110304-Big_Icedus_Mappings
		dc.w	Offset_0x110312-Big_Icedus_Mappings
		dc.w	Offset_0x110320-Big_Icedus_Mappings
		dc.w	Offset_0x110328-Big_Icedus_Mappings
		dc.w	Offset_0x110330-Big_Icedus_Mappings
		dc.w	Offset_0x110338-Big_Icedus_Mappings
		dc.w	Offset_0x110340-Big_Icedus_Mappings
		dc.w	Offset_0x110348-Big_Icedus_Mappings
		dc.w	Offset_0x110350-Big_Icedus_Mappings
		dc.w	Offset_0x110358-Big_Icedus_Mappings
		dc.w	Offset_0x110360-Big_Icedus_Mappings
		dc.w	Offset_0x110368-Big_Icedus_Mappings
Offset_0x1102DA:
		dc.w	$0004
		dc.w	$E80A, $0000, $FFE8
		dc.w	$000A, $0009, $FFE8
		dc.w	$E80A, $0800, $0000
		dc.w	$000A, $0809, $0000
Offset_0x1102F4:
		dc.w	$0001
		dc.w	$F805, $0012, $FFF8
Offset_0x1102FC:
		dc.w	$0001
		dc.w	$F805, $0016, $FFF8
Offset_0x110304:
		dc.w	$0002
		dc.w	$FC04, $001A, $FFF0
		dc.w	$FC04, $081A, $0000
Offset_0x110312:
		dc.w	$0002
		dc.w	$F402, $001C, $FFF8
		dc.w	$F402, $081C, $0000
Offset_0x110320:
		dc.w	$0001
		dc.w	$F40A, $001F, $FFF4
Offset_0x110328:
		dc.w	$0001
		dc.w	$F40A, $0028, $FFF4
Offset_0x110330:
		dc.w	$0001
		dc.w	$F40A, $0031, $FFF4
Offset_0x110338:
		dc.w	$0001
		dc.w	$F40A, $003A, $FFF4
Offset_0x110340:
		dc.w	$0001
		dc.w	$F805, $0812, $FFF8
Offset_0x110348:
		dc.w	$0001
		dc.w	$F805, $0816, $FFF8
Offset_0x110350:
		dc.w	$0001
		dc.w	$F40A, $0000, $FFF4
Offset_0x110358:
		dc.w	$0001
		dc.w	$F40A, $0800, $FFF4
Offset_0x110360:
		dc.w	$0001
		dc.w	$F40A, $0009, $FFF4
Offset_0x110368:
		dc.w	$0001
		dc.w	$F40A, $0809, $FFF4
;-------------------------------------------------------------------------------
Hang_Mobile_Mappings:                                          ; Offset_0x110370
		dc.w	Offset_0x110390-Hang_Mobile_Mappings
		dc.w	Offset_0x1103B6-Hang_Mobile_Mappings
		dc.w	Offset_0x1103D0-Hang_Mobile_Mappings
		dc.w	Offset_0x1103D8-Hang_Mobile_Mappings
		dc.w	Offset_0x1103E0-Hang_Mobile_Mappings
		dc.w	Offset_0x1103E8-Hang_Mobile_Mappings
		dc.w	Offset_0x1103F0-Hang_Mobile_Mappings
		dc.w	Offset_0x1103F8-Hang_Mobile_Mappings
		dc.w	Offset_0x110400-Hang_Mobile_Mappings
		dc.w	Offset_0x11040E-Hang_Mobile_Mappings
		dc.w	Offset_0x11041C-Hang_Mobile_Mappings
		dc.w	Offset_0x110424-Hang_Mobile_Mappings
		dc.w	Offset_0x11042C-Hang_Mobile_Mappings
		dc.w	Offset_0x110434-Hang_Mobile_Mappings
		dc.w	Offset_0x11043C-Hang_Mobile_Mappings
		dc.w	Offset_0x110444-Hang_Mobile_Mappings
Offset_0x110390:
		dc.w	$0006
		dc.w	$F801, $0000, $FFD8
		dc.w	$F80F, $0002, $FFE0
		dc.w	$180D, $0012, $FFE0
		dc.w	$F801, $0800, $0020
		dc.w	$F80F, $0802, $0000
		dc.w	$180D, $0812, $0000
Offset_0x1103B6:
		dc.w	$0004
		dc.w	$E007, $001A, $FFF0
		dc.w	$E007, $081A, $0000
		dc.w	$0007, $101A, $FFF0
		dc.w	$0007, $181A, $0000
Offset_0x1103D0:
		dc.w	$0001
		dc.w	$F805, $0022, $FFF8
Offset_0x1103D8:
		dc.w	$0001
		dc.w	$F809, $0026, $FFF4
Offset_0x1103E0:
		dc.w	$0001
		dc.w	$F801, $002C, $FFFC
Offset_0x1103E8:
		dc.w	$0001
		dc.w	$F801, $002E, $FFFC
Offset_0x1103F0:
		dc.w	$0001
		dc.w	$F801, $082C, $FFFC
Offset_0x1103F8:
		dc.w	$0001
		dc.w	$F801, $082E, $FFFC
Offset_0x110400:
		dc.w	$0002
		dc.w	$F001, $0000, $FFEC
		dc.w	$F00F, $0002, $FFF4
Offset_0x11040E:
		dc.w	$0002
		dc.w	$F001, $0800, $000C
		dc.w	$F00F, $0802, $FFEC
Offset_0x11041C:
		dc.w	$0001
		dc.w	$F80D, $0012, $FFF0
Offset_0x110424:
		dc.w	$0001
		dc.w	$F80D, $0812, $FFF0
Offset_0x11042C:
		dc.w	$0001
		dc.w	$F007, $001A, $FFF8
Offset_0x110434:
		dc.w	$0001
		dc.w	$F007, $081A, $FFF8
Offset_0x11043C:
		dc.w	$0001
		dc.w	$F007, $101A, $FFF8
Offset_0x110444:
		dc.w	$0001
		dc.w	$F007, $181A, $FFF8
;-------------------------------------------------------------------------------
Screw_Mobile_Mappings:                                         ; Offset_0x11044C
		dc.w	Offset_0x1104B0-Screw_Mobile_Mappings
		dc.w	Offset_0x1104CA-Screw_Mobile_Mappings
		dc.w	Offset_0x1104D2-Screw_Mobile_Mappings
		dc.w	Offset_0x1104E6-Screw_Mobile_Mappings
		dc.w	Offset_0x1104FA-Screw_Mobile_Mappings
		dc.w	Offset_0x110508-Screw_Mobile_Mappings
		dc.w	Offset_0x11051C-Screw_Mobile_Mappings
		dc.w	Offset_0x110524-Screw_Mobile_Mappings
		dc.w	Offset_0x11052C-Screw_Mobile_Mappings
		dc.w	Offset_0x110534-Screw_Mobile_Mappings
		dc.w	Offset_0x11053C-Screw_Mobile_Mappings
		dc.w	Offset_0x110544-Screw_Mobile_Mappings
		dc.w	Offset_0x11054C-Screw_Mobile_Mappings
		dc.w	Offset_0x110554-Screw_Mobile_Mappings
		dc.w	Offset_0x11055C-Screw_Mobile_Mappings
		dc.w	Offset_0x110564-Screw_Mobile_Mappings
		dc.w	Offset_0x11056C-Screw_Mobile_Mappings
		dc.w	Offset_0x110574-Screw_Mobile_Mappings
		dc.w	Offset_0x11057C-Screw_Mobile_Mappings
		dc.w	Offset_0x110584-Screw_Mobile_Mappings
		dc.w	Offset_0x11058C-Screw_Mobile_Mappings
		dc.w	Offset_0x110594-Screw_Mobile_Mappings
		dc.w	Offset_0x1105A2-Screw_Mobile_Mappings
		dc.w	Offset_0x1105B0-Screw_Mobile_Mappings
		dc.w	Offset_0x1105BE-Screw_Mobile_Mappings
		dc.w	Offset_0x1105C6-Screw_Mobile_Mappings
		dc.w	Offset_0x1105CE-Screw_Mobile_Mappings
		dc.w	Offset_0x1105D6-Screw_Mobile_Mappings
		dc.w	Offset_0x1105DE-Screw_Mobile_Mappings
		dc.w	Offset_0x1105E6-Screw_Mobile_Mappings
		dc.w	Offset_0x1105EE-Screw_Mobile_Mappings
		dc.w	Offset_0x1105F6-Screw_Mobile_Mappings
		dc.w	Offset_0x1105FE-Screw_Mobile_Mappings
		dc.w	Offset_0x11060C-Screw_Mobile_Mappings
		dc.w	Offset_0x11061A-Screw_Mobile_Mappings
		dc.w	Offset_0x110628-Screw_Mobile_Mappings
		dc.w	Offset_0x110630-Screw_Mobile_Mappings
		dc.w	Offset_0x11063E-Screw_Mobile_Mappings
		dc.w	Offset_0x11064C-Screw_Mobile_Mappings
		dc.w	Offset_0x11065A-Screw_Mobile_Mappings
		dc.w	Offset_0x11066E-Screw_Mobile_Mappings
		dc.w	Offset_0x110682-Screw_Mobile_Mappings
		dc.w	Offset_0x110696-Screw_Mobile_Mappings
		dc.w	Offset_0x1106B0-Screw_Mobile_Mappings
		dc.w	Offset_0x1106CA-Screw_Mobile_Mappings
		dc.w	Offset_0x1106E4-Screw_Mobile_Mappings
		dc.w	Offset_0x110704-Screw_Mobile_Mappings
		dc.w	Offset_0x110724-Screw_Mobile_Mappings
		dc.w	Offset_0x110744-Screw_Mobile_Mappings
		dc.w	Offset_0x11074C-Screw_Mobile_Mappings
Offset_0x1104B0:
		dc.w	$0004
		dc.w	$FD05, $0000, $FFF4
		dc.w	$FD0D, $0004, $0004
		dc.w	$0D04, $000C, $0004
		dc.w	$0D09, $000E, $0014
Offset_0x1104CA:
		dc.w	$0001
		dc.w	$FC08, $0014, $FFF4
Offset_0x1104D2:
		dc.w	$0003
		dc.w	$FC08, $0017, $FFE4
		dc.w	$FC0C, $001A, $FFFC
		dc.w	$0404, $002A, $FFF8
Offset_0x1104E6:
		dc.w	$0003
		dc.w	$FC04, $001E, $FFEC
		dc.w	$FC08, $0020, $FFFC
		dc.w	$0404, $082A, $FFF8
Offset_0x1104FA:
		dc.w	$0002
		dc.w	$FC04, $0023, $FFF8
		dc.w	$0404, $002A, $FFF8
Offset_0x110508:
		dc.w	$0003
		dc.w	$FC04, $0025, $FFEC
		dc.w	$FC08, $0027, $FFFC
		dc.w	$0404, $082A, $FFF8
Offset_0x11051C:
		dc.w	$0001
		dc.w	$F805, $002C, $FFF8
Offset_0x110524:
		dc.w	$0001
		dc.w	$F805, $0030, $FFF8
Offset_0x11052C:
		dc.w	$0001
		dc.w	$F809, $0034, $FFF4
Offset_0x110534:
		dc.w	$0001
		dc.w	$F00A, $003A, $FFF4
Offset_0x11053C:
		dc.w	$0001
		dc.w	$E80B, $0043, $FFF4
Offset_0x110544:
		dc.w	$0001
		dc.w	$E80B, $004F, $FFF4
Offset_0x11054C:
		dc.w	$0001
		dc.w	$E80B, $005B, $FFF4
Offset_0x110554:
		dc.w	$0001
		dc.w	$F80D, $0067, $FFF0
Offset_0x11055C:
		dc.w	$0001
		dc.w	$F80D, $006F, $FFF0
Offset_0x110564:
		dc.w	$0001
		dc.w	$F80D, $0077, $FFF0
Offset_0x11056C:
		dc.w	$0001
		dc.w	$F80D, $007F, $FFF0
Offset_0x110574:
		dc.w	$0001
		dc.w	$F80D, $0087, $FFF0
Offset_0x11057C:
		dc.w	$0001
		dc.w	$F80D, $008F, $FFF0
Offset_0x110584:
		dc.w	$0001
		dc.w	$F00F, $0097, $FFF0
Offset_0x11058C:
		dc.w	$0001
		dc.w	$F00F, $00A7, $FFF0
Offset_0x110594:
		dc.w	$0002
		dc.w	$F40E, $00B7, $FFEC
		dc.w	$F402, $00C3, $000C
Offset_0x1105A2:
		dc.w	$0002
		dc.w	$F40E, $00C6, $FFEC
		dc.w	$F402, $00D2, $000C
Offset_0x1105B0:
		dc.w	$0002
		dc.w	$F40E, $00D5, $FFEC
		dc.w	$F402, $00E1, $000C
Offset_0x1105BE:
		dc.w	$0001
		dc.w	$FC08, $00E4, $FFF4
Offset_0x1105C6:
		dc.w	$0001
		dc.w	$F409, $00E7, $FFF4
Offset_0x1105CE:
		dc.w	$0001
		dc.w	$FC0C, $00ED, $FFF0
Offset_0x1105D6:
		dc.w	$0001
		dc.w	$F809, $0834, $FFF4
Offset_0x1105DE:
		dc.w	$0001
		dc.w	$F00A, $083A, $FFF4
Offset_0x1105E6:
		dc.w	$0001
		dc.w	$E80B, $0843, $FFF4
Offset_0x1105EE:
		dc.w	$0001
		dc.w	$E80B, $084F, $FFF4
Offset_0x1105F6:
		dc.w	$0001
		dc.w	$E80B, $085B, $FFF4
Offset_0x1105FE:
		dc.w	$0002
		dc.w	$F40E, $08B7, $FFF4
		dc.w	$F402, $08C3, $FFEC
Offset_0x11060C:
		dc.w	$0002
		dc.w	$F40E, $08C6, $FFF4
		dc.w	$F402, $08D2, $FFEC
Offset_0x11061A:
		dc.w	$0002
		dc.w	$F40E, $08D5, $FFF4
		dc.w	$F402, $08E1, $FFEC
Offset_0x110628:
		dc.w	$0001
		dc.w	$FC0C, $08ED, $FFF0
Offset_0x110630:
		dc.w	$0002
		dc.w	$F00D, $006F, $FFF0
		dc.w	$000D, $0067, $FFF0
Offset_0x11063E:
		dc.w	$0002
		dc.w	$F00D, $007F, $FFF0
		dc.w	$000D, $0077, $FFF0
Offset_0x11064C:
		dc.w	$0002
		dc.w	$F00D, $008F, $FFF0
		dc.w	$000D, $0087, $FFF0
Offset_0x11065A:
		dc.w	$0003
		dc.w	$E80D, $0067, $FFF0
		dc.w	$F80D, $006F, $FFF0
		dc.w	$080D, $0067, $FFF0
Offset_0x11066E:
		dc.w	$0003
		dc.w	$E80D, $0077, $FFF0
		dc.w	$F80D, $007F, $FFF0
		dc.w	$080D, $0077, $FFF0
Offset_0x110682:
		dc.w	$0003
		dc.w	$E80D, $0087, $FFF0
		dc.w	$F80D, $008F, $FFF0
		dc.w	$080D, $0087, $FFF0
Offset_0x110696:
		dc.w	$0004
		dc.w	$E00D, $006F, $FFF0
		dc.w	$F00D, $0067, $FFF0
		dc.w	$000D, $006F, $FFF0
		dc.w	$100D, $0067, $FFF0
Offset_0x1106B0:
		dc.w	$0004
		dc.w	$E00D, $007F, $FFF0
		dc.w	$F00D, $0077, $FFF0
		dc.w	$000D, $007F, $FFF0
		dc.w	$100D, $0077, $FFF0
Offset_0x1106CA:
		dc.w	$0004
		dc.w	$E00D, $008F, $FFF0
		dc.w	$F00D, $0087, $FFF0
		dc.w	$000D, $008F, $FFF0
		dc.w	$100D, $0087, $FFF0
Offset_0x1106E4:
		dc.w	$0005
		dc.w	$D80D, $0067, $FFF0
		dc.w	$E80D, $006F, $FFF0
		dc.w	$F80D, $0067, $FFF0
		dc.w	$080D, $006F, $FFF0
		dc.w	$180D, $0067, $FFF0
Offset_0x110704:
		dc.w	$0005
		dc.w	$D80D, $0077, $FFF0
		dc.w	$E80D, $007F, $FFF0
		dc.w	$F80D, $0077, $FFF0
		dc.w	$080D, $007F, $FFF0
		dc.w	$180D, $0077, $FFF0
Offset_0x110724:
		dc.w	$0005
		dc.w	$D80D, $0087, $FFF0
		dc.w	$E80D, $008F, $FFF0
		dc.w	$F80D, $0087, $FFF0
		dc.w	$080D, $008F, $FFF0
		dc.w	$180D, $0087, $FFF0
Offset_0x110744:
		dc.w	$0001
		dc.w	$F409, $0834, $FFF4
Offset_0x11074C:
		dc.w	$0000
;-------------------------------------------------------------------------------
Drill_Mobile_Debris_Mappings:                                  ; Offset_0x11074E
		dc.w	Offset_0x110756-Drill_Mobile_Debris_Mappings
		dc.w	Offset_0x11075E-Drill_Mobile_Debris_Mappings
		dc.w	Offset_0x110766-Drill_Mobile_Debris_Mappings
		dc.w	Offset_0x11076E-Drill_Mobile_Debris_Mappings
Offset_0x110756:
		dc.w	$0001
		dc.w	$F809, $0000, $FFF4
Offset_0x11075E:
		dc.w	$0001
		dc.w	$F805, $0006, $FFF8
Offset_0x110766:
		dc.w	$0001
		dc.w	$FC00, $000A, $FFFC
Offset_0x11076E:
		dc.w	$0001
		dc.w	$F809, $0800, $FFF4
;-------------------------------------------------------------------------------
Barrier_Eggman_Mappings:                                       ; Offset_0x110776
		dc.w	Offset_0x11078C-Barrier_Eggman_Mappings
		dc.w	Offset_0x11079A-Barrier_Eggman_Mappings
		dc.w	Offset_0x1107A8-Barrier_Eggman_Mappings
		dc.w	Offset_0x1107B6-Barrier_Eggman_Mappings
		dc.w	Offset_0x1107C4-Barrier_Eggman_Mappings
		dc.w	Offset_0x1107F6-Barrier_Eggman_Mappings
		dc.w	Offset_0x110804-Barrier_Eggman_Mappings
		dc.w	Offset_0x110842-Barrier_Eggman_Mappings
		dc.w	Offset_0x110880-Barrier_Eggman_Mappings
		dc.w	Offset_0x1108BE-Barrier_Eggman_Mappings
		dc.w	Offset_0x1108C6-Barrier_Eggman_Mappings
Offset_0x11078C:
		dc.w	$0002
		dc.w	$F40A, $0000, $FFE8
		dc.w	$F40A, $0800, $0000
Offset_0x11079A:
		dc.w	$0002
		dc.w	$F801, $0009, $FFF8
		dc.w	$F801, $0809, $0000
Offset_0x1107A8:
		dc.w	$0002
		dc.w	$EC0A, $000B, $FFF4
		dc.w	$0409, $0014, $FFF4
Offset_0x1107B6:
		dc.w	$0002
		dc.w	$EC0A, $001A, $FFF4
		dc.w	$0409, $0023, $FFF4
Offset_0x1107C4:
		dc.w	$0008
		dc.w	$C003, $0029, $FFF8
		dc.w	$C003, $0829, $0000
		dc.w	$E003, $0029, $FFF8
		dc.w	$E003, $0829, $0000
		dc.w	$0003, $0029, $FFF8
		dc.w	$0003, $0829, $0000
		dc.w	$2003, $0029, $FFF8
		dc.w	$2003, $0829, $0000
Offset_0x1107F6:
		dc.w	$0002
		dc.w	$FC08, $002D, $FFE8
		dc.w	$FC08, $082D, $0000
Offset_0x110804:
		dc.w	$000A
		dc.w	$C003, $0030, $FFF8
		dc.w	$C003, $0830, $0000
		dc.w	$E003, $0030, $FFF8
		dc.w	$E003, $0830, $0000
		dc.w	$0003, $0030, $FFF8
		dc.w	$0003, $0830, $0000
		dc.w	$2003, $0030, $FFF8
		dc.w	$2003, $0830, $0000
		dc.w	$4003, $0030, $FFF8
		dc.w	$4003, $0830, $0000
Offset_0x110842:
		dc.w	$000A
		dc.w	$C007, $0034, $FFF0
		dc.w	$C007, $0834, $0000
		dc.w	$E007, $0034, $FFF0
		dc.w	$E007, $0834, $0000
		dc.w	$0007, $0034, $FFF0
		dc.w	$0007, $0834, $0000
		dc.w	$2007, $0034, $FFF0
		dc.w	$2007, $0834, $0000
		dc.w	$4007, $0034, $FFF0
		dc.w	$4007, $0834, $0000
Offset_0x110880:
		dc.w	$000A
		dc.w	$C00B, $003C, $FFE8
		dc.w	$C00B, $083C, $0000
		dc.w	$E00B, $003C, $FFE8
		dc.w	$E00B, $083C, $0000
		dc.w	$000B, $003C, $FFE8
		dc.w	$000B, $083C, $0000
		dc.w	$200B, $003C, $FFE8
		dc.w	$200B, $083C, $0000
		dc.w	$400B, $003C, $FFE8
		dc.w	$400B, $083C, $0000
Offset_0x1108BE:
		dc.w	$0001
		dc.w	$FC04, $0048, $FFF8
Offset_0x1108C6:
		dc.w	$0000
;-------------------------------------------------------------------------------
Robotnik_Stand_Mappings:                                       ; Offset_0x1108C8
		dc.w	Offset_0x1108D0-Robotnik_Stand_Mappings
		dc.w	Offset_0x1108EA-Robotnik_Stand_Mappings
		dc.w	Offset_0x110904-Robotnik_Stand_Mappings
		dc.w	Offset_0x11091E-Robotnik_Stand_Mappings
Offset_0x1108D0:
		dc.w	$0004
		dc.w	$E40D, $0000, $FFF0
		dc.w	$F40E, $0008, $FFF0
		dc.w	$0C04, $0014, $FFF8
		dc.w	$140C, $0016, $FFF0
Offset_0x1108EA:
		dc.w	$0004
		dc.w	$E408, $001A, $FFF8
		dc.w	$EC0F, $001D, $FFF0
		dc.w	$0C04, $002D, $FFF8
		dc.w	$140C, $002F, $FFF0
Offset_0x110904:
		dc.w	$0004
		dc.w	$E40D, $0033, $FFF0
		dc.w	$F40E, $0008, $FFF0
		dc.w	$0C04, $0014, $FFF8
		dc.w	$140C, $0016, $FFF0
Offset_0x11091E:
		dc.w	$0004
		dc.w	$E40D, $003B, $FFF0
		dc.w	$F40E, $0008, $FFF0
		dc.w	$0C04, $0014, $FFF8
		dc.w	$140C, $0016, $FFF0
;-------------------------------------------------------------------------------
Crushing_Column_Mappings:                                      ; Offset_0x110938
		dc.w	Offset_0x110954-Crushing_Column_Mappings
		dc.w	Offset_0x1109B6-Crushing_Column_Mappings
		dc.w	Offset_0x110A3C-Crushing_Column_Mappings
		dc.w	Offset_0x110A92-Crushing_Column_Mappings
		dc.w	Offset_0x110AA0-Crushing_Column_Mappings
		dc.w	Offset_0x110AA8-Crushing_Column_Mappings
		dc.w	Offset_0x110AB0-Crushing_Column_Mappings
		dc.w	Offset_0x110AE2-Crushing_Column_Mappings
		dc.w	Offset_0x110AF6-Crushing_Column_Mappings
		dc.w	Offset_0x110B04-Crushing_Column_Mappings
		dc.w	Offset_0x110B24-Crushing_Column_Mappings
		dc.w	Offset_0x110B32-Crushing_Column_Mappings
		dc.w	Offset_0x110B34-Crushing_Column_Mappings
		dc.w	Offset_0x110B8A-Crushing_Column_Mappings
Offset_0x110954:
		dc.w	$0010
		dc.w	$D40D, $0000, $FFD0
		dc.w	$D40D, $0008, $FFF0
		dc.w	$D40D, $0010, $0010
		dc.w	$E40D, $0018, $FFD0
		dc.w	$E40D, $0018, $FFF0
		dc.w	$E40D, $0020, $0010
		dc.w	$F40D, $0028, $FFD0
		dc.w	$F40D, $1828, $FFF0
		dc.w	$F40D, $0030, $0010
		dc.w	$040D, $0828, $FFD0
		dc.w	$040D, $0028, $FFF0
		dc.w	$040D, $0030, $0010
		dc.w	$140D, $0038, $FFD0
		dc.w	$140D, $0040, $FFF0
		dc.w	$140C, $0048, $0010
		dc.w	$240C, $0048, $FFD0
Offset_0x1109B6:
		dc.w	$0016
		dc.w	$DC0D, $0000, $FFB0
		dc.w	$DC0D, $0008, $FFD0
		dc.w	$DC0D, $0808, $FFF0
		dc.w	$DC0D, $0800, $0010
		dc.w	$DC0D, $0000, $0030
		dc.w	$EC0D, $0018, $FFB0
		dc.w	$EC0D, $0018, $FFD0
		dc.w	$EC0D, $0018, $FFF0
		dc.w	$EC0D, $0018, $0010
		dc.w	$EC0D, $0818, $0030
		dc.w	$FC0D, $0028, $FFB0
		dc.w	$FC0D, $0028, $FFD0
		dc.w	$FC0D, $0828, $FFF0
		dc.w	$FC0D, $0828, $0010
		dc.w	$FC0D, $0028, $0030
		dc.w	$0C0D, $0840, $FFB0
		dc.w	$0C0D, $0838, $FFD0
		dc.w	$0C0D, $0038, $FFF0
		dc.w	$0C0D, $0040, $0010
		dc.w	$0C0D, $0840, $0030
		dc.w	$1C0C, $0848, $FFD0
		dc.w	$1C0C, $0048, $FFF0
Offset_0x110A3C:
		dc.w	$000E
		dc.w	$900F, $004C, $FFE0
		dc.w	$900F, $084C, $0000
		dc.w	$B00F, $005C, $FFE0
		dc.w	$B00F, $006C, $0000
		dc.w	$D00F, $186C, $FFE0
		dc.w	$D00F, $185C, $0000
		dc.w	$F00F, $005C, $FFE0
		dc.w	$F00F, $006C, $0000
		dc.w	$100F, $186C, $FFE0
		dc.w	$100F, $185C, $0000
		dc.w	$300F, $005C, $FFE0
		dc.w	$300F, $006C, $0000
		dc.w	$500F, $104C, $FFE0
		dc.w	$500F, $184C, $0000
Offset_0x110A92:
		dc.w	$0002
		dc.w	$F00F, $004C, $FFE0
		dc.w	$F00F, $084C, $0000
Offset_0x110AA0:
		dc.w	$0001
		dc.w	$F007, $008C, $FFF8
Offset_0x110AA8:
		dc.w	$0001
		dc.w	$F00B, $0094, $FFF4
Offset_0x110AB0:
		dc.w	$0008
		dc.w	$C00F, $005C, $FFE0
		dc.w	$C00F, $006C, $0000
		dc.w	$E00F, $186C, $FFE0
		dc.w	$E00F, $185C, $0000
		dc.w	$000F, $005C, $FFE0
		dc.w	$000F, $006C, $0000
		dc.w	$200F, $186C, $FFE0
		dc.w	$200F, $185C, $0000
Offset_0x110AE2:
		dc.w	$0003
		dc.w	$E007, $00A0, $FFF0
		dc.w	$E007, $08A0, $0000
		dc.w	$0007, $008C, $FFF8
Offset_0x110AF6:
		dc.w	$0002
		dc.w	$F40D, $0038, $FFF0
		dc.w	$040C, $0048, $FFF0
Offset_0x110B04:
		dc.w	$0005
		dc.w	$DC0D, $00AC, $FFF0
		dc.w	$EC0D, $0018, $FFF0
		dc.w	$FC0D, $0028, $FFF0
		dc.w	$0C0D, $0038, $FFF0
		dc.w	$1C0C, $0048, $FFF0
Offset_0x110B24:
		dc.w	$0002
		dc.w	$F00F, $007C, $FFE0
		dc.w	$F00F, $187C, $0000
Offset_0x110B32:
		dc.w	$0000
Offset_0x110B34:
		dc.w	$000E
		dc.w	$900F, $004C, $FFE0
		dc.w	$900F, $084C, $0000
		dc.w	$B00F, $005C, $FFE0
		dc.w	$B00F, $006C, $0000
		dc.w	$D00F, $186C, $FFE0
		dc.w	$D00F, $185C, $0000
		dc.w	$F00F, $005C, $FFE0
		dc.w	$F00F, $006C, $0000
		dc.w	$100F, $186C, $FFE0
		dc.w	$100F, $185C, $0000
		dc.w	$300F, $005C, $FFE0
		dc.w	$300F, $006C, $0000
		dc.w	$500F, $186C, $FFE0
		dc.w	$500F, $185C, $0000
Offset_0x110B8A:
		dc.w	$0008
		dc.w	$C00F, $186C, $FFE0
		dc.w	$C00F, $185C, $0000
		dc.w	$E00F, $005C, $FFE0
		dc.w	$E00F, $006C, $0000
		dc.w	$000F, $186C, $FFE0
		dc.w	$000F, $185C, $0000
		dc.w	$200F, $104C, $FFE0
		dc.w	$200F, $184C, $0000
;-------------------------------------------------------------------------------
Iz_Platform_Mappings:                                          ; Offset_0x110BBC
		dc.w	Offset_0x110C0C-Iz_Platform_Mappings
		dc.w	Offset_0x110C26-Iz_Platform_Mappings
		dc.w	Offset_0x110C34-Iz_Platform_Mappings
		dc.w	Offset_0x110C4E-Iz_Platform_Mappings
		dc.w	Offset_0x110C5C-Iz_Platform_Mappings
		dc.w	Offset_0x110C64-Iz_Platform_Mappings
		dc.w	Offset_0x110C72-Iz_Platform_Mappings
		dc.w	Offset_0x110C80-Iz_Platform_Mappings
		dc.w	Offset_0x110C9A-Iz_Platform_Mappings
		dc.w	Offset_0x110CA2-Iz_Platform_Mappings
		dc.w	Offset_0x110CAA-Iz_Platform_Mappings
		dc.w	Offset_0x110CB2-Iz_Platform_Mappings
		dc.w	Offset_0x110CBA-Iz_Platform_Mappings
		dc.w	Offset_0x110CC2-Iz_Platform_Mappings
		dc.w	Offset_0x110CCA-Iz_Platform_Mappings
		dc.w	Offset_0x110CD2-Iz_Platform_Mappings
		dc.w	Offset_0x110CDA-Iz_Platform_Mappings
		dc.w	Offset_0x110CE2-Iz_Platform_Mappings
		dc.w	Offset_0x110CEA-Iz_Platform_Mappings
		dc.w	Offset_0x110CF2-Iz_Platform_Mappings
		dc.w	Offset_0x110CFA-Iz_Platform_Mappings
		dc.w	Offset_0x110D02-Iz_Platform_Mappings
		dc.w	Offset_0x110D0A-Iz_Platform_Mappings
		dc.w	Offset_0x110D12-Iz_Platform_Mappings
		dc.w	Offset_0x110D1A-Iz_Platform_Mappings
		dc.w	Offset_0x110D22-Iz_Platform_Mappings
		dc.w	Offset_0x110D2A-Iz_Platform_Mappings
		dc.w	Offset_0x110D4A-Iz_Platform_Mappings
		dc.w	Offset_0x110D88-Iz_Platform_Mappings
		dc.w	Offset_0x110D90-Iz_Platform_Mappings
		dc.w	Offset_0x110D98-Iz_Platform_Mappings
		dc.w	Offset_0x110DA6-Iz_Platform_Mappings
		dc.w	Offset_0x110DB4-Iz_Platform_Mappings
		dc.w	Offset_0x110DC2-Iz_Platform_Mappings
		dc.w	Offset_0x110DCA-Iz_Platform_Mappings
		dc.w	Offset_0x110DD2-Iz_Platform_Mappings
		dc.w	Offset_0x110DDA-Iz_Platform_Mappings
		dc.w	Offset_0x110DE2-Iz_Platform_Mappings
		dc.w	Offset_0x110DEA-Iz_Platform_Mappings
		dc.w	Offset_0x110DF2-Iz_Platform_Mappings
Offset_0x110C0C:
		dc.w	$0004
		dc.w	$EC0F, $0000, $FFE0
		dc.w	$0C08, $0010, $FFE8
		dc.w	$EC0F, $0800, $0000
		dc.w	$0C08, $0810, $0000
Offset_0x110C26:
		dc.w	$0002
		dc.w	$F805, $0013, $FFF0
		dc.w	$F805, $0013, $0000
Offset_0x110C34:
		dc.w	$0004
		dc.w	$EC09, $0017, $FFEC
		dc.w	$EC06, $001D, $0004
		dc.w	$FC06, $0023, $FFEC
		dc.w	$0409, $0029, $FFFC
Offset_0x110C4E:
		dc.w	$0002
		dc.w	$F00B, $002F, $FFE8
		dc.w	$F00B, $082F, $0000
Offset_0x110C5C:
		dc.w	$0001
		dc.w	$F00F, $003B, $FFF0
Offset_0x110C64:
		dc.w	$0002
		dc.w	$E80E, $004B, $FFF0
		dc.w	$000E, $104B, $FFF0
Offset_0x110C72:
		dc.w	$0002
		dc.w	$F406, $0057, $FFF0
		dc.w	$F406, $0857, $0000
Offset_0x110C80:
		dc.w	$0004
		dc.w	$F808, $005D, $FFF0
		dc.w	$F009, $0060, $0008
		dc.w	$000D, $0066, $FFE0
		dc.w	$000D, $0866, $0000
Offset_0x110C9A:
		dc.w	$0001
		dc.w	$F805, $006E, $FFF8
Offset_0x110CA2:
		dc.w	$0001
		dc.w	$F805, $0072, $FFF8
Offset_0x110CAA:
		dc.w	$0001
		dc.w	$FC00, $0076, $FFFC
Offset_0x110CB2:
		dc.w	$0001
		dc.w	$FC00, $0077, $FFFC
Offset_0x110CBA:
		dc.w	$0001
		dc.w	$FC00, $0078, $FFFC
Offset_0x110CC2:
		dc.w	$0001
		dc.w	$FC00, $0079, $FFFC
Offset_0x110CCA:
		dc.w	$0001
		dc.w	$FC00, $007A, $FFFC
Offset_0x110CD2:
		dc.w	$0001
		dc.w	$FC00, $007B, $FFFC
Offset_0x110CDA:
		dc.w	$0001
		dc.w	$FC00, $007C, $FFFC
Offset_0x110CE2:
		dc.w	$0001
		dc.w	$FC00, $007D, $FFFC
Offset_0x110CEA:
		dc.w	$0001
		dc.w	$F805, $007E, $FFF8
Offset_0x110CF2:
		dc.w	$0001
		dc.w	$F805, $0082, $FFF8
Offset_0x110CFA:
		dc.w	$0001
		dc.w	$F805, $0086, $FFF8
Offset_0x110D02:
		dc.w	$0001
		dc.w	$F805, $008A, $FFF8
Offset_0x110D0A:
		dc.w	$0001
		dc.w	$FC00, $008E, $FFFC
Offset_0x110D12:
		dc.w	$0001
		dc.w	$F805, $008F, $FFF8
Offset_0x110D1A:
		dc.w	$0001
		dc.w	$F805, $0093, $FFF8
Offset_0x110D22:
		dc.w	$0001
		dc.w	$F40A, $0097, $FFF4
Offset_0x110D2A:
		dc.w	$0005
		dc.w	$F001, $0000, $FFE8
		dc.w	$F005, $0002, $FFF8
		dc.w	$F001, $0800, $0010
		dc.w	$000D, $0006, $FFE0
		dc.w	$000D, $0806, $0000
Offset_0x110D4A:
		dc.w	$000A
		dc.w	$D00F, $000E, $FFD8
		dc.w	$D00F, $001E, $FFF8
		dc.w	$F00F, $002E, $FFD8
		dc.w	$F00F, $101E, $FFF8
		dc.w	$100F, $100E, $FFD8
		dc.w	$100F, $003E, $FFF8
		dc.w	$D002, $004E, $0018
		dc.w	$E806, $0051, $0018
		dc.w	$0006, $0057, $0018
		dc.w	$1806, $1051, $0018
Offset_0x110D88:
		dc.w	$0001
		dc.w	$F40A, $005D, $FFF4
Offset_0x110D90:
		dc.w	$0001
		dc.w	$F40A, $0066, $FFF4
Offset_0x110D98:
		dc.w	$0002
		dc.w	$F007, $0000, $FFF0
		dc.w	$F007, $0800, $0000
Offset_0x110DA6:
		dc.w	$0002
		dc.w	$F40A, $0008, $FFE8
		dc.w	$F40A, $0808, $0000
Offset_0x110DB4:
		dc.w	$0002
		dc.w	$F80D, $0011, $FFE0
		dc.w	$F80D, $0019, $0000
Offset_0x110DC2:
		dc.w	$0001
		dc.w	$F007, $0021, $FFF8
Offset_0x110DCA:
		dc.w	$0001
		dc.w	$F00F, $0029, $FFF0
Offset_0x110DD2:
		dc.w	$0001
		dc.w	$F805, $087E, $FFF8
Offset_0x110DDA:
		dc.w	$0001
		dc.w	$F805, $1886, $FFF8
Offset_0x110DE2:
		dc.w	$0001
		dc.w	$F60A, $085D, $FFF5
Offset_0x110DEA:
		dc.w	$0001
		dc.w	$F40A, $1066, $FFF5
Offset_0x110DF2:
		dc.w	$0000
;-------------------------------------------------------------------------------
End_Panel_Dyn_Script:                                          ; Offset_0x110DF4
		dc.w	Offset_0x110E02-End_Panel_Dyn_Script
		dc.w	Offset_0x110E08-End_Panel_Dyn_Script
		dc.w	Offset_0x110E0E-End_Panel_Dyn_Script
		dc.w	Offset_0x110E14-End_Panel_Dyn_Script
		dc.w	Offset_0x110E1A-End_Panel_Dyn_Script
		dc.w	Offset_0x110E1E-End_Panel_Dyn_Script
		dc.w	Offset_0x110E22-End_Panel_Dyn_Script
Offset_0x110E02:
		dc.w	$0001
		dc.w	$020B, $02CB
Offset_0x110E08:
		dc.w	$0001
		dc.w	$038B, $044B
Offset_0x110E0E:
		dc.w	$0001
		dc.w	$050B, $05CB
Offset_0x110E14:
		dc.w	$0001
		dc.w	$000B, $000B
Offset_0x110E1A:
		dc.w	$0000
		dc.w	$00CF
Offset_0x110E1E:
		dc.w	$0000
		dc.w	$01C3
Offset_0x110E22:
		dc.w	$0000
		dc.w	$00CF
;-------------------------------------------------------------------------------
End_Panel_Mappings:                                            ; Offset_0x110E26
		dc.w	Offset_0x110E34-End_Panel_Mappings
		dc.w	Offset_0x110E42-End_Panel_Mappings
		dc.w	Offset_0x110E50-End_Panel_Mappings
		dc.w	Offset_0x110E5E-End_Panel_Mappings
		dc.w	Offset_0x110E6C-End_Panel_Mappings
		dc.w	Offset_0x110E74-End_Panel_Mappings
		dc.w	Offset_0x110E7C-End_Panel_Mappings
Offset_0x110E34:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFE8
		dc.w	$F00B, $000C, $0000
Offset_0x110E42:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFE8
		dc.w	$F00B, $000C, $0000
Offset_0x110E50:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFE8
		dc.w	$F00B, $000C, $0000
Offset_0x110E5E:
		dc.w	$0002
		dc.w	$F00B, $0000, $FFE8
		dc.w	$F00B, $080C, $0000
Offset_0x110E6C:
		dc.w	$0001
		dc.w	$F00F, $0000, $FFF0
Offset_0x110E74:
		dc.w	$0001
		dc.w	$F003, $0000, $FFFC
Offset_0x110E7C:
		dc.w	$0001
		dc.w	$F00F, $0800, $FFF0
;-------------------------------------------------------------------------------
End_Panel_Stars_Mappings:                                      ; Offset_0x110E84
		dc.w	Offset_0x110E86-End_Panel_Stars_Mappings
Offset_0x110E86:
		dc.w	$0001
		dc.w	$F801, $0000, $FFFC
;-------------------------------------------------------------------------------
Art_Fire_Breath:                                               ; Offset_0x110E8E
		binclude	"data\aiz\firebrth.nem"
Art_Flame_Mobile:                                              ; Offset_0x1114FC
		binclude	"data\aiz\flamembl.kmd"
Art_Fire_Breath_Small:                                         ; Offset_0x11343E
		binclude	"data\aiz\firebtsm.nem"
Art_Rhinobot:                                                  ; Offset_0x1135C6
		binclude	"data\aiz\rhinobot.dat"
Art_Tulipon:                                                   ; Offset_0x114066
		binclude	"data\aiz\tulipon.kmd"
		dc.w	$0000
Art_Monkey_Dude:                                               ; Offset_0x1142A8
		binclude	"data\aiz\monkdude.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000
Art_Catakiller_Jr:                                             ; Offset_0x11449A
		binclude	"data\aiz\catakljr.kmd"
		dc.w	$0000, $0000
Art_Big_Shaker:                                                ; Offset_0x11469C
		binclude	"data\hz\bigshakr.nem"
Art_Screw_Mobile:                                              ; Offset_0x11553A
		binclude	"data\hz\screwmob.nem"
Art_Buggernaut:                                                ; Offset_0x11667C
		binclude	"data\hz\buggernt.nem"
Art_Jawz:                                                      ; Offset_0x116750
		binclude	"data\hz\jawz.kmd"
Art_Mega_Chopper:                                              ; Offset_0x1168C2
		binclude	"data\hz\megachpr.kmd"
		dc.w	$0000, $0000, $0000
Art_Blastoid:                                                  ; Offset_0x1169C4
		binclude	"data\hz\blastoid.kmd"
		dc.w	$0000, $0000
Art_Turbo_Spiker:                                              ; Offset_0x116B66
		binclude	"data\hz\turbospk.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Art_Pointdexter:                                               ; Offset_0x116F88
		binclude	"data\hz\pntdexter.kmd"
Art_Tunnelbot:                                                 ; Offset_0x11722A
		binclude	"data\mgz\tunnelbt.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Art_Spire:                                                     ; Offset_0x1174CC
		binclude	"data\mgz\spire.nem"
Art_Drill_Mobile:                                              ; Offset_0x11753E
		binclude	"data\mgz\drillmob.nem"
Art_Drill_Mobile_Scaling:                                      ; Offset_0x1187B6
		binclude	"data\mgz\drillmob.dat"
Art_Rocks:                                                     ; Offset_0x1197B6
		binclude	"data\mgz\rocks.kmd"
		dc.w	$0000, $0000
Art_Bubbles:                                                   ; Offset_0x1198E8
		binclude	"data\mgz\bubbles.dat"
Art_Spiker:                                                    ; Offset_0x11A308
		binclude	"data\mgz\spiker.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Art_Mantis:                                                    ; Offset_0x11A51A
		binclude	"data\mgz\mantis.kmd"
		dc.w	$0000
Art_Bowling_Spin:                                              ; Offset_0x11A78C
		binclude	"data\cnz\bowlspin.nem"
Art_Graviton_Mobile:                                           ; Offset_0x11AC48
		binclude	"data\cnz\graviton.nem"
Art_Clamer:                                                    ; Offset_0x11B15C
		binclude	"data\cnz\clamer.dat"
Art_Spikeball:                                                 ; Offset_0x11C29C
		binclude	"data\cnz\spikball.kmd"
Art_Sparkle:                                                   ; Offset_0x11C30E
		binclude	"data\cnz\sparkle.kmd"
		dc.w	$0000, $0000
Art_Batbot:                                                    ; Offset_0x11C630
		binclude	"data\cnz\batbot.kmd"
		dc.w	$0000, $0000
Art_Balloon:                                                   ; Offset_0x11C852
		binclude	"data\cnz\balloon.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000
Art_Gapsule:                                                   ; Offset_0x11C8F4
		binclude	"data\fbz\gapsule.nem"
		even
Art_Laser_Beam:                                                ; Offset_0x11CEBA
		binclude	"data\fbz\lasrbeam.nem"
		even
Art_Hang_Mobile:                                               ; Offset_0x11D3BC
		binclude	"data\fbz\hangmobl.nem"
Art_Blaster:                                                   ; Offset_0x11D79E
		binclude	"data\fbz\blaster.kmd"
		dc.w	$0000
Art_Technosqueek:                                              ; Offset_0x11DAA0
		binclude	"data\fbz\technosq.kmd"
		dc.w	$0000, $0000, $0000, $0000
Art_Iz_Ice_Platform_And_Miscellaneous:                         ; Offset_0x11DD52
		binclude	"data\iz\ptfrmisc.nem"
Art_Iz_Ice_Rock_And_Miscellaneous:                             ; Offset_0x11E976
		binclude	"data\iz\rockmisc.nem"
Art_Iz_SnowSlip_And_Miscellaneous:                             ; Offset_0x11EDF8
		binclude	"data\iz\snslmisc.nem"
Art_Freezer_Mobile:                                            ; Offset_0x11F1B8
		binclude	"data\iz\fzrmobil.nem"
Art_Big_Icedus:                                                ; Offset_0x11FF66
		binclude	"data\iz\bigicdus.nem"
Art_Penguinator:                                               ; Offset_0x1203EE
		binclude	"data\iz\pengntor.dat"
Art_Ice_Block:                                                 ; Offset_0x1213CE
		binclude	"data\iz\iceblock.kmd"
		dc.w	$0000, $0000, $0000, $0000
Art_Orbinaut:                                                  ; Offset_0x121460
		binclude	"data\iz\orbinaut.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000
Art_Twin_Hammer:                                               ; Offset_0x1215F2
		binclude	"data\lbz\twinhamr.nem"
Art_Beam_Rocket:                                               ; Offset_0x121946
		binclude	"data\lbz\beamrckt.nem"
Art_Ball_Shooter:                                              ; Offset_0x1224EC
		binclude	"data\lbz\ballshtr.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Art_Snale_Blaster:                                             ; Offset_0x12281E
		binclude	"data\lbz\snalebst.kmd"
		dc.w	$0000, $0000, $0000
Art_Ribot:                                                     ; Offset_0x122A70
		binclude	"data\lbz\ribot.kmd"
		dc.w	$0000, $0000, $0000
Art_Orbinaut_2:                                                ; Offset_0x122BA2
		binclude	"data\lbz\orbinaut.kmd"
		dc.w	$0000
Art_Corkey:                                                    ; Offset_0x122C84
		binclude	"data\lbz\corkey.kmd"
		dc.w	$0000, $0000, $0000
Art_Flybot_767:                                                ; Offset_0x122D46
		binclude	"data\lbz\flybt767.dat"
Art_Twin_Hammer_Box:                                           ; Offset_0x124066
		binclude	"data\lbz\twinhbox.nem"
Art_LBz_Knuckles_Bomb:                                         ; Offset_0x1244C6
		binclude	"data\lbz\kte_bomb.nem"
Art_Boss_Explosion:                                            ; Offset_0x124504
		binclude	"data\art\bexplosn.nem"
Art_Fire_Breath_Flames:                                        ; Offset_0x124854
		binclude	"data\aiz\firebtfm.nem"
Art_FBz_Boss_Flames:                                           ; Offset_0x124DA6
		binclude	"data\fbz\bossflms.nem"
		even
Art_Robotnik_In_Egg_Mobile:                                    ; Offset_0x125122
		binclude	"data\art\rbtnkegm.nem"
Art_FBz_Robotnik_Faces:                                        ; Offset_0x12567E
		binclude	"data\fbz\rbtkface.nem"
		even
Art_FBz_Robotnik_Stand:                                        ; Offset_0x1258F0
		binclude	"data\fbz\rbtnkstd.nem"
		even
Art_FBz_Robotnik:                                              ; Offset_0x125D06
		binclude	"data\fbz\robotnik.nem"
Art_End_Panel_Dynamic:                                         ; Offset_0x12616A
		binclude	"data\art\endpanel.dat"
Art_End_Panel_Post                                             ; Offset_0x126E6A
		binclude	"data\art\post.nem"
Art_Egg_Prison:                                                ; Offset_0x126E84
		binclude	"data\art\eggprisn.nem"
Art_Knuckles_2:                                                ; Offset_0x127328
		binclude	"data\art\knuckls2.dat"
Art_Tornado:                                                   ; Offset_0x12C208
		binclude	"data\art\tornado.kmd"
		dc.w	$0000
Art_AIz_Swinging_Vine:                                         ; Offset_0x12C9AA
		binclude	"data\aiz\swngvine.nem"
Art_AIz_Slide_Rope:                                            ; Offset_0x12CB10
		binclude	"data\aiz\sliderop.nem"
Art_AIz_Background_Tree:                                       ; Offset_0x12CC34
		binclude	"data\aiz\bg_tree.nem"
Art_AIz_Rocks_And_Tree:                                        ; Offset_0x12CD7E
		binclude	"data\aiz\rocktree.nem"
Art_AIz_Cork_Floor:                                            ; Offset_0x12D5C6
		binclude	"data\aiz\corkflr.nem"
Art_AIz_Miscellaneous:                                         ; Offset_0x12D84E
		binclude	"data\aiz\misclns.nem"
Art_Hz_Spiked_Ball:                                            ; Offset_0x12EBDA
		binclude	"data\hz\spikball.nem"
Art_Hz_Water_Surface:                                          ; Offset_0x12ECA2
		binclude	"data\hz\wsurface.nem"
Art_Hz_Switch:                                                 ; Offset_0x12EDC2
		binclude	"data\hz\switch.nem"
Art_Hz_Miscellaneous:                                          ; Offset_0x12EE76
		binclude	"data\hz\misclns.nem"
Art_Hz_Water_Rush:                                             ; Offset_0x12F436
		binclude	"data\hz\waterush.nem"
Art_Hz_Large_Fan:                                              ; Offset_0x12F9EE
		binclude	"data\hz\largefan.kmd"
		dc.w	$0000, $0000, $0000
Art_Hz_Geyser_Horizontal:                                      ; Offset_0x12FCF0
		binclude	"data\hz\geyser_h.kmd"
		dc.w	$0000, $0000
Art_Hz_Geyser_Vertical:                                        ; Offset_0x130482
		binclude	"data\hz\geyser_v.kmd"
		dc.w	$0000, $0000, $0000, $0000
Art_Hz_Sliding_Tube:                                           ; Offset_0x130C24
		binclude	"data\hz\slidtube.nem"
Art_Hz_Bridge_And_Blocks:                                      ; Offset_0x13113A
		binclude	"data\hz\bridgebk.nem"
Art_Water_Splash:                                              ; Offset_0x131482
		binclude	"data\art\waterspl.dat"
Art_Water_Splash_2:                                            ; Offset_0x131C02
		binclude	"data\art\watersp2.dat"
Art_Hz_Enemies:         ; N�o usado ; Left over ???            ; Offset_0x132802
		binclude	"data\hz\enemies.nem"
Art_Hz_Block_Wall:                                             ; Offset_0x1330E4
		binclude	"data\hz\blckwall.nem"
Art_MGz_Wheel_And_Miscellaneous:                               ; Offset_0x1331FE
		binclude	"data\mgz\wheelmsc.nem"
Art_MGz_Spiked_Platform_And_Miscellaneous:                     ; Offset_0x133C3C
		binclude	"data\mgz\spkptmsc.nem"
Art_MGz_Direction_Indicators:                                  ; Offset_0x13424C
		binclude	"data\mgz\dirindic.nem"
Art_CNz_Balloons_Bumpers_And_Miscellaneous:                    ; Offset_0x134486
		binclude	"data\cnz\blbpmisc.nem"
Art_CNz_Platform:                                              ; Offset_0x135244
		binclude	"data\cnz\platform.nem"
Art_LBz_Miscellaneous:                                         ; Offset_0x1353AE
		binclude	"data\lbz\misclns.nem"
Art_LBz_Tube_Elevator:                                         ; Offset_0x135ECC
		binclude	"data\lbz\tubelevt.nem"
Art_LBz_Spin_Launcher_And_Miscellaneous:                       ; Offset_0x136150
		binclude	"data\lbz\spnlmisc.nem"
Art_LRz_Rocks:                                                 ; Offset_0x13658C
		binclude	"data\lrz\rocks.nem"
		even
Art_H_Springs_Switch_2P:                                       ; Offset_0x1366D4
		binclude	"data\art\hspng_2p.nem"
Art_V_Springs_Spikes_2P:                                       ; Offset_0x136848
		binclude	"data\art\vspng_2p.nem"
Art_Items_2P:                                                  ; Offset_0x136A3A
		binclude	"data\art\items_2p.nem"
Art_Goal_Marker_2P:                                            ; Offset_0x136F1E
		binclude	"data\art\goalmark.nem"
Art_Head_up_display_Sprites_2P:                                ; Offset_0x137096
		binclude	"data\art\hud_2p.nem"
Art_Lap_Numbers_2P:                                            ; Offset_0x1376F0
		binclude	"data\art\number2p.nem"
Art_Point_And_Arrows_2P:                                       ; Offset_0x137BB0
		binclude	"data\art\pointarw.nem"
Art_BPz_Ballons_And_Miscellaneous:                             ; Offset_0x137C4A
		binclude	"data\bpz\balloons.nem"
		even
Art_DPz_Sand_And_Miscellaneous:                                ; Offset_0x138494
		binclude	"data\dpz\sandmisc.nem"
		even
Art_CGz_Platform_And_Miscellaneous:                            ; Offset_0x1391AA
		binclude	"data\cgz\ptfrmisc.nem"
		even
Art_EMz_Rock_And_Miscellaneous:                                ; Offset_0x13951E
		binclude	"data\emz\rockmisc.nem"
		even
;-------------------------------------------------------------------------------
Angel_Island_2_Boss_Ship:                                      ; Offset_0x1397B0
		binclude	"data\aiz\bossship.kmd"
		dc.w	$0000
Level_Results_Sonic:                                           ; Offset_0x13A272
		binclude	"data\art\lr_sonic.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000
Level_Results_Miles:                                           ; Offset_0x13A3D4
		binclude	"data\art\lr_miles.kmd"
		dc.w	$0000, $0000, $0000, $0000
Level_Results_Tails:                                           ; Offset_0x13A526
		binclude	"data\art\lr_tails.kmd"
		dc.w	$0000
Level_Results_Knuckles:                                        ; Offset_0x13A668
		binclude	"data\art\lr_kte.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Title_Card_Results:                                            ; Offset_0x13A8DA
		binclude	"data\art\tc_res.kmd"
		dc.w	$0000, $0000, $0000
Title_Card_Number_1:                                           ; Offset_0x13AB6C
		binclude	"data\art\tc_1.kmd"
		dc.w	$0000, $0000, $0000, $0000
Title_Card_Number_2:                                           ; Offset_0x13AC2E
		binclude	"data\art\tc_2.kmd"
		dc.w	$0000, $0000, $0000, $0000
Title_Card_ZONE_ACT:                                           ; Offset_0x13AD10
		binclude	"data\art\tc_zone.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000
TC_Angel_Island:                                               ; Offset_0x13AEF2
		binclude	"data\art\tc_aiz.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
TC_Hidrocity:                                                  ; Offset_0x13B004
		binclude	"data\art\tc_hz.kmd"
		dc.w	$0000, $0000, $0000
TC_Marble_Garden:                                              ; Offset_0x13B156
		binclude	"data\art\tc_mgz.kmd"
		dc.w	$0000
TC_Carnival_Night:                                             ; Offset_0x13B318
		binclude	"data\art\tc_cnz.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000
TC_Flying_Battery:                                             ; Offset_0x13B4AA
		binclude	"data\art\tc_fbz.kmd"
		dc.w	$0000, $0000, $0000, $0000
TC_Icecap:                                                     ; Offset_0x13B60C
		binclude	"data\art\tc_iz.kmd"
		dc.w	$0000, $0000, $0000, $0000
TC_Launch_Base:                                                ; Offset_0x13B6DE
TC_Mushroom_Valley:                                            ; Offset_0x13B6DE
TC_Sandopolis:                                                 ; Offset_0x13B6DE
TC_Lava_Reef:                                                  ; Offset_0x13B6DE
TC_Sky_Sanctuary:                                              ; Offset_0x13B6DE
TC_Death_Egg:                                                  ; Offset_0x13B6DE
TC_The_Doomsday:                                               ; Offset_0x13B6DE
		binclude	"data\art\tc_lbz.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Angel_Island_1_Blocks:                                         ; Offset_0x13B830
		binclude	"data\aiz\bl_act1.kos"
Angel_Island_1_Blocks_2:                                       ; Offset_0x13BA30
		binclude	"data\aiz\bl2_act1.kos"
Angel_Island_1_Blocks_3:                                       ; Offset_0x13C680
		binclude	"data\aiz\bl3_act1.kos"
Angel_Island_1_Tiles:                                          ; Offset_0x13D750
		binclude	"data\aiz\tl_act1.kmd"
Angel_Island_1_Tiles_2:                                        ; Offset_0x13E552
		binclude	"data\aiz\tl2_act1.kmd"
Angel_Island_1_Tiles_3:                                        ; Offset_0x141584
		binclude	"data\aiz\tl3_act1.kmd"
Angel_Island_1_Chunks:                                         ; Offset_0x143D96
Angel_Island_1_Chunks_2:                                       ; Offset_0x143D96
		binclude	"data\aiz\ck_act1.kos"
Angel_Island_1_Flames:                                         ; Offset_0x1476A6
		binclude	"data\aiz\flames.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Angel_Island_2_Blocks:                                         ; Offset_0x148128
		binclude	"data\aiz\bl_act2.kos"
Angel_Island_2_Blocks_2:                                       ; Offset_0x1489A8
		binclude	"data\aiz\bl2_act2.kos"
Angel_Island_2_Blocks_3:                                       ; Offset_0x149448
		binclude	"data\aiz\bl3_act2.kos"
Angel_Island_2_Tiles:                                          ; Offset_0x1496B8
		binclude	"data\aiz\tl_act2.kmd"
Angel_Island_2_Tiles_2:                                        ; Offset_0x14A1BA
		binclude	"data\aiz\tl2_act2.kmd"
Angel_Island_2_Tiles_3:                                        ; Offset_0x14CA3C
		binclude	"data\aiz\tl3_act2.kmd"
Angel_Island_2_Chunks:                                         ; Offset_0x14EA6E
Angel_Island_2_Chunks_2:                                       ; Offset_0x14EA6E
		binclude	"data\aiz\ck_act2.kos"
Hydrocity_1_Blocks:                                            ; Offset_0x152B8E
Hydrocity_2_Blocks:                                            ; Offset_0x152B8E
		binclude	"data\hz\blocks.kos"
Hydrocity_1_Tiles:                                             ; Offset_0x152F7E
Hydrocity_2_Tiles:                                             ; Offset_0x152F7E
		binclude	"data\hz\tiles.kmd"
Hydrocity_1_Chunks:                                            ; Offset_0x153B70
Hydrocity_2_Chunks:                                            ; Offset_0x153B70
		binclude	"data\hz\chunks.kos"
Hydrocity_1_Blocks_2:                                          ; Offset_0x153E60
		binclude	"data\hz\bl2_act1.kos"
Hydrocity_1_Tiles_2:                                           ; Offset_0x1546F0
		binclude	"data\hz\tl2_act1.kmd"
Hydrocity_1_Chunks_2:                                          ; Offset_0x156742
		binclude	"data\hz\ck2_act1.kos"
Hydrocity_2_Blocks_2:                                          ; Offset_0x158562
		binclude	"data\hz\bl2_act2.kos"
Hydrocity_2_Tiles_2:                                           ; Offset_0x158DF2
		binclude	"data\hz\tl2_act2.kmd"
Hydrocity_2_Chunks_2:                                          ; Offset_0x15AC74
		binclude	"data\hz\ck2_act2.kos"
Marble_Garden_1_Blocks:                                        ; Offset_0x15C744
Marble_Garden_2_Blocks:                                        ; Offset_0x15C744
		binclude	"data\mgz\blocks.kos"
Marble_Garden_1_Tiles:                                         ; Offset_0x15D0A4
Marble_Garden_2_Tiles:                                         ; Offset_0x15D0A4
		binclude	"data\mgz\tiles.kmd"
Marble_Garden_1_Chunks:                                        ; Offset_0x15F926
Marble_Garden_2_Chunks:                                        ; Offset_0x15F926
		binclude	"data\mgz\chunks.kos"
Marble_Garden_1_Blocks_2:                                      ; Offset_0x161C56
		binclude	"data\mgz\bl2_act1.kos"
Marble_Garden_1_Tiles_2:                                       ; Offset_0x161F56
		binclude	"data\mgz\tl2_act1.kmd"
Marble_Garden_1_Chunks_2:                                      ; Offset_0x162628
		binclude	"data\mgz\ck2_act1.kos"
Marble_Garden_2_Blocks_2:                                      ; Offset_0x162E58
		binclude	"data\mgz\bl2_act2.kos"
Marble_Garden_2_Tiles_2:                                       ; Offset_0x1632A8
		binclude	"data\mgz\tl2_act2.kmd"
Marble_Garden_2_Chunks_2:                                      ; Offset_0x16403A
		binclude	"data\mgz\ck2_act2.kos"
Marble_Garden_2_Dynamic_Chunks:                                ; Offset_0x1649DA
		binclude	"data\mgz\dynchunk.dat"
Carnival_Night_1_Blocks:                                       ; Offset_0x165A5A
Carnival_Night_1_Blocks_2:                                     ; Offset_0x165A5A
Carnival_Night_2_Blocks:                                       ; Offset_0x165A5A
Carnival_Night_2_Blocks_2:                                     ; Offset_0x165A5A
		binclude	"data\cnz\blocks.kos"
Carnival_Night_1_Tiles:                                        ; Offset_0x166A9A
Carnival_Night_1_Tiles_2:                                      ; Offset_0x166A9A
Carnival_Night_2_Tiles:                                        ; Offset_0x166A9A
Carnival_Night_2_Tiles_2:                                      ; Offset_0x166A9A
		binclude	"data\cnz\tiles.kmd"
Carnival_Night_1_Chunks:                                       ; Offset_0x169CBC
Carnival_Night_1_Chunks_2:                                     ; Offset_0x169CBC
Carnival_Night_2_Chunks:                                       ; Offset_0x169CBC
Carnival_Night_2_Chunks_2:                                     ; Offset_0x169CBC
		binclude	"data\cnz\chunks.kos"
Flying_Battery_1_Blocks:                                       ; Offset_0x16CDCC
Flying_Battery_1_Blocks_2:                                     ; Offset_0x16CDCC
		binclude	"data\fbz\bl_act1.kos"
Flying_Battery_1_Tiles:                                        ; Offset_0x16DB1C
Flying_Battery_1_Tiles_2:                                      ; Offset_0x16DB1C
		binclude	"data\fbz\tl_act1.kmd"
Flying_Battery_1_Chunks:                                       ; Offset_0x1705EE
Flying_Battery_1_Chunks_2:                                     ; Offset_0x1705EE
		binclude	"data\fbz\ck_act1.kos"
Flying_Battery_2_Blocks:                                       ; Offset_0x17315E
Flying_Battery_2_Blocks_2:                                     ; Offset_0x17315E
		binclude	"data\fbz\bl_act2.kos"
Flying_Battery_2_Tiles:                                        ; Offset_0x173E9E
Flying_Battery_2_Tiles_2:                                      ; Offset_0x173E9E
		binclude	"data\fbz\tl_act2.kmd"
Flying_Battery_2_Chunks:                                       ; Offset_0x176ED0
Flying_Battery_2_Chunks_2:                                     ; Offset_0x176ED0
		binclude	"data\fbz\ck_act2.kos"
Icecap_1_Blocks:                                               ; Offset_0x179A00
Icecap_2_Blocks:                                               ; Offset_0x179A00
		binclude	"data\iz\blocks.kos"
Icecap_1_Tiles:                                                ; Offset_0x179CF0
Icecap_2_Tiles:                                                ; Offset_0x179CF0
		binclude	"data\iz\tiles.kmd"
Icecap_1_Chunks:                                               ; Offset_0x17B102
Icecap_2_Chunks:                                               ; Offset_0x17B102
		binclude	"data\iz\chunks.kos"
Icecap_1_Blocks_2:                                             ; Offset_0x17B412
		binclude	"data\iz\bl2_act1.kos"
Icecap_1_Tiles_2:                                              ; Offset_0x17BF62
		binclude	"data\iz\tl2_act1.kmd"
Icecap_1_Chunks_2:                                             ; Offset_0x17DEF4
		binclude	"data\iz\ck2_act1.kos"
Icecap_2_Blocks_2:                                             ; Offset_0x17FB24
		binclude	"data\iz\bl2_act2.kos"
Icecap_2_Tiles_2:                                              ; Offset_0x180734
		binclude	"data\iz\tl2_act2.kmd"
Icecap_2_Chunks_2:                                             ; Offset_0x182746
		binclude	"data\iz\ck2_act2.kos"
Launch_Base_1_Blocks:                                          ; Offset_0x184196
Launch_Base_2_Blocks:                                          ; Offset_0x184196
		binclude	"data\lbz\blocks.kos"
Launch_Base_1_Blocks_2:                                        ; Offset_0x184646
		binclude	"data\lbz\bl2_act1.kos"
Launch_Base_1_Tiles:                                           ; Offset_0x185206
Launch_Base_2_Tiles:                                           ; Offset_0x185206
		binclude	"data\lbz\tiles.kmd"
Launch_Base_1_Tiles_2:                                         ; Offset_0x186688
		binclude	"data\lbz\tl2_act1.kmd"
Launch_Base_Unreferenced_Chunks: ; N�o usado ; Left over ???   ; Offset_0x1885CA
		binclude	"data\lbz\cnkunref.kos"
Launch_Base_1_Chunks:                                          ; Offset_0x18872A
Launch_Base_1_Chunks_2:                                        ; Offset_0x18872A
		binclude	"data\lbz\ck_act1.kos"
Launch_Base_2_Blocks_2:                                        ; Offset_0x18B6DA
		binclude	"data\lbz\bl2_act2.kos"
Launch_Base_2_Blocks_3:                                        ; Offset_0x18C21A
		binclude	"data\lbz\bl3_act2.kos"
Launch_Base_2_Tiles_2:                                         ; Offset_0x18D03A
		binclude	"data\lbz\tl2_act2.kmd"
Launch_Base_2_Tiles_3:                                         ; Offset_0x18EB6C
		binclude	"data\lbz\tl3_act2.kmd"
Launch_Base_2_Chunks:                                          ; Offset_0x190A3E
Launch_Base_2_Chunks_2:                                        ; Offset_0x190A3E
		binclude	"data\lbz\ck_act2.kos"
Launch_Base_2_Chunks_3:                                        ; Offset_0x192F2E
		binclude	"data\lbz\ck3_act2.kos"
Mushroom_Valley_1_Blocks:                                      ; Offset_0x193C2E
Mushroom_Valley_1_Blocks_2:                                    ; Offset_0x193C2E
Mushroom_Valley_2_Blocks:                                      ; Offset_0x193C2E
Mushroom_Valley_2_Blocks_2:                                    ; Offset_0x193C2E
Mushroom_Valley_1_Tiles:                                       ; Offset_0x193C2E
Mushroom_Valley_1_Tiles_2:                                     ; Offset_0x193C2E
Mushroom_Valley_2_Tiles:                                       ; Offset_0x193C2E
Mushroom_Valley_2_Tiles_2:                                     ; Offset_0x193C2E
Mushroom_Valley_1_Chunks:                                      ; Offset_0x193C2E
Mushroom_Valley_1_Chunks_2:                                    ; Offset_0x193C2E
Mushroom_Valley_2_Chunks:                                      ; Offset_0x193C2E
Mushroom_Valley_2_Chunks_2:                                    ; Offset_0x193C2E
Lava_Reef_1_Blocks:                                            ; Offset_0x193C2E
Lava_Reef_1_Blocks_2:                                          ; Offset_0x193C2E
Lava_Reef_1_Tiles:                                             ; Offset_0x193C2E
Lava_Reef_1_Tiles_2:                                           ; Offset_0x193C2E
Lava_Reef_1_Chunks:                                            ; Offset_0x193C2E
Lava_Reef_1_Chunks_2:                                          ; Offset_0x193C2E
Lava_Reef_2_Blocks:                                            ; Offset_0x193C2E
Lava_Reef_2_Blocks_2:                                          ; Offset_0x193C2E
Lava_Reef_2_Tiles:                                             ; Offset_0x193C2E
Lava_Reef_2_Tiles_2:                                           ; Offset_0x193C2E
Lava_Reef_2_Chunks:                                            ; Offset_0x193C2E
Lava_Reef_2_Chunks_2:                                          ; Offset_0x193C2E
Azure_Lake_Blocks:                                             ; Offset_0x193C2E
		binclude	"data\alz\blocks.kos"
Azure_Lake_Tiles:                                              ; Offset_0x1946EE
		binclude	"data\alz\tiles.kmd"
Azure_Lake_Chunks:                                             ; Offset_0x1974A0
		binclude	"data\alz\chunks.kos"
Balloon_Park_Blocks:                                           ; Offset_0x197B30
		binclude	"data\bpz\blocks.kos"
Balloon_Park_Tiles:                                            ; Offset_0x198400
		binclude	"data\bpz\tiles.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Balloon_Park_Chunks:                                           ; Offset_0x19A3E2
		binclude	"data\bpz\chunks.kos"
		dc.w	$0000
Desert_Palace_Blocks:                                          ; Offset_0x19AAD2
		binclude	"data\dpz\blocks.kos"
Desert_Palace_Tiles:                                           ; Offset_0x19B4B2
		binclude	"data\dpz\tiles.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000
Desert_Palace_Chunks:                                          ; Offset_0x19CFA4
		binclude	"data\dpz\chunks.kos"
		dc.w	$0000, $0000, $0000, $0000, $0000
Chrome_Gadget_Blocks:                                          ; Offset_0x19D5D4
		binclude	"data\cgz\blocks.kos"
		dc.w	$0000, $0000, $0000, $0000
Chrome_Gadget_Tiles:                                           ; Offset_0x19DD24
		binclude	"data\cgz\tiles.kmd"
		dc.w	$0000, $0000
Chrome_Gadget_Chunks:                                          ; Offset_0x1A02C6
		binclude	"data\cgz\chunks.kos"
Endless_Mine_Blocks:                                           ; Offset_0x1A0786
		binclude	"data\emz\blocks.kos"
Endless_Mine_Tiles:                                            ; Offset_0x1A1236
		binclude	"data\emz\tiles.kmd"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Endless_Mine_Chunks:                                           ; Offset_0x1A3E68
		binclude	"data\emz\chunks.kos"
		dc.w	$0000, $0000
BS_Gumball_Machine_Blocks:                                     ; Offset_0x1A4578
		binclude	"data\bs_gm\blocks.kos"
		dc.w	$0000, $0000, $0000
BS_Gumball_Machine_Tiles:                                      ; Offset_0x1A4938
		binclude	"data\bs_gm\tiles.kmd"
BS_Gumball_Machine_Chunks:                                     ; Offset_0x1A52AA
		binclude	"data\bs_gm\chunks.kos"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
BS_Glowing_Spheres_Blocks:                                     ; Offset_0x1A55FA
		binclude	"data\bs_gs\blocks.kos"
		dc.w	$0000
BS_Glowing_Spheres_Tiles:                                      ; Offset_0x1A589A
		binclude	"data\bs_gs\tiles.kmd"
BS_Glowing_Spheres_Chunks:                                     ; Offset_0x1A680C
		binclude	"data\bs_gs\chunks.kos"
		dc.w	$0000, $0000
BS_Slot_Machine_Blocks:                                        ; Offset_0x1A6B0C
		binclude	"data\bs_sm\blocks.kos"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
BS_Slot_Machine_Tiles:                                         ; Offset_0x1A77CC
		binclude	"data\bs_sm\tiles.kmd"
		dc.w	$0000, $0000, $0000, $0000
BS_Slot_Machine_Chunks:                                        ; Offset_0x1AA46E
		binclude	"data\bs_sm\chunks.kos"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000
;-------------------------------------------------------------------------------
Left_Over_Lava_Reef_Blocks:
		binclude	"data\lrz\Blocks.kos"
Left_Over_Lava_Reef_Tiles:
		binclude	"data\lrz\tiles_1.kmd"
Left_Over_Lava_Reef_Chunks_2:
		binclude	"data\lrz\chunks_2.kos"
Left_Over_Azure_Lake_Blocks:
		binclude	"data\alz\blocks_1.kos"
Left_Over_Azure_Lake_Tiles:
		binclude	"data\alz\tiles_1.kmd"
Left_Over_Azure_Lake_Chunks:
		binclude	"data\alz\chunks_1.kos"
;-------------------------------------------------------------------------------
Left_Over_BS_Gumball_Machine_Blocks:                           ; Offset_0x1BAF10
		binclude	"data\bs_gm\blocks_1.kos"
		dc.w	$0000, $0000, $0000
Left_Over_BS_Gumball_Machine_Tiles:                            ; Offset_0x1BB2D0
		binclude	"data\bs_gm\tiles_1.kmd"
Left_Over_BS_Gumball_Machine_Chunks:                           ; Offset_0x1BBC42
		binclude	"data\bs_gm\chunks_1.kos"
		dc.w	$0000, $0000, $0000, $0000, $0000, $0000, $0000
Water_Surface_Scroll_Data:                                     ; Offset_0x1C8000
		binclude	"data\hz\wsurfscr.dat"
AngleMap:                                                      ; Offset_0x1C9040
		binclude	"data\all\anglemap.dat"
Collision_Array_1:                                             ; Offset_0x1C9240
		binclude	"data\all\c_array1.dat"
Collision_Array_2:                                             ; Offset_0x1CB240
		binclude	"data\all\c_array2.dat"
;-------------------------------------------------------------------------------
; Offset_0x1CD240:
Collision_Index:
		dc.l	Collision_AIZ1,			Collision_AIZ2
		dc.l	Collision_HCZ1,			Collision_HCZ2
		dc.l	Collision_MGZ1,			Collision_MGZ2
		dc.l	Collision_CNZ,			Collision_CNZ
		dc.l	Collision_FBZ1,			Collision_FBZ2
		dc.l	Collision_ICZ1,			Collision_ICZ2
		dc.l	Collision_LBZ1,			Collision_LBZ2
		dc.l	Collision_ALZ,			Collision_ALZ
		dc.l	Collision_ALZ,			Collision_ALZ
		dc.l	Collision_ALZ,			Collision_ALZ
		dc.l	Collision_ALZ,			Collision_ALZ
		dc.l	Collision_ALZ,			Collision_ALZ
		dc.l	Collision_ALZ,			Collision_ALZ
		dc.l	Collision_ALZ,			Collision_ALZ
		dc.l	Collision_ALZ,			Collision_ALZ
		dc.l	Collision_BPZ,			Collision_BPZ
		dc.l	Collision_DPZ,			Collision_DPZ
		dc.l	Collision_CGZ,			Collision_CGZ
		dc.l	Collision_EMZ,			Collision_EMZ
		dc.l	Collision_GumblMachine,		Collision_GumblMachine
		dc.l	Collision_GlowingSphrs,		Collision_GlowingSphrs
		dc.l	Collision_SlotMachine,		Collision_SlotMachine
		dc.l	Collision_SlotMachine,		Collision_SlotMachine
		dc.l	Collision_SlotMachine,		Collision_SlotMachine

; Offset_0x1CD300: Angel_Island_1_Collision:
Collision_AIZ1:		binclude	"Levels/Angel Island/Collision - Act 1.bin"

; Offset_0x1CDF00: Angel_Island_2_Collision:
Collision_AIZ2:		binclude	"Levels/Angel Island/Collision - Act 2.bin"

; Offset_0x1CEB00: Hydrocity_1_Collision:
Collision_HCZ1:		binclude	"Levels/Hydrocity/Collision - Act 1.bin"

; Offset_0x1CF700: Hydrocity_2_Collision:
Collision_HCZ2:		binclude	"Levels/Hydrocity/Collision - Act 2.bin"

; Offset_0x1D0300: Marble_Garden_1_Collision:
Collision_MGZ1:		binclude	"Levels/Marble Garden/Collision - Act 1.bin"

; Offset_0x1D0F00: Marble_Garden_2_Collision:
Collision_MGZ2:		binclude	"Levels/Marble Garden/Collision - Act 2.bin"

; Offset_0x1D1B00: Carnival_Night_Collision:
Collision_CNZ:		binclude	"Levels/Carnival Night/Collision.bin"

; Offset_0x1D2700: Flying_Battery_1_Collision:
Collision_FBZ1:		binclude	"Levels/Flying Battery/Collision - Act 1.bin"

; Offset_0x1D3300: Flying_Battery_2_Collision:
Collision_FBZ2:		binclude	"Levels/Flying Battery/Collision - Act 2.bin"

; Offset_0x1D3F00: Icecap_1_Collision:
Collision_ICZ1:		binclude	"Levels/IceCap/Collision - Act 1.bin"

; Offset_0x1D4B00: Icecap_2_Collision:
Collision_ICZ2:		binclude	"Levels/IceCap/Collision - Act 2.bin"

; Offset_0x1D5700: Launch_Base_1_Collision:
Collision_LBZ1:		binclude	"Levels/Launch Base/Collision - Act 1.bin"

; Offset_0x1D6300: Launch_Base_2_Collision:
Collision_LBZ2:		binclude	"Levels/Launch Base/Collision - Act 2.bin"

; Offset_0x1D6F00: Azure_Lake_Collision:
Collision_ALZ:		binclude	"Levels/Azure Lake/Collision.bin"

; Offset_0x1D7B00: Balloon_Park_Collision:
Collision_BPZ:		binclude	"Levels/Balloon Park/Collision.bin"

; Offset_0x1D8700: Desert_Palace_Collision:
Collision_DPZ:		binclude	"Levels/Desert Palace/Collision.bin"

; Offset_0x1D9300: Chrome_Gadget_Collision:
Collision_CGZ:		binclude	"Levels/Chrome Gadget/Collision.bin"

; Offset_0x1D9F00: Endless_Mine_Collision:
Collision_EMZ:		binclude	"Levels/Endless Mine/Collision.bin"

; Offset_0x1DAB00: BS_Gumball_Machine_Collision:
Collision_GumblMachine:	binclude	"Levels/Bonus Stages/Collision - Gumball Machine.bin"

; Offset_0x1DB700: BS_Glowing_Spheres_Collision:
Collision_GlowingSphrs:	binclude	"Levels/Bonus Stages/Collision - Glowing Spheres.bin"

; Offset_0x1DC300: BS_Slot_Machine_Collision:
Collision_SlotMachine:	binclude	"Levels/Bonus Stages/Collision - Slot Machine.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Level layouts, two entries per zone
; ---------------------------------------------------------------------------
; Offset_0x1DCF00: Level_Layout:
Level_Index:	dc.l	LevelLayout_AIZ1,	LevelLayout_AIZ2
		dc.l	LevelLayout_HCZ1,	LevelLayout_HCZ2
		dc.l	LevelLayout_MGZ1,	LevelLayout_MGZ2
		dc.l	LevelLayout_CNZ1,	LevelLayout_CNZ2
		dc.l	LevelLayout_FBZ1,	LevelLayout_FBZ2
		dc.l	LevelLayout_LCZ1,	LevelLayout_LCZ2
		dc.l	LevelLayout_LBZ1,	LevelLayout_LBZ2
		dc.l	LevelLayout_ALZ,	LevelLayout_ALZ
		dc.l	LevelLayout_ALZ,	LevelLayout_ALZ
		dc.l	LevelLayout_ALZ,	LevelLayout_ALZ
		dc.l	LevelLayout_ALZ,	LevelLayout_ALZ
		dc.l	LevelLayout_ALZ,	LevelLayout_ALZ
		dc.l	LevelLayout_ALZ,	LevelLayout_ALZ
		dc.l	LevelLayout_ALZ,	LevelLayout_ALZ
		dc.l	LevelLayout_ALZ,	LevelLayout_ALZ
		dc.l	LevelLayout_BPZ,	LevelLayout_BPZ
		dc.l	LevelLayout_DPZ,	LevelLayout_DPZ
		dc.l	LevelLayout_CGZ,	LevelLayout_CGZ
		dc.l	LevelLayout_EMZ,	LevelLayout_EMZ
		dc.l	LevelLayout_Gumball,	LevelLayout_Gumball
		dc.l	LevelLayout_Glowing,	LevelLayout_Glowing
		dc.l	LevelLayout_Slots,	LevelLayout_Slots
		dc.l	LevelLayout_Slots,	LevelLayout_Slots
		dc.l	LevelLayout_Slots,	LevelLayout_Slots

; Offset_0x1DCFC0: AIz_Map_Act1:
LevelLayout_AIZ1:	binclude	"Levels/Angel Island/Level Layout - Act 1.bin"

; Offset_0x1DD80C: AIz_Map_Act2:
LevelLayout_AIZ2:	binclude	"Levels/Angel Island/Level Layout - Act 2.bin"

; Offset_0x1DE572: Hz_Map_Act1:
LevelLayout_HCZ1:	binclude	"Levels/Hydrocity/Level Layout - Act 1.bin"

; Offset_0x1DF0FA: Hz_Map_Act2:
LevelLayout_HCZ2:	binclude	"Levels/Hydrocity/Level Layout - Act 2.bin"

; Offset_0x1DFFA2: MGz_Map_Act1:
LevelLayout_MGZ1:	binclude	"Levels/Marble Garden/Level Layout - Act 1.bin"

; Offset_0x1E0C32: MGz_Map_Act2:
LevelLayout_MGZ2:	binclude	"Levels/Marble Garden/Level Layout - Act 2.bin"

; Offset_0x1E19E2: CNz_Map_Act1:
LevelLayout_CNZ1:	binclude	"Levels/Carnival Night/Level Layout - Act 1.bin"

; Offset_0x1E2518: CNz_Map_Act2:
LevelLayout_CNZ2:	binclude	"Levels/Carnival Night/Level Layout - Act 2.bin"

; Offset_0x1E340E: FBz_Map_Act1:
LevelLayout_FBZ1:	binclude	"Levels/Flying Battery/Level Layout - Act 1.bin"

; Offset_0x1E4278: FBz_Map_Act2:
LevelLayout_FBZ2:	binclude	"Levels/Flying Battery/Level Layout - Act 2.bin"

; Offset_0x1E4EB2: Iz_Map_Act1:
LevelLayout_LCZ1:	binclude	"Levels/IceCap/Level Layout - Act 1.bin"

; Offset_0x1E5E7A: Iz_Map_Act2:
LevelLayout_LCZ2:	binclude	"Levels/IceCap/Level Layout - Act 2.bin"

; Offset_0x1E6CCA: LBz_Map_Act1:
LevelLayout_LBZ1:	binclude	"Levels/Launch Base/Level Layout - Act 1.bin"

; Offset_0x1E7C76: LBz_Map_Act2:
LevelLayout_LBZ2:	binclude	"Levels/Launch Base/Level Layout - Act 2.bin"

; Offset_0x1E8B9E: ALz_Map:
LevelLayout_ALZ:	binclude	"Levels/Azure Lake/Level Layout.bin"

; Offset_0x1E8D6A: BPz_Map:
LevelLayout_BPZ:	binclude	"Levels/Balloon Park/Level Layout.bin"

; Offset_0x1E8EBE: DPz_Map:
LevelLayout_DPZ:	binclude	"Levels/Desert Palace/Level Layout.bin"

; Offset_0x1E8FB6: CGz_Map:
LevelLayout_CGZ:	binclude	"Levels/Chrome Gadget/Level Layout.bin"

; Offset_0x1E90AE: EMz_Map:
LevelLayout_EMZ:	binclude	"Levels/Endless Mine/Level Layout.bin"

; Offset_0x1E91A6: BS_GM_Map:
LevelLayout_Gumball:	binclude	"Levels/Bonus Stages/Level Layout - Gumball Machine.bin"

; Offset_0x1E9286: BS_GS_Map:
LevelLayout_Glowing:	binclude	"Levels/Bonus Stages/Level Layout - Glowing Spheres.bin"

; Offset_0x1E940E: BS_SM_Map:
LevelLayout_Slots:	binclude	"Levels/Bonus Stages/Level Layout - Slot Machine.bin"

;-------------------------------------------------------------------------------
; Offset_0x1E94F4:
PalPointers:
		dc.l	Pal_S2_Sega_Bg
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_S2_Title_Screen_Miles
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	7
		dc.l	Pal_S2B_Level_Select_Menu
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_Level_Sonic_Miles
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	7
		dc.l	Pal_Level_Select_Menu
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_Knuckles
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	7
		dc.l	Pal_S2_Sega_Bg
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_S2_Sega_Bg
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_S2_Sega_Bg
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_S2_Sega_Bg
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Palette_AIZ1Intro
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_AIZ2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_HCZ1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_HCZ2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_MGZ
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_MGZ
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_CNZ
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_CNZ
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Flying_Battery_Act_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Flying_Battery_Act_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_ICZIndoors
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_ICZOutdoors
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Launch_Base_Act_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Launch_Base_Act_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Mushroom_Valley_Act_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Mushroom_Valley_Act_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Sandopolis_Act_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Sandopolis_Act_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Lava_Reef_Act_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Lava_Reef_Act_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Sky_Sanctuary_Act_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Sky_Sanctuary_Act_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Death_Egg_Act_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Death_Egg_Act_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_The_Doomsday_Act_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_The_Doomsday_Act_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Ending_1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Ending_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Azure_Lake
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Azure_Lake
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Balloon_Park
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Balloon_Park
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_AIZ1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_AIZ1Water
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Palette_AIZ2Water
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_Launch_Base_Act_1_Underwater
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_Launch_Base_Act_2_Underwater
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_Launch_Base_Act_2_Underwater_2
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_AIZ2Ship
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_HCZ1Water
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Palette_HCZ2Water
		dc.w	Palette_Row_0_Offset&$FFFF
		dc.w	$1F
		dc.l	Pal_Bonus_Stage_Gumball_Machine
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Desert_Palace
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Chrome_Gadget
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Endless_Mine
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Bonus_Stage_Glowing_Spheres
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Pal_Bonus_Stage_Slot_Machine
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_AIZ1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_AIZ1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
		dc.l	Palette_AIZ1
		dc.w	Palette_Row_1_Offset&$FFFF
		dc.w	$17
Pal_S2_Sega_Bg:                                                ; Offset_0x1E96D4
		binclude	"data\all\sega_bg.pal"
Pal_S2_Title_Screen_Miles:                                     ; Offset_0x1E9754
		binclude	"data\all\ts_miles.pal"
Pal_S2B_Level_Select_Menu:                                     ; Offset_0x1E9774
		binclude	"data\all\s2b_menu.pal"
Pal_Level_Sonic_Miles:                                         ; Offset_0x1E97F4
		binclude	"data\all\sonic.pal"
Pal_Level_Select_Menu:                                         ; Offset_0x1E9834
		binclude	"data\menus\menu.pal"
Pal_Knuckles:                                                  ; Offset_0x1E98B4
		binclude	"data\all\knuckles.pal"

; Offset_0x1E98D4:
Palette_AIZ1Intro:	binclude	"Levels/Angel Island/Palettes/Act 1 - Knuckles.bin"
; Offset_0x1E9934:
Palette_AIZ1:		binclude	"Levels/Angel Island/Palettes/Act 1 - Normal.bin"
; Offset_0x1E9994:
Palette_AIZ2:		binclude	"Levels/Angel Island/Palettes/Act 2 - Normal.bin"
; Offset_0x1E99F4:
Palette_AIZ2Ship:	binclude	"Levels/Angel Island/Palettes/Act 2 - Airship.bin"
; Offset_0x1E9AD4:
Palette_AIZ1Water:	binclude	"Levels/Angel Island/Palettes/Act 1 - Underwater.bin"
; Offset_0x1E9A54:
Palette_AIZ2Water:	binclude	"Levels/Angel Island/Palettes/Act 2 - Underwater.bin"
; Offset_0x1E9B54:
Palette_HCZ1:		binclude	"Levels/Hydrocity/Palettes/Act 1 - Normal.bin"
; Offset_0x1E9BB4:
Palette_HCZ2: 		binclude	"Levels/Hydrocity/Palettes/Act 2 - Normal.bin"
; Offset_0x1E9C14:
Palette_HCZ1Water:	binclude	"Levels/Hydrocity/Palettes/Act 1 - Underwater.bin"
; Offset_0x1E9C94:
Palette_HCZ2Water:	binclude	"Levels/Hydrocity/Palettes/Act 2 - Underwater.bin"
; Offset_0x1E9D14:
Palette_MGZ:		binclude	"Levels/Marble Garden/Palettes/Normal.bin"
; Offset_0x1E9D74:
Palette_CNZ:		binclude	"Levels/Carnival Night/Palettes/Normal.bin"

Pal_Flying_Battery_Act_1:                                      ; Offset_0x1E9DD4
Pal_Flying_Battery_Act_2:                                      ; Offset_0x1E9DD4
		binclude	"data\fbz\fbz.pal"

; Offset_0x1E9E34: See "Iz_1_Set_Indoor_Pal" as well
Palette_ICZIndoors:	binclude	"Levels/IceCap/Palettes/Indoors.bin"
; Offset_0x1E9E94: See "Iz_1_Set_Intro_Pal" as well
Palette_ICZOutdoors:	binclude	"Levels/IceCap/Palettes/Outdoors.bin"

Pal_Launch_Base_Act_1:                                         ; Offset_0x1E9EF4
		binclude	"data\lbz\lbz_1.pal"
Pal_Launch_Base_Act_1_Underwater:                              ; Offset_0x1E9F54
		binclude	"data\lbz\lbz_1_uw.pal"
Pal_Launch_Base_Act_2:                                         ; Offset_0x1E9FD4
		binclude	"data\lbz\lbz_2.pal"
Pal_Launch_Base_Act_2_Underwater:                              ; Offset_0x1EA034
		binclude	"data\lbz\lbz_2_uw.pal"
Pal_Launch_Base_Act_2_Underwater_2:                            ; Offset_0x1EA0B4
		binclude	"data\lbz\lbz2_uw2.pal"
Pal_Mushroom_Valley_Act_1:                                     ; Offset_0x1EA114
Pal_Mushroom_Valley_Act_2:                                     ; Offset_0x1EA114
Pal_Sandopolis_Act_1:                                          ; Offset_0x1EA114
Pal_Sandopolis_Act_2:                                          ; Offset_0x1EA114
Pal_Lava_Reef_Act_1:                                           ; Offset_0x1EA114
Pal_Lava_Reef_Act_2:                                           ; Offset_0x1EA114
Pal_Sky_Sanctuary_Act_1:                                       ; Offset_0x1EA114
Pal_Sky_Sanctuary_Act_2:                                       ; Offset_0x1EA114
Pal_Death_Egg_Act_1:                                           ; Offset_0x1EA114
Pal_Death_Egg_Act_2:                                           ; Offset_0x1EA114
Pal_The_Doomsday_Act_1:                                        ; Offset_0x1EA114
Pal_The_Doomsday_Act_2:                                        ; Offset_0x1EA114
Pal_Ending_1:                                                  ; Offset_0x1EA114
Pal_Ending_2:                                                  ; Offset_0x1EA114
Pal_Azure_Lake:                                                ; Offset_0x1EA114
		binclude	"data\alz\alz.pal"
Pal_Balloon_Park:                                              ; Offset_0x1EA174
		binclude	"data\bpz\bpz.pal"
Pal_Desert_Palace:                                             ; Offset_0x1EA1D4
		binclude	"data\dpz\dpz.pal"
Pal_Chrome_Gadget:                                             ; Offset_0x1EA234
		binclude	"data\cgz\cgz.pal"
Pal_Endless_Mine:                                              ; Offset_0x1EA294
		binclude	"data\emz\emz.pal"
Pal_Bonus_Stage_Gumball_Machine:                               ; Offset_0x1EA2F4
		binclude	"data\bs_gm\bs_gm.pal"
Pal_Bonus_Stage_Glowing_Spheres:                               ; Offset_0x1EA354
		binclude	"data\bs_gs\bs_gs.pal"
Pal_Bonus_Stage_Slot_Machine:                                  ; Offset_0x1EA3B4
		binclude	"data\bs_sm\bs_sm.pal"
;-------------------------------------------------------------------------------
LRz_Rocks_Layout:
		binclude	"data\lrz\rockspos.dat"
LRz_Map_Act_2:
		binclude	"data\lrz\Level Layout - Act 2.dat"
LRz_Map_Act_1:
		binclude	"data\lrz\Level Layout - Act 1.dat"
;-------------------------------------------------------------------------------
Offset_0x1F32CE:
		dc.w	$0886, $0EEE, $04AE, $026E, $024A, $00EE, $000E, $0224
		dc.w	$00AE, $008E, $08AE, $0020, $0ECC, $0CAA, $0866, $0020
Offset_0x1F32EE:
		dc.w	$0EE0, $0EEE, $006E, $004A, $0028, $00EE, $0000, $00E0
		dc.w	$00A0, $0060, $0020, $0020, $0EA8, $0A60, $0640, $0000
Offset_0x1F330E:
		dc.w	$0EE0, $0EEE, $0CCC, $0888, $0666, $00EE, $000E, $0224
		dc.w	$00CE, $00AE, $004A, $0222, $0AAA, $0864, $0642, $0000
Offset_0x1F332E:
		dc.w	$00EE, $0EEE, $068C, $046A, $0246, $00EE, $0088, $0000
		dc.w	$08AC, $068C, $0448, $0222, $02AC, $004A, $0224, $0222
Offset_0x1F334E:
		dc.w	$00EE, $0EEE, $0000, $0000, $0000, $0000, $0000, $0224
		dc.w	$06AE, $004C, $0228, $0222, $0EAA, $0A64, $0642, $0020
Offset_0x1F336E:
		dc.w	$0886, $0EEE, $0000, $0000, $00E0, $00EE, $000E, $0224
		dc.w	$00AE, $008E, $024A, $0222, $0EAA, $0A64, $0642, $0000
;-------------------------------------------------------------------------------
		align    $1000  ; $FF Fill
;-------------------------------------------------------------------------------
Player_Start_Speed_Array:                                      ; Offset_0x1F7000
		dc.w	$0600, $0010, $0020, $0000
		dc.w	$04C0, $001C, $0070, $0000
		dc.w	$0580, $0010, $0200, $0000
;-------------------------------------------------------------------------------
Player_Start_Position_Array:                                   ; Offset_0x1F7018
		binclude	"Levels/Angel Island/Starting Position - Act 1.bin"
		binclude	"Levels/Angel Island/Starting Position - Act 2.bin"
		dc.w	$0280, $0020, $0220, $082C  ; Hz
		dc.w	$0040, $0070, $0060, $08BE  ; MGz
		dc.w	$0060, $06CC, $0060, $022C  ; CNz
		dc.w	$0060, $06EC, $0060, $05EC  ; FBz
		dc.w	$00D0, $0060, $0060, $06ED  ; Iz
		dc.w	$0090, $05AC, $0630, $03EC  ; LBz
		dc.w	$0080, $06AA, $0080, $03AA  ; MVz
		dc.w	$0230, $01AC, $0230, $01AC  ; Sz
		dc.w	$0100, $0020, $0100, $0020  ; LRz
		dc.w	$0060, $06AC, $0060, $056C  ; SSz
		dc.w	$0060, $06AC, $0060, $05AC  ; DEz
		dc.w	$0060, $02AC, $0060, $058C  ; TDz
		dc.w	$0060, $01EC, $0060, $012C  ; End Seq
		dc.w	$0430, $018C, $0030, $008C  ; ALz
		dc.w	$05C0, $0264, $0060, $012C  ; BPz
		dc.w	$0758, $0144, $0060, $0070  ; DPz
		dc.w	$0454, $002C, $0060, $0070  ; CGz
		dc.w	$0830, $0190, $0060, $0070  ; EMz
		dc.w	$0100, $0120, $0060, $0070  ; BS GM
		dc.w	$0060, $0070, $0060, $0070  ; BS GS
		dc.w	$0060, $0070, $0060, $0070  ; BS SM
		dc.w	$0060, $0070, $0060, $0070  ; LRz Boss / HPz
		dc.w	$0060, $0070, $0060, $0070  ; DEz Boss / HPz Portal
;===============================================================================
; Array do posicionamento dos objetos das fases
; ->>>
;===============================================================================
Objects_Layout:                                                ; Offset_0x1F70D8
		dc.l	AIz_Obj_Act1                           ; Offset_0x1F72DE
		dc.l	AIz_Obj_Act2                           ; Offset_0x1F75C6
		dc.l	Hz_Obj_Act1                            ; Offset_0x1F7F46
		dc.l	Hz_Obj_Act2                            ; Offset_0x1F8762
		dc.l	MGz_Obj_Act1                           ; Offset_0x1F970E
		dc.l	MGz_Obj_Act2                           ; Offset_0x1FA4A2
		dc.l	CNz_Obj_Act1                           ; Offset_0x1FB0FE
		dc.l	CNz_Obj_Act2                           ; Offset_0x1FB9FE
		dc.l	FBz_Obj_Act1                           ; Offset_0x1FC970
		dc.l	FBz_Obj_Act2                           ; Offset_0x1FC982
		dc.l	Iz_Obj_Act1                            ; Offset_0x1FCA0E
		dc.l	Iz_Obj_Act2                            ; Offset_0x1FCDF8
		dc.l	LBz_Obj_Act1                           ; Offset_0x1FD896
		dc.l	LBz_Obj_Act2                           ; Offset_0x1FE100
		dc.l	MVz_Obj_Act1                           ; Offset_0x1FF620
		dc.l	MVz_Obj_Act2                           ; Offset_0x1FF722
		dc.l	Sz_Obj_Act1                            ; Offset_0x1FF7F4
		dc.l	Sz_Obj_Act2                            ; Offset_0x1FF800
		dc.l	LRz_Obj_Act1                           ; Offset_0x1FF81E
		dc.l	LRz_Obj_Act2                           ; Offset_0x1FF82A
		dc.l	SSz_Obj_Act1                           ; Offset_0x1FF848
		dc.l	SSz_Obj_Act2                           ; Offset_0x1FF854
		dc.l	DEz_Obj_Act1                           ; Offset_0x1FF872
		dc.l	DEz_Obj_Act2                           ; Offset_0x1FF87E
		dc.l	TDz_Obj_Act1                           ; Offset_0x1FF89C
		dc.l	TDz_Obj_Act2                           ; Offset_0x1FF8A8
		dc.l	SSz_KTe_Boss_Obj_Act1                  ; Offset_0x1FF8C6
		dc.l	SSz_KTe_Boss_Obj_Act2                  ; Offset_0x1FF8D2
		dc.l	ALz_Obj_Act1                           ; Offset_0x1FF8F0
		dc.l	ALz_Obj_Act2                           ; Offset_0x1FF92C
		dc.l	BPz_Obj_Act1                           ; Offset_0x1FF94A
		dc.l	BPz_Obj_Act2                           ; Offset_0x1FF99E
		dc.l	DPz_Obj_Act1                           ; Offset_0x1FF9BC
		dc.l	DPz_Obj_Act2                           ; Offset_0x1FFA28
		dc.l	CGZ_Obj_Act1                           ; Offset_0x1FFA46
		dc.l	CGZ_Obj_Act2                           ; Offset_0x1FFAA6
		dc.l	EMz_Obj_Act1                           ; Offset_0x1FFAC4
		dc.l	EMz_Obj_Act2                           ; Offset_0x1FFAEE
		dc.l	BS_GM_Obj_Act1                         ; Offset_0x1FFB0C
		dc.l	BS_GM_Obj_Act2                         ; Offset_0x1FFB18
		dc.l	BS_GS_Obj_Act1                         ; Offset_0x1FFB36
		dc.l	BS_GS_Obj_Act2                         ; Offset_0x1FFB42
		dc.l	BS_SM_Obj_Act1                         ; Offset_0x1FFB60
		dc.l	BS_SM_Obj_Act2                         ; Offset_0x1FFB6C
		dc.l	LRz_Act2_Boss_Obj                      ; Offset_0x1FFB8A
		dc.l	HPz_Obj                                ; Offset_0x1FFB96
		dc.l	DEz_Final_Boss_Obj                     ; Offset_0x1FFBB4
		dc.l	HPz_Obj_2                              ; Offset_0x1FFBC0
;===============================================================================
; Array do posicionamento dos objetos das fases
; <<<-
;===============================================================================

;===============================================================================
; Array do posicionamento dos an�is das fases
; ->>>
;===============================================================================
Rings_Layout:                                                  ; Offset_0x1F7198
		dc.l	AIz_Rng_Act1                           ; Offset_0x1F7A4C
		dc.l	AIz_Rng_Act2                           ; Offset_0x1F7BE4
		dc.l	Hz_Rng_Act1                            ; Offset_0x1F8FA8
		dc.l	Hz_Rng_Act2                            ; Offset_0x1F93F0
		dc.l	MGz_Rng_Act1                           ; Offset_0x1F9F18
		dc.l	MGz_Rng_Act2                           ; Offset_0x1FABD4
		dc.l	CNz_Rng_Act1                           ; Offset_0x1FC4A2
		dc.l	CNz_Rng_Act2                           ; Offset_0x1FC7DA
		dc.l	FBz_Rng_Act1                           ; Offset_0x1FC99A
		dc.l	FBz_Rng_Act2                           ; Offset_0x1FC9C2
		dc.l	Iz_Rng_Act1                            ; Offset_0x1FD344
		dc.l	Iz_Rng_Act2                            ; Offset_0x1FD550
		dc.l	LBz_Rng_Act1                           ; Offset_0x1FE8F8
		dc.l	LBz_Rng_Act2                           ; Offset_0x1FEC88
		dc.l	MVz_Rng_Act1                           ; Offset_0x1FF7E2
		dc.l	MVz_Rng_Act2                           ; Offset_0x1FF7E8
		dc.l	Sz_Rng_Act1                            ; Offset_0x1FF80C
		dc.l	Sz_Rng_Act2                            ; Offset_0x1FF812
		dc.l	LRz_Rng_Act1                           ; Offset_0x1FF836
		dc.l	LRz_Rng_Act2                           ; Offset_0x1FF83C
		dc.l	SSz_Rng_Act1                           ; Offset_0x1FF860
		dc.l	SSz_Rng_Act2                           ; Offset_0x1FF866
		dc.l	DEz_Rng_Act1                           ; Offset_0x1FF88A
		dc.l	DEz_Rng_Act2                           ; Offset_0x1FF890
		dc.l	TDz_Rng_Act1                           ; Offset_0x1FF8B4
		dc.l	TDz_Rng_Act2                           ; Offset_0x1FF8BA
		dc.l	SSz_KTe_Boss_Rng_Act1                  ; Offset_0x1FF8DE
		dc.l	SSz_KTe_Boss_Rng_Act2                  ; Offset_0x1FF8E4
		dc.l	ALz_Rng_Act1                           ; Offset_0x1FF938
		dc.l	ALz_Rng_Act2                           ; Offset_0x1FF93E
		dc.l	BPz_Rng_Act1                           ; Offset_0x1FF9AA
		dc.l	BPz_Rng_Act2                           ; Offset_0x1FF9B0
		dc.l	DPz_Rng_Act1                           ; Offset_0x1FFA34
		dc.l	DPz_Rng_Act2                           ; Offset_0x1FFA3A
		dc.l	CGZ_Rng_Act1                           ; Offset_0x1FFAB2
		dc.l	CGZ_Rng_Act2                           ; Offset_0x1FFAB8
		dc.l	EMz_Rng_Act1                           ; Offset_0x1FFAFA
		dc.l	EMz_Rng_Act2                           ; Offset_0x1FFB00
		dc.l	BS_GM_Rng_Act1                         ; Offset_0x1FFB24
		dc.l	BS_GM_Rng_Act2                         ; Offset_0x1FFB2A
		dc.l	BS_GS_Rng_Act1                         ; Offset_0x1FFB4E
		dc.l	BS_GS_Rng_Act2                         ; Offset_0x1FFB54
		dc.l	BS_SM_Rng_Act1                         ; Offset_0x1FFB78
		dc.l	BS_SM_Rng_Act2                         ; Offset_0x1FFB7E
		dc.l	LRz_Act2_Boss_Rng                      ; Offset_0x1FFBA2
		dc.l	HPz_Rng                                ; Offset_0x1FFBA8
		dc.l	DEz_Final_Boss_Rng                     ; Offset_0x1FFBCC
		dc.l	HPz_Rng_2                              ; Offset_0x1FFBD2
;===============================================================================
; Array do posicionamento dos an�is das fases
; <<<-
;===============================================================================

;===============================================================================
; Ponteiro para origem e destino dos tuneis trasportadores usados na LBz de
; ->>>     acordo com o sub-tipo do objeto
;===============================================================================
LBz_Automatic_Tunnel_From_To_Data:                             ; Offset_0x1F7258
		dc.l	Teleport_Data_0x00                     ; Offset_0x1FF0C8
		dc.l	Teleport_Data_0x01                     ; Offset_0x1FF0F2
		dc.l	Teleport_Data_0x02                     ; Offset_0x1FF11C
		dc.l	Teleport_Data_0x03                     ; Offset_0x1FF156
		dc.l	Teleport_Data_0x04                     ; Offset_0x1FF180
		dc.l	Teleport_Data_0x05                     ; Offset_0x1FF1BA
		dc.l	Teleport_Data_0x06                     ; Offset_0x1FF1E4
		dc.l	Teleport_Data_0x07                     ; Offset_0x1FF21E
		dc.l	Teleport_Data_0x08                     ; Offset_0x1FF248
		dc.l	Teleport_Data_0x09                     ; Offset_0x1FF282
		dc.l	Teleport_Data_0x0A                     ; Offset_0x1FF2AC
		dc.l	Teleport_Data_0x0B                     ; Offset_0x1FF2E6
		dc.l	Teleport_Data_0x0C                     ; Offset_0x1FF310
		dc.l	Teleport_Data_0x0D                     ; Offset_0x1FF3E6
		dc.l	Teleport_Data_0x0E                     ; Offset_0x1FF44C
		dc.l	Teleport_Data_0x0F                     ; Offset_0x1FF44C
		dc.l	Teleport_Data_0x10                     ; Offset_0x1FF44C
		dc.l	Teleport_Data_0x11                     ; Offset_0x1FF4CA
		dc.l	Teleport_Data_0x12                     ; Offset_0x1FF548
		dc.l	Teleport_Data_0x13                     ; Offset_0x1FF5C6
		dc.l	Teleport_Data_0x14                     ; Offset_0x1FF5F0
;===============================================================================
; Ponteiro para origem e destino dos tuneis trasportadores usados na LBz de
; <<<-     acordo com o sub-tipo do objeto
;===============================================================================
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A
		dc.l	Offset_0x1FF61A

		dc.w	$FFFF, 0, 0
; ---------------------------------------------------------------------------
; Offset_0x1F72DE:
AIz_Obj_Act1:	binclude	"Levels/Angel Island/Object Layout - Act 1.bin"
		dc.w	$FFFF, 0, 0
; Offset_0x1F75C6:
AIz_Obj_Act2:	binclude	"Levels/Angel Island/Object Layout - Act 2.bin"
		dc.w	$FFFF, 0, 0
; Offset_0x1F7A4C:
AIz_Rng_Act1:	binclude	"Levels/Angel Island/Ring Layout - Act 1.bin"
; Offset_0x1F7BE4:
AIz_Rng_Act2:	binclude	"Levels/Angel Island/Ring Layout - Act 2.bin"

;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
Hz_Obj_Act1:                                                   ; Offset_0x1F7F46
		binclude	"data\hz\obj_act1.dat"
Hz_Obj_Act2:                                                   ; Offset_0x1F8762
		binclude	"data\hz\obj_act2.dat"
Hz_Rng_Act1:                                                   ; Offset_0x1F8FA8
		binclude	"data\hz\rng_act1.dat"
Hz_Rng_Act2:                                                   ; Offset_0x1F93F0
		binclude	"data\hz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
MGz_Obj_Act1:                                                  ; Offset_0x1F970E
		binclude	"data\mgz\obj_act1.dat"
MGz_Rng_Act1:                                                  ; Offset_0x1F9F18
		binclude	"data\mgz\rng_act1.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
MGz_Obj_Act2:                                                  ; Offset_0x1FA4A2
		binclude	"data\mgz\obj_act2.dat"
MGz_Rng_Act2:                                                  ; Offset_0x1FABD4
		binclude	"data\mgz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
CNz_Obj_Act1:                                                  ; Offset_0x1FB0FE
		binclude	"data\cnz\obj_act1.dat"
CNz_Obj_Act2:                                                  ; Offset_0x1FB9FE
		binclude	"data\cnz\obj_act2.dat"
CNz_Rng_Act1:                                                  ; Offset_0x1FC4A2
		binclude	"data\cnz\rng_act1.dat"
CNz_Rng_Act2:                                                  ; Offset_0x1FC7DA
		binclude	"data\cnz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
FBz_Obj_Act1:                                                  ; Offset_0x1FC970
		binclude	"data\fbz\obj_act1.dat"
FBz_Obj_Act2:                                                  ; Offset_0x1FC982
		binclude	"data\fbz\obj_act2.dat"
FBz_Rng_Act1:                                                  ; Offset_0x1FC99A
		binclude	"data\fbz\rng_act1.dat"
FBz_Rng_Act2:                                                  ; Offset_0x1FC9C2
		binclude	"data\fbz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
Iz_Obj_Act1:                                                   ; Offset_0x1FCA0E
		binclude	"data\iz\obj_act1.dat"
Iz_Obj_Act2:                                                   ; Offset_0x1FCDF8
		binclude	"data\iz\obj_act2.dat"
Iz_Rng_Act1:                                                   ; Offset_0x1FD344
		binclude	"data\iz\rng_act1.dat"
Iz_Rng_Act2:                                                   ; Offset_0x1FD550
		binclude	"data\iz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
LBz_Obj_Act1:                                                  ; Offset_0x1FD896
		binclude	"data\lbz\obj_act1.dat"
LBz_Obj_Act2:                                                  ; Offset_0x1FE100
		binclude	"data\lbz\obj_act2.dat"
LBz_Rng_Act1:                                                  ; Offset_0x1FE8F8
		binclude	"data\lbz\rng_act1.dat"
LBz_Rng_Act2:                                                  ; Offset_0x1FEC88
		binclude	"data\lbz\rng_act2.dat"
;-------------------------------------------------------------------------------
Teleport_Data_0x00: ; $2400                                    ; Offset_0x1FF0C8
		dc.w	$0028
		dc.w	$3E40, $0250
		dc.w	$3E40, $0260
		dc.w	$3E50, $0270
		dc.w	$3E90, $0270
		dc.w	$3EA0, $0260
		dc.w	$3EA0, $0060
		dc.w	$3E90, $0050
		dc.w	$3E50, $0050
		dc.w	$3E40, $0060
		dc.w	$3E40, $00D0
Teleport_Data_0x01: ; $2401                                    ; Offset_0x1FF0F2
		dc.w	$0028
		dc.w	$3F40, $0250
		dc.w	$3F40, $0260
		dc.w	$3F30, $0270
		dc.w	$3EF0, $0270
		dc.w	$3EE0, $0260
		dc.w	$3EE0, $0060
		dc.w	$3EF0, $0050
		dc.w	$3F30, $0050
		dc.w	$3F40, $0060
		dc.w	$3F40, $00D0
Teleport_Data_0x02: ; $2402                                    ; Offset_0x1FF11C
		dc.w	$0038
		dc.w	$0D40, $0770
		dc.w	$0D48, $0770
		dc.w	$0D50, $0770
		dc.w	$0D58, $0770
		dc.w	$0D60, $0770
		dc.w	$0DB0, $0770
		dc.w	$0DD0, $077C
		dc.w	$0DE0, $079C
		dc.w	$0DD6, $07BC
		dc.w	$0DB6, $07CE
		dc.w	$0D96, $07CE
		dc.w	$0D86, $07C8
		dc.w	$0D70, $07A8
		dc.w	$0D70, $0688
Teleport_Data_0x03: ; $2403                                    ; Offset_0x1FF156
		dc.w	$0028
		dc.w	$0D30, $0770
		dc.w	$0DB0, $0770
		dc.w	$0DD0, $077C
		dc.w	$0DE0, $079C
		dc.w	$0DD6, $07BC
		dc.w	$0DB6, $07CE
		dc.w	$0D96, $07CE
		dc.w	$0D86, $07C8
		dc.w	$0D70, $07A8
		dc.w	$0D70, $0748
Teleport_Data_0x04: ; $2404                                     ; Offset_0x1FF180
		dc.w	$0038
		dc.w	$2CC0, $09F0
		dc.w	$2CC8, $09F0
		dc.w	$2CD0, $09F0
		dc.w	$2CD8, $09F0
		dc.w	$2CE0, $09F0
		dc.w	$2D30, $09F0
		dc.w	$2D50, $09FC
		dc.w	$2D60, $0A1C
		dc.w	$2D56, $0A3C
		dc.w	$2D36, $0A4E
		dc.w	$2D16, $0A4E
		dc.w	$2D06, $0A48
		dc.w	$2CF0, $0A28
		dc.w	$2CF0, $0908
Teleport_Data_0x05: ; $2405                                    ; Offset_0x1FF1BA
		dc.w	$0028
		dc.w	$2CB0, $09F0
		dc.w	$2D30, $09F0
		dc.w	$2D50, $09FC
		dc.w	$2D60, $0A1C
		dc.w	$2D56, $0A3C
		dc.w	$2D36, $0A4E
		dc.w	$2D16, $0A4E
		dc.w	$2D06, $0A48
		dc.w	$2CF0, $0A28
		dc.w	$2CF0, $09C8
Teleport_Data_0x06: ; $2406                                    ; Offset_0x1FF1E4
		dc.w	$0038
		dc.w	$3640, $0A70
		dc.w	$3648, $0A70
		dc.w	$3650, $0A70
		dc.w	$3658, $0A70
		dc.w	$3660, $0A70
		dc.w	$36B0, $0A70
		dc.w	$36D0, $0A7C
		dc.w	$36E0, $0A9C
		dc.w	$36D6, $0ABC
		dc.w	$36B6, $0ACE
		dc.w	$3696, $0ACE
		dc.w	$3686, $0AC8
		dc.w	$3670, $0AA8
		dc.w	$3670, $0988
Teleport_Data_0x07: ; $2407                                    ; Offset_0x1FF21E
		dc.w	$0028
		dc.w	$3630, $0A70
		dc.w	$36B0, $0A70
		dc.w	$36D0, $0A7C
		dc.w	$36E0, $0A9C
		dc.w	$36D6, $0ABC
		dc.w	$36B6, $0ACE
		dc.w	$3696, $0ACE
		dc.w	$3686, $0AC8
		dc.w	$3670, $0AA8
		dc.w	$3670, $0A48
Teleport_Data_0x08: ; $2408                                    ; Offset_0x1FF248
		dc.w	$0038
		dc.w	$37C0, $07F0
		dc.w	$37C8, $07F0
		dc.w	$37D0, $07F0
		dc.w	$37D8, $07F0
		dc.w	$37E0, $07F0
		dc.w	$3830, $07F0
		dc.w	$3850, $07FC
		dc.w	$3860, $081C
		dc.w	$3856, $083C
		dc.w	$3836, $084E
		dc.w	$3816, $084E
		dc.w	$3806, $0848
		dc.w	$37F0, $0828
		dc.w	$37F0, $0708
Teleport_Data_0x09: ; $2409                                    ; Offset_0x1FF282
		dc.w	$0028
		dc.w	$37B0, $07F0
		dc.w	$3830, $07F0
		dc.w	$3850, $07FC
		dc.w	$3860, $081C
		dc.w	$3856, $083C
		dc.w	$3836, $084E
		dc.w	$3816, $084E
		dc.w	$3806, $0848
		dc.w	$37F0, $0828
		dc.w	$37F0, $07C8
Teleport_Data_0x0A:  ; $240A                                   ; Offset_0x1FF2AC
		dc.w	$0038
		dc.w	$29C0, $0470
		dc.w	$29C8, $0470
		dc.w	$29D0, $0470
		dc.w	$29D8, $0470
		dc.w	$29E0, $0470
		dc.w	$2A30, $0470
		dc.w	$2A50, $047C
		dc.w	$2A60, $049C
		dc.w	$2A56, $04BC
		dc.w	$2A36, $04CE
		dc.w	$2A16, $04CE
		dc.w	$2A06, $04C8
		dc.w	$29F0, $04A8
		dc.w	$29F0, $0388
Teleport_Data_0x0B: ; $240B                                    ; Offset_0x1FF2E6
		dc.w	$0028
		dc.w	$29B0, $0470
		dc.w	$2A30, $0470
		dc.w	$2A50, $047C
		dc.w	$2A60, $049C
		dc.w	$2A56, $04BC
		dc.w	$2A36, $04CE
		dc.w	$2A16, $04CE
		dc.w	$2A06, $04C8
		dc.w	$29F0, $04A8
		dc.w	$29F0, $0448
Teleport_Data_0x0C: ; $240C                                    ; Offset_0x1FF310
		dc.w	$00D4
		dc.w	$26C0, $0510
		dc.w	$26C0, $06E0
		dc.w	$26B2, $0701
		dc.w	$2690, $0710
		dc.w	$25F0, $0710
		dc.w	$25CE, $0701
		dc.w	$25C0, $06E0
		dc.w	$25C0, $04B0
		dc.w	$25B0, $0480
		dc.w	$2590, $0460
		dc.w	$2560, $0450
		dc.w	$24D0, $0450
		dc.w	$2490, $043B
		dc.w	$2450, $041F
		dc.w	$2400, $0410
		dc.w	$2300, $0410
		dc.w	$22C5, $0419
		dc.w	$2250, $0465
		dc.w	$2200, $0470
		dc.w	$21A0, $0460
		dc.w	$213D, $0419
		dc.w	$2100, $0410
		dc.w	$20C5, $0419
		dc.w	$2050, $0465
		dc.w	$2000, $0470
		dc.w	$1FA0, $0460
		dc.w	$1F3D, $0419
		dc.w	$1F00, $0410
		dc.w	$1EC5, $0419
		dc.w	$1E50, $0465
		dc.w	$1E00, $0470
		dc.w	$1C70, $0470
		dc.w	$1C40, $0440
		dc.w	$1C40, $0320
		dc.w	$1C50, $0300
		dc.w	$1C70, $02F0
		dc.w	$1F80, $02F0
		dc.w	$1FD0, $02E5
		dc.w	$2045, $0299
		dc.w	$2080, $0290
		dc.w	$20C0, $02A7
		dc.w	$2170, $0357
		dc.w	$21B0, $0370
		dc.w	$2400, $0370
		dc.w	$2440, $0380
		dc.w	$2480, $0390
		dc.w	$24B0, $0382
		dc.w	$24C0, $0360
		dc.w	$24C0, $00C0
		dc.w	$2490, $0090
		dc.w	$244D, $00A0
		dc.w	$2440, $00C0
		dc.w	$2440, $0100
Teleport_Data_0x0D: ; $240D                                    ; Offset_0x1FF3E6
		dc.w	$0064
		dc.w	$33C0, $0110
		dc.w	$33C0, $01E0
		dc.w	$33D0, $0200
		dc.w	$3400, $0210
		dc.w	$3450, $0220
		dc.w	$34A0, $0270
		dc.w	$34C0, $02A0
		dc.w	$34C0, $0460
		dc.w	$34CE, $0480
		dc.w	$34F0, $0490
		dc.w	$3710, $0490
		dc.w	$372E, $0480
		dc.w	$3740, $0460
		dc.w	$3740, $0330
		dc.w	$3720, $0310
		dc.w	$35F0, $0310
		dc.w	$35CE, $0300
		dc.w	$35C0, $02E0
		dc.w	$35C0, $0040
		dc.w	$35CC, $0020
		dc.w	$3600, $0010
		dc.w	$3690, $0010
		dc.w	$36B4, $0020
		dc.w	$36C0, $0040
		dc.w	$36C0, $0090
Teleport_Data_0x0E: ; $240E                                    ; Offset_0x1FF44C
Teleport_Data_0x0F: ; $240F                                    ; Offset_0x1FF44C
Teleport_Data_0x10: ; $2410                                    ; Offset_0x1FF44C
		dc.w	$007C
		dc.w	$0F60, $05C8
		dc.w	$0F60, $0950
		dc.w	$0F64, $0980
		dc.w	$0F68, $0990
		dc.w	$0F73, $09B0
		dc.w	$0F82, $09D0
		dc.w	$0F8C, $09E0
		dc.w	$0F98, $09F0
		dc.w	$0FA5, $0A00
		dc.w	$0FB5, $0A10
		dc.w	$0FC5, $0A1C
		dc.w	$0FD5, $0A28
		dc.w	$0FF5, $0A38
		dc.w	$1005, $0A40
		dc.w	$1025, $0A4A
		dc.w	$1035, $0A4C
		dc.w	$1055, $0A50
		dc.w	$1265, $0A50
		dc.w	$12A5, $0A48
		dc.w	$12C5, $0A3C
		dc.w	$12E5, $0A2C
		dc.w	$12F5, $0A20
		dc.w	$1305, $0A14
		dc.w	$1315, $0A08
		dc.w	$1320, $09F8
		dc.w	$132F, $09E8
		dc.w	$1343, $09C8
		dc.w	$1350, $09A8
		dc.w	$135A, $0988
		dc.w	$1360, $0958
		dc.w	$1360, $0878
Teleport_Data_0x11: ; $2411                                    ; Offset_0x1FF4CA
		dc.w	$007C
		dc.w	$3760, $01C8
		dc.w	$3760, $0510
		dc.w	$375A, $0540
		dc.w	$3750, $0560
		dc.w	$3743, $0580
		dc.w	$372F, $05A0
		dc.w	$3720, $05B0
		dc.w	$3715, $05C0
		dc.w	$3705, $05CC
		dc.w	$36F5, $05D8
		dc.w	$36E5, $05E4
		dc.w	$36C5, $05F4
		dc.w	$36A5, $0600
		dc.w	$3665, $0608
		dc.w	$3655, $0608
		dc.w	$3635, $0604
		dc.w	$3625, $0602
		dc.w	$3605, $05F8
		dc.w	$35F5, $05F0
		dc.w	$35D5, $05E0
		dc.w	$35C5, $05D4
		dc.w	$35B5, $05C8
		dc.w	$35A5, $05B8
		dc.w	$3598, $05A8
		dc.w	$358C, $0598
		dc.w	$3582, $0588
		dc.w	$3573, $0568
		dc.w	$3568, $0548
		dc.w	$3564, $0538
		dc.w	$3560, $0508
		dc.w	$3560, $0478
Teleport_Data_0x12: ; $2412                                    ; Offset_0x1FF548
		dc.w	$007C
		dc.w	$3460, $05C8
		dc.w	$3460, $0690
		dc.w	$345A, $06C0
		dc.w	$3450, $06E0
		dc.w	$3443, $0700
		dc.w	$342F, $0720
		dc.w	$3420, $0730
		dc.w	$3415, $0740
		dc.w	$3405, $074C
		dc.w	$33F5, $0758
		dc.w	$33E5, $0764
		dc.w	$33C5, $0774
		dc.w	$33A5, $0780
		dc.w	$3365, $0788
		dc.w	$3355, $0788
		dc.w	$3335, $0784
		dc.w	$3325, $0782
		dc.w	$3305, $0778
		dc.w	$32F5, $0770
		dc.w	$32D5, $0760
		dc.w	$32C5, $0754
		dc.w	$32B5, $0748
		dc.w	$32A5, $0738
		dc.w	$3298, $0728
		dc.w	$328C, $0718
		dc.w	$3282, $0708
		dc.w	$3273, $06E8
		dc.w	$3268, $06C8
		dc.w	$3264, $06B8
		dc.w	$3260, $0688
		dc.w	$3260, $05F8
Teleport_Data_0x13: ; $2413                                    ; Offset_0x1FF5C6
		dc.w	$0028
		dc.w	$1C70, $0730
		dc.w	$1C70, $06C0
		dc.w	$1C62, $06A0
		dc.w	$1C42, $0692
		dc.w	$1C32, $0692
		dc.w	$1C12, $069B
		dc.w	$1C00, $06BB
		dc.w	$1C08, $06DB
		dc.w	$1C28, $06F0
		dc.w	$1CA8, $06F0
Teleport_Data_0x14:                                            ; Offset_0x1FF5F0
		dc.w	$0028
		dc.w	$3670, $0830
		dc.w	$3670, $07C0
		dc.w	$3662, $07A0
		dc.w	$3642, $0792
		dc.w	$3632, $0792
		dc.w	$3612, $079B
		dc.w	$3600, $07BB
		dc.w	$3608, $07DB
		dc.w	$3628, $07F0
		dc.w	$36A8, $07F0
;-------------------------------------------------------------------------------
Offset_0x1FF61A:
		dc.w	$FFFF, $0000, $0000
;-------------------------------------------------------------------------------
MVz_Obj_Act1:                                                  ; Offset_0x1FF620
		binclude	"data\mvz\obj_act1.dat"
MVz_Obj_Act2:                                                  ; Offset_0x1FF722
		binclude	"data\mvz\obj_act2.dat"
MVz_Rng_Act1:                                                  ; Offset_0x1FF7E2
		binclude	"data\mvz\rng_act1.dat"
MVz_Rng_Act2:                                                  ; Offset_0x1FF7E8
		binclude	"data\mvz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
Sz_Obj_Act1:                                                   ; Offset_0x1FF7F4
		binclude	"data\sz\obj_act1.dat"
Sz_Obj_Act2:                                                   ; Offset_0x1FF800
		binclude	"data\sz\obj_act2.dat"
Sz_Rng_Act1:                                                   ; Offset_0x1FF80C
		binclude	"data\sz\rng_act1.dat"
Sz_Rng_Act2:                                                   ; Offset_0x1FF812
		binclude	"data\sz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
LRz_Obj_Act1:                                                  ; Offset_0x1FF81E
		binclude	"data\lrz\obj_act1.dat"
LRz_Obj_Act2:                                                  ; Offset_0x1FF82A
		binclude	"data\lrz\obj_act2.dat"
LRz_Rng_Act1:                                                  ; Offset_0x1FF836
		binclude	"data\lrz\rng_act1.dat"
LRz_Rng_Act2:                                                  ; Offset_0x1FF83C
		binclude	"data\lrz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
SSz_Obj_Act1:                                                  ; Offset_0x1FF848
		binclude	"data\ssz\obj_act1.dat"
SSz_Obj_Act2:                                                  ; Offset_0x1FF854
		binclude	"data\ssz\obj_act2.dat"
SSz_Rng_Act1:                                                  ; Offset_0x1FF860
		binclude	"data\ssz\rng_act1.dat"
SSz_Rng_Act2:                                                  ; Offset_0x1FF866
		binclude	"data\ssz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
DEz_Obj_Act1:                                                  ; Offset_0x1FF872
		binclude	"data\dez\obj_act1.dat"
DEz_Obj_Act2:                                                  ; Offset_0x1FF87E
		binclude	"data\dez\obj_act2.dat"
DEz_Rng_Act1:                                                  ; Offset_0x1FF88A
		binclude	"data\dez\rng_act1.dat"
DEz_Rng_Act2:                                                  ; Offset_0x1FF890
		binclude	"data\dez\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
TDz_Obj_Act1:                                                  ; Offset_0x1FF89C
		binclude	"data\tdz\obj_act1.dat"
TDz_Obj_Act2:                                                  ; Offset_0x1FF8A8
		binclude	"data\tdz\obj_act2.dat"
TDz_Rng_Act1:                                                  ; Offset_0x1FF8B4
		binclude	"data\tdz\rng_act1.dat"
TDz_Rng_Act2:                                                  ; Offset_0x1FF8BA
		binclude	"data\tdz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
SSz_KTe_Boss_Obj_Act1:                                         ; Offset_0x1FF8C6
		binclude	"data\ssz\obj_act3.dat"
SSz_KTe_Boss_Obj_Act2:                                         ; Offset_0x1FF8D2
		binclude	"data\ssz\obj_act4.dat"
SSz_KTe_Boss_Rng_Act1:                                         ; Offset_0x1FF8DE
		binclude	"data\ssz\rng_act3.dat"
SSz_KTe_Boss_Rng_Act2:                                         ; Offset_0x1FF8E4
		binclude	"data\ssz\rng_act4.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
ALz_Obj_Act1:                                                  ; Offset_0x1FF8F0
		binclude	"data\alz\obj_act1.dat"
ALz_Obj_Act2:                                                  ; Offset_0x1FF92C
		binclude	"data\alz\obj_act2.dat"
ALz_Rng_Act1:                                                  ; Offset_0x1FF938
		binclude	"data\alz\rng_act1.dat"
ALz_Rng_Act2:                                                  ; Offset_0x1FF93E
		binclude	"data\alz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
BPz_Obj_Act1:                                                  ; Offset_0x1FF94A
		binclude	"data\bpz\obj_act1.dat"
BPz_Obj_Act2:                                                  ; Offset_0x1FF99E
		binclude	"data\bpz\obj_act2.dat"
BPz_Rng_Act1:                                                  ; Offset_0x1FF9AA
		binclude	"data\bpz\rng_act1.dat"
BPz_Rng_Act2:                                                  ; Offset_0x1FF9B0
		binclude	"data\bpz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
DPz_Obj_Act1:                                                  ; Offset_0x1FF9BC
		binclude	"data\dpz\obj_act1.dat"
DPz_Obj_Act2:                                                  ; Offset_0x1FFA28
		binclude	"data\dpz\obj_act2.dat"
DPz_Rng_Act1:                                                  ; Offset_0x1FFA34
		binclude	"data\dpz\rng_act1.dat"
DPz_Rng_Act2:                                                  ; Offset_0x1FFA3A
		binclude	"data\dpz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
CGZ_Obj_Act1:                                                  ; Offset_0x1FFA46
		binclude	"data\cgz\obj_act1.dat"
CGZ_Obj_Act2:                                                  ; Offset_0x1FFAA6
		binclude	"data\cgz\obj_act2.dat"
CGZ_Rng_Act1:                                                  ; Offset_0x1FFAB2
		binclude	"data\cgz\rng_act1.dat"
CGZ_Rng_Act2:                                                  ; Offset_0x1FFAB8
		binclude	"data\cgz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
EMz_Obj_Act1:                                                  ; Offset_0x1FFAC4
		binclude	"data\emz\obj_act1.dat"
EMz_Obj_Act2:                                                  ; Offset_0x1FFAEE
		binclude	"data\emz\obj_act2.dat"
EMz_Rng_Act1:                                                  ; Offset_0x1FFAFA
		binclude	"data\emz\rng_act1.dat"
EMz_Rng_Act2:                                                  ; Offset_0x1FFB00
		binclude	"data\emz\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
BS_GM_Obj_Act1:                                                ; Offset_0x1FFB0C
		binclude	"data\bs_gm\obj_act1.dat"
BS_GM_Obj_Act2:                                                ; Offset_0x1FFB18
		binclude	"data\bs_gm\obj_act2.dat"
BS_GM_Rng_Act1:                                                ; Offset_0x1FFB24
		binclude	"data\bs_gm\rng_act1.dat"
BS_GM_Rng_Act2:                                                ; Offset_0x1FFB2A
		binclude	"data\bs_gm\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
BS_GS_Obj_Act1:                                                ; Offset_0x1FFB36
		binclude	"data\bs_gs\obj_act1.dat"
BS_GS_Obj_Act2:                                                ; Offset_0x1FFB42
		binclude	"data\bs_gs\obj_act2.dat"
BS_GS_Rng_Act1:                                                ; Offset_0x1FFB4E
		binclude	"data\bs_gs\rng_act1.dat"
BS_GS_Rng_Act2:                                                ; Offset_0x1FFB54
		binclude	"data\bs_gs\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
BS_SM_Obj_Act1:                                                ; Offset_0x1FFB60
		binclude	"data\bs_sm\obj_act1.dat"
BS_SM_Obj_Act2:                                                ; Offset_0x1FFB6C
		binclude	"data\bs_sm\obj_act2.dat"
BS_SM_Rng_Act1:                                                ; Offset_0x1FFB78
		binclude	"data\bs_sm\rng_act1.dat"
BS_SM_Rng_Act2:                                                ; Offset_0x1FFB7E
		binclude	"data\bs_sm\rng_act2.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
LRz_Act2_Boss_Obj:                                             ; Offset_0x1FFB8A
		binclude	"data\lrz\obj_act3.dat"
HPz_Obj:                                                       ; Offset_0x1FFB96
		binclude	"data\hpz\obj_act1.dat"
LRz_Act2_Boss_Rng:                                             ; Offset_0x1FFBA2
		binclude	"data\lrz\rng_act3.dat"
HPz_Rng:                                                       ; Offset_0x1FFBA8
		binclude	"data\hpz\rng_act1.dat"
;-------------------------------------------------------------------------------
		dc.w	$FFFF, $0000, $0000
DEz_Final_Boss_Obj:                                            ; Offset_0x1FFBB4
		binclude	"data\dez\obj_act3.dat"
HPz_Obj_2:                                                     ; Offset_0x1FFBC0
		binclude	"data\hpz\obj_act2.dat"
DEz_Final_Boss_Rng:                                            ; Offset_0x1FFBCC
		binclude	"data\dez\rng_act3.dat"
HPz_Rng_2:                                                     ; Offset_0x1FFBD2
		binclude	"data\hpz\rng_act2.dat"

EndOfRom:
